Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m1 != null
com.sun.proxy.$Proxy2.m6 has only one value
com.sun.proxy.$Proxy2.m6 != null
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m2 != null
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m3 != null
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m5 != null
com.sun.proxy.$Proxy2.m8 has only one value
com.sun.proxy.$Proxy2.m8 != null
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m4 != null
com.sun.proxy.$Proxy2.m7 has only one value
com.sun.proxy.$Proxy2.m7 != null
com.sun.proxy.$Proxy2.m0 has only one value
com.sun.proxy.$Proxy2.m0 != null
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0 != null
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
return != null
===========================================================================
com.sun.proxy.$Proxy2.checkSum():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.checkSum():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy2.className():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.className():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
return != null
return.toString == ""
===========================================================================
com.sun.proxy.$Proxy2.hasStandardHeader():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.hasStandardHeader():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy2.hasStandardHeader():::EXIT;condition="return == true"
return == true
===========================================================================
com.sun.proxy.$Proxy2.hasStandardHeader():::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.sun.proxy.$Proxy2.suppressTStreamerInfo():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.suppressTStreamerInfo():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy2.suppressTStreamerInfo():::EXIT;condition="return == true"
return == true
===========================================================================
com.sun.proxy.$Proxy2.suppressTStreamerInfo():::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.sun.proxy.$Proxy2.version():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.version():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m1 != null
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m2 != null
com.sun.proxy.$Proxy3.m4 has only one value
com.sun.proxy.$Proxy3.m4 != null
com.sun.proxy.$Proxy3.m0 has only one value
com.sun.proxy.$Proxy3.m0 != null
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m3 != null
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0 != null
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
return has only one value
return != null
===========================================================================
com.sun.proxy.$Proxy3.value():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.value():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
return != null
===========================================================================
com.sun.proxy.$Proxy4:::CLASS
com.sun.proxy.$Proxy4.m1 has only one value
com.sun.proxy.$Proxy4.m1 != null
com.sun.proxy.$Proxy4.m2 has only one value
com.sun.proxy.$Proxy4.m2 != null
com.sun.proxy.$Proxy4.m4 has only one value
com.sun.proxy.$Proxy4.m4 != null
com.sun.proxy.$Proxy4.m0 has only one value
com.sun.proxy.$Proxy4.m0 != null
com.sun.proxy.$Proxy4.m3 has only one value
com.sun.proxy.$Proxy4.m3 != null
===========================================================================
com.sun.proxy.$Proxy4:::OBJECT
===========================================================================
com.sun.proxy.$Proxy4.$Proxy4(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy4.$Proxy4(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy4.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy4.annotationType():::EXIT
com.sun.proxy.$Proxy4.m1 == orig(com.sun.proxy.$Proxy4.m1)
com.sun.proxy.$Proxy4.m2 == orig(com.sun.proxy.$Proxy4.m2)
com.sun.proxy.$Proxy4.m4 == orig(com.sun.proxy.$Proxy4.m4)
com.sun.proxy.$Proxy4.m0 == orig(com.sun.proxy.$Proxy4.m0)
com.sun.proxy.$Proxy4.m3 == orig(com.sun.proxy.$Proxy4.m3)
return has only one value
===========================================================================
com.sun.proxy.$Proxy4.value():::ENTER
===========================================================================
com.sun.proxy.$Proxy4.value():::EXIT
com.sun.proxy.$Proxy4.m1 == orig(com.sun.proxy.$Proxy4.m1)
com.sun.proxy.$Proxy4.m2 == orig(com.sun.proxy.$Proxy4.m2)
com.sun.proxy.$Proxy4.m4 == orig(com.sun.proxy.$Proxy4.m4)
com.sun.proxy.$Proxy4.m0 == orig(com.sun.proxy.$Proxy4.m0)
com.sun.proxy.$Proxy4.m3 == orig(com.sun.proxy.$Proxy4.m3)
return != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.kBase.value == 0
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
hep.io.root.output.Type.kBase.size == 0
hep.io.root.output.Type.kBase.typeName has only one value
hep.io.root.output.Type.kBase.typeName != null
hep.io.root.output.Type.kBase.typeName.toString == "BASE"
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
hep.io.root.output.Type.kCounter.value == 6
hep.io.root.output.Type.kCounter.size == 4
hep.io.root.output.Type.kCounter.typeName has only one value
hep.io.root.output.Type.kCounter.typeName != null
hep.io.root.output.Type.kCounter.typeName.toString == "Int_t"
hep.io.root.output.Type.kCharStar.value == 7
hep.io.root.output.Type.kCharStar.size == 0
hep.io.root.output.Type.kCharStar.typeName == null
hep.io.root.output.Type.kChar.value == 1
hep.io.root.output.Type.kChar.size == 0
hep.io.root.output.Type.kChar.typeName == null
hep.io.root.output.Type.kShort.value == 2
hep.io.root.output.Type.kShort.size == 2
hep.io.root.output.Type.kShort.typeName has only one value
hep.io.root.output.Type.kShort.typeName != null
hep.io.root.output.Type.kShort.typeName.toString == "short"
hep.io.root.output.Type.kInt.value == 3
hep.io.root.output.Type.kInt.size == 4
hep.io.root.output.Type.kInt.typeName has only one value
hep.io.root.output.Type.kInt.typeName != null
hep.io.root.output.Type.kInt.typeName.toString == "Int_t"
hep.io.root.output.Type.kEnum.value == 3
hep.io.root.output.Type.kEnum.size == 4
hep.io.root.output.Type.kEnum.typeName == null
hep.io.root.output.Type.kLong.value == 4
hep.io.root.output.Type.kLong.size == 8
hep.io.root.output.Type.kLong.typeName has only one value
hep.io.root.output.Type.kLong.typeName != null
hep.io.root.output.Type.kLong.typeName.toString == "Long_t"
hep.io.root.output.Type.kFloat.value == 5
hep.io.root.output.Type.kFloat.size == 4
hep.io.root.output.Type.kFloat.typeName has only one value
hep.io.root.output.Type.kFloat.typeName != null
hep.io.root.output.Type.kFloat.typeName.toString == "Float_t"
hep.io.root.output.Type.kDouble.value == 8
hep.io.root.output.Type.kDouble.size == 8
hep.io.root.output.Type.kDouble.typeName has only one value
hep.io.root.output.Type.kDouble.typeName != null
hep.io.root.output.Type.kDouble.typeName.toString == "Double_t"
hep.io.root.output.Type.kDouble32.value == 9
hep.io.root.output.Type.kDouble32.size == 0
hep.io.root.output.Type.kDouble32.typeName == null
hep.io.root.output.Type.kLegacyChar.value == 10
hep.io.root.output.Type.kLegacyChar.size == 0
hep.io.root.output.Type.kLegacyChar.typeName == null
hep.io.root.output.Type.kUChar.value == 11
hep.io.root.output.Type.kUChar.size == 0
hep.io.root.output.Type.kUChar.typeName == null
hep.io.root.output.Type.kUShort.value == 12
hep.io.root.output.Type.kUShort.size == 2
hep.io.root.output.Type.kUShort.typeName has only one value
hep.io.root.output.Type.kUShort.typeName != null
hep.io.root.output.Type.kUShort.typeName.toString == "UShort_t"
hep.io.root.output.Type.kUInt.value == 13
hep.io.root.output.Type.kUInt.size == 4
hep.io.root.output.Type.kUInt.typeName has only one value
hep.io.root.output.Type.kUInt.typeName != null
hep.io.root.output.Type.kUInt.typeName.toString == "UInt_t"
hep.io.root.output.Type.kULong.value == 14
hep.io.root.output.Type.kULong.size == 8
hep.io.root.output.Type.kULong.typeName has only one value
hep.io.root.output.Type.kULong.typeName != null
hep.io.root.output.Type.kULong.typeName.toString == "ULong_t"
hep.io.root.output.Type.kBits.value == 15
hep.io.root.output.Type.kBits.size == 0
hep.io.root.output.Type.kBits.typeName == null
hep.io.root.output.Type.kLong64.value == 16
hep.io.root.output.Type.kLong64.size == 0
hep.io.root.output.Type.kLong64.typeName == null
hep.io.root.output.Type.kULong64.value == 17
hep.io.root.output.Type.kULong64.size == 0
hep.io.root.output.Type.kULong64.typeName == null
hep.io.root.output.Type.kBool.value == 18
hep.io.root.output.Type.kBool.size == 1
hep.io.root.output.Type.kBool.typeName has only one value
hep.io.root.output.Type.kBool.typeName != null
hep.io.root.output.Type.kBool.typeName.toString == "Bool_t"
hep.io.root.output.Type.kFloat16.value == 19
hep.io.root.output.Type.kFloat16.size == 0
hep.io.root.output.Type.kFloat16.typeName == null
hep.io.root.output.Type.kCharArray.value == 41
hep.io.root.output.Type.kCharArray.size == 0
hep.io.root.output.Type.kCharArray.typeName == null
hep.io.root.output.Type.kShortArray.value == 42
hep.io.root.output.Type.kShortArray.size == 0
hep.io.root.output.Type.kShortArray.typeName == null
hep.io.root.output.Type.kIntArray.value == 43
hep.io.root.output.Type.kIntArray.size == 0
hep.io.root.output.Type.kIntArray.typeName == null
hep.io.root.output.Type.kLongArray.value == 44
hep.io.root.output.Type.kLongArray.size == 0
hep.io.root.output.Type.kLongArray.typeName == null
hep.io.root.output.Type.kFloatArray.value == 45
hep.io.root.output.Type.kFloatArray.size == 0
hep.io.root.output.Type.kFloatArray.typeName == null
hep.io.root.output.Type.kDoubleArray.value == 48
hep.io.root.output.Type.kDoubleArray.size == 0
hep.io.root.output.Type.kDoubleArray.typeName == null
hep.io.root.output.Type.kDouble32Array.value == 49
hep.io.root.output.Type.kDouble32Array.size == 0
hep.io.root.output.Type.kDouble32Array.typeName == null
hep.io.root.output.Type.kObject.value == 61
hep.io.root.output.Type.kObject.size == 0
hep.io.root.output.Type.kObject.typeName == null
hep.io.root.output.Type.kAny.value == 62
hep.io.root.output.Type.kAny.size == 0
hep.io.root.output.Type.kAny.typeName == null
hep.io.root.output.Type.kObjectp.value == 63
hep.io.root.output.Type.kObjectp.size == 0
hep.io.root.output.Type.kObjectp.typeName == null
hep.io.root.output.Type.kObjectP.value == 64
hep.io.root.output.Type.kObjectP.size == 0
hep.io.root.output.Type.kObjectP.typeName == null
hep.io.root.output.Type.kTString.value == 65
hep.io.root.output.Type.kTString.size == 8
hep.io.root.output.Type.kTString.typeName has only one value
hep.io.root.output.Type.kTString.typeName != null
hep.io.root.output.Type.kTString.typeName.toString == "TString"
hep.io.root.output.Type.kTObject.value == 66
hep.io.root.output.Type.kTObject.size == 0
hep.io.root.output.Type.kTObject.typeName has only one value
hep.io.root.output.Type.kTObject.typeName != null
hep.io.root.output.Type.kTObject.typeName.toString == "TObject"
hep.io.root.output.Type.kTNamed.value == 67
hep.io.root.output.Type.kTNamed.size == 0
hep.io.root.output.Type.kTNamed.typeName has only one value
hep.io.root.output.Type.kTNamed.typeName != null
hep.io.root.output.Type.kTNamed.typeName.toString == "TNamed"
return.size one of { 0, 2, 4 }
return.typeName.toString one of { "UInt_t", "UShort_t" }
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
com.sun.proxy.$Proxy5:::CLASS
com.sun.proxy.$Proxy5.m1 has only one value
com.sun.proxy.$Proxy5.m1 != null
com.sun.proxy.$Proxy5.m2 has only one value
com.sun.proxy.$Proxy5.m2 != null
com.sun.proxy.$Proxy5.m3 has only one value
com.sun.proxy.$Proxy5.m3 != null
com.sun.proxy.$Proxy5.m0 has only one value
com.sun.proxy.$Proxy5.m0 != null
===========================================================================
com.sun.proxy.$Proxy5:::OBJECT
===========================================================================
com.sun.proxy.$Proxy5.$Proxy5(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy5.$Proxy5(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy5.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy5.annotationType():::EXIT
com.sun.proxy.$Proxy5.m1 == orig(com.sun.proxy.$Proxy5.m1)
com.sun.proxy.$Proxy5.m2 == orig(com.sun.proxy.$Proxy5.m2)
com.sun.proxy.$Proxy5.m3 == orig(com.sun.proxy.$Proxy5.m3)
com.sun.proxy.$Proxy5.m0 == orig(com.sun.proxy.$Proxy5.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy6:::CLASS
com.sun.proxy.$Proxy6.m1 has only one value
com.sun.proxy.$Proxy6.m2 has only one value
com.sun.proxy.$Proxy6.m4 has only one value
com.sun.proxy.$Proxy6.m0 has only one value
com.sun.proxy.$Proxy6.m3 has only one value
===========================================================================
com.sun.proxy.$Proxy6:::OBJECT
this has only one value
===========================================================================
com.sun.proxy.$Proxy6.$Proxy6(java.lang.reflect.InvocationHandler):::ENTER
arg0 has only one value
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy6.$Proxy6(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy6.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy6.annotationType():::EXIT
com.sun.proxy.$Proxy6.m1 == orig(com.sun.proxy.$Proxy6.m1)
com.sun.proxy.$Proxy6.m2 == orig(com.sun.proxy.$Proxy6.m2)
com.sun.proxy.$Proxy6.m4 == orig(com.sun.proxy.$Proxy6.m4)
com.sun.proxy.$Proxy6.m0 == orig(com.sun.proxy.$Proxy6.m0)
com.sun.proxy.$Proxy6.m3 == orig(com.sun.proxy.$Proxy6.m3)
return has only one value
===========================================================================
com.sun.proxy.$Proxy6.value():::ENTER
===========================================================================
com.sun.proxy.$Proxy6.value():::EXIT
com.sun.proxy.$Proxy6.m1 == orig(com.sun.proxy.$Proxy6.m1)
com.sun.proxy.$Proxy6.m2 == orig(com.sun.proxy.$Proxy6.m2)
com.sun.proxy.$Proxy6.m4 == orig(com.sun.proxy.$Proxy6.m4)
com.sun.proxy.$Proxy6.m0 == orig(com.sun.proxy.$Proxy6.m0)
com.sun.proxy.$Proxy6.m3 == orig(com.sun.proxy.$Proxy6.m3)
return has only one value
return.toString == "fBufferSize"
===========================================================================
hep.io.root.output.Checksum:::OBJECT
===========================================================================
hep.io.root.output.Checksum.Checksum():::EXIT
this.id == 0
===========================================================================
hep.io.root.output.Checksum.compute(int):::ENTER
===========================================================================
hep.io.root.output.Checksum.compute(int):::EXIT
this.id != orig(this.id)
===========================================================================
hep.io.root.output.Checksum.compute(java.lang.String):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.Checksum.compute(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.id != orig(this.id)
===========================================================================
hep.io.root.output.Checksum.getValue():::ENTER
===========================================================================
hep.io.root.output.Checksum.getValue():::EXIT
this.id == orig(this.id)
===========================================================================
hep.io.root.output.Pointer:::CLASS
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
hep.io.root.output.Pointer.ZERO.value == 0
hep.io.root.output.Pointer.ZERO.immutable == true
===========================================================================
hep.io.root.output.Pointer:::OBJECT
this.value >= 0
===========================================================================
hep.io.root.output.Pointer.Pointer(long):::ENTER
arg0 one of { 0, 100 }
===========================================================================
hep.io.root.output.Pointer.Pointer(long):::EXIT
this.value one of { 0, 100 }
this.immutable == false
===========================================================================
hep.io.root.output.Pointer.Pointer(long, boolean):::ENTER
arg0 == 0
arg1 == true
===========================================================================
hep.io.root.output.Pointer.Pointer(long, boolean):::EXIT
this.value == 0
this.immutable == true
===========================================================================
hep.io.root.output.Pointer.get():::ENTER
this has only one value
this.value == 100
this.immutable == false
===========================================================================
hep.io.root.output.Pointer.get():::EXIT
this.value == orig(this.value)
this.immutable == orig(this.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.value == 100
this.immutable == false
return == 100
===========================================================================
hep.io.root.output.Pointer.set(long):::ENTER
this.value one of { 0, 100 }
this.immutable == false
===========================================================================
hep.io.root.output.Pointer.set(long):::EXIT
this.immutable == orig(this.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.immutable == false
orig(this.value) % this.value == 0
this.value >= orig(this.value)
===========================================================================
hep.io.root.output.Pointer.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.Pointer.write(hep.io.root.output.RootOutput):::EXIT
this.value == orig(this.value)
this.immutable == orig(this.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream:::OBJECT
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.RootByteArrayOutputStream():::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.getFilePointer():::ENTER
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.getFilePointer():::EXIT
return >= 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.seek(long):::ENTER
arg0 >= 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.seek(long):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.writeTo(hep.io.root.output.RootOutputNonPublic, int):::ENTER
arg0 has only one value
arg0.getClass().getName() == hep.io.root.output.RootRandomAccessFile.class
arg1 one of { 0, 1 }
===========================================================================
hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream.writeTo(hep.io.root.output.RootOutputNonPublic, int):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream:::CLASS
===========================================================================
hep.io.root.output.RootBufferedOutputStream:::OBJECT
this.buffer != null
this.classMap != null
this.classMap.getClass().getName() == java.util.HashMap.class
this.tFile has only one value
this.tFile != null
this.tFile.out has only one value
this.tFile.out != null
this.tFile.out.tFile has only one value
this.tFile.out.tFile != null
this.tFile.out.classMap has only one value
this.tFile.out.classMap != null
this.tFile.out.classMap.getClass().getName() == java.util.HashMap.class
this.tFile.fEND has only one value
this.tFile.fEND != null
this.tFile.fEND.value one of { 0, 71338 }
this.tFile.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
this.tFile.fSeekFree has only one value
this.tFile.fSeekFree != null
this.tFile.fSeekFree.value == 0
this.tFile.fSeekFree.immutable == true
this.tFile.fNbytesFree has only one value
this.tFile.fNbytesFree != null
this.tFile.fNbytesFree.value == 0
this.tFile.fNbytesFree.immutable == true
this.tFile.nfree == 0
this.tFile.largeFile == false
this.tFile.fCompress == 1
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.fSeekInfo.value one of { 0, 67608 }
this.tFile.fSeekInfo.immutable == false
this.tFile.fNbytesInfo has only one value
this.tFile.fNbytesInfo != null
this.tFile.fNbytesInfo.value one of { 0, 3303 }
this.tFile.fNbytesInfo.immutable == false
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.seekInfoRecord.objectClass has only one value
this.tFile.seekInfoRecord.objectClass != null
this.tFile.seekInfoRecord.className has only one value
this.tFile.seekInfoRecord.className != null
this.tFile.seekInfoRecord.className.toString == "TList"
this.tFile.seekInfoRecord.seekPDir has only one value
this.tFile.seekInfoRecord.seekPDir != null
this.tFile.seekInfoRecord.fSeekKey has only one value
this.tFile.seekInfoRecord.fSeekKey != null
this.tFile.seekInfoRecord.objects has only one value
this.tFile.seekInfoRecord.objects != null
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[] elements has only one value
this.tFile.seekInfoRecord.objects[] elements != null
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
this.tFile.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekInfoRecord.objLen one of { 0, 12053 }
this.tFile.seekInfoRecord.keyLen one of { 0, 64 }
this.tFile.seekInfoRecord.size one of { 0, 3303 }
this.tFile.seekInfoRecord.suppressStreamerInfo == true
this.tFile.seekInfoRecord.compressionLevel == -1
this.tFile.seekInfoRecord.tFile has only one value
this.tFile.seekInfoRecord.tFile != null
this.tFile.seekInfoRecord.name has only one value
this.tFile.seekInfoRecord.name != null
this.tFile.seekInfoRecord.name.toString == "StreamerInfo"
this.tFile.seekInfoRecord.title has only one value
this.tFile.seekInfoRecord.title != null
this.tFile.seekInfoRecord.title.toString == "Doubly linked list"
this.tFile.seekInfoRecord.fUniqueID == 0
this.tFile.seekInfoRecord.fBits == 50331648
this.tFile.streamerInfos has only one value
this.tFile.streamerInfos != null
this.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
this.tFile.dataRecords has only one value
this.tFile.dataRecords != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[] elements != null
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
this.tFile.keyRecords has only one value
this.tFile.keyRecords != null
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[] elements has only one value
this.tFile.keyRecords[] elements != null
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
this.tFile.fDatimeC has only one value
this.tFile.fDatimeC != null
this.tFile.fDatimeC.fDatime == 2030791191
this.tFile.fDatimeF has only one value
this.tFile.fDatimeF != null
this.tFile.fDatimeF.fDatime == 2030791191
this.tFile.fNbytesKeys one of { 0, 427 }
this.tFile.fNbytesName one of { 0, 54 }
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir != null
this.tFile.fSeekDir.value == 100
this.tFile.fSeekDir.immutable == false
this.tFile.fSeekParent has only one value
this.tFile.fSeekParent != null
this.tFile.fSeekParent.value == 0
this.tFile.fSeekParent.immutable == true
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord != null
this.tFile.directoryRecord.objectClass has only one value
this.tFile.directoryRecord.objectClass != null
this.tFile.directoryRecord.className has only one value
this.tFile.directoryRecord.className != null
this.tFile.directoryRecord.className.toString == "TFile"
this.tFile.directoryRecord.seekPDir has only one value
this.tFile.directoryRecord.seekPDir != null
this.tFile.directoryRecord.fSeekKey has only one value
this.tFile.directoryRecord.fSeekKey != null
this.tFile.directoryRecord.objects has only one value
this.tFile.directoryRecord.objects != null
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[] elements has only one value
this.tFile.directoryRecord.objects[] elements != null
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.tFile.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.directoryRecord.objLen one of { 0, 71 }
this.tFile.directoryRecord.fDatimeC != null
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size one of { 0, 114 }
this.tFile.directoryRecord.suppressStreamerInfo == true
this.tFile.directoryRecord.compressionLevel == -1
this.tFile.directoryRecord.tFile has only one value
this.tFile.directoryRecord.tFile != null
this.tFile.directoryRecord.name has only one value
this.tFile.directoryRecord.name != null
this.tFile.directoryRecord.name.toString == "play.root"
this.tFile.directoryRecord.title has only one value
this.tFile.directoryRecord.title != null
this.tFile.directoryRecord.title.toString == ""
this.tFile.directoryRecord.fUniqueID == 0
this.tFile.directoryRecord.fBits == 50331648
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord != null
this.tFile.seekKeysRecord.objectClass has only one value
this.tFile.seekKeysRecord.objectClass != null
this.tFile.seekKeysRecord.className has only one value
this.tFile.seekKeysRecord.className != null
this.tFile.seekKeysRecord.className.toString == "TFile"
this.tFile.seekKeysRecord.seekPDir has only one value
this.tFile.seekKeysRecord.seekPDir != null
this.tFile.seekKeysRecord.fSeekKey has only one value
this.tFile.seekKeysRecord.fSeekKey != null
this.tFile.seekKeysRecord.objects has only one value
this.tFile.seekKeysRecord.objects != null
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[] elements has only one value
this.tFile.seekKeysRecord.objects[] elements != null
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.tFile.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekKeysRecord.objLen one of { 0, 384 }
this.tFile.seekKeysRecord.keyLen one of { 0, 43 }
this.tFile.seekKeysRecord.size one of { 0, 427 }
this.tFile.seekKeysRecord.suppressStreamerInfo == true
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.seekKeysRecord.tFile has only one value
this.tFile.seekKeysRecord.tFile != null
this.tFile.seekKeysRecord.name has only one value
this.tFile.seekKeysRecord.name != null
this.tFile.seekKeysRecord.name.toString == "play.root"
this.tFile.seekKeysRecord.title has only one value
this.tFile.seekKeysRecord.title != null
this.tFile.seekKeysRecord.title.toString == ""
this.tFile.seekKeysRecord.fUniqueID == 0
this.tFile.seekKeysRecord.fBits == 50331648
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys != null
this.tFile.fSeekKeys.value one of { 0, 70911 }
this.tFile.fSeekKeys.immutable == false
this.tFile.fUUID has only one value
this.tFile.fUUID != null
this.tFile.fUUID.uuid has only one value
this.tFile.fUUID.uuid != null
this.tFile.keyList has only one value
this.tFile.keyList != null
this.tFile.keyList.list has only one value
this.tFile.keyList.list != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[] elements != null
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.parent == null
this.tFile.subdirectories has only one value
this.tFile.subdirectories != null
this.tFile.name has only one value
this.tFile.name != null
this.tFile.name.toString == "play.root"
this.tFile.title has only one value
this.tFile.title != null
this.tFile.title.toString == ""
this.tFile.fUniqueID == 0
this.tFile.fBits == 50331648
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootBufferedOutputStream.RootBufferedOutputStream(hep.io.root.output.TFile, hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream):::ENTER
arg0 has only one value
arg0.out has only one value
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value one of { 0, 71338 }
arg0.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo has only one value
arg0.fSeekInfo.value one of { 0, 67608 }
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value one of { 0, 3303 }
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord has only one value
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen one of { 0, 12053 }
arg0.seekInfoRecord.keyLen one of { 0, 64 }
arg0.seekInfoRecord.size one of { 0, 3303 }
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg0.dataRecords has only one value
arg0.dataRecords[] contains no nulls and has only one value, of length 7
arg0.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] contains no nulls and has only one value, of length 1
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName one of { 0, 54 }
arg0.fSeekDir has only one value
arg0.fSeekDir.value == 100
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord has only one value
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen one of { 0, 71 }
arg0.directoryRecord.keyLen == 43
arg0.directoryRecord.size one of { 0, 114 }
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord has only one value
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen one of { 0, 384 }
arg0.seekKeysRecord.keyLen one of { 0, 43 }
arg0.seekKeysRecord.size one of { 0, 427 }
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys has only one value
arg0.fSeekKeys.value one of { 0, 70911 }
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[] contains no nulls and has only one value, of length 6
arg0.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.dataRecords[]) == 7
size(arg0.keyRecords[]) == 1
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
size(arg0.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootBufferedOutputStream.RootBufferedOutputStream(hep.io.root.output.TFile, hep.io.root.output.RootBufferedOutputStream$RootByteArrayOutputStream):::EXIT
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg0.out == orig(arg0.out)
arg0.out.tFile == orig(arg0.out.tFile)
arg0.out.classMap == orig(arg0.out.classMap)
arg0.out.classMap.getClass().getName() == orig(arg0.out.classMap.getClass().getName())
arg0.fEND == orig(arg0.fEND)
arg0.fEND.value == orig(arg0.fEND.value)
arg0.fEND.immutable == orig(arg0.fEND.immutable)
arg0.fSeekFree == orig(arg0.fSeekFree)
arg0.fSeekFree.value == orig(arg0.fSeekFree.value)
arg0.fSeekFree.immutable == orig(arg0.fSeekFree.immutable)
arg0.fNbytesFree == orig(arg0.fNbytesFree)
arg0.fNbytesFree.value == orig(arg0.fNbytesFree.value)
arg0.fNbytesFree.immutable == orig(arg0.fNbytesFree.immutable)
arg0.nfree == orig(arg0.nfree)
arg0.largeFile == orig(arg0.largeFile)
arg0.fCompress == orig(arg0.fCompress)
arg0.fSeekInfo == orig(arg0.fSeekInfo)
arg0.fSeekInfo.value == orig(arg0.fSeekInfo.value)
arg0.fSeekInfo.immutable == orig(arg0.fSeekInfo.immutable)
arg0.fNbytesInfo == orig(arg0.fNbytesInfo)
arg0.fNbytesInfo.value == orig(arg0.fNbytesInfo.value)
arg0.fNbytesInfo.immutable == orig(arg0.fNbytesInfo.immutable)
arg0.seekInfoRecord == orig(arg0.seekInfoRecord)
arg0.seekInfoRecord.objectClass == orig(arg0.seekInfoRecord.objectClass)
arg0.seekInfoRecord.className == orig(arg0.seekInfoRecord.className)
arg0.seekInfoRecord.className.toString == orig(arg0.seekInfoRecord.className.toString)
arg0.seekInfoRecord.seekPDir == orig(arg0.seekInfoRecord.seekPDir)
arg0.seekInfoRecord.fSeekKey == orig(arg0.seekInfoRecord.fSeekKey)
arg0.seekInfoRecord.objects == orig(arg0.seekInfoRecord.objects)
arg0.seekInfoRecord.objects[] == orig(arg0.seekInfoRecord.objects[])
arg0.seekInfoRecord.objects.getClass().getName() == orig(arg0.seekInfoRecord.objects.getClass().getName())
arg0.seekInfoRecord.objLen == orig(arg0.seekInfoRecord.objLen)
arg0.seekInfoRecord.fDatimeC == orig(arg0.seekInfoRecord.fDatimeC)
arg0.seekInfoRecord.keyLen == orig(arg0.seekInfoRecord.keyLen)
arg0.seekInfoRecord.size == orig(arg0.seekInfoRecord.size)
arg0.seekInfoRecord.suppressStreamerInfo == orig(arg0.seekInfoRecord.suppressStreamerInfo)
arg0.seekInfoRecord.compressionLevel == orig(arg0.seekInfoRecord.compressionLevel)
arg0.seekInfoRecord.tFile == orig(arg0.seekInfoRecord.tFile)
arg0.seekInfoRecord.name == orig(arg0.seekInfoRecord.name)
arg0.seekInfoRecord.name.toString == orig(arg0.seekInfoRecord.name.toString)
arg0.seekInfoRecord.title == orig(arg0.seekInfoRecord.title)
arg0.seekInfoRecord.title.toString == orig(arg0.seekInfoRecord.title.toString)
arg0.seekInfoRecord.fUniqueID == orig(arg0.seekInfoRecord.fUniqueID)
arg0.seekInfoRecord.fBits == orig(arg0.seekInfoRecord.fBits)
arg0.streamerInfos == orig(arg0.streamerInfos)
arg0.streamerInfos.getClass().getName() == orig(arg0.streamerInfos.getClass().getName())
arg0.dataRecords == orig(arg0.dataRecords)
arg0.dataRecords[] == orig(arg0.dataRecords[])
arg0.dataRecords.getClass().getName() == orig(arg0.dataRecords.getClass().getName())
arg0.keyRecords == orig(arg0.keyRecords)
arg0.keyRecords[] == orig(arg0.keyRecords[])
arg0.keyRecords.getClass().getName() == orig(arg0.keyRecords.getClass().getName())
arg0.fDatimeC == orig(arg0.fDatimeC)
arg0.fDatimeC.fDatime == orig(arg0.fDatimeC.fDatime)
arg0.fDatimeF == orig(arg0.fDatimeF)
arg0.fDatimeF.fDatime == orig(arg0.fDatimeF.fDatime)
arg0.fNbytesKeys == orig(arg0.fNbytesKeys)
arg0.fNbytesName == orig(arg0.fNbytesName)
arg0.fSeekDir == orig(arg0.fSeekDir)
arg0.fSeekDir.value == orig(arg0.fSeekDir.value)
arg0.fSeekDir.immutable == orig(arg0.fSeekDir.immutable)
arg0.fSeekParent == orig(arg0.fSeekParent)
arg0.fSeekParent.value == orig(arg0.fSeekParent.value)
arg0.fSeekParent.immutable == orig(arg0.fSeekParent.immutable)
arg0.directoryRecord == orig(arg0.directoryRecord)
arg0.directoryRecord.objectClass == orig(arg0.directoryRecord.objectClass)
arg0.directoryRecord.className == orig(arg0.directoryRecord.className)
arg0.directoryRecord.className.toString == orig(arg0.directoryRecord.className.toString)
arg0.directoryRecord.seekPDir == orig(arg0.directoryRecord.seekPDir)
arg0.directoryRecord.fSeekKey == orig(arg0.directoryRecord.fSeekKey)
arg0.directoryRecord.objects == orig(arg0.directoryRecord.objects)
arg0.directoryRecord.objects[] == orig(arg0.directoryRecord.objects[])
arg0.directoryRecord.objects.getClass().getName() == orig(arg0.directoryRecord.objects.getClass().getName())
arg0.directoryRecord.objLen == orig(arg0.directoryRecord.objLen)
arg0.directoryRecord.fDatimeC == orig(arg0.directoryRecord.fDatimeC)
arg0.directoryRecord.keyLen == orig(arg0.directoryRecord.keyLen)
arg0.directoryRecord.size == orig(arg0.directoryRecord.size)
arg0.directoryRecord.suppressStreamerInfo == orig(arg0.directoryRecord.suppressStreamerInfo)
arg0.directoryRecord.compressionLevel == orig(arg0.directoryRecord.compressionLevel)
arg0.directoryRecord.tFile == orig(arg0.directoryRecord.tFile)
arg0.directoryRecord.name == orig(arg0.directoryRecord.name)
arg0.directoryRecord.name.toString == orig(arg0.directoryRecord.name.toString)
arg0.directoryRecord.title == orig(arg0.directoryRecord.title)
arg0.directoryRecord.title.toString == orig(arg0.directoryRecord.title.toString)
arg0.directoryRecord.fUniqueID == orig(arg0.directoryRecord.fUniqueID)
arg0.directoryRecord.fBits == orig(arg0.directoryRecord.fBits)
arg0.seekKeysRecord == orig(arg0.seekKeysRecord)
arg0.seekKeysRecord.objectClass == orig(arg0.seekKeysRecord.objectClass)
arg0.seekKeysRecord.className == orig(arg0.seekKeysRecord.className)
arg0.seekKeysRecord.className.toString == orig(arg0.seekKeysRecord.className.toString)
arg0.seekKeysRecord.seekPDir == orig(arg0.seekKeysRecord.seekPDir)
arg0.seekKeysRecord.fSeekKey == orig(arg0.seekKeysRecord.fSeekKey)
arg0.seekKeysRecord.objects == orig(arg0.seekKeysRecord.objects)
arg0.seekKeysRecord.objects[] == orig(arg0.seekKeysRecord.objects[])
arg0.seekKeysRecord.objects.getClass().getName() == orig(arg0.seekKeysRecord.objects.getClass().getName())
arg0.seekKeysRecord.objLen == orig(arg0.seekKeysRecord.objLen)
arg0.seekKeysRecord.fDatimeC == orig(arg0.seekKeysRecord.fDatimeC)
arg0.seekKeysRecord.keyLen == orig(arg0.seekKeysRecord.keyLen)
arg0.seekKeysRecord.size == orig(arg0.seekKeysRecord.size)
arg0.seekKeysRecord.suppressStreamerInfo == orig(arg0.seekKeysRecord.suppressStreamerInfo)
arg0.seekKeysRecord.compressionLevel == orig(arg0.seekKeysRecord.compressionLevel)
arg0.seekKeysRecord.tFile == orig(arg0.seekKeysRecord.tFile)
arg0.seekKeysRecord.name == orig(arg0.seekKeysRecord.name)
arg0.seekKeysRecord.name.toString == orig(arg0.seekKeysRecord.name.toString)
arg0.seekKeysRecord.title == orig(arg0.seekKeysRecord.title)
arg0.seekKeysRecord.title.toString == orig(arg0.seekKeysRecord.title.toString)
arg0.seekKeysRecord.fUniqueID == orig(arg0.seekKeysRecord.fUniqueID)
arg0.seekKeysRecord.fBits == orig(arg0.seekKeysRecord.fBits)
arg0.fSeekKeys == orig(arg0.fSeekKeys)
arg0.fSeekKeys.value == orig(arg0.fSeekKeys.value)
arg0.fSeekKeys.immutable == orig(arg0.fSeekKeys.immutable)
arg0.fUUID == orig(arg0.fUUID)
arg0.fUUID.uuid == orig(arg0.fUUID.uuid)
arg0.keyList == orig(arg0.keyList)
arg0.keyList.list == orig(arg0.keyList.list)
arg0.keyList.list[] == orig(arg0.keyList.list[])
arg0.parent == orig(arg0.parent)
arg0.subdirectories == orig(arg0.subdirectories)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.fUniqueID == orig(arg0.fUniqueID)
arg0.fBits == orig(arg0.fBits)
this.offset == 0
this.tFile.fNbytesKeys == 0
this.suppressStreamerInfo == false
arg0.out has only one value
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value one of { 0, 71338 }
arg0.fEND.immutable == false
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo has only one value
arg0.fSeekInfo.value one of { 0, 67608 }
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value one of { 0, 3303 }
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord has only one value
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen one of { 0, 12053 }
arg0.seekInfoRecord.keyLen one of { 0, 64 }
arg0.seekInfoRecord.size one of { 0, 3303 }
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.dataRecords has only one value
arg0.dataRecords[] contains no nulls and has only one value, of length 7
arg0.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] contains no nulls and has only one value, of length 1
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName one of { 0, 54 }
arg0.fSeekDir has only one value
arg0.fSeekDir.value == 100
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord has only one value
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen one of { 0, 71 }
arg0.directoryRecord.keyLen == 43
arg0.directoryRecord.size one of { 0, 114 }
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord has only one value
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen one of { 0, 384 }
arg0.seekKeysRecord.keyLen one of { 0, 43 }
arg0.seekKeysRecord.size one of { 0, 427 }
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys has only one value
arg0.fSeekKeys.value one of { 0, 70911 }
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[] contains no nulls and has only one value, of length 6
arg0.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.dataRecords[]) == 7
size(arg0.keyRecords[]) == 1
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
size(arg0.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootBufferedOutputStream.RootBufferedOutputStream(hep.io.root.output.TFile, int, boolean):::ENTER
arg0 has only one value
arg0.out has only one value
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value one of { 0, 71338 }
arg0.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo has only one value
arg0.fSeekInfo.value one of { 0, 67608 }
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value one of { 0, 3303 }
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord has only one value
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen one of { 0, 12053 }
arg0.seekInfoRecord.keyLen one of { 0, 64 }
arg0.seekInfoRecord.size one of { 0, 3303 }
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg0.dataRecords has only one value
arg0.dataRecords[] contains no nulls and has only one value, of length 7
arg0.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] contains no nulls and has only one value, of length 1
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName one of { 0, 54 }
arg0.fSeekDir has only one value
arg0.fSeekDir.value == 100
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord has only one value
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen one of { 0, 71 }
arg0.directoryRecord.keyLen == 43
arg0.directoryRecord.size one of { 0, 114 }
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord has only one value
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen one of { 0, 384 }
arg0.seekKeysRecord.keyLen one of { 0, 43 }
arg0.seekKeysRecord.size one of { 0, 427 }
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys has only one value
arg0.fSeekKeys.value one of { 0, 70911 }
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[] contains no nulls and has only one value, of length 6
arg0.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.dataRecords[]) == 7
size(arg0.keyRecords[]) == 1
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
size(arg0.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootBufferedOutputStream.RootBufferedOutputStream(hep.io.root.output.TFile, int, boolean):::EXIT
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg0.out == orig(arg0.out)
arg0.out.tFile == orig(arg0.out.tFile)
arg0.out.classMap == orig(arg0.out.classMap)
arg0.out.classMap.getClass().getName() == orig(arg0.out.classMap.getClass().getName())
arg0.fEND == orig(arg0.fEND)
arg0.fEND.value == orig(arg0.fEND.value)
arg0.fEND.immutable == orig(arg0.fEND.immutable)
arg0.fSeekFree == orig(arg0.fSeekFree)
arg0.fSeekFree.value == orig(arg0.fSeekFree.value)
arg0.fSeekFree.immutable == orig(arg0.fSeekFree.immutable)
arg0.fNbytesFree == orig(arg0.fNbytesFree)
arg0.fNbytesFree.value == orig(arg0.fNbytesFree.value)
arg0.fNbytesFree.immutable == orig(arg0.fNbytesFree.immutable)
arg0.nfree == orig(arg0.nfree)
arg0.largeFile == orig(arg0.largeFile)
arg0.fCompress == orig(arg0.fCompress)
arg0.fSeekInfo == orig(arg0.fSeekInfo)
arg0.fSeekInfo.value == orig(arg0.fSeekInfo.value)
arg0.fSeekInfo.immutable == orig(arg0.fSeekInfo.immutable)
arg0.fNbytesInfo == orig(arg0.fNbytesInfo)
arg0.fNbytesInfo.value == orig(arg0.fNbytesInfo.value)
arg0.fNbytesInfo.immutable == orig(arg0.fNbytesInfo.immutable)
arg0.seekInfoRecord == orig(arg0.seekInfoRecord)
arg0.seekInfoRecord.objectClass == orig(arg0.seekInfoRecord.objectClass)
arg0.seekInfoRecord.className == orig(arg0.seekInfoRecord.className)
arg0.seekInfoRecord.className.toString == orig(arg0.seekInfoRecord.className.toString)
arg0.seekInfoRecord.seekPDir == orig(arg0.seekInfoRecord.seekPDir)
arg0.seekInfoRecord.fSeekKey == orig(arg0.seekInfoRecord.fSeekKey)
arg0.seekInfoRecord.objects == orig(arg0.seekInfoRecord.objects)
arg0.seekInfoRecord.objects[] == orig(arg0.seekInfoRecord.objects[])
arg0.seekInfoRecord.objects.getClass().getName() == orig(arg0.seekInfoRecord.objects.getClass().getName())
arg0.seekInfoRecord.objLen == orig(arg0.seekInfoRecord.objLen)
arg0.seekInfoRecord.fDatimeC == orig(arg0.seekInfoRecord.fDatimeC)
arg0.seekInfoRecord.keyLen == orig(arg0.seekInfoRecord.keyLen)
arg0.seekInfoRecord.size == orig(arg0.seekInfoRecord.size)
arg0.seekInfoRecord.suppressStreamerInfo == orig(arg0.seekInfoRecord.suppressStreamerInfo)
arg0.seekInfoRecord.compressionLevel == orig(arg0.seekInfoRecord.compressionLevel)
arg0.seekInfoRecord.tFile == orig(arg0.seekInfoRecord.tFile)
arg0.seekInfoRecord.name == orig(arg0.seekInfoRecord.name)
arg0.seekInfoRecord.name.toString == orig(arg0.seekInfoRecord.name.toString)
arg0.seekInfoRecord.title == orig(arg0.seekInfoRecord.title)
arg0.seekInfoRecord.title.toString == orig(arg0.seekInfoRecord.title.toString)
arg0.seekInfoRecord.fUniqueID == orig(arg0.seekInfoRecord.fUniqueID)
arg0.seekInfoRecord.fBits == orig(arg0.seekInfoRecord.fBits)
arg0.streamerInfos == orig(arg0.streamerInfos)
arg0.streamerInfos.getClass().getName() == orig(arg0.streamerInfos.getClass().getName())
arg0.dataRecords == orig(arg0.dataRecords)
arg0.dataRecords[] == orig(arg0.dataRecords[])
arg0.dataRecords.getClass().getName() == orig(arg0.dataRecords.getClass().getName())
arg0.keyRecords == orig(arg0.keyRecords)
arg0.keyRecords[] == orig(arg0.keyRecords[])
arg0.keyRecords.getClass().getName() == orig(arg0.keyRecords.getClass().getName())
arg0.fDatimeC == orig(arg0.fDatimeC)
arg0.fDatimeC.fDatime == orig(arg0.fDatimeC.fDatime)
arg0.fDatimeF == orig(arg0.fDatimeF)
arg0.fDatimeF.fDatime == orig(arg0.fDatimeF.fDatime)
arg0.fNbytesKeys == orig(arg0.fNbytesKeys)
arg0.fNbytesName == orig(arg0.fNbytesName)
arg0.fSeekDir == orig(arg0.fSeekDir)
arg0.fSeekDir.value == orig(arg0.fSeekDir.value)
arg0.fSeekDir.immutable == orig(arg0.fSeekDir.immutable)
arg0.fSeekParent == orig(arg0.fSeekParent)
arg0.fSeekParent.value == orig(arg0.fSeekParent.value)
arg0.fSeekParent.immutable == orig(arg0.fSeekParent.immutable)
arg0.directoryRecord == orig(arg0.directoryRecord)
arg0.directoryRecord.objectClass == orig(arg0.directoryRecord.objectClass)
arg0.directoryRecord.className == orig(arg0.directoryRecord.className)
arg0.directoryRecord.className.toString == orig(arg0.directoryRecord.className.toString)
arg0.directoryRecord.seekPDir == orig(arg0.directoryRecord.seekPDir)
arg0.directoryRecord.fSeekKey == orig(arg0.directoryRecord.fSeekKey)
arg0.directoryRecord.objects == orig(arg0.directoryRecord.objects)
arg0.directoryRecord.objects[] == orig(arg0.directoryRecord.objects[])
arg0.directoryRecord.objects.getClass().getName() == orig(arg0.directoryRecord.objects.getClass().getName())
arg0.directoryRecord.objLen == orig(arg0.directoryRecord.objLen)
arg0.directoryRecord.fDatimeC == orig(arg0.directoryRecord.fDatimeC)
arg0.directoryRecord.keyLen == orig(arg0.directoryRecord.keyLen)
arg0.directoryRecord.size == orig(arg0.directoryRecord.size)
arg0.directoryRecord.suppressStreamerInfo == orig(arg0.directoryRecord.suppressStreamerInfo)
arg0.directoryRecord.compressionLevel == orig(arg0.directoryRecord.compressionLevel)
arg0.directoryRecord.tFile == orig(arg0.directoryRecord.tFile)
arg0.directoryRecord.name == orig(arg0.directoryRecord.name)
arg0.directoryRecord.name.toString == orig(arg0.directoryRecord.name.toString)
arg0.directoryRecord.title == orig(arg0.directoryRecord.title)
arg0.directoryRecord.title.toString == orig(arg0.directoryRecord.title.toString)
arg0.directoryRecord.fUniqueID == orig(arg0.directoryRecord.fUniqueID)
arg0.directoryRecord.fBits == orig(arg0.directoryRecord.fBits)
arg0.seekKeysRecord == orig(arg0.seekKeysRecord)
arg0.seekKeysRecord.objectClass == orig(arg0.seekKeysRecord.objectClass)
arg0.seekKeysRecord.className == orig(arg0.seekKeysRecord.className)
arg0.seekKeysRecord.className.toString == orig(arg0.seekKeysRecord.className.toString)
arg0.seekKeysRecord.seekPDir == orig(arg0.seekKeysRecord.seekPDir)
arg0.seekKeysRecord.fSeekKey == orig(arg0.seekKeysRecord.fSeekKey)
arg0.seekKeysRecord.objects == orig(arg0.seekKeysRecord.objects)
arg0.seekKeysRecord.objects[] == orig(arg0.seekKeysRecord.objects[])
arg0.seekKeysRecord.objects.getClass().getName() == orig(arg0.seekKeysRecord.objects.getClass().getName())
arg0.seekKeysRecord.objLen == orig(arg0.seekKeysRecord.objLen)
arg0.seekKeysRecord.fDatimeC == orig(arg0.seekKeysRecord.fDatimeC)
arg0.seekKeysRecord.keyLen == orig(arg0.seekKeysRecord.keyLen)
arg0.seekKeysRecord.size == orig(arg0.seekKeysRecord.size)
arg0.seekKeysRecord.suppressStreamerInfo == orig(arg0.seekKeysRecord.suppressStreamerInfo)
arg0.seekKeysRecord.compressionLevel == orig(arg0.seekKeysRecord.compressionLevel)
arg0.seekKeysRecord.tFile == orig(arg0.seekKeysRecord.tFile)
arg0.seekKeysRecord.name == orig(arg0.seekKeysRecord.name)
arg0.seekKeysRecord.name.toString == orig(arg0.seekKeysRecord.name.toString)
arg0.seekKeysRecord.title == orig(arg0.seekKeysRecord.title)
arg0.seekKeysRecord.title.toString == orig(arg0.seekKeysRecord.title.toString)
arg0.seekKeysRecord.fUniqueID == orig(arg0.seekKeysRecord.fUniqueID)
arg0.seekKeysRecord.fBits == orig(arg0.seekKeysRecord.fBits)
arg0.fSeekKeys == orig(arg0.fSeekKeys)
arg0.fSeekKeys.value == orig(arg0.fSeekKeys.value)
arg0.fSeekKeys.immutable == orig(arg0.fSeekKeys.immutable)
arg0.fUUID == orig(arg0.fUUID)
arg0.fUUID.uuid == orig(arg0.fUUID.uuid)
arg0.keyList == orig(arg0.keyList)
arg0.keyList.list == orig(arg0.keyList.list)
arg0.keyList.list[] == orig(arg0.keyList.list[])
arg0.parent == orig(arg0.parent)
arg0.subdirectories == orig(arg0.subdirectories)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.fUniqueID == orig(arg0.fUniqueID)
arg0.fBits == orig(arg0.fBits)
this.tFile.fNbytesKeys == 0
arg0.out has only one value
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value one of { 0, 71338 }
arg0.fEND.immutable == false
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo has only one value
arg0.fSeekInfo.value one of { 0, 67608 }
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value one of { 0, 3303 }
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord has only one value
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen one of { 0, 12053 }
arg0.seekInfoRecord.keyLen one of { 0, 64 }
arg0.seekInfoRecord.size one of { 0, 3303 }
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.dataRecords has only one value
arg0.dataRecords[] contains no nulls and has only one value, of length 7
arg0.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] contains no nulls and has only one value, of length 1
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName one of { 0, 54 }
arg0.fSeekDir has only one value
arg0.fSeekDir.value == 100
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord has only one value
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen one of { 0, 71 }
arg0.directoryRecord.keyLen == 43
arg0.directoryRecord.size one of { 0, 114 }
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord has only one value
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen one of { 0, 384 }
arg0.seekKeysRecord.keyLen one of { 0, 43 }
arg0.seekKeysRecord.size one of { 0, 427 }
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys has only one value
arg0.fSeekKeys.value one of { 0, 70911 }
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[] contains no nulls and has only one value, of length 6
arg0.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.dataRecords[]) == 7
size(arg0.keyRecords[]) == 1
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
size(arg0.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getClassMap():::ENTER
this has only one value
this.buffer has only one value
this.classMap has only one value
this.offset == 64
this.tFile.fEND.value == 0
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.fDatimeC != null
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
this.suppressStreamerInfo == true
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getClassMap():::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.buffer has only one value
this.classMap has only one value
this.offset == 64
this.tFile.fEND.value == 0
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.fDatimeC != null
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
this.suppressStreamerInfo == true
return has only one value
return != null
return.getClass().getName() == java.util.HashMap.class
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getFilePointer():::ENTER
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getFilePointer():::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getStreamerInfos():::ENTER
===========================================================================
hep.io.root.output.RootBufferedOutputStream.getStreamerInfos():::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
return.getClass().getName() == java.util.HashMap.class
===========================================================================
hep.io.root.output.RootBufferedOutputStream.isLargeFile():::ENTER
this.offset == 43
this.tFile.fNbytesName == 54
this.suppressStreamerInfo == true
===========================================================================
hep.io.root.output.RootBufferedOutputStream.isLargeFile():::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.offset == 43
this.tFile.fNbytesName == 54
this.suppressStreamerInfo == true
return == false
===========================================================================
hep.io.root.output.RootBufferedOutputStream.isLargeFile():::EXIT;condition="not(return == true)"
===========================================================================
hep.io.root.output.RootBufferedOutputStream.seek(long):::ENTER
this.tFile.fEND.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream.seek(long):::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile.fEND.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream.uncompressedSize():::ENTER
this.tFile.fNbytesName == 54
===========================================================================
hep.io.root.output.RootBufferedOutputStream.uncompressedSize():::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile.fNbytesName == 54
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class):::ENTER
arg0 != null
arg1 != null
arg2 != null
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(java.lang.Object):::ENTER
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObject(java.lang.Object):::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile.fNbytesKeys >= orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName >= orig(this.tFile.fNbytesName)
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
arg1 != null
arg2 != null
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(hep.io.root.output.RootOutputNonPublic, java.lang.Object, java.lang.Class):::EXIT
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(java.lang.Object):::ENTER
this.tFile.fEND.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeObjectRef(java.lang.Object):::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile.fEND.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeTo(hep.io.root.output.RootOutputNonPublic, int):::ENTER
this.tFile.fNbytesName == 54
arg0 has only one value
arg0.getClass().getName() == hep.io.root.output.RootRandomAccessFile.class
arg1 one of { 0, 1 }
===========================================================================
hep.io.root.output.RootBufferedOutputStream.writeTo(hep.io.root.output.RootOutputNonPublic, int):::EXIT
this.buffer == orig(this.buffer)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.offset == orig(this.offset)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile.fNbytesName == 54
===========================================================================
hep.io.root.output.RootRandomAccessFile:::OBJECT
this has only one value
this.tFile has only one value
this.tFile != null
this.tFile.out.tFile has only one value
this.tFile.out.tFile != null
this.tFile.out.classMap has only one value
this.tFile.out.classMap != null
this.tFile.out.classMap.getClass().getName() == java.util.HashMap.class
this.tFile.fEND has only one value
this.tFile.fEND != null
this.tFile.fEND.value one of { 0, 71338 }
this.tFile.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
this.tFile.fSeekFree has only one value
this.tFile.fSeekFree != null
this.tFile.fSeekFree.value == 0
this.tFile.fSeekFree.immutable == true
this.tFile.fNbytesFree has only one value
this.tFile.fNbytesFree != null
this.tFile.fNbytesFree.value == 0
this.tFile.fNbytesFree.immutable == true
this.tFile.nfree == 0
this.tFile.largeFile == false
this.tFile.fCompress == 1
this.tFile.fSeekInfo.value one of { 0, 67608 }
this.tFile.fSeekInfo.immutable == false
this.tFile.fNbytesInfo has only one value
this.tFile.fNbytesInfo != null
this.tFile.fNbytesInfo.value one of { 0, 3303 }
this.tFile.fNbytesInfo.immutable == false
this.tFile.seekInfoRecord.objectClass has only one value
this.tFile.seekInfoRecord.objectClass != null
this.tFile.seekInfoRecord.className has only one value
this.tFile.seekInfoRecord.className != null
this.tFile.seekInfoRecord.className.toString == "TList"
this.tFile.seekInfoRecord.seekPDir has only one value
this.tFile.seekInfoRecord.seekPDir != null
this.tFile.seekInfoRecord.fSeekKey has only one value
this.tFile.seekInfoRecord.fSeekKey != null
this.tFile.seekInfoRecord.objects has only one value
this.tFile.seekInfoRecord.objects != null
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[] elements has only one value
this.tFile.seekInfoRecord.objects[] elements != null
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
this.tFile.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekInfoRecord.objLen one of { 0, 12053 }
this.tFile.seekInfoRecord.keyLen one of { 0, 64 }
this.tFile.seekInfoRecord.size one of { 0, 3303 }
this.tFile.seekInfoRecord.suppressStreamerInfo == true
this.tFile.seekInfoRecord.compressionLevel == -1
this.tFile.seekInfoRecord.tFile has only one value
this.tFile.seekInfoRecord.tFile != null
this.tFile.seekInfoRecord.name has only one value
this.tFile.seekInfoRecord.name != null
this.tFile.seekInfoRecord.name.toString == "StreamerInfo"
this.tFile.seekInfoRecord.title has only one value
this.tFile.seekInfoRecord.title != null
this.tFile.seekInfoRecord.title.toString == "Doubly linked list"
this.tFile.seekInfoRecord.fUniqueID == 0
this.tFile.seekInfoRecord.fBits == 50331648
this.tFile.streamerInfos has only one value
this.tFile.streamerInfos != null
this.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
this.tFile.dataRecords has only one value
this.tFile.dataRecords != null
this.tFile.dataRecords[] elements != null
this.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.dataRecords[].getClass().getName() one of { [hep.io.root.output.TKey], [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey] }
this.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
this.tFile.keyRecords has only one value
this.tFile.keyRecords != null
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[] elements has only one value
this.tFile.keyRecords[] elements != null
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
this.tFile.fDatimeC has only one value
this.tFile.fDatimeC != null
this.tFile.fDatimeC.fDatime == 2030791191
this.tFile.fDatimeF has only one value
this.tFile.fDatimeF != null
this.tFile.fDatimeF.fDatime == 2030791191
this.tFile.fNbytesKeys one of { 0, 427 }
this.tFile.fNbytesName one of { 0, 54 }
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir != null
this.tFile.fSeekDir.value one of { 0, 100 }
this.tFile.fSeekDir.immutable == false
this.tFile.fSeekParent has only one value
this.tFile.fSeekParent != null
this.tFile.fSeekParent.value == 0
this.tFile.fSeekParent.immutable == true
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord != null
this.tFile.directoryRecord.objectClass has only one value
this.tFile.directoryRecord.objectClass != null
this.tFile.directoryRecord.className has only one value
this.tFile.directoryRecord.className != null
this.tFile.directoryRecord.className.toString == "TFile"
this.tFile.directoryRecord.seekPDir has only one value
this.tFile.directoryRecord.seekPDir != null
this.tFile.directoryRecord.fSeekKey has only one value
this.tFile.directoryRecord.fSeekKey != null
this.tFile.directoryRecord.objects has only one value
this.tFile.directoryRecord.objects != null
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[] elements has only one value
this.tFile.directoryRecord.objects[] elements != null
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.tFile.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.directoryRecord.objLen one of { 0, 71 }
this.tFile.directoryRecord.keyLen one of { 0, 43 }
this.tFile.directoryRecord.size one of { 0, 114 }
this.tFile.directoryRecord.suppressStreamerInfo == true
this.tFile.directoryRecord.compressionLevel == -1
this.tFile.directoryRecord.tFile has only one value
this.tFile.directoryRecord.tFile != null
this.tFile.directoryRecord.name has only one value
this.tFile.directoryRecord.name != null
this.tFile.directoryRecord.name.toString == "play.root"
this.tFile.directoryRecord.title has only one value
this.tFile.directoryRecord.title != null
this.tFile.directoryRecord.title.toString == ""
this.tFile.directoryRecord.fUniqueID == 0
this.tFile.directoryRecord.fBits == 50331648
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord != null
this.tFile.seekKeysRecord.objectClass has only one value
this.tFile.seekKeysRecord.objectClass != null
this.tFile.seekKeysRecord.className has only one value
this.tFile.seekKeysRecord.className != null
this.tFile.seekKeysRecord.className.toString == "TFile"
this.tFile.seekKeysRecord.seekPDir has only one value
this.tFile.seekKeysRecord.seekPDir != null
this.tFile.seekKeysRecord.fSeekKey has only one value
this.tFile.seekKeysRecord.fSeekKey != null
this.tFile.seekKeysRecord.objects has only one value
this.tFile.seekKeysRecord.objects != null
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[] elements has only one value
this.tFile.seekKeysRecord.objects[] elements != null
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.tFile.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekKeysRecord.objLen one of { 0, 384 }
this.tFile.seekKeysRecord.keyLen one of { 0, 43 }
this.tFile.seekKeysRecord.size one of { 0, 427 }
this.tFile.seekKeysRecord.suppressStreamerInfo == true
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.seekKeysRecord.tFile has only one value
this.tFile.seekKeysRecord.tFile != null
this.tFile.seekKeysRecord.name has only one value
this.tFile.seekKeysRecord.name != null
this.tFile.seekKeysRecord.name.toString == "play.root"
this.tFile.seekKeysRecord.title has only one value
this.tFile.seekKeysRecord.title != null
this.tFile.seekKeysRecord.title.toString == ""
this.tFile.seekKeysRecord.fUniqueID == 0
this.tFile.seekKeysRecord.fBits == 50331648
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys != null
this.tFile.fSeekKeys.value one of { 0, 70911 }
this.tFile.fSeekKeys.immutable == false
this.tFile.fUUID has only one value
this.tFile.fUUID != null
this.tFile.fUUID.uuid has only one value
this.tFile.fUUID.uuid != null
this.tFile.keyList has only one value
this.tFile.keyList != null
this.tFile.keyList.list has only one value
this.tFile.keyList.list != null
this.tFile.keyList.list[] elements != null
this.tFile.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.keyList.list[].getClass().getName() one of { [], [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey] }
this.tFile.parent == null
this.tFile.subdirectories has only one value
this.tFile.subdirectories != null
this.tFile.name has only one value
this.tFile.name != null
this.tFile.name.toString == "play.root"
this.tFile.title has only one value
this.tFile.title != null
this.tFile.title.toString == ""
this.tFile.fUniqueID == 0
this.tFile.fBits == 50331648
this.classMap has only one value
this.classMap != null
this.classMap.getClass().getName() == java.util.HashMap.class
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) one of { 1, 7 }
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) one of { 0, 6 }
size(this.tFile.keyList.list[])-1 != 0
===========================================================================
hep.io.root.output.RootRandomAccessFile.RootRandomAccessFile(java.io.File, hep.io.root.output.TFile):::ENTER
arg0 has only one value
arg1 has only one value
arg1.out == null
arg1.fEND has only one value
arg1.fEND.value == 0
arg1.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg1.fSeekFree has only one value
arg1.fSeekFree.value == 0
arg1.fSeekFree.immutable == true
arg1.fNbytesFree has only one value
arg1.fNbytesFree.value == 0
arg1.fNbytesFree.immutable == true
arg1.nfree == 0
arg1.largeFile == false
arg1.fCompress == 1
arg1.fSeekInfo == null
arg1.fNbytesInfo has only one value
arg1.fNbytesInfo.value == 0
arg1.fNbytesInfo.immutable == false
arg1.seekInfoRecord == null
arg1.streamerInfos has only one value
arg1.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg1.dataRecords has only one value
arg1.dataRecords[] contains no nulls and has only one value, of length 1
arg1.dataRecords[] elements has only one value
arg1.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg1.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg1.dataRecords.getClass().getName() == java.util.ArrayList.class
arg1.keyRecords has only one value
arg1.keyRecords[] contains no nulls and has only one value, of length 1
arg1.keyRecords[] elements has only one value
arg1.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg1.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg1.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg1.fDatimeC has only one value
arg1.fDatimeC.fDatime == 2030791191
arg1.fDatimeF has only one value
arg1.fDatimeF.fDatime == 2030791191
arg1.fNbytesKeys == 0
arg1.fNbytesName == 0
arg1.fSeekDir has only one value
arg1.fSeekDir.value == 0
arg1.fSeekDir.immutable == false
arg1.fSeekParent has only one value
arg1.fSeekParent.value == 0
arg1.fSeekParent.immutable == true
arg1.directoryRecord has only one value
arg1.directoryRecord.objectClass has only one value
arg1.directoryRecord.className has only one value
arg1.directoryRecord.className.toString == "TFile"
arg1.directoryRecord.seekPDir has only one value
arg1.directoryRecord.fSeekKey has only one value
arg1.directoryRecord.objects has only one value
arg1.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg1.directoryRecord.objects[] elements has only one value
arg1.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg1.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg1.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg1.directoryRecord.objLen == 0
arg1.directoryRecord.fDatimeC == null
arg1.directoryRecord.keyLen == 0
arg1.directoryRecord.size == 0
arg1.directoryRecord.suppressStreamerInfo == true
arg1.directoryRecord.compressionLevel == -1
arg1.directoryRecord.tFile has only one value
arg1.directoryRecord.name has only one value
arg1.directoryRecord.name.toString == "play.root"
arg1.directoryRecord.title has only one value
arg1.directoryRecord.title.toString == ""
arg1.directoryRecord.fUniqueID == 0
arg1.directoryRecord.fBits == 50331648
arg1.seekKeysRecord has only one value
arg1.seekKeysRecord.objectClass has only one value
arg1.seekKeysRecord.className has only one value
arg1.seekKeysRecord.className.toString == "TFile"
arg1.seekKeysRecord.seekPDir has only one value
arg1.seekKeysRecord.fSeekKey has only one value
arg1.seekKeysRecord.objects has only one value
arg1.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg1.seekKeysRecord.objects[] elements has only one value
arg1.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg1.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg1.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg1.seekKeysRecord.objLen == 0
arg1.seekKeysRecord.fDatimeC == null
arg1.seekKeysRecord.keyLen == 0
arg1.seekKeysRecord.size == 0
arg1.seekKeysRecord.suppressStreamerInfo == true
arg1.seekKeysRecord.compressionLevel == 0
arg1.seekKeysRecord.tFile has only one value
arg1.seekKeysRecord.name has only one value
arg1.seekKeysRecord.name.toString == "play.root"
arg1.seekKeysRecord.title has only one value
arg1.seekKeysRecord.title.toString == ""
arg1.seekKeysRecord.fUniqueID == 0
arg1.seekKeysRecord.fBits == 50331648
arg1.fSeekKeys has only one value
arg1.fSeekKeys.value == 0
arg1.fSeekKeys.immutable == false
arg1.fUUID has only one value
arg1.fUUID.uuid has only one value
arg1.keyList has only one value
arg1.keyList.list has only one value
arg1.keyList.list[] == []
arg1.keyList.list[].getClass().getName() == []
arg1.parent == null
arg1.subdirectories has only one value
arg1.name has only one value
arg1.name.toString == "play.root"
arg1.title has only one value
arg1.title.toString == ""
arg1.fUniqueID == 0
arg1.fBits == 50331648
size(arg1.dataRecords[]) == 1
size(arg1.keyRecords[]) == 1
size(arg1.directoryRecord.objects[]) == 1
size(arg1.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.RootRandomAccessFile.RootRandomAccessFile(java.io.File, hep.io.root.output.TFile):::EXIT
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg1.out == orig(arg1.out)
arg1.fEND == orig(arg1.fEND)
arg1.fEND.value == orig(arg1.fEND.value)
arg1.fEND.immutable == orig(arg1.fEND.immutable)
arg1.fSeekFree == orig(arg1.fSeekFree)
arg1.fSeekFree.value == orig(arg1.fSeekFree.value)
arg1.fSeekFree.immutable == orig(arg1.fSeekFree.immutable)
arg1.fNbytesFree == orig(arg1.fNbytesFree)
arg1.fNbytesFree.value == orig(arg1.fNbytesFree.value)
arg1.fNbytesFree.immutable == orig(arg1.fNbytesFree.immutable)
arg1.nfree == orig(arg1.nfree)
arg1.largeFile == orig(arg1.largeFile)
arg1.fCompress == orig(arg1.fCompress)
arg1.fSeekInfo == orig(arg1.fSeekInfo)
arg1.fNbytesInfo == orig(arg1.fNbytesInfo)
arg1.fNbytesInfo.value == orig(arg1.fNbytesInfo.value)
arg1.fNbytesInfo.immutable == orig(arg1.fNbytesInfo.immutable)
arg1.seekInfoRecord == orig(arg1.seekInfoRecord)
arg1.streamerInfos == orig(arg1.streamerInfos)
arg1.streamerInfos.getClass().getName() == orig(arg1.streamerInfos.getClass().getName())
arg1.dataRecords == orig(arg1.dataRecords)
arg1.dataRecords[] == orig(arg1.dataRecords[])
arg1.dataRecords.getClass().getName() == orig(arg1.dataRecords.getClass().getName())
arg1.keyRecords == orig(arg1.keyRecords)
arg1.keyRecords[] == orig(arg1.keyRecords[])
arg1.keyRecords.getClass().getName() == orig(arg1.keyRecords.getClass().getName())
arg1.fDatimeC == orig(arg1.fDatimeC)
arg1.fDatimeC.fDatime == orig(arg1.fDatimeC.fDatime)
arg1.fDatimeF == orig(arg1.fDatimeF)
arg1.fDatimeF.fDatime == orig(arg1.fDatimeF.fDatime)
arg1.fNbytesKeys == orig(arg1.fNbytesKeys)
arg1.fNbytesName == orig(arg1.fNbytesName)
arg1.fSeekDir == orig(arg1.fSeekDir)
arg1.fSeekDir.value == orig(arg1.fSeekDir.value)
arg1.fSeekDir.immutable == orig(arg1.fSeekDir.immutable)
arg1.fSeekParent == orig(arg1.fSeekParent)
arg1.fSeekParent.value == orig(arg1.fSeekParent.value)
arg1.fSeekParent.immutable == orig(arg1.fSeekParent.immutable)
arg1.directoryRecord == orig(arg1.directoryRecord)
arg1.directoryRecord.objectClass == orig(arg1.directoryRecord.objectClass)
arg1.directoryRecord.className == orig(arg1.directoryRecord.className)
arg1.directoryRecord.className.toString == orig(arg1.directoryRecord.className.toString)
arg1.directoryRecord.seekPDir == orig(arg1.directoryRecord.seekPDir)
arg1.directoryRecord.fSeekKey == orig(arg1.directoryRecord.fSeekKey)
arg1.directoryRecord.objects == orig(arg1.directoryRecord.objects)
arg1.directoryRecord.objects[] == orig(arg1.directoryRecord.objects[])
arg1.directoryRecord.objects.getClass().getName() == orig(arg1.directoryRecord.objects.getClass().getName())
arg1.directoryRecord.objLen == orig(arg1.directoryRecord.objLen)
arg1.directoryRecord.fDatimeC == orig(arg1.directoryRecord.fDatimeC)
arg1.directoryRecord.keyLen == orig(arg1.directoryRecord.keyLen)
arg1.directoryRecord.size == orig(arg1.directoryRecord.size)
arg1.directoryRecord.suppressStreamerInfo == orig(arg1.directoryRecord.suppressStreamerInfo)
arg1.directoryRecord.compressionLevel == orig(arg1.directoryRecord.compressionLevel)
arg1.directoryRecord.tFile == orig(arg1.directoryRecord.tFile)
arg1.directoryRecord.name == orig(arg1.directoryRecord.name)
arg1.directoryRecord.name.toString == orig(arg1.directoryRecord.name.toString)
arg1.directoryRecord.title == orig(arg1.directoryRecord.title)
arg1.directoryRecord.title.toString == orig(arg1.directoryRecord.title.toString)
arg1.directoryRecord.fUniqueID == orig(arg1.directoryRecord.fUniqueID)
arg1.directoryRecord.fBits == orig(arg1.directoryRecord.fBits)
arg1.seekKeysRecord == orig(arg1.seekKeysRecord)
arg1.seekKeysRecord.objectClass == orig(arg1.seekKeysRecord.objectClass)
arg1.seekKeysRecord.className == orig(arg1.seekKeysRecord.className)
arg1.seekKeysRecord.className.toString == orig(arg1.seekKeysRecord.className.toString)
arg1.seekKeysRecord.seekPDir == orig(arg1.seekKeysRecord.seekPDir)
arg1.seekKeysRecord.fSeekKey == orig(arg1.seekKeysRecord.fSeekKey)
arg1.seekKeysRecord.objects == orig(arg1.seekKeysRecord.objects)
arg1.seekKeysRecord.objects[] == orig(arg1.seekKeysRecord.objects[])
arg1.seekKeysRecord.objects.getClass().getName() == orig(arg1.seekKeysRecord.objects.getClass().getName())
arg1.seekKeysRecord.objLen == orig(arg1.seekKeysRecord.objLen)
arg1.seekKeysRecord.fDatimeC == orig(arg1.seekKeysRecord.fDatimeC)
arg1.seekKeysRecord.keyLen == orig(arg1.seekKeysRecord.keyLen)
arg1.seekKeysRecord.size == orig(arg1.seekKeysRecord.size)
arg1.seekKeysRecord.suppressStreamerInfo == orig(arg1.seekKeysRecord.suppressStreamerInfo)
arg1.seekKeysRecord.compressionLevel == orig(arg1.seekKeysRecord.compressionLevel)
arg1.seekKeysRecord.tFile == orig(arg1.seekKeysRecord.tFile)
arg1.seekKeysRecord.name == orig(arg1.seekKeysRecord.name)
arg1.seekKeysRecord.name.toString == orig(arg1.seekKeysRecord.name.toString)
arg1.seekKeysRecord.title == orig(arg1.seekKeysRecord.title)
arg1.seekKeysRecord.title.toString == orig(arg1.seekKeysRecord.title.toString)
arg1.seekKeysRecord.fUniqueID == orig(arg1.seekKeysRecord.fUniqueID)
arg1.seekKeysRecord.fBits == orig(arg1.seekKeysRecord.fBits)
arg1.fSeekKeys == orig(arg1.fSeekKeys)
arg1.fSeekKeys.value == orig(arg1.fSeekKeys.value)
arg1.fSeekKeys.immutable == orig(arg1.fSeekKeys.immutable)
arg1.fUUID == orig(arg1.fUUID)
arg1.fUUID.uuid == orig(arg1.fUUID.uuid)
arg1.keyList == orig(arg1.keyList)
arg1.keyList.list == orig(arg1.keyList.list)
arg1.keyList.list[] == orig(arg1.keyList.list[])
arg1.parent == orig(arg1.parent)
arg1.subdirectories == orig(arg1.subdirectories)
arg1.name == orig(arg1.name)
arg1.name.toString == orig(arg1.name.toString)
arg1.title == orig(arg1.title)
arg1.title.toString == orig(arg1.title.toString)
arg1.fUniqueID == orig(arg1.fUniqueID)
arg1.fBits == orig(arg1.fBits)
this.tFile.out == null
this.tFile.fEND.value == 0
this.tFile.fSeekInfo == null
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord == null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.tFile.dataRecords[] elements has only one value
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
this.tFile.keyList.list[] == []
this.tFile.keyList.list[].getClass().getName() == []
arg1.out == null
arg1.fEND has only one value
arg1.fEND.value == 0
arg1.fEND.immutable == false
arg1.fSeekFree has only one value
arg1.fSeekFree.value == 0
arg1.fSeekFree.immutable == true
arg1.fNbytesFree has only one value
arg1.fNbytesFree.value == 0
arg1.fNbytesFree.immutable == true
arg1.nfree == 0
arg1.largeFile == false
arg1.fCompress == 1
arg1.fSeekInfo == null
arg1.fNbytesInfo has only one value
arg1.fNbytesInfo.value == 0
arg1.fNbytesInfo.immutable == false
arg1.seekInfoRecord == null
arg1.streamerInfos has only one value
arg1.streamerInfos.getClass().getName() == java.util.HashMap.class
arg1.dataRecords has only one value
arg1.dataRecords[] contains no nulls and has only one value, of length 1
arg1.dataRecords[] elements has only one value
arg1.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg1.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg1.dataRecords.getClass().getName() == java.util.ArrayList.class
arg1.keyRecords has only one value
arg1.keyRecords[] contains no nulls and has only one value, of length 1
arg1.keyRecords[] elements has only one value
arg1.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg1.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg1.keyRecords.getClass().getName() == java.util.ArrayList.class
arg1.fDatimeC has only one value
arg1.fDatimeC.fDatime == 2030791191
arg1.fDatimeF has only one value
arg1.fDatimeF.fDatime == 2030791191
arg1.fNbytesKeys == 0
arg1.fNbytesName == 0
arg1.fSeekDir has only one value
arg1.fSeekDir.value == 0
arg1.fSeekDir.immutable == false
arg1.fSeekParent has only one value
arg1.fSeekParent.value == 0
arg1.fSeekParent.immutable == true
arg1.directoryRecord has only one value
arg1.directoryRecord.objectClass has only one value
arg1.directoryRecord.className has only one value
arg1.directoryRecord.className.toString == "TFile"
arg1.directoryRecord.seekPDir has only one value
arg1.directoryRecord.fSeekKey has only one value
arg1.directoryRecord.objects has only one value
arg1.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg1.directoryRecord.objects[] elements has only one value
arg1.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg1.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg1.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg1.directoryRecord.objLen == 0
arg1.directoryRecord.fDatimeC == null
arg1.directoryRecord.keyLen == 0
arg1.directoryRecord.size == 0
arg1.directoryRecord.suppressStreamerInfo == true
arg1.directoryRecord.compressionLevel == -1
arg1.directoryRecord.tFile has only one value
arg1.directoryRecord.name has only one value
arg1.directoryRecord.name.toString == "play.root"
arg1.directoryRecord.title has only one value
arg1.directoryRecord.title.toString == ""
arg1.directoryRecord.fUniqueID == 0
arg1.directoryRecord.fBits == 50331648
arg1.seekKeysRecord has only one value
arg1.seekKeysRecord.objectClass has only one value
arg1.seekKeysRecord.className has only one value
arg1.seekKeysRecord.className.toString == "TFile"
arg1.seekKeysRecord.seekPDir has only one value
arg1.seekKeysRecord.fSeekKey has only one value
arg1.seekKeysRecord.objects has only one value
arg1.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg1.seekKeysRecord.objects[] elements has only one value
arg1.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg1.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg1.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg1.seekKeysRecord.objLen == 0
arg1.seekKeysRecord.fDatimeC == null
arg1.seekKeysRecord.keyLen == 0
arg1.seekKeysRecord.size == 0
arg1.seekKeysRecord.suppressStreamerInfo == true
arg1.seekKeysRecord.compressionLevel == 0
arg1.seekKeysRecord.tFile has only one value
arg1.seekKeysRecord.name has only one value
arg1.seekKeysRecord.name.toString == "play.root"
arg1.seekKeysRecord.title has only one value
arg1.seekKeysRecord.title.toString == ""
arg1.seekKeysRecord.fUniqueID == 0
arg1.seekKeysRecord.fBits == 50331648
arg1.fSeekKeys has only one value
arg1.fSeekKeys.value == 0
arg1.fSeekKeys.immutable == false
arg1.fUUID has only one value
arg1.fUUID.uuid has only one value
arg1.keyList has only one value
arg1.keyList.list has only one value
arg1.keyList.list[] == []
arg1.keyList.list[].getClass().getName() == []
arg1.parent == null
arg1.subdirectories has only one value
arg1.name has only one value
arg1.name.toString == "play.root"
arg1.title has only one value
arg1.title.toString == ""
arg1.fUniqueID == 0
arg1.fBits == 50331648
size(this.tFile.dataRecords[]) == 1
size(arg1.dataRecords[]) == 1
size(arg1.keyRecords[]) == 1
size(arg1.directoryRecord.objects[]) == 1
size(arg1.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.RootRandomAccessFile.getStreamerInfos():::ENTER
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootRandomAccessFile.getStreamerInfos():::EXIT
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return has only one value
return != null
return.getClass().getName() == java.util.HashMap.class
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootRandomAccessFile.isLargeFile():::ENTER
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootRandomAccessFile.isLargeFile():::EXIT
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return == false
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootRandomAccessFile.isLargeFile():::EXIT;condition="not(return == true)"
===========================================================================
hep.io.root.output.RootRandomAccessFile.writeObject(java.lang.Object):::ENTER
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0 != null
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.RootRandomAccessFile.writeObject(java.lang.Object):::EXIT
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.classMap == orig(this.classMap)
this.classMap.getClass().getName() == orig(this.classMap.getClass().getName())
this.tFile.out has only one value
this.tFile.out != null
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo != null
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord != null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord.fDatimeC != null
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.StreamerClassInfo:::OBJECT
this.classDef.getClass().getName() == this.superClass.classDef.getClass().getName()
this.fields.getClass().getName() == this.superClass.fields.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type.$VALUES.getClass().getName()
this.javaClass != null
this.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
this.title != null
this.fields != null
this.fields.getClass().getName() == java.util.LinkedHashMap.class
this.superClass.javaClass != null
this.superClass.classDef != null
this.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
this.superClass.title != null
this.superClass.fields != null
this.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
this.superClass.superClass == null
this.superClass.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
this.superClass.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.superClass.type.size == 0
this.superClass.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
this.superClass.depenciesResolved == false
this.type != null
hep.io.root.output.Type.kBase.value == 0
hep.io.root.output.Type.kBase.size == 0
hep.io.root.output.Type.kBase.typeName has only one value
hep.io.root.output.Type.kBase.typeName != null
hep.io.root.output.Type.kBase.typeName.toString == "BASE"
hep.io.root.output.Type.kCounter.value == 6
hep.io.root.output.Type.kCounter.size == 4
hep.io.root.output.Type.kCounter.typeName has only one value
hep.io.root.output.Type.kCounter.typeName != null
hep.io.root.output.Type.kCounter.typeName.toString == "Int_t"
hep.io.root.output.Type.kCharStar.value == 7
hep.io.root.output.Type.kCharStar.size == 0
hep.io.root.output.Type.kCharStar.typeName == null
hep.io.root.output.Type.kChar.value == 1
hep.io.root.output.Type.kChar.size == 0
hep.io.root.output.Type.kChar.typeName == null
hep.io.root.output.Type.kShort.value == 2
hep.io.root.output.Type.kShort.size == 2
hep.io.root.output.Type.kShort.typeName has only one value
hep.io.root.output.Type.kShort.typeName != null
hep.io.root.output.Type.kShort.typeName.toString == "short"
hep.io.root.output.Type.kInt.value == 3
hep.io.root.output.Type.kInt.size == 4
hep.io.root.output.Type.kInt.typeName has only one value
hep.io.root.output.Type.kInt.typeName != null
hep.io.root.output.Type.kInt.typeName.toString == "Int_t"
hep.io.root.output.Type.kEnum.value == 3
hep.io.root.output.Type.kEnum.size == 4
hep.io.root.output.Type.kEnum.typeName == null
hep.io.root.output.Type.kLong.value == 4
hep.io.root.output.Type.kLong.size == 8
hep.io.root.output.Type.kLong.typeName has only one value
hep.io.root.output.Type.kLong.typeName != null
hep.io.root.output.Type.kLong.typeName.toString == "Long_t"
hep.io.root.output.Type.kFloat.value == 5
hep.io.root.output.Type.kFloat.size == 4
hep.io.root.output.Type.kFloat.typeName has only one value
hep.io.root.output.Type.kFloat.typeName != null
hep.io.root.output.Type.kFloat.typeName.toString == "Float_t"
hep.io.root.output.Type.kDouble.value == 8
hep.io.root.output.Type.kDouble.size == 8
hep.io.root.output.Type.kDouble.typeName has only one value
hep.io.root.output.Type.kDouble.typeName != null
hep.io.root.output.Type.kDouble.typeName.toString == "Double_t"
hep.io.root.output.Type.kDouble32.value == 9
hep.io.root.output.Type.kDouble32.size == 0
hep.io.root.output.Type.kDouble32.typeName == null
hep.io.root.output.Type.kLegacyChar.value == 10
hep.io.root.output.Type.kLegacyChar.size == 0
hep.io.root.output.Type.kLegacyChar.typeName == null
hep.io.root.output.Type.kUChar.value == 11
hep.io.root.output.Type.kUChar.size == 0
hep.io.root.output.Type.kUChar.typeName == null
hep.io.root.output.Type.kUShort.value == 12
hep.io.root.output.Type.kUShort.size == 2
hep.io.root.output.Type.kUShort.typeName has only one value
hep.io.root.output.Type.kUShort.typeName != null
hep.io.root.output.Type.kUShort.typeName.toString == "UShort_t"
hep.io.root.output.Type.kUInt.value == 13
hep.io.root.output.Type.kUInt.size == 4
hep.io.root.output.Type.kUInt.typeName has only one value
hep.io.root.output.Type.kUInt.typeName != null
hep.io.root.output.Type.kUInt.typeName.toString == "UInt_t"
hep.io.root.output.Type.kULong.value == 14
hep.io.root.output.Type.kULong.size == 8
hep.io.root.output.Type.kULong.typeName has only one value
hep.io.root.output.Type.kULong.typeName != null
hep.io.root.output.Type.kULong.typeName.toString == "ULong_t"
hep.io.root.output.Type.kBits.value == 15
hep.io.root.output.Type.kBits.size == 0
hep.io.root.output.Type.kBits.typeName == null
hep.io.root.output.Type.kLong64.value == 16
hep.io.root.output.Type.kLong64.size == 0
hep.io.root.output.Type.kLong64.typeName == null
hep.io.root.output.Type.kULong64.value == 17
hep.io.root.output.Type.kULong64.size == 0
hep.io.root.output.Type.kULong64.typeName == null
hep.io.root.output.Type.kBool.value == 18
hep.io.root.output.Type.kBool.size == 1
hep.io.root.output.Type.kBool.typeName has only one value
hep.io.root.output.Type.kBool.typeName != null
hep.io.root.output.Type.kBool.typeName.toString == "Bool_t"
hep.io.root.output.Type.kFloat16.value == 19
hep.io.root.output.Type.kFloat16.size == 0
hep.io.root.output.Type.kFloat16.typeName == null
hep.io.root.output.Type.kCharArray.value == 41
hep.io.root.output.Type.kCharArray.size == 0
hep.io.root.output.Type.kCharArray.typeName == null
hep.io.root.output.Type.kShortArray.value == 42
hep.io.root.output.Type.kShortArray.size == 0
hep.io.root.output.Type.kShortArray.typeName == null
hep.io.root.output.Type.kIntArray.value == 43
hep.io.root.output.Type.kIntArray.size == 0
hep.io.root.output.Type.kIntArray.typeName == null
hep.io.root.output.Type.kLongArray.value == 44
hep.io.root.output.Type.kLongArray.size == 0
hep.io.root.output.Type.kLongArray.typeName == null
hep.io.root.output.Type.kFloatArray.value == 45
hep.io.root.output.Type.kFloatArray.size == 0
hep.io.root.output.Type.kFloatArray.typeName == null
hep.io.root.output.Type.kDoubleArray.value == 48
hep.io.root.output.Type.kDoubleArray.size == 0
hep.io.root.output.Type.kDoubleArray.typeName == null
hep.io.root.output.Type.kDouble32Array.value == 49
hep.io.root.output.Type.kDouble32Array.size == 0
hep.io.root.output.Type.kDouble32Array.typeName == null
hep.io.root.output.Type.kObject.value == 61
hep.io.root.output.Type.kObject.size == 0
hep.io.root.output.Type.kObject.typeName == null
hep.io.root.output.Type.kAny.value == 62
hep.io.root.output.Type.kAny.size == 0
hep.io.root.output.Type.kAny.typeName == null
hep.io.root.output.Type.kObjectp.value == 63
hep.io.root.output.Type.kObjectp.size == 0
hep.io.root.output.Type.kObjectp.typeName == null
hep.io.root.output.Type.kObjectP.value == 64
hep.io.root.output.Type.kObjectP.size == 0
hep.io.root.output.Type.kObjectP.typeName == null
hep.io.root.output.Type.kTString.value == 65
hep.io.root.output.Type.kTString.size == 8
hep.io.root.output.Type.kTString.typeName has only one value
hep.io.root.output.Type.kTString.typeName != null
hep.io.root.output.Type.kTString.typeName.toString == "TString"
hep.io.root.output.Type.kTObject.value == 66
hep.io.root.output.Type.kTObject.size == 0
hep.io.root.output.Type.kTObject.typeName has only one value
hep.io.root.output.Type.kTObject.typeName != null
hep.io.root.output.Type.kTObject.typeName.toString == "TObject"
hep.io.root.output.Type.kTNamed.value == 67
hep.io.root.output.Type.kTNamed.size == 0
hep.io.root.output.Type.kTNamed.typeName has only one value
hep.io.root.output.Type.kTNamed.typeName != null
hep.io.root.output.Type.kTNamed.typeName.toString == "TNamed"
this.type.size >= 0
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
this.classDef.getClass().getName() != this.fields.getClass().getName()
this.classDef.getClass().getName() != this.superClass.fields.getClass().getName()
this.classDef.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
this.classDef.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
this.classDef.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
this.fields.getClass().getName() != this.superClass.classDef.getClass().getName()
this.fields.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
this.fields.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
this.fields.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
this.superClass.classDef.getClass().getName() != this.superClass.fields.getClass().getName()
this.superClass.classDef.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
this.superClass.classDef.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
this.superClass.classDef.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
this.superClass.fields.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
this.superClass.fields.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
this.superClass.fields.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.StreamerClassInfo(java.lang.Class):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.StreamerClassInfo.StreamerClassInfo(java.lang.Class):::EXIT
this.superClass == null
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.addField(hep.io.root.output.StreamerFieldInfo):::ENTER
this.classDef.getClass().getName() == arg0.parentClassInfo.classDef.getClass().getName()
this.classDef.getClass().getName() == arg0.fieldClassInfo.classDef.getClass().getName()
this.fields.getClass().getName() == arg0.parentClassInfo.fields.getClass().getName()
this.fields.getClass().getName() == arg0.fieldClassInfo.fields.getClass().getName()
this.superClass.classDef.getClass().getName() == arg0.fieldClassInfo.classDef.getClass().getName()
this.classDef != null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == true
arg0 != null
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
arg0.type.value >= 2
arg0.type.size >= 0
this.fields.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
this.superClass.fields.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.$VALUES.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.addField(hep.io.root.output.StreamerFieldInfo):::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == arg0.parentClassInfo.classDef.getClass().getName()
this.classDef.getClass().getName() == arg0.fieldClassInfo.classDef.getClass().getName()
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == arg0.parentClassInfo.fields.getClass().getName()
this.fields.getClass().getName() == arg0.fieldClassInfo.fields.getClass().getName()
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
this.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == arg0.fieldClassInfo.classDef.getClass().getName()
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.counter.toString == orig(arg0.counter.toString)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.classDef.getClass().getName() == orig(arg0.fieldClassInfo.classDef.getClass().getName())
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
arg0.type.value == orig(arg0.type.value)
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
this.classDef != null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == true
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
arg0.type.value >= 2
arg0.type.size >= 0
this.fields.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
this.superClass.fields.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
hep.io.root.output.Type.$VALUES.getClass().getName() != arg0.fieldClassInfo.classDef.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.computeCheckSum():::ENTER
this.title has only one value
this.title.toString == ""
this.checkSum == 0
this.superClass.title.toString one of { "", "1-Dim histogram base class", "Basic ROOT object" }
this.superClass.type.value one of { 62, 66 }
this.superClass.type.typeName.toString == "TObject"
this.type.value one of { 62, 65 }
this.type.size one of { 0, 8 }
this.type.typeName.toString == "TString"
this.depenciesResolved == true
===========================================================================
hep.io.root.output.StreamerClassInfo.computeCheckSum():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.title has only one value
this.title.toString == ""
this.checkSum == 0
this.superClass.title.toString one of { "", "1-Dim histogram base class", "Basic ROOT object" }
this.superClass.type.value one of { 62, 66 }
this.superClass.type.typeName.toString == "TObject"
this.type.value one of { 62, 65 }
this.type.size one of { 0, 8 }
this.type.typeName.toString == "TString"
this.depenciesResolved == true
===========================================================================
hep.io.root.output.StreamerClassInfo.findField(java.lang.String):::ENTER
this has only one value
this.javaClass has only one value
this.classDef has only one value
this.title has only one value
this.title.toString == "1-Dim histogram base class"
this.checkSum == -381522971
this.fields has only one value
this.superClass has only one value
this.superClass.javaClass has only one value
this.superClass.classDef has only one value
this.superClass.title has only one value
this.superClass.title.toString == "The basis for a named object (name, title)"
this.superClass.checkSum == -68599943
this.superClass.fields has only one value
this.superClass.type has only one value
this.superClass.type.value == 67
hep.io.root.output.Type.types == null
this.superClass.type.typeName has only one value
this.superClass.type.typeName.toString == "TNamed"
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
this.depenciesResolved == true
arg0 has only one value
arg0.toString == "fBufferSize"
===========================================================================
hep.io.root.output.StreamerClassInfo.findField(java.lang.String):::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == return.parentClassInfo.classDef.getClass().getName()
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == return.parentClassInfo.fields.getClass().getName()
this.fields.getClass().getName() == return.fieldClassInfo.fields.getClass().getName()
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.depenciesResolved == orig(this.depenciesResolved)
arg0.toString == orig(arg0.toString)
this.javaClass has only one value
this.classDef has only one value
this.title has only one value
this.title.toString == "1-Dim histogram base class"
this.checkSum == -381522971
this.fields has only one value
this.superClass has only one value
this.superClass.javaClass has only one value
this.superClass.classDef has only one value
this.superClass.title has only one value
this.superClass.title.toString == "The basis for a named object (name, title)"
this.superClass.checkSum == -68599943
this.superClass.fields has only one value
this.superClass.type has only one value
this.superClass.type.value == 67
hep.io.root.output.Type.types == null
this.superClass.type.typeName has only one value
this.superClass.type.typeName.toString == "TNamed"
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
this.depenciesResolved == true
arg0.toString == "fBufferSize"
return has only one value
return.parentClassInfo has only one value
return.parentClassInfo.javaClass has only one value
return.parentClassInfo.classDef has only one value
return.parentClassInfo.title has only one value
return.parentClassInfo.title.toString == "1-Dim histogram base class"
return.parentClassInfo.checkSum == -381522971
return.parentClassInfo.fields has only one value
return.parentClassInfo.superClass has only one value
return.parentClassInfo.type has only one value
return.parentClassInfo.depenciesResolved == true
return.field has only one value
return.title has only one value
return.title.toString == "fBuffer size"
return.isBase == false
return.isArray == false
return.counter == null
return.fClass has only one value
return.fieldClassInfo has only one value
return.fieldClassInfo.javaClass has only one value
return.fieldClassInfo.classDef == null
return.fieldClassInfo.title has only one value
return.fieldClassInfo.title.toString == ""
return.fieldClassInfo.checkSum == 0
return.fieldClassInfo.fields has only one value
return.fieldClassInfo.superClass == null
return.fieldClassInfo.type has only one value
return.fieldClassInfo.depenciesResolved == false
return.type has only one value
return.type.value == 3
return.type.size == 4
return.type.typeName has only one value
return.type.typeName.toString == "Int_t"
===========================================================================
hep.io.root.output.StreamerClassInfo.getCheckSum():::ENTER
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
===========================================================================
hep.io.root.output.StreamerClassInfo.getCheckSum():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
orig(this.checkSum) % this.checkSum == 0
===========================================================================
hep.io.root.output.StreamerClassInfo.getFields():::ENTER
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
===========================================================================
hep.io.root.output.StreamerClassInfo.getFields():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
return != null
return.getClass().getName() == java.util.LinkedHashMap$LinkedValues.class
this.classDef.getClass().getName() != return.getClass().getName()
this.fields.getClass().getName() != return.getClass().getName()
this.superClass.classDef.getClass().getName() != return.getClass().getName()
this.superClass.fields.getClass().getName() != return.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != return.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != return.getClass().getName()
hep.io.root.output.Type.$VALUES.getClass().getName() != return.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.getName():::ENTER
this.type.size one of { 0, 4, 8 }
===========================================================================
hep.io.root.output.StreamerClassInfo.getName():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.type.size one of { 0, 4, 8 }
return != null
===========================================================================
hep.io.root.output.StreamerClassInfo.getSize():::ENTER
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.getSize():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
return == 0
===========================================================================
hep.io.root.output.StreamerClassInfo.getSuperClass():::ENTER
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
===========================================================================
hep.io.root.output.StreamerClassInfo.getSuperClass():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == return.classDef.getClass().getName()
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == return.fields.getClass().getName()
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == return.classDef.getClass().getName()
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == return.fields.getClass().getName()
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
return.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
return.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
return.javaClass != null
return.classDef != null
return.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
return.title != null
return.fields != null
return.fields.getClass().getName() == java.util.LinkedHashMap.class
return.superClass == null
return.type != null
return.type.value one of { 62, 66, 67 }
return.type.size == 0
return.type.typeName.toString one of { "TNamed", "TObject" }
return.depenciesResolved == false
this.classDef.getClass().getName() != return.fields.getClass().getName()
this.fields.getClass().getName() != return.classDef.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != return.classDef.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != return.fields.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != return.classDef.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != return.fields.getClass().getName()
hep.io.root.output.Type.$VALUES.getClass().getName() != return.classDef.getClass().getName()
hep.io.root.output.Type.$VALUES.getClass().getName() != return.fields.getClass().getName()
return.classDef.getClass().getName() != return.fields.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.getTitle():::ENTER
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
===========================================================================
hep.io.root.output.StreamerClassInfo.getTitle():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
return != null
===========================================================================
hep.io.root.output.StreamerClassInfo.getType():::ENTER
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.getType():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
return != null
return.value one of { 0, 66, 67 }
return.size == 0
return.typeName != null
return.typeName.toString one of { "BASE", "TNamed", "TObject" }
===========================================================================
hep.io.root.output.StreamerClassInfo.getTypeName():::ENTER
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.getTypeName():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.superClass == null
this.type.value one of { 62, 66, 67 }
this.type.size == 0
this.type.typeName.toString one of { "TNamed", "TObject" }
this.depenciesResolved == false
return has only one value
return != null
return.toString == "BASE"
===========================================================================
hep.io.root.output.StreamerClassInfo.getVersion():::ENTER
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
===========================================================================
hep.io.root.output.StreamerClassInfo.getVersion():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
this.superClass.javaClass == orig(this.superClass.javaClass)
this.superClass.classDef == orig(this.superClass.classDef)
this.superClass.classDef.getClass().getName() == orig(this.superClass.classDef.getClass().getName())
this.superClass.title == orig(this.superClass.title)
this.superClass.title.toString == orig(this.superClass.title.toString)
this.superClass.checkSum == orig(this.superClass.checkSum)
this.superClass.fields == orig(this.superClass.fields)
this.superClass.fields.getClass().getName() == orig(this.superClass.fields.getClass().getName())
this.superClass.superClass == orig(this.superClass.superClass)
this.superClass.type == orig(this.superClass.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.superClass.type.value == orig(this.superClass.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.superClass.type.size == orig(this.superClass.type.size)
this.superClass.type.typeName == orig(this.superClass.type.typeName)
this.superClass.type.typeName.toString == orig(this.superClass.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.superClass.depenciesResolved == orig(this.superClass.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
===========================================================================
hep.io.root.output.StreamerClassInfo.hasStandardHeader():::ENTER
this.classDef != null
this.superClass == null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.hasStandardHeader():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
(this.type.typeName.toString == "TNamed")  <==>  (return == true)
(this.type.typeName.toString == "TNamed")  ==>  (this.type.size == 0)
(this.type.typeName.toString == "TNamed")  ==>  (this.type.value one of { 62, 67 })
(this.type.typeName.toString one of { "TObject", "TString" })  <==>  (return == false)
(this.type.typeName.toString one of { "TObject", "TString" })  ==>  (this.title.toString one of { "", "Array of doubles", "Basic ROOT object" })
(this.type.typeName.toString one of { "TObject", "TString" })  ==>  (this.type.size one of { 0, 8 })
(this.type.typeName.toString one of { "TObject", "TString" })  ==>  (this.type.value one of { 62, 65, 66 })
this.classDef != null
this.superClass == null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.hasStandardHeader():::EXIT;condition="return == true"
this.type.value one of { 62, 67 }
this.type.size == 0
this.type.typeName.toString == "TNamed"
return == true
===========================================================================
hep.io.root.output.StreamerClassInfo.hasStandardHeader():::EXIT;condition="not(return == true)"
this.title.toString one of { "", "Array of doubles", "Basic ROOT object" }
this.type.value one of { 62, 65, 66 }
this.type.typeName.toString one of { "TObject", "TString" }
return == false
===========================================================================
hep.io.root.output.StreamerClassInfo.resolveDependencies():::ENTER
this.classDef != null
this.superClass == null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.resolveDependencies():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[].getClass().getName() == orig(hep.io.root.output.Type.types[].getClass().getName())
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.classDef != null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == true
this.classDef.getClass().getName() != orig(hep.io.root.output.Type.types.getClass().getName())
this.fields.getClass().getName() != orig(hep.io.root.output.Type.types.getClass().getName())
this.superClass.classDef.getClass().getName() != orig(hep.io.root.output.Type.types.getClass().getName())
this.superClass.fields.getClass().getName() != orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[]) (elementwise)
hep.io.root.output.Type.javaToRoot.getClass().getName() != orig(hep.io.root.output.Type.types.getClass().getName())
===========================================================================
hep.io.root.output.StreamerClassInfo.suppressStreamerInfo():::ENTER
this.classDef != null
this.superClass == null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.suppressStreamerInfo():::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
this.superClass == orig(this.superClass)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.depenciesResolved == orig(this.depenciesResolved)
(return == false)  ==>  (this.type.size one of { 0, 8 })
(return == false)  ==>  (this.type.typeName.toString one of { "TNamed", "TObject", "TString" })
(return == true)  ==>  (this.checkSum == 0)
(return == true)  ==>  (this.title.toString one of { "", "Array of doubles" })
(return == true)  ==>  (this.type has only one value)
(return == true)  ==>  (this.type.size == 0)
(return == true)  ==>  (this.type.typeName == null)
(return == true)  ==>  (this.type.value == 62)
this.classDef != null
this.superClass == null
this.type.size one of { 0, 8 }
this.type.typeName.toString one of { "TNamed", "TObject", "TString" }
this.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerClassInfo.suppressStreamerInfo():::EXIT;condition="return == true"
this.title.toString one of { "", "Array of doubles" }
this.checkSum == 0
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
return == true
===========================================================================
hep.io.root.output.StreamerClassInfo.suppressStreamerInfo():::EXIT;condition="not(return == true)"
return == false
===========================================================================
hep.io.root.output.StreamerClassInfo.write(hep.io.root.output.RootOutput, java.lang.Object):::ENTER
this.classDef != null
this.superClass == null
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types != null
this.type.value one of { 62, 67 }
this.type.size == 0
this.type.typeName.toString == "TNamed"
this.depenciesResolved == false
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
arg1 != null
this.classDef.getClass().getName() != arg0.getClass().getName()
this.classDef.getClass().getName() != arg1.getClass().getName()
this.fields.getClass().getName() != arg0.getClass().getName()
this.fields.getClass().getName() != arg1.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != arg0.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != arg1.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != arg0.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != arg1.getClass().getName()
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
hep.io.root.output.StreamerClassInfo.write(hep.io.root.output.RootOutput, java.lang.Object):::EXIT
this.javaClass == orig(this.javaClass)
this.classDef == orig(this.classDef)
this.classDef.getClass().getName() == orig(this.classDef.getClass().getName())
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.checkSum == orig(this.checkSum)
this.fields == orig(this.fields)
this.fields.getClass().getName() == orig(this.fields.getClass().getName())
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.classDef != null
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types != null
this.type.value one of { 62, 67 }
this.type.size == 0
this.type.typeName.toString == "TNamed"
this.depenciesResolved == true
this.classDef.getClass().getName() != orig(arg0.getClass().getName())
this.classDef.getClass().getName() != orig(arg1.getClass().getName())
this.fields.getClass().getName() != orig(arg0.getClass().getName())
this.fields.getClass().getName() != orig(arg1.getClass().getName())
this.superClass.classDef.getClass().getName() != orig(arg0.getClass().getName())
this.superClass.classDef.getClass().getName() != orig(arg1.getClass().getName())
this.superClass.fields.getClass().getName() != orig(arg0.getClass().getName())
this.superClass.fields.getClass().getName() != orig(arg1.getClass().getName())
hep.io.root.output.Type.types.getClass().getName() != orig(arg0.getClass().getName())
hep.io.root.output.Type.types.getClass().getName() != orig(arg1.getClass().getName())
hep.io.root.output.Type.javaToRoot.getClass().getName() != orig(arg0.getClass().getName())
hep.io.root.output.Type.javaToRoot.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
hep.io.root.output.StreamerFieldInfo:::OBJECT
this.parentClassInfo != null
this.parentClassInfo.javaClass != null
this.parentClassInfo.classDef != null
this.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
this.parentClassInfo.title != null
this.parentClassInfo.fields != null
this.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
this.parentClassInfo.superClass.javaClass != null
this.parentClassInfo.superClass.classDef != null
this.parentClassInfo.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
this.parentClassInfo.superClass.title != null
this.parentClassInfo.superClass.fields != null
this.parentClassInfo.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
this.parentClassInfo.superClass.superClass == null
this.parentClassInfo.superClass.type != null
this.parentClassInfo.superClass.depenciesResolved == false
this.parentClassInfo.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
this.parentClassInfo.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.parentClassInfo.type.size == 0
this.parentClassInfo.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
this.parentClassInfo.depenciesResolved == true
this.field != null
this.title != null
this.counter.toString == "fBufferSize"
this.fClass != null
this.fieldClassInfo != null
this.fieldClassInfo.javaClass != null
this.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fieldClassInfo.title != null
this.fieldClassInfo.fields != null
this.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
this.fieldClassInfo.superClass == null
this.fieldClassInfo.type != null
this.fieldClassInfo.type.value >= 2
this.fieldClassInfo.type.size >= 0
this.fieldClassInfo.depenciesResolved == false
this.type != null
hep.io.root.output.Type.kBase.value == 0
hep.io.root.output.Type.kBase.size == 0
hep.io.root.output.Type.kBase.typeName has only one value
hep.io.root.output.Type.kBase.typeName != null
hep.io.root.output.Type.kBase.typeName.toString == "BASE"
hep.io.root.output.Type.kCounter.value == 6
hep.io.root.output.Type.kCounter.size == 4
hep.io.root.output.Type.kCounter.typeName has only one value
hep.io.root.output.Type.kCounter.typeName != null
hep.io.root.output.Type.kCounter.typeName.toString == "Int_t"
hep.io.root.output.Type.kCharStar.value == 7
hep.io.root.output.Type.kCharStar.size == 0
hep.io.root.output.Type.kCharStar.typeName == null
hep.io.root.output.Type.kChar.value == 1
hep.io.root.output.Type.kChar.size == 0
hep.io.root.output.Type.kChar.typeName == null
hep.io.root.output.Type.kShort.value == 2
hep.io.root.output.Type.kShort.size == 2
hep.io.root.output.Type.kShort.typeName has only one value
hep.io.root.output.Type.kShort.typeName != null
hep.io.root.output.Type.kShort.typeName.toString == "short"
hep.io.root.output.Type.kInt.value == 3
hep.io.root.output.Type.kInt.size == 4
hep.io.root.output.Type.kInt.typeName has only one value
hep.io.root.output.Type.kInt.typeName != null
hep.io.root.output.Type.kInt.typeName.toString == "Int_t"
hep.io.root.output.Type.kEnum.value == 3
hep.io.root.output.Type.kEnum.size == 4
hep.io.root.output.Type.kEnum.typeName == null
hep.io.root.output.Type.kLong.value == 4
hep.io.root.output.Type.kLong.size == 8
hep.io.root.output.Type.kLong.typeName has only one value
hep.io.root.output.Type.kLong.typeName != null
hep.io.root.output.Type.kLong.typeName.toString == "Long_t"
hep.io.root.output.Type.kFloat.value == 5
hep.io.root.output.Type.kFloat.size == 4
hep.io.root.output.Type.kFloat.typeName has only one value
hep.io.root.output.Type.kFloat.typeName != null
hep.io.root.output.Type.kFloat.typeName.toString == "Float_t"
hep.io.root.output.Type.kDouble.value == 8
hep.io.root.output.Type.kDouble.size == 8
hep.io.root.output.Type.kDouble.typeName has only one value
hep.io.root.output.Type.kDouble.typeName != null
hep.io.root.output.Type.kDouble.typeName.toString == "Double_t"
hep.io.root.output.Type.kDouble32.value == 9
hep.io.root.output.Type.kDouble32.size == 0
hep.io.root.output.Type.kDouble32.typeName == null
hep.io.root.output.Type.kLegacyChar.value == 10
hep.io.root.output.Type.kLegacyChar.size == 0
hep.io.root.output.Type.kLegacyChar.typeName == null
hep.io.root.output.Type.kUChar.value == 11
hep.io.root.output.Type.kUChar.size == 0
hep.io.root.output.Type.kUChar.typeName == null
hep.io.root.output.Type.kUShort.value == 12
hep.io.root.output.Type.kUShort.size == 2
hep.io.root.output.Type.kUShort.typeName has only one value
hep.io.root.output.Type.kUShort.typeName != null
hep.io.root.output.Type.kUShort.typeName.toString == "UShort_t"
hep.io.root.output.Type.kUInt.value == 13
hep.io.root.output.Type.kUInt.size == 4
hep.io.root.output.Type.kUInt.typeName has only one value
hep.io.root.output.Type.kUInt.typeName != null
hep.io.root.output.Type.kUInt.typeName.toString == "UInt_t"
hep.io.root.output.Type.kULong.value == 14
hep.io.root.output.Type.kULong.size == 8
hep.io.root.output.Type.kULong.typeName has only one value
hep.io.root.output.Type.kULong.typeName != null
hep.io.root.output.Type.kULong.typeName.toString == "ULong_t"
hep.io.root.output.Type.kBits.value == 15
hep.io.root.output.Type.kBits.size == 0
hep.io.root.output.Type.kBits.typeName == null
hep.io.root.output.Type.kLong64.value == 16
hep.io.root.output.Type.kLong64.size == 0
hep.io.root.output.Type.kLong64.typeName == null
hep.io.root.output.Type.kULong64.value == 17
hep.io.root.output.Type.kULong64.size == 0
hep.io.root.output.Type.kULong64.typeName == null
hep.io.root.output.Type.kBool.value == 18
hep.io.root.output.Type.kBool.size == 1
hep.io.root.output.Type.kBool.typeName has only one value
hep.io.root.output.Type.kBool.typeName != null
hep.io.root.output.Type.kBool.typeName.toString == "Bool_t"
hep.io.root.output.Type.kFloat16.value == 19
hep.io.root.output.Type.kFloat16.size == 0
hep.io.root.output.Type.kFloat16.typeName == null
hep.io.root.output.Type.kCharArray.value == 41
hep.io.root.output.Type.kCharArray.size == 0
hep.io.root.output.Type.kCharArray.typeName == null
hep.io.root.output.Type.kShortArray.value == 42
hep.io.root.output.Type.kShortArray.size == 0
hep.io.root.output.Type.kShortArray.typeName == null
hep.io.root.output.Type.kIntArray.value == 43
hep.io.root.output.Type.kIntArray.size == 0
hep.io.root.output.Type.kIntArray.typeName == null
hep.io.root.output.Type.kLongArray.value == 44
hep.io.root.output.Type.kLongArray.size == 0
hep.io.root.output.Type.kLongArray.typeName == null
hep.io.root.output.Type.kFloatArray.value == 45
hep.io.root.output.Type.kFloatArray.size == 0
hep.io.root.output.Type.kFloatArray.typeName == null
hep.io.root.output.Type.kDoubleArray.value == 48
hep.io.root.output.Type.kDoubleArray.size == 0
hep.io.root.output.Type.kDoubleArray.typeName == null
hep.io.root.output.Type.kDouble32Array.value == 49
hep.io.root.output.Type.kDouble32Array.size == 0
hep.io.root.output.Type.kDouble32Array.typeName == null
hep.io.root.output.Type.kObject.value == 61
hep.io.root.output.Type.kObject.size == 0
hep.io.root.output.Type.kObject.typeName == null
hep.io.root.output.Type.kAny.value == 62
hep.io.root.output.Type.kAny.size == 0
hep.io.root.output.Type.kAny.typeName == null
hep.io.root.output.Type.kObjectp.value == 63
hep.io.root.output.Type.kObjectp.size == 0
hep.io.root.output.Type.kObjectp.typeName == null
hep.io.root.output.Type.kObjectP.value == 64
hep.io.root.output.Type.kObjectP.size == 0
hep.io.root.output.Type.kObjectP.typeName == null
hep.io.root.output.Type.kTString.value == 65
hep.io.root.output.Type.kTString.size == 8
hep.io.root.output.Type.kTString.typeName has only one value
hep.io.root.output.Type.kTString.typeName != null
hep.io.root.output.Type.kTString.typeName.toString == "TString"
hep.io.root.output.Type.kTObject.value == 66
hep.io.root.output.Type.kTObject.size == 0
hep.io.root.output.Type.kTObject.typeName has only one value
hep.io.root.output.Type.kTObject.typeName != null
hep.io.root.output.Type.kTObject.typeName.toString == "TObject"
hep.io.root.output.Type.kTNamed.value == 67
hep.io.root.output.Type.kTNamed.size == 0
hep.io.root.output.Type.kTNamed.typeName has only one value
hep.io.root.output.Type.kTNamed.typeName != null
hep.io.root.output.Type.kTNamed.typeName.toString == "TNamed"
this.type.value >= 2
this.type.size >= 0
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.StreamerFieldInfo.StreamerFieldInfo(hep.io.root.output.StreamerClassInfo, java.lang.reflect.Field):::ENTER
arg0 != null
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.javaClass != null
arg0.superClass.classDef != null
arg0.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.superClass.title != null
arg0.superClass.fields != null
arg0.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.superClass == null
arg0.superClass.type != null
arg0.superClass.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == true
arg1 != null
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.StreamerFieldInfo.StreamerFieldInfo(hep.io.root.output.StreamerClassInfo, java.lang.reflect.Field):::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[].getClass().getName() == orig(hep.io.root.output.Type.types[].getClass().getName())
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.javaClass == orig(arg0.javaClass)
arg0.classDef == orig(arg0.classDef)
arg0.classDef.getClass().getName() == orig(arg0.classDef.getClass().getName())
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.checkSum == orig(arg0.checkSum)
arg0.fields == orig(arg0.fields)
arg0.fields.getClass().getName() == orig(arg0.fields.getClass().getName())
arg0.superClass == orig(arg0.superClass)
arg0.superClass.javaClass == orig(arg0.superClass.javaClass)
arg0.superClass.classDef == orig(arg0.superClass.classDef)
arg0.superClass.classDef.getClass().getName() == orig(arg0.superClass.classDef.getClass().getName())
arg0.superClass.title == orig(arg0.superClass.title)
arg0.superClass.title.toString == orig(arg0.superClass.title.toString)
arg0.superClass.checkSum == orig(arg0.superClass.checkSum)
arg0.superClass.fields == orig(arg0.superClass.fields)
arg0.superClass.fields.getClass().getName() == orig(arg0.superClass.fields.getClass().getName())
arg0.superClass.superClass == orig(arg0.superClass.superClass)
arg0.superClass.type == orig(arg0.superClass.type)
arg0.superClass.depenciesResolved == orig(arg0.superClass.depenciesResolved)
arg0.type == orig(arg0.type)
arg0.type.value == orig(arg0.type.value)
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
arg0.depenciesResolved == orig(arg0.depenciesResolved)
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.javaClass != null
arg0.superClass.classDef != null
arg0.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.superClass.title != null
arg0.superClass.fields != null
arg0.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.superClass == null
arg0.superClass.type != null
arg0.superClass.depenciesResolved == false
arg0.type != null
arg0.type.value one of { 62, 66, 67 }
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
arg0.depenciesResolved == true
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[]) (elementwise)
===========================================================================
hep.io.root.output.StreamerFieldInfo.getArrayDim():::ENTER
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == ""
this.parentClassInfo.checkSum == 0
this.parentClassInfo.superClass.title.toString one of { "1-Dim histogram base class", "Basic ROOT object" }
this.parentClassInfo.superClass.checkSum one of { -381522971, 1389979441 }
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
this.parentClassInfo.type.typeName == null
this.isBase == false
this.isArray == false
this.counter == null
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.type.value one of { 8, 65 }
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName.toString one of { "Double_t", "TString" }
this.type.value one of { 8, 65 }
this.type.size == 8
this.type.typeName.toString one of { "Double_t", "TString" }
===========================================================================
hep.io.root.output.StreamerFieldInfo.getArrayDim():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == ""
this.parentClassInfo.checkSum == 0
this.parentClassInfo.superClass.title.toString one of { "1-Dim histogram base class", "Basic ROOT object" }
this.parentClassInfo.superClass.checkSum one of { -381522971, 1389979441 }
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
this.parentClassInfo.type.typeName == null
this.isBase == false
this.isArray == false
this.counter == null
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.type.value one of { 8, 65 }
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName.toString one of { "Double_t", "TString" }
this.type.value one of { 8, 65 }
this.type.size == 8
this.type.typeName.toString one of { "Double_t", "TString" }
return == 0
===========================================================================
hep.io.root.output.StreamerFieldInfo.getAsSuperClass():::ENTER
this.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
this.parentClassInfo.superClass.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
this.parentClassInfo.superClass.checkSum one of { -381522971, -68599943, 0 }
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
this.parentClassInfo.type.typeName == null
this.title has only one value
this.title.toString == ""
this.isBase == true
this.isArray == false
this.counter == null
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 62
this.fieldClassInfo.type.size == 0
this.fieldClassInfo.type.typeName == null
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getAsSuperClass():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
this.parentClassInfo.superClass.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
this.parentClassInfo.superClass.checkSum one of { -381522971, -68599943, 0 }
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
this.parentClassInfo.type.typeName == null
this.title has only one value
this.title.toString == ""
this.isBase == true
this.isArray == false
this.counter == null
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 62
this.fieldClassInfo.type.size == 0
this.fieldClassInfo.type.typeName == null
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
return.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
return.fields.getClass().getName() == java.util.LinkedHashMap.class
return.superClass == null
return.type has only one value
return.type.value == 62
return.type.size == 0
return.type.typeName == null
return.depenciesResolved == false
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountClass():::ENTER
this has only one value
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountClass():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
return has only one value
return.toString == "TH1"
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountName():::ENTER
this has only one value
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountName():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
return has only one value
return.toString == "fBufferSize"
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountVersion():::ENTER
this has only one value
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getCountVersion():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isBase == false
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
return == 6
===========================================================================
hep.io.root.output.StreamerFieldInfo.getName():::ENTER
===========================================================================
hep.io.root.output.StreamerFieldInfo.getName():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
return != null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getSize():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.getSize():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
return >= 0
===========================================================================
hep.io.root.output.StreamerFieldInfo.getTitle():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.getTitle():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
return != null
===========================================================================
hep.io.root.output.StreamerFieldInfo.getType():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.getType():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
return != null
return.value >= 2
return.size >= 0
===========================================================================
hep.io.root.output.StreamerFieldInfo.getTypeName():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.getTypeName():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
return != null
===========================================================================
hep.io.root.output.StreamerFieldInfo.isArray():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isArray():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
(this.isArray == false)  <==>  (return == false)
(this.isArray == false)  <==>  (this.counter == null)
(this.isArray == false)  ==>  (this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 })
(this.isArray == false)  ==>  (this.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class)
(this.isArray == false)  ==>  (this.fieldClassInfo.title.toString one of { "", "Array of doubles" })
(this.isArray == false)  ==>  (this.fieldClassInfo.type.value >= 2)
(this.isArray == false)  ==>  (this.parentClassInfo.type.typeName.toString one of { "TNamed", "TObject" })
(this.isArray == false)  ==>  (this.parentClassInfo.type.value one of { 62, 66, 67 })
(this.isArray == false)  ==>  (this.type.value >= 2)
(this.isArray == true)  <==>  (return == true)
(this.isArray == true)  <==>  (this.counter has only one value)
(this.isArray == true)  ==>  (hep.io.root.output.Type.types has only one value)
(this.isArray == true)  ==>  (orig(this) has only one value)
(this.isArray == true)  ==>  (this.counter.toString == "fBufferSize")
(this.isArray == true)  ==>  (this.fClass has only one value)
(this.isArray == true)  ==>  (this.field has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.checkSum == 0)
(this.isArray == true)  ==>  (this.fieldClassInfo.classDef == null)
(this.isArray == true)  ==>  (this.fieldClassInfo.fields has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.javaClass has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.title has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.title.toString == "")
(this.isArray == true)  ==>  (this.fieldClassInfo.type has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.size == 8)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.typeName has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.typeName.toString == "Double_t")
(this.isArray == true)  ==>  (this.fieldClassInfo.type.value == 8)
(this.isArray == true)  ==>  (this.parentClassInfo has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.checkSum == -381522971)
(this.isArray == true)  ==>  (this.parentClassInfo.classDef has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.fields has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.javaClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.checkSum == -68599943)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.classDef has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.fields has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.javaClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.title has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)")
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.type has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.title has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.title.toString == "1-Dim histogram base class")
(this.isArray == true)  ==>  (this.parentClassInfo.type has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.type.typeName == null)
(this.isArray == true)  ==>  (this.parentClassInfo.type.value == 62)
(this.isArray == true)  ==>  (this.title has only one value)
(this.isArray == true)  ==>  (this.title.toString == "entry buffer")
(this.isArray == true)  ==>  (this.type has only one value)
(this.isArray == true)  ==>  (this.type.size == 0)
(this.isArray == true)  ==>  (this.type.typeName == null)
(this.isArray == true)  ==>  (this.type.value == 48)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isArray():::EXIT;condition="return == true"
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
return == true
orig(this) has only one value
===========================================================================
hep.io.root.output.StreamerFieldInfo.isArray():::EXIT;condition="not(return == true)"
this.isArray == false
this.counter == null
return == false
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicPointer():::ENTER
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicPointer():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
(this.isArray == false)  <==>  (return == false)
(this.isArray == false)  <==>  (this.counter == null)
(this.isArray == false)  ==>  (this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 })
(this.isArray == false)  ==>  (this.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class)
(this.isArray == false)  ==>  (this.fieldClassInfo.title.toString one of { "", "Array of doubles" })
(this.isArray == false)  ==>  (this.fieldClassInfo.type.value >= 2)
(this.isArray == false)  ==>  (this.parentClassInfo.type.typeName.toString one of { "TNamed", "TObject" })
(this.isArray == false)  ==>  (this.parentClassInfo.type.value one of { 62, 66, 67 })
(this.isArray == false)  ==>  (this.type.value >= 2)
(this.isArray == true)  <==>  (return == true)
(this.isArray == true)  <==>  (this.counter has only one value)
(this.isArray == true)  ==>  (hep.io.root.output.Type.types has only one value)
(this.isArray == true)  ==>  (orig(this) has only one value)
(this.isArray == true)  ==>  (this.counter.toString == "fBufferSize")
(this.isArray == true)  ==>  (this.fClass has only one value)
(this.isArray == true)  ==>  (this.field has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.checkSum == 0)
(this.isArray == true)  ==>  (this.fieldClassInfo.classDef == null)
(this.isArray == true)  ==>  (this.fieldClassInfo.fields has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.javaClass has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.title has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.title.toString == "")
(this.isArray == true)  ==>  (this.fieldClassInfo.type has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.size == 8)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.typeName has only one value)
(this.isArray == true)  ==>  (this.fieldClassInfo.type.typeName.toString == "Double_t")
(this.isArray == true)  ==>  (this.fieldClassInfo.type.value == 8)
(this.isArray == true)  ==>  (this.parentClassInfo has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.checkSum == -381522971)
(this.isArray == true)  ==>  (this.parentClassInfo.classDef has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.fields has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.javaClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.checkSum == -68599943)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.classDef has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.fields has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.javaClass has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.title has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)")
(this.isArray == true)  ==>  (this.parentClassInfo.superClass.type has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.title has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.title.toString == "1-Dim histogram base class")
(this.isArray == true)  ==>  (this.parentClassInfo.type has only one value)
(this.isArray == true)  ==>  (this.parentClassInfo.type.typeName == null)
(this.isArray == true)  ==>  (this.parentClassInfo.type.value == 62)
(this.isArray == true)  ==>  (this.title has only one value)
(this.isArray == true)  ==>  (this.title.toString == "entry buffer")
(this.isArray == true)  ==>  (this.type has only one value)
(this.isArray == true)  ==>  (this.type.size == 0)
(this.isArray == true)  ==>  (this.type.typeName == null)
(this.isArray == true)  ==>  (this.type.value == 48)
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicPointer():::EXIT;condition="return == true"
this.parentClassInfo has only one value
this.parentClassInfo.javaClass has only one value
this.parentClassInfo.classDef has only one value
this.parentClassInfo.title has only one value
this.parentClassInfo.title.toString == "1-Dim histogram base class"
this.parentClassInfo.checkSum == -381522971
this.parentClassInfo.fields has only one value
this.parentClassInfo.superClass has only one value
this.parentClassInfo.superClass.javaClass has only one value
this.parentClassInfo.superClass.classDef has only one value
this.parentClassInfo.superClass.title has only one value
this.parentClassInfo.superClass.title.toString == "The basis for a named object (name, title)"
this.parentClassInfo.superClass.checkSum == -68599943
this.parentClassInfo.superClass.fields has only one value
this.parentClassInfo.superClass.type has only one value
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
hep.io.root.output.Type.types has only one value
this.parentClassInfo.type.typeName == null
this.field has only one value
this.title has only one value
this.title.toString == "entry buffer"
this.isArray == true
this.counter has only one value
this.fClass has only one value
this.fieldClassInfo has only one value
this.fieldClassInfo.javaClass has only one value
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.fields has only one value
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 8
this.fieldClassInfo.type.size == 8
this.fieldClassInfo.type.typeName has only one value
this.fieldClassInfo.type.typeName.toString == "Double_t"
this.type has only one value
this.type.value == 48
this.type.size == 0
this.type.typeName == null
return == true
orig(this) has only one value
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicPointer():::EXIT;condition="not(return == true)"
this.isArray == false
this.counter == null
return == false
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicType():::ENTER
this.isBase == false
this.isArray == false
this.counter == null
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicType():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
(this.parentClassInfo.type.typeName.toString == "TNamed")  <==>  (return == false)
(this.parentClassInfo.type.typeName.toString == "TNamed")  <==>  (this.fieldClassInfo.type.value one of { 62, 65 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class)
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.fieldClassInfo.title.toString one of { "", "Array of doubles" })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.fieldClassInfo.type.size one of { 0, 8 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.fieldClassInfo.type.typeName.toString == "TString")
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.parentClassInfo.superClass != null)
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.parentClassInfo.superClass.checkSum one of { -68599943, 0, 1389979441 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.parentClassInfo.superClass.title.toString one of { "", "Basic ROOT object", "The basis for a named object (name, title)" })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.parentClassInfo.type.value one of { 62, 67 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.type.size one of { 0, 8 })
(this.parentClassInfo.type.typeName.toString == "TNamed")  ==>  (this.type.typeName.toString == "TString")
(this.parentClassInfo.type.typeName.toString == "TObject")  <==>  (return == true)
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.fieldClassInfo.checkSum == 0)
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.fieldClassInfo.classDef == null)
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.fieldClassInfo.title has only one value)
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.fieldClassInfo.title.toString == "")
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.fieldClassInfo.type.size is a power of 2)
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.parentClassInfo.type.value one of { 62, 66 })
(this.parentClassInfo.type.typeName.toString == "TObject")  ==>  (this.type.size is a power of 2)
this.isBase == false
this.isArray == false
this.counter == null
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicType():::EXIT;condition="return == true"
this.parentClassInfo.type.value one of { 62, 66 }
this.parentClassInfo.type.typeName.toString == "TObject"
this.fieldClassInfo.classDef == null
this.fieldClassInfo.title has only one value
this.fieldClassInfo.title.toString == ""
this.fieldClassInfo.checkSum == 0
this.fieldClassInfo.type.size is a power of 2
this.type.size is a power of 2
return == true
===========================================================================
hep.io.root.output.StreamerFieldInfo.isBasicType():::EXIT;condition="not(return == true)"
this.parentClassInfo.superClass != null
this.parentClassInfo.superClass.title.toString one of { "", "Basic ROOT object", "The basis for a named object (name, title)" }
this.parentClassInfo.superClass.checkSum one of { -68599943, 0, 1389979441 }
this.parentClassInfo.type.value one of { 62, 67 }
this.parentClassInfo.type.typeName.toString == "TNamed"
this.fieldClassInfo.type.value one of { 62, 65 }
this.fieldClassInfo.type.size one of { 0, 8 }
this.fieldClassInfo.type.typeName.toString == "TString"
this.type.size one of { 0, 8 }
this.type.typeName.toString == "TString"
return == false
===========================================================================
hep.io.root.output.StreamerFieldInfo.isSuper():::ENTER
===========================================================================
hep.io.root.output.StreamerFieldInfo.isSuper():::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.counter.toString == orig(this.counter.toString)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
(this.isBase == false)  <==>  (return == false)
(this.isBase == false)  ==>  (this.counter.toString == "fBufferSize")
(this.isBase == false)  ==>  (this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 })
(this.isBase == false)  ==>  (this.fieldClassInfo.title.toString one of { "", "Array of doubles" })
(this.isBase == false)  ==>  (this.fieldClassInfo.type.value >= 2)
(this.isBase == false)  ==>  (this.parentClassInfo.type.typeName.toString one of { "TNamed", "TObject" })
(this.isBase == false)  ==>  (this.parentClassInfo.type.value one of { 62, 66, 67 })
(this.isBase == false)  ==>  (this.type.value >= 2)
(this.isBase == true)  <==>  (return == true)
(this.isBase == true)  ==>  (this.counter == null)
(this.isBase == true)  ==>  (this.fieldClassInfo.type has only one value)
(this.isBase == true)  ==>  (this.fieldClassInfo.type.size == 0)
(this.isBase == true)  ==>  (this.fieldClassInfo.type.typeName == null)
(this.isBase == true)  ==>  (this.fieldClassInfo.type.value == 62)
(this.isBase == true)  ==>  (this.isArray == false)
(this.isBase == true)  ==>  (this.parentClassInfo.superClass.checkSum one of { -381522971, -68599943, 0 })
(this.isBase == true)  ==>  (this.parentClassInfo.superClass.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" })
(this.isBase == true)  ==>  (this.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" })
(this.isBase == true)  ==>  (this.parentClassInfo.type has only one value)
(this.isBase == true)  ==>  (this.parentClassInfo.type.typeName == null)
(this.isBase == true)  ==>  (this.parentClassInfo.type.value == 62)
(this.isBase == true)  ==>  (this.title has only one value)
(this.isBase == true)  ==>  (this.title.toString == "")
(this.isBase == true)  ==>  (this.type has only one value)
(this.isBase == true)  ==>  (this.type.size == 0)
(this.isBase == true)  ==>  (this.type.typeName == null)
(this.isBase == true)  ==>  (this.type.value == 62)
===========================================================================
hep.io.root.output.StreamerFieldInfo.isSuper():::EXIT;condition="return == true"
this.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
this.parentClassInfo.superClass.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
this.parentClassInfo.superClass.checkSum one of { -381522971, -68599943, 0 }
this.parentClassInfo.type has only one value
this.parentClassInfo.type.value == 62
this.parentClassInfo.type.typeName == null
this.title has only one value
this.title.toString == ""
this.isBase == true
this.isArray == false
this.counter == null
this.fieldClassInfo.type has only one value
this.fieldClassInfo.type.value == 62
this.fieldClassInfo.type.size == 0
this.fieldClassInfo.type.typeName == null
this.type has only one value
this.type.value == 62
this.type.size == 0
this.type.typeName == null
return == true
===========================================================================
hep.io.root.output.StreamerFieldInfo.isSuper():::EXIT;condition="not(return == true)"
this.isBase == false
this.fieldClassInfo.title.toString one of { "", "Array of doubles" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
return == false
===========================================================================
hep.io.root.output.StreamerFieldInfo.write(hep.io.root.output.RootOutput, java.lang.Object):::ENTER
this.parentClassInfo.type.value one of { 62, 67 }
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types != null
this.parentClassInfo.type.typeName.toString == "TNamed"
this.isArray == false
this.counter == null
this.fieldClassInfo.title.toString one of { "", "Array of doubles", "Axis Attributes" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 1395276684 }
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
arg1 != null
===========================================================================
hep.io.root.output.StreamerFieldInfo.write(hep.io.root.output.RootOutput, java.lang.Object):::EXIT
this.parentClassInfo == orig(this.parentClassInfo)
this.parentClassInfo.javaClass == orig(this.parentClassInfo.javaClass)
this.parentClassInfo.classDef == orig(this.parentClassInfo.classDef)
this.parentClassInfo.classDef.getClass().getName() == orig(this.parentClassInfo.classDef.getClass().getName())
this.parentClassInfo.title == orig(this.parentClassInfo.title)
this.parentClassInfo.title.toString == orig(this.parentClassInfo.title.toString)
this.parentClassInfo.checkSum == orig(this.parentClassInfo.checkSum)
this.parentClassInfo.fields == orig(this.parentClassInfo.fields)
this.parentClassInfo.fields.getClass().getName() == orig(this.parentClassInfo.fields.getClass().getName())
this.parentClassInfo.superClass == orig(this.parentClassInfo.superClass)
this.parentClassInfo.superClass.javaClass == orig(this.parentClassInfo.superClass.javaClass)
this.parentClassInfo.superClass.classDef == orig(this.parentClassInfo.superClass.classDef)
this.parentClassInfo.superClass.classDef.getClass().getName() == orig(this.parentClassInfo.superClass.classDef.getClass().getName())
this.parentClassInfo.superClass.title == orig(this.parentClassInfo.superClass.title)
this.parentClassInfo.superClass.title.toString == orig(this.parentClassInfo.superClass.title.toString)
this.parentClassInfo.superClass.checkSum == orig(this.parentClassInfo.superClass.checkSum)
this.parentClassInfo.superClass.fields == orig(this.parentClassInfo.superClass.fields)
this.parentClassInfo.superClass.fields.getClass().getName() == orig(this.parentClassInfo.superClass.fields.getClass().getName())
this.parentClassInfo.superClass.superClass == orig(this.parentClassInfo.superClass.superClass)
this.parentClassInfo.superClass.type == orig(this.parentClassInfo.superClass.type)
this.parentClassInfo.superClass.depenciesResolved == orig(this.parentClassInfo.superClass.depenciesResolved)
this.parentClassInfo.type == orig(this.parentClassInfo.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
this.parentClassInfo.type.value == orig(this.parentClassInfo.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
this.parentClassInfo.type.size == orig(this.parentClassInfo.type.size)
this.parentClassInfo.type.typeName == orig(this.parentClassInfo.type.typeName)
this.parentClassInfo.type.typeName.toString == orig(this.parentClassInfo.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.parentClassInfo.depenciesResolved == orig(this.parentClassInfo.depenciesResolved)
this.field == orig(this.field)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.isBase == orig(this.isBase)
this.isArray == orig(this.isArray)
this.counter == orig(this.counter)
this.fClass == orig(this.fClass)
this.fieldClassInfo == orig(this.fieldClassInfo)
this.fieldClassInfo.javaClass == orig(this.fieldClassInfo.javaClass)
this.fieldClassInfo.classDef == orig(this.fieldClassInfo.classDef)
this.fieldClassInfo.classDef.getClass().getName() == orig(this.fieldClassInfo.classDef.getClass().getName())
this.fieldClassInfo.title == orig(this.fieldClassInfo.title)
this.fieldClassInfo.title.toString == orig(this.fieldClassInfo.title.toString)
this.fieldClassInfo.checkSum == orig(this.fieldClassInfo.checkSum)
this.fieldClassInfo.fields == orig(this.fieldClassInfo.fields)
this.fieldClassInfo.fields.getClass().getName() == orig(this.fieldClassInfo.fields.getClass().getName())
this.fieldClassInfo.superClass == orig(this.fieldClassInfo.superClass)
this.fieldClassInfo.type == orig(this.fieldClassInfo.type)
this.fieldClassInfo.type.value == orig(this.fieldClassInfo.type.value)
this.fieldClassInfo.type.size == orig(this.fieldClassInfo.type.size)
this.fieldClassInfo.type.typeName == orig(this.fieldClassInfo.type.typeName)
this.fieldClassInfo.type.typeName.toString == orig(this.fieldClassInfo.type.typeName.toString)
this.fieldClassInfo.depenciesResolved == orig(this.fieldClassInfo.depenciesResolved)
this.type == orig(this.type)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.type.value == orig(this.type.value)
this.type.size == orig(this.type.size)
this.type.typeName == orig(this.type.typeName)
this.type.typeName.toString == orig(this.type.typeName.toString)
this.parentClassInfo.type.value one of { 62, 67 }
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types != null
this.parentClassInfo.type.typeName.toString == "TNamed"
this.isArray == false
this.counter == null
this.fieldClassInfo.title.toString one of { "", "Array of doubles", "Axis Attributes" }
this.fieldClassInfo.checkSum one of { 0, 302164956, 1395276684 }
===========================================================================
hep.io.root.output.StreamerUtilities.getClassInfo(java.lang.Class):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.StreamerUtilities.getClassInfo(java.lang.Class):::EXIT
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type.$VALUES.getClass().getName()
return != null
return.javaClass != null
return.classDef != null
return.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
return.title != null
return.fields != null
return.fields.getClass().getName() == java.util.LinkedHashMap.class
return.superClass == null
return.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
return.type.size one of { 0, 8 }
return.type.typeName.toString one of { "TNamed", "TObject", "TString" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
return.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
return.classDef.getClass().getName() != return.fields.getClass().getName()
return.classDef.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
return.classDef.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
return.classDef.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
return.fields.getClass().getName() != hep.io.root.output.Type.types.getClass().getName()
return.fields.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
return.fields.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
hep.io.root.output.Type.types.getClass().getName() != hep.io.root.output.Type.javaToRoot.getClass().getName()
hep.io.root.output.Type.javaToRoot.getClass().getName() != hep.io.root.output.Type.$VALUES.getClass().getName()
===========================================================================
hep.io.root.output.StreamerUtilities.getStreamerInfo(java.lang.Class):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.StreamerUtilities.getStreamerInfo(java.lang.Class):::EXIT
return.fElements.fLowerBound == return.fElements.fSize
return.fElements.fLowerBound == return.fElements.fUniqueID
return.fElements.fLowerBound == return.fUniqueID
return != null
return.fElements != null
return.fElements.fLowerBound == 0
return.fElements.name has only one value
return.fElements.name != null
return.fElements.name.toString == ""
return.fElements.list != null
return.fElements.list.getClass().getName() == java.util.ArrayList.class
return.fElements.fUniqueID == 0
return.fElements.fBits == 50331648
return.name != null
return.title != null
return.fUniqueID == 0
return.fBits == 50331648
return.fClassVersion >= return.fElements.fLowerBound
return.fCheckSum != return.fElements.fLowerBound
return.fElements.name.toString < return.name.toString
return.fElements.name.toString <= return.title.toString
===========================================================================
hep.io.root.output.TDirectory$KeyList:::OBJECT
this has only one value
this.list has only one value
this.list != null
this.list[] elements != null
this.list[].getClass().getName() elements == hep.io.root.output.TKey.class
===========================================================================
hep.io.root.output.TDirectory$KeyList.KeyList():::EXIT
this.list[] == []
this.list[].getClass().getName() == []
===========================================================================
hep.io.root.output.TDirectory$KeyList.add(hep.io.root.output.TKey):::ENTER
arg0.objects.getClass().getName() == arg0.tFile.dataRecords.getClass().getName()
arg0.objects.getClass().getName() == arg0.tFile.keyRecords.getClass().getName()
arg0.seekPDir has only one value
arg0.seekPDir.value == 0
arg0.seekPDir.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg0.fSeekKey.value == 0
arg0.fSeekKey.immutable == false
arg0.objects.getClass().getName() == java.util.ArrayList.class
arg0.objLen == 0
arg0.fDatimeC == null
arg0.keyLen == 0
arg0.size == 0
arg0.suppressStreamerInfo == false
arg0.compressionLevel == -1
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys == 0
arg0.tFile.fNbytesName == 0
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.objects[]) == 1
size(arg0.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TDirectory$KeyList.add(hep.io.root.output.TKey):::EXIT
this.list == orig(this.list)
arg0.objectClass == orig(arg0.objectClass)
arg0.className == orig(arg0.className)
arg0.className.toString == orig(arg0.className.toString)
arg0.seekPDir == orig(arg0.seekPDir)
arg0.seekPDir.value == orig(arg0.seekPDir.value)
arg0.seekPDir.immutable == orig(arg0.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
arg0.fSeekKey == orig(arg0.fSeekKey)
arg0.fSeekKey.value == orig(arg0.fSeekKey.value)
arg0.fSeekKey.immutable == orig(arg0.fSeekKey.immutable)
arg0.objects == orig(arg0.objects)
arg0.objects[] == orig(arg0.objects[])
arg0.objects.getClass().getName() == arg0.tFile.dataRecords.getClass().getName()
arg0.objects.getClass().getName() == arg0.tFile.keyRecords.getClass().getName()
arg0.objects.getClass().getName() == orig(arg0.objects.getClass().getName())
arg0.objects.getClass().getName() == orig(arg0.tFile.dataRecords.getClass().getName())
arg0.objects.getClass().getName() == orig(arg0.tFile.keyRecords.getClass().getName())
arg0.objLen == orig(arg0.objLen)
arg0.fDatimeC == orig(arg0.fDatimeC)
arg0.keyLen == orig(arg0.keyLen)
arg0.size == orig(arg0.size)
arg0.suppressStreamerInfo == orig(arg0.suppressStreamerInfo)
arg0.compressionLevel == orig(arg0.compressionLevel)
arg0.tFile == orig(arg0.tFile)
arg0.tFile.out == orig(arg0.tFile.out)
arg0.tFile.fEND == orig(arg0.tFile.fEND)
arg0.tFile.fSeekFree == orig(arg0.tFile.fSeekFree)
arg0.tFile.fNbytesFree == orig(arg0.tFile.fNbytesFree)
arg0.tFile.nfree == orig(arg0.tFile.nfree)
arg0.tFile.largeFile == orig(arg0.tFile.largeFile)
arg0.tFile.fCompress == orig(arg0.tFile.fCompress)
arg0.tFile.fSeekInfo == orig(arg0.tFile.fSeekInfo)
arg0.tFile.fNbytesInfo == orig(arg0.tFile.fNbytesInfo)
arg0.tFile.seekInfoRecord == orig(arg0.tFile.seekInfoRecord)
arg0.tFile.streamerInfos == orig(arg0.tFile.streamerInfos)
arg0.tFile.streamerInfos.getClass().getName() == orig(arg0.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
arg0.tFile.dataRecords == orig(arg0.tFile.dataRecords)
arg0.tFile.dataRecords[] == orig(arg0.tFile.dataRecords[])
arg0.tFile.keyRecords == orig(arg0.tFile.keyRecords)
arg0.tFile.keyRecords[] == orig(arg0.tFile.keyRecords[])
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg0.tFile.fDatimeC == orig(arg0.tFile.fDatimeC)
arg0.tFile.fDatimeF == orig(arg0.tFile.fDatimeF)
arg0.tFile.fNbytesKeys == orig(arg0.tFile.fNbytesKeys)
arg0.tFile.fNbytesName == orig(arg0.tFile.fNbytesName)
arg0.tFile.fSeekDir == orig(arg0.tFile.fSeekDir)
arg0.tFile.fSeekParent == orig(arg0.tFile.fSeekParent)
arg0.tFile.directoryRecord == orig(arg0.tFile.directoryRecord)
arg0.tFile.seekKeysRecord == orig(arg0.tFile.seekKeysRecord)
arg0.tFile.fSeekKeys == orig(arg0.tFile.fSeekKeys)
arg0.tFile.fUUID == orig(arg0.tFile.fUUID)
arg0.tFile.keyList == orig(arg0.tFile.keyList)
arg0.tFile.parent == orig(arg0.tFile.parent)
arg0.tFile.subdirectories == orig(arg0.tFile.subdirectories)
arg0.tFile.name == orig(arg0.tFile.name)
arg0.tFile.name.toString == orig(arg0.tFile.name.toString)
arg0.tFile.title == orig(arg0.tFile.title)
arg0.tFile.title.toString == orig(arg0.tFile.title.toString)
arg0.tFile.fUniqueID == orig(arg0.tFile.fUniqueID)
arg0.tFile.fBits == orig(arg0.tFile.fBits)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.fUniqueID == orig(arg0.fUniqueID)
arg0.fBits == orig(arg0.fBits)
size(this.list[])-1 == orig(size(this.list[]))
arg0.seekPDir has only one value
arg0.seekPDir.value == 0
arg0.seekPDir.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg0.fSeekKey.value == 0
arg0.fSeekKey.immutable == false
arg0.objects.getClass().getName() == java.util.ArrayList.class
arg0.objLen == 0
arg0.fDatimeC == null
arg0.keyLen == 0
arg0.size == 0
arg0.suppressStreamerInfo == false
arg0.compressionLevel == -1
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys == 0
arg0.tFile.fNbytesName == 0
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
arg0.fUniqueID == 0
arg0.fBits == 50331648
size(arg0.objects[]) == 1
size(arg0.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TDirectory$KeyList.write(hep.io.root.output.RootOutput):::ENTER
this.list[] contains no nulls and has only one value, of length 6
this.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0 has only one value
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
size(this.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory$KeyList.write(hep.io.root.output.RootOutput):::EXIT
this.list == orig(this.list)
this.list[] == orig(this.list[])
this.list[] contains no nulls and has only one value, of length 6
this.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory:::CLASS
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
===========================================================================
hep.io.root.output.TDirectory:::OBJECT
this has only one value
this.fDatimeC has only one value
this.fDatimeC != null
this.fDatimeC.fDatime == 2030791191
this.fDatimeF has only one value
this.fDatimeF != null
this.fDatimeF.fDatime == 2030791191
this.fNbytesKeys one of { 0, 427 }
this.fNbytesName one of { 0, 54 }
this.fSeekDir.value one of { 0, 100 }
this.fSeekDir.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
hep.io.root.output.Pointer.ZERO.value == 0
hep.io.root.output.Pointer.ZERO.immutable == true
this.fSeekParent has only one value
this.fSeekParent != null
this.fSeekParent.value == 0
this.fSeekParent.immutable == true
this.directoryRecord.objectClass has only one value
this.directoryRecord.objectClass != null
this.directoryRecord.className has only one value
this.directoryRecord.className != null
this.directoryRecord.className.toString == "TFile"
this.directoryRecord.seekPDir has only one value
this.directoryRecord.seekPDir != null
this.directoryRecord.seekPDir.value == 0
this.directoryRecord.seekPDir.immutable == true
this.directoryRecord.fSeekKey has only one value
this.directoryRecord.fSeekKey != null
this.directoryRecord.fSeekKey.value one of { 0, 100 }
this.directoryRecord.fSeekKey.immutable == false
this.directoryRecord.objects has only one value
this.directoryRecord.objects != null
this.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.directoryRecord.objects[] elements has only one value
this.directoryRecord.objects[] elements != null
this.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
this.directoryRecord.objLen one of { 0, 71 }
this.directoryRecord.fDatimeC.fDatime one of { 2030791191, 2030791199 }
this.directoryRecord.keyLen one of { 0, 43 }
this.directoryRecord.size one of { 0, 114 }
this.directoryRecord.suppressStreamerInfo == true
this.directoryRecord.compressionLevel == -1
this.directoryRecord.tFile has only one value
this.directoryRecord.tFile != null
this.directoryRecord.tFile.fEND has only one value
this.directoryRecord.tFile.fEND != null
this.directoryRecord.tFile.fSeekFree has only one value
this.directoryRecord.tFile.fSeekFree != null
this.directoryRecord.tFile.fNbytesFree has only one value
this.directoryRecord.tFile.fNbytesFree != null
this.directoryRecord.tFile.nfree == 0
this.directoryRecord.tFile.largeFile == false
this.directoryRecord.tFile.fCompress == 1
this.directoryRecord.tFile.fNbytesInfo has only one value
this.directoryRecord.tFile.fNbytesInfo != null
this.directoryRecord.tFile.streamerInfos has only one value
this.directoryRecord.tFile.streamerInfos != null
this.directoryRecord.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
this.directoryRecord.tFile.dataRecords has only one value
this.directoryRecord.tFile.dataRecords != null
this.directoryRecord.tFile.dataRecords[] elements != null
this.directoryRecord.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.directoryRecord.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
this.directoryRecord.tFile.keyRecords has only one value
this.directoryRecord.tFile.keyRecords != null
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[] elements has only one value
this.directoryRecord.tFile.keyRecords[] elements != null
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.directoryRecord.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
this.directoryRecord.tFile.fDatimeC has only one value
this.directoryRecord.tFile.fDatimeC != null
this.directoryRecord.tFile.fDatimeF has only one value
this.directoryRecord.tFile.fDatimeF != null
this.directoryRecord.tFile.fNbytesKeys one of { 0, 427 }
this.directoryRecord.tFile.fNbytesName one of { 0, 54 }
this.directoryRecord.tFile.fSeekDir has only one value
this.directoryRecord.tFile.fSeekDir != null
this.directoryRecord.tFile.fSeekParent has only one value
this.directoryRecord.tFile.fSeekParent != null
this.directoryRecord.tFile.directoryRecord has only one value
this.directoryRecord.tFile.directoryRecord != null
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.seekKeysRecord != null
this.directoryRecord.tFile.fSeekKeys has only one value
this.directoryRecord.tFile.fSeekKeys != null
this.directoryRecord.tFile.fUUID has only one value
this.directoryRecord.tFile.fUUID != null
this.directoryRecord.tFile.keyList has only one value
this.directoryRecord.tFile.keyList != null
this.directoryRecord.tFile.parent == null
this.directoryRecord.tFile.subdirectories has only one value
this.directoryRecord.tFile.subdirectories != null
this.directoryRecord.tFile.name has only one value
this.directoryRecord.tFile.name != null
this.directoryRecord.tFile.name.toString == "play.root"
this.directoryRecord.tFile.title has only one value
this.directoryRecord.tFile.title != null
this.directoryRecord.tFile.title.toString == ""
this.directoryRecord.tFile.fUniqueID == 0
this.directoryRecord.tFile.fBits == 50331648
this.directoryRecord.name has only one value
this.directoryRecord.name != null
this.directoryRecord.name.toString == "play.root"
this.directoryRecord.title has only one value
this.directoryRecord.title != null
this.directoryRecord.title.toString == ""
this.directoryRecord.fUniqueID == 0
this.directoryRecord.fBits == 50331648
this.seekKeysRecord.objectClass has only one value
this.seekKeysRecord.objectClass != null
this.seekKeysRecord.className has only one value
this.seekKeysRecord.className != null
this.seekKeysRecord.className.toString == "TFile"
this.seekKeysRecord.seekPDir has only one value
this.seekKeysRecord.seekPDir != null
this.seekKeysRecord.seekPDir.value one of { 0, 100 }
this.seekKeysRecord.seekPDir.immutable == false
this.seekKeysRecord.fSeekKey has only one value
this.seekKeysRecord.fSeekKey != null
this.seekKeysRecord.fSeekKey.value one of { 0, 70911 }
this.seekKeysRecord.fSeekKey.immutable == false
this.seekKeysRecord.objects has only one value
this.seekKeysRecord.objects != null
this.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.objects[] elements has only one value
this.seekKeysRecord.objects[] elements != null
this.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
this.seekKeysRecord.objLen one of { 0, 384 }
this.seekKeysRecord.fDatimeC.fDatime == 2030791199
this.seekKeysRecord.keyLen one of { 0, 43 }
this.seekKeysRecord.size one of { 0, 427 }
this.seekKeysRecord.suppressStreamerInfo == true
this.seekKeysRecord.compressionLevel == 0
this.seekKeysRecord.tFile has only one value
this.seekKeysRecord.tFile != null
this.seekKeysRecord.tFile.fEND has only one value
this.seekKeysRecord.tFile.fEND != null
this.seekKeysRecord.tFile.fSeekFree has only one value
this.seekKeysRecord.tFile.fSeekFree != null
this.seekKeysRecord.tFile.fNbytesFree has only one value
this.seekKeysRecord.tFile.fNbytesFree != null
this.seekKeysRecord.tFile.nfree == 0
this.seekKeysRecord.tFile.largeFile == false
this.seekKeysRecord.tFile.fCompress == 1
this.seekKeysRecord.tFile.fNbytesInfo has only one value
this.seekKeysRecord.tFile.fNbytesInfo != null
this.seekKeysRecord.tFile.streamerInfos has only one value
this.seekKeysRecord.tFile.streamerInfos != null
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
this.seekKeysRecord.tFile.dataRecords has only one value
this.seekKeysRecord.tFile.dataRecords != null
this.seekKeysRecord.tFile.dataRecords[] elements != null
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
this.seekKeysRecord.tFile.keyRecords has only one value
this.seekKeysRecord.tFile.keyRecords != null
this.seekKeysRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.tFile.keyRecords[] elements has only one value
this.seekKeysRecord.tFile.keyRecords[] elements != null
this.seekKeysRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekKeysRecord.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
this.seekKeysRecord.tFile.fDatimeC has only one value
this.seekKeysRecord.tFile.fDatimeC != null
this.seekKeysRecord.tFile.fDatimeF has only one value
this.seekKeysRecord.tFile.fDatimeF != null
this.seekKeysRecord.tFile.fNbytesKeys one of { 0, 427 }
this.seekKeysRecord.tFile.fNbytesName one of { 0, 54 }
this.seekKeysRecord.tFile.fSeekDir has only one value
this.seekKeysRecord.tFile.fSeekDir != null
this.seekKeysRecord.tFile.fSeekParent has only one value
this.seekKeysRecord.tFile.fSeekParent != null
this.seekKeysRecord.tFile.directoryRecord has only one value
this.seekKeysRecord.tFile.directoryRecord != null
this.seekKeysRecord.tFile.seekKeysRecord has only one value
this.seekKeysRecord.tFile.seekKeysRecord != null
this.seekKeysRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord.tFile.fSeekKeys != null
this.seekKeysRecord.tFile.fUUID has only one value
this.seekKeysRecord.tFile.fUUID != null
this.seekKeysRecord.tFile.keyList has only one value
this.seekKeysRecord.tFile.keyList != null
this.seekKeysRecord.tFile.parent == null
this.seekKeysRecord.tFile.subdirectories has only one value
this.seekKeysRecord.tFile.subdirectories != null
this.seekKeysRecord.tFile.name has only one value
this.seekKeysRecord.tFile.name != null
this.seekKeysRecord.tFile.name.toString == "play.root"
this.seekKeysRecord.tFile.title has only one value
this.seekKeysRecord.tFile.title != null
this.seekKeysRecord.tFile.title.toString == ""
this.seekKeysRecord.tFile.fUniqueID == 0
this.seekKeysRecord.tFile.fBits == 50331648
this.seekKeysRecord.name has only one value
this.seekKeysRecord.name != null
this.seekKeysRecord.name.toString == "play.root"
this.seekKeysRecord.title has only one value
this.seekKeysRecord.title != null
this.seekKeysRecord.title.toString == ""
this.seekKeysRecord.fUniqueID == 0
this.seekKeysRecord.fBits == 50331648
this.fSeekKeys.value one of { 0, 70911 }
this.fSeekKeys.immutable == false
this.fUUID has only one value
this.fUUID != null
this.fUUID.uuid has only one value
this.fUUID.uuid != null
this.keyList has only one value
this.keyList != null
this.keyList.list has only one value
this.keyList.list != null
this.keyList.list[] elements != null
this.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
this.parent == null
this.subdirectories has only one value
this.subdirectories != null
this.name has only one value
this.name != null
this.name.toString == "play.root"
this.title has only one value
this.title != null
this.title.toString == ""
this.fUniqueID == 0
this.fBits == 50331648
size(this.directoryRecord.objects[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) >= 1
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.objects[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) >= 1
size(this.seekKeysRecord.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TDirectory.TDirectory(java.lang.String, java.lang.String, hep.io.root.output.TDirectory):::ENTER
arg0 has only one value
arg0.toString == "play.root"
arg1 has only one value
arg1.toString == ""
arg2 == null
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
===========================================================================
hep.io.root.output.TDirectory.TDirectory(java.lang.String, java.lang.String, hep.io.root.output.TDirectory):::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir == null
this.directoryRecord == null
this.seekKeysRecord == null
this.fSeekKeys == null
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg0.toString == "play.root"
arg1.toString == ""
===========================================================================
hep.io.root.output.TDirectory.add(java.lang.Object):::ENTER
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.TDirectory.add(java.lang.Object):::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.keyRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
size(this.directoryRecord.tFile.dataRecords[])-1 == orig(size(this.directoryRecord.tFile.dataRecords[]))
size(this.seekKeysRecord.tFile.dataRecords[])-1 == orig(size(this.seekKeysRecord.tFile.dataRecords[]))
size(this.keyList.list[])-1 == orig(size(this.keyList.list[]))
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.TDirectory.addOwnRecords(hep.io.root.output.Pointer):::ENTER
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir == null
this.directoryRecord == null
this.seekKeysRecord == null
this.fSeekKeys == null
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg0 has only one value
arg0.value == 0
arg0.immutable == true
===========================================================================
hep.io.root.output.TDirectory.addOwnRecords(hep.io.root.output.Pointer):::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg0.value == orig(arg0.value)
arg0.immutable == orig(arg0.immutable)
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out == null
this.directoryRecord.tFile.fSeekInfo == null
this.directoryRecord.tFile.seekInfoRecord == null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.dataRecords[] elements has only one value
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.out == null
this.seekKeysRecord.tFile.fSeekInfo == null
this.seekKeysRecord.tFile.seekInfoRecord == null
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.tFile.dataRecords[] elements has only one value
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg0.value == 0
arg0.immutable == true
size(this.directoryRecord.tFile.dataRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 1
===========================================================================
hep.io.root.output.TDirectory.getNBytesName():::ENTER
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory.getNBytesName():::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.keyRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return == 54
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory.getTFile():::ENTER
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir.value == 0
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys.value == 0
===========================================================================
hep.io.root.output.TDirectory.getTFile():::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.keyRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir.value == 0
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys.value == 0
return has only one value
return.out.tFile has only one value
return.out.classMap has only one value
return.out.classMap.getClass().getName() == java.util.HashMap.class
return.fEND has only one value
return.fEND.value == 0
return.fEND.immutable == false
return.fSeekFree has only one value
return.fSeekFree.value == 0
return.fSeekFree.immutable == true
return.fNbytesFree has only one value
return.fNbytesFree.value == 0
return.fNbytesFree.immutable == true
return.nfree == 0
return.largeFile == false
return.fCompress == 1
return.fSeekInfo.value == 0
return.fSeekInfo.immutable == false
return.fNbytesInfo has only one value
return.fNbytesInfo.value == 0
return.fNbytesInfo.immutable == false
return.seekInfoRecord.objectClass has only one value
return.seekInfoRecord.className has only one value
return.seekInfoRecord.className.toString == "TList"
return.seekInfoRecord.seekPDir has only one value
return.seekInfoRecord.fSeekKey has only one value
return.seekInfoRecord.objects has only one value
return.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
return.seekInfoRecord.objects[] elements has only one value
return.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
return.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
return.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
return.seekInfoRecord.objLen == 0
return.seekInfoRecord.fDatimeC == null
return.seekInfoRecord.keyLen == 0
return.seekInfoRecord.size == 0
return.seekInfoRecord.suppressStreamerInfo == true
return.seekInfoRecord.compressionLevel == -1
return.seekInfoRecord.tFile has only one value
return.seekInfoRecord.name has only one value
return.seekInfoRecord.name.toString == "StreamerInfo"
return.seekInfoRecord.title has only one value
return.seekInfoRecord.title.toString == "Doubly linked list"
return.seekInfoRecord.fUniqueID == 0
return.seekInfoRecord.fBits == 50331648
return.streamerInfos has only one value
return.streamerInfos.getClass().getName() == java.util.HashMap.class
return.dataRecords has only one value
return.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.dataRecords.getClass().getName() == java.util.ArrayList.class
return.keyRecords has only one value
return.keyRecords[] elements has only one value
return.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
return.keyRecords.getClass().getName() == java.util.ArrayList.class
return.fDatimeC has only one value
return.fDatimeC.fDatime == 2030791191
return.fDatimeF has only one value
return.fDatimeF.fDatime == 2030791191
return.fNbytesKeys == 0
return.fNbytesName == 0
return.fSeekDir.value == 0
return.fSeekDir.immutable == false
return.fSeekParent has only one value
return.fSeekParent.value == 0
return.fSeekParent.immutable == true
return.directoryRecord.objectClass has only one value
return.directoryRecord.className has only one value
return.directoryRecord.className.toString == "TFile"
return.directoryRecord.seekPDir has only one value
return.directoryRecord.fSeekKey has only one value
return.directoryRecord.objects has only one value
return.directoryRecord.objects[] contains no nulls and has only one value, of length 1
return.directoryRecord.objects[] elements has only one value
return.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
return.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
return.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
return.directoryRecord.objLen == 0
return.directoryRecord.fDatimeC == null
return.directoryRecord.keyLen == 0
return.directoryRecord.size == 0
return.directoryRecord.suppressStreamerInfo == true
return.directoryRecord.compressionLevel == -1
return.directoryRecord.tFile has only one value
return.directoryRecord.name has only one value
return.directoryRecord.name.toString == "play.root"
return.directoryRecord.title has only one value
return.directoryRecord.title.toString == ""
return.directoryRecord.fUniqueID == 0
return.directoryRecord.fBits == 50331648
return.seekKeysRecord.objectClass has only one value
return.seekKeysRecord.className has only one value
return.seekKeysRecord.className.toString == "TFile"
return.seekKeysRecord.seekPDir has only one value
return.seekKeysRecord.fSeekKey has only one value
return.seekKeysRecord.objects has only one value
return.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
return.seekKeysRecord.objects[] elements has only one value
return.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
return.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
return.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
return.seekKeysRecord.objLen == 0
return.seekKeysRecord.fDatimeC == null
return.seekKeysRecord.keyLen == 0
return.seekKeysRecord.size == 0
return.seekKeysRecord.suppressStreamerInfo == true
return.seekKeysRecord.compressionLevel == 0
return.seekKeysRecord.tFile has only one value
return.seekKeysRecord.name has only one value
return.seekKeysRecord.name.toString == "play.root"
return.seekKeysRecord.title has only one value
return.seekKeysRecord.title.toString == ""
return.seekKeysRecord.fUniqueID == 0
return.seekKeysRecord.fBits == 50331648
return.fSeekKeys.value == 0
return.fSeekKeys.immutable == false
return.fUUID has only one value
return.fUUID.uuid has only one value
return.keyList has only one value
return.keyList.list has only one value
return.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
return.parent == null
return.subdirectories has only one value
return.name has only one value
return.name.toString == "play.root"
return.title has only one value
return.title.toString == ""
return.fUniqueID == 0
return.fBits == 50331648
size(return.seekInfoRecord.objects[]) == 1
size(return.keyRecords[]) one of { 0, 1 }
size(return.directoryRecord.objects[]) == 1
size(return.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TDirectory.getTimeWarp():::ENTER
===========================================================================
hep.io.root.output.TDirectory.getTimeWarp():::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
return == null
===========================================================================
hep.io.root.output.TDirectory.getUUID():::ENTER
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory.getUUID():::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.keyRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return has only one value
return.getClass().getName() == hep.io.root.output.classes.TUUID.class
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory.streamer(hep.io.root.output.RootOutput):::ENTER
this.fNbytesKeys == 0
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TDirectory.streamer(hep.io.root.output.RootOutput):::EXIT
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeF == orig(this.fDatimeF)
this.fDatimeF.fDatime == orig(this.fDatimeF.fDatime)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekParent == orig(this.fSeekParent)
this.fSeekParent.value == orig(this.fSeekParent.value)
this.fSeekParent.immutable == orig(this.fSeekParent.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.keyRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.keyRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesName == 54
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile:::OBJECT
this.out.tFile.streamerInfos.getClass().getName() == this.out.classMap.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.seekInfoRecord.objects.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.seekInfoRecord.objects.getClass().getName()
this.out.classMap.getClass().getName() == this.seekInfoRecord.tFile.streamerInfos.getClass().getName()
this.out.classMap.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.classMap.getClass().getName() == this.directoryRecord.tFile.streamerInfos.getClass().getName()
this.out.classMap.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.fSeekFree == this.fNbytesFree
this.fSeekFree == this.fSeekParent
this.fSeekFree.value == this.fNbytesFree.value
this.fSeekFree.value == this.fSeekParent.value
this.fSeekFree.immutable == this.fNbytesFree.immutable
this.fSeekFree.immutable == this.fSeekParent.immutable
this.seekInfoRecord.objects.getClass().getName() == this.seekInfoRecord.tFile.dataRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.seekInfoRecord.tFile.keyRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.directoryRecord.objects.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.directoryRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.objects.getClass().getName()
this.fDatimeC == this.fDatimeF
this.fDatimeC.fDatime == this.fDatimeF.fDatime
this.directoryRecord.objects.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.directoryRecord.objects.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this has only one value
this.out.tFile has only one value
this.out.tFile != null
this.out.tFile.out has only one value
this.out.tFile.out != null
this.out.tFile.fEND has only one value
this.out.tFile.fEND != null
this.out.tFile.fSeekFree has only one value
this.out.tFile.fSeekFree != null
this.out.tFile.fNbytesFree has only one value
this.out.tFile.fNbytesFree != null
this.out.tFile.nfree == 0
this.out.tFile.largeFile == false
this.out.tFile.fCompress == 1
this.out.tFile.fSeekInfo has only one value
this.out.tFile.fSeekInfo != null
this.out.tFile.fNbytesInfo has only one value
this.out.tFile.fNbytesInfo != null
this.out.tFile.seekInfoRecord has only one value
this.out.tFile.seekInfoRecord != null
this.out.tFile.streamerInfos has only one value
this.out.tFile.streamerInfos != null
hep.io.root.output.TFile.nameWarp == null
this.out.tFile.dataRecords has only one value
this.out.tFile.dataRecords != null
this.out.tFile.dataRecords[] elements != null
this.out.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.out.tFile.keyRecords has only one value
this.out.tFile.keyRecords != null
this.out.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.out.tFile.keyRecords[] elements has only one value
this.out.tFile.keyRecords[] elements != null
this.out.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.out.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
this.out.tFile.fDatimeC has only one value
this.out.tFile.fDatimeC != null
this.out.tFile.fDatimeF has only one value
this.out.tFile.fDatimeF != null
this.out.tFile.fNbytesKeys one of { 0, 427 }
this.out.tFile.fNbytesName one of { 0, 54 }
this.out.tFile.fSeekDir has only one value
this.out.tFile.fSeekDir != null
this.out.tFile.fSeekParent has only one value
this.out.tFile.fSeekParent != null
this.out.tFile.directoryRecord has only one value
this.out.tFile.directoryRecord != null
this.out.tFile.seekKeysRecord has only one value
this.out.tFile.seekKeysRecord != null
this.out.tFile.fSeekKeys has only one value
this.out.tFile.fSeekKeys != null
this.out.tFile.fUUID has only one value
this.out.tFile.fUUID != null
this.out.tFile.keyList has only one value
this.out.tFile.keyList != null
this.out.tFile.parent == null
this.out.tFile.subdirectories has only one value
this.out.tFile.subdirectories != null
this.out.tFile.name has only one value
this.out.tFile.name != null
this.out.tFile.name.toString == "play.root"
this.out.tFile.title has only one value
this.out.tFile.title != null
this.out.tFile.title.toString == ""
this.out.tFile.fUniqueID == 0
this.out.tFile.fBits == 50331648
this.out.classMap has only one value
this.out.classMap != null
this.out.classMap.getClass().getName() == java.util.HashMap.class
this.fEND has only one value
this.fEND != null
this.fEND.value one of { 0, 71338 }
this.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
hep.io.root.output.Pointer.ZERO.value == 0
hep.io.root.output.Pointer.ZERO.immutable == true
this.fSeekFree has only one value
this.fSeekFree != null
this.fSeekFree.value == 0
this.fSeekFree.immutable == true
this.nfree == 0
this.largeFile == false
this.fCompress == 1
this.fSeekInfo.value one of { 0, 67608 }
this.fSeekInfo.immutable == false
this.fNbytesInfo has only one value
this.fNbytesInfo != null
this.fNbytesInfo.value one of { 0, 3303 }
this.fNbytesInfo.immutable == false
this.seekInfoRecord.objectClass has only one value
this.seekInfoRecord.objectClass != null
this.seekInfoRecord.className has only one value
this.seekInfoRecord.className != null
this.seekInfoRecord.className.toString == "TList"
this.seekInfoRecord.seekPDir has only one value
this.seekInfoRecord.seekPDir != null
this.seekInfoRecord.seekPDir.value == 100
this.seekInfoRecord.seekPDir.immutable == false
this.seekInfoRecord.fSeekKey has only one value
this.seekInfoRecord.fSeekKey != null
this.seekInfoRecord.fSeekKey.value one of { 0, 67608 }
this.seekInfoRecord.fSeekKey.immutable == false
this.seekInfoRecord.objects has only one value
this.seekInfoRecord.objects != null
this.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.seekInfoRecord.objects[] elements has only one value
this.seekInfoRecord.objects[] elements != null
this.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
this.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
this.seekInfoRecord.objLen one of { 0, 12053 }
this.seekInfoRecord.fDatimeC.fDatime == 2030791195
this.seekInfoRecord.keyLen one of { 0, 64 }
this.seekInfoRecord.size one of { 0, 3303 }
this.seekInfoRecord.suppressStreamerInfo == true
this.seekInfoRecord.compressionLevel == -1
this.seekInfoRecord.tFile has only one value
this.seekInfoRecord.tFile != null
this.seekInfoRecord.tFile.out has only one value
this.seekInfoRecord.tFile.out != null
this.seekInfoRecord.tFile.fEND has only one value
this.seekInfoRecord.tFile.fEND != null
this.seekInfoRecord.tFile.fSeekFree has only one value
this.seekInfoRecord.tFile.fSeekFree != null
this.seekInfoRecord.tFile.fNbytesFree has only one value
this.seekInfoRecord.tFile.fNbytesFree != null
this.seekInfoRecord.tFile.nfree == 0
this.seekInfoRecord.tFile.largeFile == false
this.seekInfoRecord.tFile.fCompress == 1
this.seekInfoRecord.tFile.fSeekInfo has only one value
this.seekInfoRecord.tFile.fSeekInfo != null
this.seekInfoRecord.tFile.fNbytesInfo has only one value
this.seekInfoRecord.tFile.fNbytesInfo != null
this.seekInfoRecord.tFile.seekInfoRecord has only one value
this.seekInfoRecord.tFile.seekInfoRecord != null
this.seekInfoRecord.tFile.streamerInfos has only one value
this.seekInfoRecord.tFile.streamerInfos != null
this.seekInfoRecord.tFile.dataRecords has only one value
this.seekInfoRecord.tFile.dataRecords != null
this.seekInfoRecord.tFile.dataRecords[] elements != null
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekInfoRecord.tFile.keyRecords has only one value
this.seekInfoRecord.tFile.keyRecords != null
this.seekInfoRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.seekInfoRecord.tFile.keyRecords[] elements has only one value
this.seekInfoRecord.tFile.keyRecords[] elements != null
this.seekInfoRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekInfoRecord.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekInfoRecord.tFile.fDatimeC has only one value
this.seekInfoRecord.tFile.fDatimeC != null
this.seekInfoRecord.tFile.fDatimeF has only one value
this.seekInfoRecord.tFile.fDatimeF != null
this.seekInfoRecord.tFile.fNbytesKeys one of { 0, 427 }
this.seekInfoRecord.tFile.fNbytesName one of { 0, 54 }
this.seekInfoRecord.tFile.fSeekDir has only one value
this.seekInfoRecord.tFile.fSeekDir != null
this.seekInfoRecord.tFile.fSeekParent has only one value
this.seekInfoRecord.tFile.fSeekParent != null
this.seekInfoRecord.tFile.directoryRecord has only one value
this.seekInfoRecord.tFile.directoryRecord != null
this.seekInfoRecord.tFile.seekKeysRecord has only one value
this.seekInfoRecord.tFile.seekKeysRecord != null
this.seekInfoRecord.tFile.fSeekKeys has only one value
this.seekInfoRecord.tFile.fSeekKeys != null
this.seekInfoRecord.tFile.fUUID has only one value
this.seekInfoRecord.tFile.fUUID != null
this.seekInfoRecord.tFile.keyList has only one value
this.seekInfoRecord.tFile.keyList != null
this.seekInfoRecord.tFile.parent == null
this.seekInfoRecord.tFile.subdirectories has only one value
this.seekInfoRecord.tFile.subdirectories != null
this.seekInfoRecord.tFile.name has only one value
this.seekInfoRecord.tFile.name != null
this.seekInfoRecord.tFile.name.toString == "play.root"
this.seekInfoRecord.tFile.title has only one value
this.seekInfoRecord.tFile.title != null
this.seekInfoRecord.tFile.title.toString == ""
this.seekInfoRecord.tFile.fUniqueID == 0
this.seekInfoRecord.tFile.fBits == 50331648
this.seekInfoRecord.name has only one value
this.seekInfoRecord.name != null
this.seekInfoRecord.name.toString == "StreamerInfo"
this.seekInfoRecord.title has only one value
this.seekInfoRecord.title != null
this.seekInfoRecord.title.toString == "Doubly linked list"
this.seekInfoRecord.fUniqueID == 0
this.seekInfoRecord.fBits == 50331648
this.streamerInfos has only one value
this.streamerInfos != null
this.streamerInfos.getClass().getName() == java.util.HashMap.class
this.dataRecords has only one value
this.dataRecords != null
this.dataRecords[] elements != null
this.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.dataRecords.getClass().getName() == java.util.ArrayList.class
this.keyRecords has only one value
this.keyRecords != null
this.keyRecords[] elements has only one value
this.keyRecords[] elements != null
this.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
this.fDatimeC has only one value
this.fDatimeC != null
this.fDatimeC.fDatime == 2030791191
this.fNbytesKeys one of { 0, 427 }
this.fNbytesName one of { 0, 54 }
this.fSeekDir.value one of { 0, 100 }
this.fSeekDir.immutable == false
this.directoryRecord.objectClass has only one value
this.directoryRecord.objectClass != null
this.directoryRecord.className has only one value
this.directoryRecord.className != null
this.directoryRecord.className.toString == "TFile"
this.directoryRecord.seekPDir has only one value
this.directoryRecord.seekPDir != null
this.directoryRecord.seekPDir.value == 0
this.directoryRecord.seekPDir.immutable == true
this.directoryRecord.fSeekKey has only one value
this.directoryRecord.fSeekKey != null
this.directoryRecord.fSeekKey.value one of { 0, 100 }
this.directoryRecord.fSeekKey.immutable == false
this.directoryRecord.objects has only one value
this.directoryRecord.objects != null
this.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.directoryRecord.objects[] elements has only one value
this.directoryRecord.objects[] elements != null
this.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
this.directoryRecord.objLen one of { 0, 71 }
this.directoryRecord.fDatimeC.fDatime one of { 2030791191, 2030791199 }
this.directoryRecord.keyLen one of { 0, 43 }
this.directoryRecord.size one of { 0, 114 }
this.directoryRecord.suppressStreamerInfo == true
this.directoryRecord.compressionLevel == -1
this.directoryRecord.tFile has only one value
this.directoryRecord.tFile != null
this.directoryRecord.tFile.fEND has only one value
this.directoryRecord.tFile.fEND != null
this.directoryRecord.tFile.fSeekFree has only one value
this.directoryRecord.tFile.fSeekFree != null
this.directoryRecord.tFile.fNbytesFree has only one value
this.directoryRecord.tFile.fNbytesFree != null
this.directoryRecord.tFile.nfree == 0
this.directoryRecord.tFile.largeFile == false
this.directoryRecord.tFile.fCompress == 1
this.directoryRecord.tFile.fNbytesInfo has only one value
this.directoryRecord.tFile.fNbytesInfo != null
this.directoryRecord.tFile.streamerInfos has only one value
this.directoryRecord.tFile.streamerInfos != null
this.directoryRecord.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
this.directoryRecord.tFile.dataRecords has only one value
this.directoryRecord.tFile.dataRecords != null
this.directoryRecord.tFile.dataRecords[] elements != null
this.directoryRecord.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.directoryRecord.tFile.keyRecords has only one value
this.directoryRecord.tFile.keyRecords != null
this.directoryRecord.tFile.keyRecords[] elements has only one value
this.directoryRecord.tFile.keyRecords[] elements != null
this.directoryRecord.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.directoryRecord.tFile.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
this.directoryRecord.tFile.fDatimeC has only one value
this.directoryRecord.tFile.fDatimeC != null
this.directoryRecord.tFile.fDatimeF has only one value
this.directoryRecord.tFile.fDatimeF != null
this.directoryRecord.tFile.fNbytesKeys one of { 0, 427 }
this.directoryRecord.tFile.fNbytesName one of { 0, 54 }
this.directoryRecord.tFile.fSeekDir has only one value
this.directoryRecord.tFile.fSeekDir != null
this.directoryRecord.tFile.fSeekParent has only one value
this.directoryRecord.tFile.fSeekParent != null
this.directoryRecord.tFile.directoryRecord has only one value
this.directoryRecord.tFile.directoryRecord != null
this.directoryRecord.tFile.fUUID has only one value
this.directoryRecord.tFile.fUUID != null
this.directoryRecord.tFile.keyList has only one value
this.directoryRecord.tFile.keyList != null
this.directoryRecord.tFile.parent == null
this.directoryRecord.tFile.subdirectories has only one value
this.directoryRecord.tFile.subdirectories != null
this.directoryRecord.tFile.name has only one value
this.directoryRecord.tFile.name != null
this.directoryRecord.tFile.name.toString == "play.root"
this.directoryRecord.tFile.title has only one value
this.directoryRecord.tFile.title != null
this.directoryRecord.tFile.title.toString == ""
this.directoryRecord.tFile.fUniqueID == 0
this.directoryRecord.tFile.fBits == 50331648
this.directoryRecord.name has only one value
this.directoryRecord.name != null
this.directoryRecord.name.toString == "play.root"
this.directoryRecord.title has only one value
this.directoryRecord.title != null
this.directoryRecord.title.toString == ""
this.directoryRecord.fUniqueID == 0
this.directoryRecord.fBits == 50331648
this.seekKeysRecord.objectClass has only one value
this.seekKeysRecord.objectClass != null
this.seekKeysRecord.className has only one value
this.seekKeysRecord.className != null
this.seekKeysRecord.className.toString == "TFile"
this.seekKeysRecord.seekPDir has only one value
this.seekKeysRecord.seekPDir != null
this.seekKeysRecord.seekPDir.value one of { 0, 100 }
this.seekKeysRecord.seekPDir.immutable == false
this.seekKeysRecord.fSeekKey has only one value
this.seekKeysRecord.fSeekKey != null
this.seekKeysRecord.fSeekKey.value one of { 0, 70911 }
this.seekKeysRecord.fSeekKey.immutable == false
this.seekKeysRecord.objects has only one value
this.seekKeysRecord.objects != null
this.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.objects[] elements has only one value
this.seekKeysRecord.objects[] elements != null
this.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.seekKeysRecord.objLen one of { 0, 384 }
this.seekKeysRecord.fDatimeC.fDatime == 2030791199
this.seekKeysRecord.keyLen one of { 0, 43 }
this.seekKeysRecord.size one of { 0, 427 }
this.seekKeysRecord.suppressStreamerInfo == true
this.seekKeysRecord.compressionLevel == 0
this.seekKeysRecord.tFile has only one value
this.seekKeysRecord.tFile != null
this.seekKeysRecord.tFile.out has only one value
this.seekKeysRecord.tFile.out != null
this.seekKeysRecord.tFile.fEND has only one value
this.seekKeysRecord.tFile.fEND != null
this.seekKeysRecord.tFile.fSeekFree has only one value
this.seekKeysRecord.tFile.fSeekFree != null
this.seekKeysRecord.tFile.fNbytesFree has only one value
this.seekKeysRecord.tFile.fNbytesFree != null
this.seekKeysRecord.tFile.nfree == 0
this.seekKeysRecord.tFile.largeFile == false
this.seekKeysRecord.tFile.fCompress == 1
this.seekKeysRecord.tFile.fSeekInfo has only one value
this.seekKeysRecord.tFile.fSeekInfo != null
this.seekKeysRecord.tFile.fNbytesInfo has only one value
this.seekKeysRecord.tFile.fNbytesInfo != null
this.seekKeysRecord.tFile.seekInfoRecord has only one value
this.seekKeysRecord.tFile.seekInfoRecord != null
this.seekKeysRecord.tFile.streamerInfos has only one value
this.seekKeysRecord.tFile.streamerInfos != null
this.seekKeysRecord.tFile.dataRecords has only one value
this.seekKeysRecord.tFile.dataRecords != null
this.seekKeysRecord.tFile.dataRecords[] elements != null
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekKeysRecord.tFile.keyRecords has only one value
this.seekKeysRecord.tFile.keyRecords != null
this.seekKeysRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.tFile.keyRecords[] elements has only one value
this.seekKeysRecord.tFile.keyRecords[] elements != null
this.seekKeysRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekKeysRecord.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.seekKeysRecord.tFile.fDatimeC has only one value
this.seekKeysRecord.tFile.fDatimeC != null
this.seekKeysRecord.tFile.fDatimeF has only one value
this.seekKeysRecord.tFile.fDatimeF != null
this.seekKeysRecord.tFile.fNbytesKeys one of { 0, 427 }
this.seekKeysRecord.tFile.fNbytesName one of { 0, 54 }
this.seekKeysRecord.tFile.fSeekDir has only one value
this.seekKeysRecord.tFile.fSeekDir != null
this.seekKeysRecord.tFile.fSeekParent has only one value
this.seekKeysRecord.tFile.fSeekParent != null
this.seekKeysRecord.tFile.directoryRecord has only one value
this.seekKeysRecord.tFile.directoryRecord != null
this.seekKeysRecord.tFile.seekKeysRecord has only one value
this.seekKeysRecord.tFile.seekKeysRecord != null
this.seekKeysRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord.tFile.fSeekKeys != null
this.seekKeysRecord.tFile.fUUID has only one value
this.seekKeysRecord.tFile.fUUID != null
this.seekKeysRecord.tFile.keyList has only one value
this.seekKeysRecord.tFile.keyList != null
this.seekKeysRecord.tFile.parent == null
this.seekKeysRecord.tFile.subdirectories has only one value
this.seekKeysRecord.tFile.subdirectories != null
this.seekKeysRecord.tFile.name has only one value
this.seekKeysRecord.tFile.name != null
this.seekKeysRecord.tFile.name.toString == "play.root"
this.seekKeysRecord.tFile.title has only one value
this.seekKeysRecord.tFile.title != null
this.seekKeysRecord.tFile.title.toString == ""
this.seekKeysRecord.tFile.fUniqueID == 0
this.seekKeysRecord.tFile.fBits == 50331648
this.seekKeysRecord.name has only one value
this.seekKeysRecord.name != null
this.seekKeysRecord.name.toString == "play.root"
this.seekKeysRecord.title has only one value
this.seekKeysRecord.title != null
this.seekKeysRecord.title.toString == ""
this.seekKeysRecord.fUniqueID == 0
this.seekKeysRecord.fBits == 50331648
this.fSeekKeys.value one of { 0, 70911 }
this.fSeekKeys.immutable == false
this.fUUID has only one value
this.fUUID != null
this.fUUID.uuid has only one value
this.fUUID.uuid != null
this.keyList has only one value
this.keyList != null
this.keyList.list has only one value
this.keyList.list != null
this.keyList.list[] elements != null
this.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
this.parent == null
this.subdirectories has only one value
this.subdirectories != null
this.name has only one value
this.name != null
this.name.toString == "play.root"
this.title has only one value
this.title != null
this.title.toString == ""
this.fUniqueID == 0
this.fBits == 50331648
size(this.out.tFile.keyRecords[]) == 1
size(this.seekInfoRecord.objects[]) == 1
size(this.seekInfoRecord.tFile.keyRecords[]) == 1
size(this.keyRecords[]) one of { 0, 1 }
size(this.directoryRecord.objects[]) == 1
size(this.directoryRecord.tFile.keyRecords[]) one of { 0, 1 }
size(this.seekKeysRecord.objects[]) == 1
size(this.seekKeysRecord.tFile.keyRecords[]) == 1
this.out.classMap.getClass().getName() != this.seekInfoRecord.objects.getClass().getName()
this.out.classMap.getClass().getName() != this.dataRecords.getClass().getName()
this.out.classMap.getClass().getName() != this.directoryRecord.objects.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() != this.streamerInfos.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() != this.directoryRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() != this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() != this.directoryRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() != this.directoryRecord.tFile.streamerInfos.getClass().getName()
this.directoryRecord.objects.getClass().getName() != this.directoryRecord.tFile.streamerInfos.getClass().getName()
===========================================================================
hep.io.root.output.TFile.TFile(java.io.File):::ENTER
arg0 has only one value
===========================================================================
hep.io.root.output.TFile.TFile(java.io.File):::EXIT
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.out.tFile.dataRecords[] elements has only one value
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo has only one value
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.seekInfoRecord.tFile.dataRecords[] elements has only one value
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.dataRecords[] contains no nulls and has only one value, of length 1
this.dataRecords[] elements has only one value
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.dataRecords[] elements has only one value
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.tFile.dataRecords[] elements has only one value
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
size(this.out.tFile.dataRecords[]) == 1
size(this.seekInfoRecord.tFile.dataRecords[]) == 1
size(this.dataRecords[]) == 1
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 1
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 1
===========================================================================
hep.io.root.output.TFile.TFile(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "play.root"
===========================================================================
hep.io.root.output.TFile.TFile(java.lang.String):::EXIT
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
arg0.toString == orig(arg0.toString)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.out.tFile.dataRecords[] elements has only one value
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo has only one value
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.seekInfoRecord.tFile.dataRecords[] elements has only one value
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.dataRecords[] contains no nulls and has only one value, of length 1
this.dataRecords[] elements has only one value
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.dataRecords[] elements has only one value
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.seekKeysRecord.tFile.dataRecords[] elements has only one value
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg0.toString == "play.root"
size(this.out.tFile.dataRecords[]) == 1
size(this.seekInfoRecord.tFile.dataRecords[]) == 1
size(this.dataRecords[]) == 1
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 1
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 1
===========================================================================
hep.io.root.output.TFile.addKeyListRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::ENTER
this.out == null
this.fEND.value == 0
this.fSeekInfo == null
this.fNbytesInfo.value == 0
this.seekInfoRecord == null
this.dataRecords[] contains no nulls and has only one value, of length 1
this.dataRecords[] elements has only one value
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.keyRecords[] == []
this.keyRecords[].getClass().getName() == []
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out == null
this.directoryRecord.tFile.fSeekInfo == null
this.directoryRecord.tFile.seekInfoRecord == null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.dataRecords[] elements has only one value
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] == []
this.directoryRecord.tFile.keyRecords[].getClass().getName() == []
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord == null
this.directoryRecord.tFile.fSeekKeys == null
this.seekKeysRecord == null
this.fSeekKeys == null
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg0 has only one value
arg1 has only one value
arg1.toString == "play.root"
arg2 has only one value
arg2.toString == ""
arg3 has only one value
arg3.value == 0
arg3.immutable == false
arg4 == true
size(this.dataRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 1
===========================================================================
hep.io.root.output.TFile.addKeyListRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::EXIT
this.out == orig(this.out)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.streamerInfos == orig(this.streamerInfos)
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.keyRecords == orig(this.keyRecords)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.fSeekKeys == orig(this.fSeekKeys)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg1.toString == orig(arg1.toString)
arg2.toString == orig(arg2.toString)
arg3.value == orig(arg3.value)
arg3.immutable == orig(arg3.immutable)
size(this.keyRecords[])-1 == orig(size(this.keyRecords[]))
size(this.directoryRecord.tFile.keyRecords[])-1 == orig(size(this.directoryRecord.tFile.keyRecords[]))
this.out == null
this.fEND.value == 0
this.fSeekInfo == null
this.fNbytesInfo.value == 0
this.seekInfoRecord == null
this.dataRecords[] contains no nulls and has only one value, of length 1
this.dataRecords[] elements has only one value
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out == null
this.directoryRecord.tFile.fSeekInfo == null
this.directoryRecord.tFile.seekInfoRecord == null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.dataRecords[] elements has only one value
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord == null
this.directoryRecord.tFile.fSeekKeys == null
this.seekKeysRecord == null
this.fSeekKeys == null
this.keyList.list[] == []
this.keyList.list[].getClass().getName() == []
arg1.toString == "play.root"
arg2.toString == ""
arg3.value == 0
arg3.immutable == false
return has only one value
return.objectClass has only one value
return.className has only one value
return.className.toString == "TFile"
return.seekPDir has only one value
return.seekPDir.value == 0
return.seekPDir.immutable == false
return.fSeekKey has only one value
return.fSeekKey.value == 0
return.fSeekKey.immutable == false
return.objects has only one value
return.objects[] == []
return.objects[].getClass().getName() == []
return.objLen == 0
return.fDatimeC == null
return.keyLen == 0
return.size == 0
return.suppressStreamerInfo == true
return.compressionLevel == -1
return.tFile has only one value
return.tFile.out == null
return.tFile.fEND has only one value
return.tFile.fSeekFree has only one value
return.tFile.fNbytesFree has only one value
return.tFile.nfree == 0
return.tFile.largeFile == false
return.tFile.fCompress == 1
return.tFile.fSeekInfo == null
return.tFile.fNbytesInfo has only one value
return.tFile.seekInfoRecord == null
return.tFile.streamerInfos has only one value
return.tFile.dataRecords has only one value
return.tFile.dataRecords[] contains no nulls and has only one value, of length 1
return.tFile.dataRecords[] elements has only one value
return.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
return.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.tFile.keyRecords has only one value
return.tFile.keyRecords[] contains no nulls and has only one value, of length 1
return.tFile.keyRecords[] elements has only one value
return.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
return.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.tFile.fDatimeC has only one value
return.tFile.fDatimeF has only one value
return.tFile.fNbytesKeys == 0
return.tFile.fNbytesName == 0
return.tFile.fSeekDir has only one value
return.tFile.fSeekParent has only one value
return.tFile.directoryRecord has only one value
return.tFile.seekKeysRecord == null
return.tFile.fSeekKeys == null
return.tFile.fUUID has only one value
return.tFile.keyList has only one value
return.tFile.parent == null
return.tFile.subdirectories has only one value
return.tFile.name has only one value
return.tFile.name.toString == "play.root"
return.tFile.title has only one value
return.tFile.title.toString == ""
return.tFile.fUniqueID == 0
return.tFile.fBits == 50331648
return.name has only one value
return.name.toString == "play.root"
return.title has only one value
return.title.toString == ""
return.fUniqueID == 0
return.fBits == 50331648
size(this.dataRecords[]) == 1
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 1
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(return.tFile.dataRecords[]) == 1
size(return.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TFile.addRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::ENTER
this.seekInfoRecord.objects.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir.value == 0
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys.value == 0
arg2.toString one of { "", "Histogram created from Java", "Profile created from Java" }
arg3.value == 0
size(this.directoryRecord.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TFile.addRecord(java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fNbytesKeys == orig(this.out.tFile.fNbytesKeys)
this.out.tFile.fNbytesName == orig(this.out.tFile.fNbytesName)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.out.classMap.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.out.classMap.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.out.classMap.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.out.classMap.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.out.classMap.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objects.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.seekInfoRecord.objects.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.seekInfoRecord.objects.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fNbytesKeys == orig(this.seekInfoRecord.tFile.fNbytesKeys)
this.seekInfoRecord.tFile.fNbytesName == orig(this.seekInfoRecord.tFile.fNbytesName)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == return.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords.getClass().getName() == return.objects.getClass().getName()
this.dataRecords.getClass().getName() == return.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == return.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg1.toString == orig(arg1.toString)
arg2.toString == orig(arg2.toString)
arg3.value == orig(arg3.value)
arg3.immutable == orig(arg3.immutable)
size(this.out.tFile.dataRecords[])-1 == orig(size(this.out.tFile.dataRecords[]))
size(this.seekInfoRecord.tFile.dataRecords[])-1 == orig(size(this.seekInfoRecord.tFile.dataRecords[]))
size(this.dataRecords[])-1 == orig(size(this.dataRecords[]))
size(this.directoryRecord.tFile.dataRecords[])-1 == orig(size(this.directoryRecord.tFile.dataRecords[]))
size(this.seekKeysRecord.tFile.dataRecords[])-1 == orig(size(this.seekKeysRecord.tFile.dataRecords[]))
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir.value == 0
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys.value == 0
arg2.toString one of { "", "Histogram created from Java", "Profile created from Java" }
arg3.value == 0
return.seekPDir.value == 0
return.fSeekKey.value == 0
return.fSeekKey.immutable == false
return.objects[] == []
return.objects[].getClass().getName() == []
return.objLen == 0
return.fDatimeC == null
return.keyLen == 0
return.size == 0
return.compressionLevel == -1
return.tFile has only one value
return.tFile.fEND has only one value
return.tFile.fSeekFree has only one value
return.tFile.fNbytesFree has only one value
return.tFile.nfree == 0
return.tFile.largeFile == false
return.tFile.fCompress == 1
return.tFile.fNbytesInfo has only one value
return.tFile.streamerInfos has only one value
return.tFile.dataRecords has only one value
return.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.tFile.keyRecords has only one value
return.tFile.keyRecords[] elements has only one value
return.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
return.tFile.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
return.tFile.fDatimeC has only one value
return.tFile.fDatimeF has only one value
return.tFile.fNbytesKeys == 0
return.tFile.fNbytesName == 0
return.tFile.fSeekParent has only one value
return.tFile.fUUID has only one value
return.tFile.keyList has only one value
return.tFile.parent == null
return.tFile.subdirectories has only one value
return.tFile.name has only one value
return.tFile.name.toString == "play.root"
return.tFile.title has only one value
return.tFile.title.toString == ""
return.tFile.fUniqueID == 0
return.tFile.fBits == 50331648
return.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
return.fUniqueID == 0
return.fBits == 50331648
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(return.tFile.keyRecords[]) one of { 0, 1 }
===========================================================================
hep.io.root.output.TFile.close():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo has only one value
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.close():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 427
this.out.tFile.fNbytesName == 54
this.fEND.value == 71338
this.fSeekInfo has only one value
this.fSeekInfo.value == 67608
this.fNbytesInfo.value == 3303
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 67608
this.seekInfoRecord.objLen == 12053
this.seekInfoRecord.fDatimeC has only one value
this.seekInfoRecord.keyLen == 64
this.seekInfoRecord.size == 3303
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 427
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.flush():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 0
this.out.tFile.fNbytesName == 0
this.fEND.value == 0
this.fSeekInfo has only one value
this.fSeekInfo.value == 0
this.fNbytesInfo.value == 0
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 0
this.seekInfoRecord.objLen == 0
this.seekInfoRecord.fDatimeC == null
this.seekInfoRecord.keyLen == 0
this.seekInfoRecord.size == 0
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.seekInfoRecord.tFile.fNbytesName == 0
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fNbytesName == 0
this.fSeekDir has only one value
this.fSeekDir.value == 0
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 0
this.directoryRecord.objLen == 0
this.directoryRecord.fDatimeC == null
this.directoryRecord.keyLen == 0
this.directoryRecord.size == 0
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.fNbytesName == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 0
this.seekKeysRecord.fSeekKey.value == 0
this.seekKeysRecord.objLen == 0
this.seekKeysRecord.fDatimeC == null
this.seekKeysRecord.keyLen == 0
this.seekKeysRecord.size == 0
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.seekKeysRecord.tFile.fNbytesName == 0
this.fSeekKeys has only one value
this.fSeekKeys.value == 0
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.flush():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 427
this.out.tFile.fNbytesName == 54
this.fEND.value == 71338
this.fSeekInfo has only one value
this.fSeekInfo.value == 67608
this.fNbytesInfo.value == 3303
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 67608
this.seekInfoRecord.objLen == 12053
this.seekInfoRecord.fDatimeC has only one value
this.seekInfoRecord.keyLen == 64
this.seekInfoRecord.size == 3303
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 427
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.getCompressionLevel():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesName == 54
this.fSeekInfo has only one value
this.seekInfoRecord has only one value
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.getCompressionLevel():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fNbytesKeys == orig(this.out.tFile.fNbytesKeys)
this.out.tFile.fNbytesName == orig(this.out.tFile.fNbytesName)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.fDatimeC.fDatime == orig(this.seekInfoRecord.fDatimeC.fDatime)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fNbytesKeys == orig(this.seekInfoRecord.tFile.fNbytesKeys)
this.seekInfoRecord.tFile.fNbytesName == orig(this.seekInfoRecord.tFile.fNbytesName)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesName == 54
this.fSeekInfo has only one value
this.seekInfoRecord has only one value
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return == 1
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.getStreamerInfos():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out != null
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekInfo has only one value
this.fSeekInfo != null
this.seekInfoRecord has only one value
this.seekInfoRecord != null
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fSeekDir has only one value
this.fSeekDir != null
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord != null
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.fDatimeC != null
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.out != null
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.fSeekInfo != null
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.seekInfoRecord != null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.seekKeysRecord != null
this.directoryRecord.tFile.fSeekKeys has only one value
this.directoryRecord.tFile.fSeekKeys != null
this.seekKeysRecord has only one value
this.seekKeysRecord != null
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekKeys has only one value
this.fSeekKeys != null
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.getStreamerInfos():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == return.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fNbytesKeys == orig(this.out.tFile.fNbytesKeys)
this.out.tFile.fNbytesName == orig(this.out.tFile.fNbytesName)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.out.classMap.getClass().getName() == return.getClass().getName()
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.fDatimeC.fDatime == orig(this.seekInfoRecord.fDatimeC.fDatime)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == return.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fNbytesKeys == orig(this.seekInfoRecord.tFile.fNbytesKeys)
this.seekInfoRecord.tFile.fNbytesName == orig(this.seekInfoRecord.tFile.fNbytesName)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == return.getClass().getName()
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.streamerInfos.getClass().getName() == return.getClass().getName()
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.streamerInfos.getClass().getName() == return.getClass().getName()
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
return.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
return.getClass().getName() == orig(this.out.classMap.getClass().getName())
return.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
return.getClass().getName() == orig(this.streamerInfos.getClass().getName())
return.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
return.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.out has only one value
this.out != null
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekInfo has only one value
this.fSeekInfo != null
this.seekInfoRecord has only one value
this.seekInfoRecord != null
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fSeekDir has only one value
this.fSeekDir != null
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord != null
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.fDatimeC != null
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.out != null
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.fSeekInfo != null
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.seekInfoRecord != null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.seekKeysRecord != null
this.directoryRecord.tFile.fSeekKeys has only one value
this.directoryRecord.tFile.fSeekKeys != null
this.seekKeysRecord has only one value
this.seekKeysRecord != null
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekKeys has only one value
this.fSeekKeys != null
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return has only one value
return != null
return.getClass().getName() == java.util.HashMap.class
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
this.dataRecords.getClass().getName() != return.getClass().getName()
===========================================================================
hep.io.root.output.TFile.isLargeFile():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out != null
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekInfo has only one value
this.fSeekInfo != null
this.seekInfoRecord has only one value
this.seekInfoRecord != null
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fSeekDir has only one value
this.fSeekDir != null
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord != null
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.fDatimeC != null
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.out != null
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.fSeekInfo != null
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.seekInfoRecord != null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.seekKeysRecord != null
this.directoryRecord.tFile.fSeekKeys has only one value
this.directoryRecord.tFile.fSeekKeys != null
this.seekKeysRecord has only one value
this.seekKeysRecord != null
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekKeys has only one value
this.fSeekKeys != null
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.isLargeFile():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fNbytesKeys == orig(this.out.tFile.fNbytesKeys)
this.out.tFile.fNbytesName == orig(this.out.tFile.fNbytesName)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.fDatimeC.fDatime == orig(this.seekInfoRecord.fDatimeC.fDatime)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fNbytesKeys == orig(this.seekInfoRecord.tFile.fNbytesKeys)
this.seekInfoRecord.tFile.fNbytesName == orig(this.seekInfoRecord.tFile.fNbytesName)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out != null
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekInfo has only one value
this.fSeekInfo != null
this.seekInfoRecord has only one value
this.seekInfoRecord != null
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fSeekDir has only one value
this.fSeekDir != null
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord != null
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.fDatimeC != null
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.out != null
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.fSeekInfo != null
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.seekInfoRecord != null
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.seekKeysRecord != null
this.directoryRecord.tFile.fSeekKeys has only one value
this.directoryRecord.tFile.fSeekKeys != null
this.seekKeysRecord has only one value
this.seekKeysRecord != null
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.fSeekKeys has only one value
this.fSeekKeys != null
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
return == false
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.isLargeFile():::EXIT;condition="not(return == true)"
===========================================================================
hep.io.root.output.TFile.streamer(hep.io.root.output.RootOutput):::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 0
this.fSeekInfo has only one value
this.seekInfoRecord has only one value
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 0
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 0
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 0
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 0
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.streamer(hep.io.root.output.RootOutput):::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.fDatimeC.fDatime == orig(this.seekInfoRecord.fDatimeC.fDatime)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesName == 54
this.fSeekInfo has only one value
this.seekInfoRecord has only one value
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.keyLen == 43
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.writeHeader():::ENTER
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 427
this.out.tFile.fNbytesName == 54
this.fEND.value == 71338
this.fSeekInfo has only one value
this.fSeekInfo.value == 67608
this.fNbytesInfo.value == 3303
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 67608
this.seekInfoRecord.objLen == 12053
this.seekInfoRecord.fDatimeC has only one value
this.seekInfoRecord.keyLen == 64
this.seekInfoRecord.size == 3303
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 427
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TFile.writeHeader():::EXIT
this.out == orig(this.out)
this.out.tFile == orig(this.out.tFile)
this.out.tFile.out == orig(this.out.tFile.out)
this.out.tFile.fEND == orig(this.out.tFile.fEND)
this.out.tFile.fSeekFree == orig(this.out.tFile.fSeekFree)
this.out.tFile.fNbytesFree == orig(this.out.tFile.fNbytesFree)
this.out.tFile.nfree == orig(this.out.tFile.nfree)
this.out.tFile.largeFile == orig(this.out.tFile.largeFile)
this.out.tFile.fCompress == orig(this.out.tFile.fCompress)
this.out.tFile.fSeekInfo == orig(this.out.tFile.fSeekInfo)
this.out.tFile.fNbytesInfo == orig(this.out.tFile.fNbytesInfo)
this.out.tFile.seekInfoRecord == orig(this.out.tFile.seekInfoRecord)
this.out.tFile.streamerInfos == orig(this.out.tFile.streamerInfos)
this.out.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.out.tFile.dataRecords == orig(this.out.tFile.dataRecords)
this.out.tFile.dataRecords[] == orig(this.out.tFile.dataRecords[])
this.out.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.out.tFile.keyRecords == orig(this.out.tFile.keyRecords)
this.out.tFile.keyRecords[] == orig(this.out.tFile.keyRecords[])
this.out.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.out.tFile.fDatimeC == orig(this.out.tFile.fDatimeC)
this.out.tFile.fDatimeF == orig(this.out.tFile.fDatimeF)
this.out.tFile.fNbytesKeys == orig(this.out.tFile.fNbytesKeys)
this.out.tFile.fNbytesName == orig(this.out.tFile.fNbytesName)
this.out.tFile.fSeekDir == orig(this.out.tFile.fSeekDir)
this.out.tFile.fSeekParent == orig(this.out.tFile.fSeekParent)
this.out.tFile.directoryRecord == orig(this.out.tFile.directoryRecord)
this.out.tFile.seekKeysRecord == orig(this.out.tFile.seekKeysRecord)
this.out.tFile.fSeekKeys == orig(this.out.tFile.fSeekKeys)
this.out.tFile.fUUID == orig(this.out.tFile.fUUID)
this.out.tFile.keyList == orig(this.out.tFile.keyList)
this.out.tFile.parent == orig(this.out.tFile.parent)
this.out.tFile.subdirectories == orig(this.out.tFile.subdirectories)
this.out.tFile.name == orig(this.out.tFile.name)
this.out.tFile.name.toString == orig(this.out.tFile.name.toString)
this.out.tFile.title == orig(this.out.tFile.title)
this.out.tFile.title.toString == orig(this.out.tFile.title.toString)
this.out.tFile.fUniqueID == orig(this.out.tFile.fUniqueID)
this.out.tFile.fBits == orig(this.out.tFile.fBits)
this.out.classMap == orig(this.out.classMap)
this.fEND == orig(this.fEND)
this.fEND.value == orig(this.fEND.value)
this.fEND.immutable == orig(this.fEND.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekFree == orig(this.fSeekFree)
this.fSeekFree == orig(this.fNbytesFree)
this.fSeekFree == orig(this.fSeekParent)
this.fSeekFree.value == orig(this.fSeekFree.value)
this.fSeekFree.value == orig(this.fNbytesFree.value)
this.fSeekFree.value == orig(this.fSeekParent.value)
this.fSeekFree.immutable == orig(this.fSeekFree.immutable)
this.fSeekFree.immutable == orig(this.fNbytesFree.immutable)
this.fSeekFree.immutable == orig(this.fSeekParent.immutable)
this.nfree == orig(this.nfree)
this.largeFile == orig(this.largeFile)
this.fCompress == orig(this.fCompress)
this.fSeekInfo == orig(this.fSeekInfo)
this.fSeekInfo.value == orig(this.fSeekInfo.value)
this.fSeekInfo.immutable == orig(this.fSeekInfo.immutable)
this.fNbytesInfo == orig(this.fNbytesInfo)
this.fNbytesInfo.value == orig(this.fNbytesInfo.value)
this.fNbytesInfo.immutable == orig(this.fNbytesInfo.immutable)
this.seekInfoRecord == orig(this.seekInfoRecord)
this.seekInfoRecord.objectClass == orig(this.seekInfoRecord.objectClass)
this.seekInfoRecord.className == orig(this.seekInfoRecord.className)
this.seekInfoRecord.className.toString == orig(this.seekInfoRecord.className.toString)
this.seekInfoRecord.seekPDir == orig(this.seekInfoRecord.seekPDir)
this.seekInfoRecord.seekPDir.value == orig(this.seekInfoRecord.seekPDir.value)
this.seekInfoRecord.seekPDir.immutable == orig(this.seekInfoRecord.seekPDir.immutable)
this.seekInfoRecord.fSeekKey == orig(this.seekInfoRecord.fSeekKey)
this.seekInfoRecord.fSeekKey.value == orig(this.seekInfoRecord.fSeekKey.value)
this.seekInfoRecord.fSeekKey.immutable == orig(this.seekInfoRecord.fSeekKey.immutable)
this.seekInfoRecord.objects == orig(this.seekInfoRecord.objects)
this.seekInfoRecord.objects[] == orig(this.seekInfoRecord.objects[])
this.seekInfoRecord.objLen == orig(this.seekInfoRecord.objLen)
this.seekInfoRecord.fDatimeC == orig(this.seekInfoRecord.fDatimeC)
this.seekInfoRecord.fDatimeC.fDatime == orig(this.seekInfoRecord.fDatimeC.fDatime)
this.seekInfoRecord.keyLen == orig(this.seekInfoRecord.keyLen)
this.seekInfoRecord.size == orig(this.seekInfoRecord.size)
this.seekInfoRecord.suppressStreamerInfo == orig(this.seekInfoRecord.suppressStreamerInfo)
this.seekInfoRecord.compressionLevel == orig(this.seekInfoRecord.compressionLevel)
this.seekInfoRecord.tFile == orig(this.seekInfoRecord.tFile)
this.seekInfoRecord.tFile.out == orig(this.seekInfoRecord.tFile.out)
this.seekInfoRecord.tFile.fEND == orig(this.seekInfoRecord.tFile.fEND)
this.seekInfoRecord.tFile.fSeekFree == orig(this.seekInfoRecord.tFile.fSeekFree)
this.seekInfoRecord.tFile.fNbytesFree == orig(this.seekInfoRecord.tFile.fNbytesFree)
this.seekInfoRecord.tFile.nfree == orig(this.seekInfoRecord.tFile.nfree)
this.seekInfoRecord.tFile.largeFile == orig(this.seekInfoRecord.tFile.largeFile)
this.seekInfoRecord.tFile.fCompress == orig(this.seekInfoRecord.tFile.fCompress)
this.seekInfoRecord.tFile.fSeekInfo == orig(this.seekInfoRecord.tFile.fSeekInfo)
this.seekInfoRecord.tFile.fNbytesInfo == orig(this.seekInfoRecord.tFile.fNbytesInfo)
this.seekInfoRecord.tFile.seekInfoRecord == orig(this.seekInfoRecord.tFile.seekInfoRecord)
this.seekInfoRecord.tFile.streamerInfos == orig(this.seekInfoRecord.tFile.streamerInfos)
this.seekInfoRecord.tFile.streamerInfos.getClass().getName() == this.streamerInfos.getClass().getName()
this.seekInfoRecord.tFile.dataRecords == orig(this.seekInfoRecord.tFile.dataRecords)
this.seekInfoRecord.tFile.dataRecords[] == orig(this.seekInfoRecord.tFile.dataRecords[])
this.seekInfoRecord.tFile.dataRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.keyRecords == orig(this.seekInfoRecord.tFile.keyRecords)
this.seekInfoRecord.tFile.keyRecords[] == orig(this.seekInfoRecord.tFile.keyRecords[])
this.seekInfoRecord.tFile.keyRecords.getClass().getName() == this.dataRecords.getClass().getName()
this.seekInfoRecord.tFile.fDatimeC == orig(this.seekInfoRecord.tFile.fDatimeC)
this.seekInfoRecord.tFile.fDatimeF == orig(this.seekInfoRecord.tFile.fDatimeF)
this.seekInfoRecord.tFile.fNbytesKeys == orig(this.seekInfoRecord.tFile.fNbytesKeys)
this.seekInfoRecord.tFile.fNbytesName == orig(this.seekInfoRecord.tFile.fNbytesName)
this.seekInfoRecord.tFile.fSeekDir == orig(this.seekInfoRecord.tFile.fSeekDir)
this.seekInfoRecord.tFile.fSeekParent == orig(this.seekInfoRecord.tFile.fSeekParent)
this.seekInfoRecord.tFile.directoryRecord == orig(this.seekInfoRecord.tFile.directoryRecord)
this.seekInfoRecord.tFile.seekKeysRecord == orig(this.seekInfoRecord.tFile.seekKeysRecord)
this.seekInfoRecord.tFile.fSeekKeys == orig(this.seekInfoRecord.tFile.fSeekKeys)
this.seekInfoRecord.tFile.fUUID == orig(this.seekInfoRecord.tFile.fUUID)
this.seekInfoRecord.tFile.keyList == orig(this.seekInfoRecord.tFile.keyList)
this.seekInfoRecord.tFile.parent == orig(this.seekInfoRecord.tFile.parent)
this.seekInfoRecord.tFile.subdirectories == orig(this.seekInfoRecord.tFile.subdirectories)
this.seekInfoRecord.tFile.name == orig(this.seekInfoRecord.tFile.name)
this.seekInfoRecord.tFile.name.toString == orig(this.seekInfoRecord.tFile.name.toString)
this.seekInfoRecord.tFile.title == orig(this.seekInfoRecord.tFile.title)
this.seekInfoRecord.tFile.title.toString == orig(this.seekInfoRecord.tFile.title.toString)
this.seekInfoRecord.tFile.fUniqueID == orig(this.seekInfoRecord.tFile.fUniqueID)
this.seekInfoRecord.tFile.fBits == orig(this.seekInfoRecord.tFile.fBits)
this.seekInfoRecord.name == orig(this.seekInfoRecord.name)
this.seekInfoRecord.name.toString == orig(this.seekInfoRecord.name.toString)
this.seekInfoRecord.title == orig(this.seekInfoRecord.title)
this.seekInfoRecord.title.toString == orig(this.seekInfoRecord.title.toString)
this.seekInfoRecord.fUniqueID == orig(this.seekInfoRecord.fUniqueID)
this.seekInfoRecord.fBits == orig(this.seekInfoRecord.fBits)
this.streamerInfos == orig(this.streamerInfos)
this.streamerInfos.getClass().getName() == this.seekKeysRecord.tFile.streamerInfos.getClass().getName()
this.streamerInfos.getClass().getName() == orig(this.out.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.out.classMap.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekInfoRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.directoryRecord.tFile.streamerInfos.getClass().getName())
this.streamerInfos.getClass().getName() == orig(this.seekKeysRecord.tFile.streamerInfos.getClass().getName())
this.dataRecords == orig(this.dataRecords)
this.dataRecords[] == orig(this.dataRecords[])
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.directoryRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.objects.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.dataRecords.getClass().getName()
this.dataRecords.getClass().getName() == this.seekKeysRecord.tFile.keyRecords.getClass().getName()
this.dataRecords.getClass().getName() == orig(this.out.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.out.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekInfoRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.directoryRecord.tFile.keyRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.objects.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.dataRecords.getClass().getName())
this.dataRecords.getClass().getName() == orig(this.seekKeysRecord.tFile.keyRecords.getClass().getName())
this.keyRecords == orig(this.keyRecords)
this.keyRecords[] == orig(this.keyRecords[])
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC == orig(this.fDatimeF)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.fDatimeC.fDatime == orig(this.fDatimeF.fDatime)
this.fNbytesKeys == orig(this.fNbytesKeys)
this.fNbytesName == orig(this.fNbytesName)
this.fSeekDir == orig(this.fSeekDir)
this.fSeekDir.value == orig(this.fSeekDir.value)
this.fSeekDir.immutable == orig(this.fSeekDir.immutable)
this.directoryRecord == orig(this.directoryRecord)
this.directoryRecord.objectClass == orig(this.directoryRecord.objectClass)
this.directoryRecord.className == orig(this.directoryRecord.className)
this.directoryRecord.className.toString == orig(this.directoryRecord.className.toString)
this.directoryRecord.seekPDir == orig(this.directoryRecord.seekPDir)
this.directoryRecord.seekPDir.value == orig(this.directoryRecord.seekPDir.value)
this.directoryRecord.seekPDir.immutable == orig(this.directoryRecord.seekPDir.immutable)
this.directoryRecord.fSeekKey == orig(this.directoryRecord.fSeekKey)
this.directoryRecord.fSeekKey.value == orig(this.directoryRecord.fSeekKey.value)
this.directoryRecord.fSeekKey.immutable == orig(this.directoryRecord.fSeekKey.immutable)
this.directoryRecord.objects == orig(this.directoryRecord.objects)
this.directoryRecord.objects[] == orig(this.directoryRecord.objects[])
this.directoryRecord.objLen == orig(this.directoryRecord.objLen)
this.directoryRecord.fDatimeC == orig(this.directoryRecord.fDatimeC)
this.directoryRecord.fDatimeC.fDatime == orig(this.directoryRecord.fDatimeC.fDatime)
this.directoryRecord.keyLen == orig(this.directoryRecord.keyLen)
this.directoryRecord.size == orig(this.directoryRecord.size)
this.directoryRecord.suppressStreamerInfo == orig(this.directoryRecord.suppressStreamerInfo)
this.directoryRecord.compressionLevel == orig(this.directoryRecord.compressionLevel)
this.directoryRecord.tFile == orig(this.directoryRecord.tFile)
this.directoryRecord.tFile.out == orig(this.directoryRecord.tFile.out)
this.directoryRecord.tFile.fEND == orig(this.directoryRecord.tFile.fEND)
this.directoryRecord.tFile.fSeekFree == orig(this.directoryRecord.tFile.fSeekFree)
this.directoryRecord.tFile.fNbytesFree == orig(this.directoryRecord.tFile.fNbytesFree)
this.directoryRecord.tFile.nfree == orig(this.directoryRecord.tFile.nfree)
this.directoryRecord.tFile.largeFile == orig(this.directoryRecord.tFile.largeFile)
this.directoryRecord.tFile.fCompress == orig(this.directoryRecord.tFile.fCompress)
this.directoryRecord.tFile.fSeekInfo == orig(this.directoryRecord.tFile.fSeekInfo)
this.directoryRecord.tFile.fNbytesInfo == orig(this.directoryRecord.tFile.fNbytesInfo)
this.directoryRecord.tFile.seekInfoRecord == orig(this.directoryRecord.tFile.seekInfoRecord)
this.directoryRecord.tFile.streamerInfos == orig(this.directoryRecord.tFile.streamerInfos)
this.directoryRecord.tFile.dataRecords == orig(this.directoryRecord.tFile.dataRecords)
this.directoryRecord.tFile.dataRecords[] == orig(this.directoryRecord.tFile.dataRecords[])
this.directoryRecord.tFile.keyRecords == orig(this.directoryRecord.tFile.keyRecords)
this.directoryRecord.tFile.keyRecords[] == orig(this.directoryRecord.tFile.keyRecords[])
this.directoryRecord.tFile.fDatimeC == orig(this.directoryRecord.tFile.fDatimeC)
this.directoryRecord.tFile.fDatimeF == orig(this.directoryRecord.tFile.fDatimeF)
this.directoryRecord.tFile.fNbytesKeys == orig(this.directoryRecord.tFile.fNbytesKeys)
this.directoryRecord.tFile.fNbytesName == orig(this.directoryRecord.tFile.fNbytesName)
this.directoryRecord.tFile.fSeekDir == orig(this.directoryRecord.tFile.fSeekDir)
this.directoryRecord.tFile.fSeekParent == orig(this.directoryRecord.tFile.fSeekParent)
this.directoryRecord.tFile.directoryRecord == orig(this.directoryRecord.tFile.directoryRecord)
this.directoryRecord.tFile.seekKeysRecord == orig(this.directoryRecord.tFile.seekKeysRecord)
this.directoryRecord.tFile.fSeekKeys == orig(this.directoryRecord.tFile.fSeekKeys)
this.directoryRecord.tFile.fUUID == orig(this.directoryRecord.tFile.fUUID)
this.directoryRecord.tFile.keyList == orig(this.directoryRecord.tFile.keyList)
this.directoryRecord.tFile.parent == orig(this.directoryRecord.tFile.parent)
this.directoryRecord.tFile.subdirectories == orig(this.directoryRecord.tFile.subdirectories)
this.directoryRecord.tFile.name == orig(this.directoryRecord.tFile.name)
this.directoryRecord.tFile.name.toString == orig(this.directoryRecord.tFile.name.toString)
this.directoryRecord.tFile.title == orig(this.directoryRecord.tFile.title)
this.directoryRecord.tFile.title.toString == orig(this.directoryRecord.tFile.title.toString)
this.directoryRecord.tFile.fUniqueID == orig(this.directoryRecord.tFile.fUniqueID)
this.directoryRecord.tFile.fBits == orig(this.directoryRecord.tFile.fBits)
this.directoryRecord.name == orig(this.directoryRecord.name)
this.directoryRecord.name.toString == orig(this.directoryRecord.name.toString)
this.directoryRecord.title == orig(this.directoryRecord.title)
this.directoryRecord.title.toString == orig(this.directoryRecord.title.toString)
this.directoryRecord.fUniqueID == orig(this.directoryRecord.fUniqueID)
this.directoryRecord.fBits == orig(this.directoryRecord.fBits)
this.seekKeysRecord == orig(this.seekKeysRecord)
this.seekKeysRecord.objectClass == orig(this.seekKeysRecord.objectClass)
this.seekKeysRecord.className == orig(this.seekKeysRecord.className)
this.seekKeysRecord.className.toString == orig(this.seekKeysRecord.className.toString)
this.seekKeysRecord.seekPDir == orig(this.seekKeysRecord.seekPDir)
this.seekKeysRecord.seekPDir.value == orig(this.seekKeysRecord.seekPDir.value)
this.seekKeysRecord.seekPDir.immutable == orig(this.seekKeysRecord.seekPDir.immutable)
this.seekKeysRecord.fSeekKey == orig(this.seekKeysRecord.fSeekKey)
this.seekKeysRecord.fSeekKey.value == orig(this.seekKeysRecord.fSeekKey.value)
this.seekKeysRecord.fSeekKey.immutable == orig(this.seekKeysRecord.fSeekKey.immutable)
this.seekKeysRecord.objects == orig(this.seekKeysRecord.objects)
this.seekKeysRecord.objects[] == orig(this.seekKeysRecord.objects[])
this.seekKeysRecord.objLen == orig(this.seekKeysRecord.objLen)
this.seekKeysRecord.fDatimeC == orig(this.seekKeysRecord.fDatimeC)
this.seekKeysRecord.fDatimeC.fDatime == orig(this.seekKeysRecord.fDatimeC.fDatime)
this.seekKeysRecord.keyLen == orig(this.seekKeysRecord.keyLen)
this.seekKeysRecord.size == orig(this.seekKeysRecord.size)
this.seekKeysRecord.suppressStreamerInfo == orig(this.seekKeysRecord.suppressStreamerInfo)
this.seekKeysRecord.compressionLevel == orig(this.seekKeysRecord.compressionLevel)
this.seekKeysRecord.tFile == orig(this.seekKeysRecord.tFile)
this.seekKeysRecord.tFile.out == orig(this.seekKeysRecord.tFile.out)
this.seekKeysRecord.tFile.fEND == orig(this.seekKeysRecord.tFile.fEND)
this.seekKeysRecord.tFile.fSeekFree == orig(this.seekKeysRecord.tFile.fSeekFree)
this.seekKeysRecord.tFile.fNbytesFree == orig(this.seekKeysRecord.tFile.fNbytesFree)
this.seekKeysRecord.tFile.nfree == orig(this.seekKeysRecord.tFile.nfree)
this.seekKeysRecord.tFile.largeFile == orig(this.seekKeysRecord.tFile.largeFile)
this.seekKeysRecord.tFile.fCompress == orig(this.seekKeysRecord.tFile.fCompress)
this.seekKeysRecord.tFile.fSeekInfo == orig(this.seekKeysRecord.tFile.fSeekInfo)
this.seekKeysRecord.tFile.fNbytesInfo == orig(this.seekKeysRecord.tFile.fNbytesInfo)
this.seekKeysRecord.tFile.seekInfoRecord == orig(this.seekKeysRecord.tFile.seekInfoRecord)
this.seekKeysRecord.tFile.streamerInfos == orig(this.seekKeysRecord.tFile.streamerInfos)
this.seekKeysRecord.tFile.dataRecords == orig(this.seekKeysRecord.tFile.dataRecords)
this.seekKeysRecord.tFile.dataRecords[] == orig(this.seekKeysRecord.tFile.dataRecords[])
this.seekKeysRecord.tFile.keyRecords == orig(this.seekKeysRecord.tFile.keyRecords)
this.seekKeysRecord.tFile.keyRecords[] == orig(this.seekKeysRecord.tFile.keyRecords[])
this.seekKeysRecord.tFile.fDatimeC == orig(this.seekKeysRecord.tFile.fDatimeC)
this.seekKeysRecord.tFile.fDatimeF == orig(this.seekKeysRecord.tFile.fDatimeF)
this.seekKeysRecord.tFile.fNbytesKeys == orig(this.seekKeysRecord.tFile.fNbytesKeys)
this.seekKeysRecord.tFile.fNbytesName == orig(this.seekKeysRecord.tFile.fNbytesName)
this.seekKeysRecord.tFile.fSeekDir == orig(this.seekKeysRecord.tFile.fSeekDir)
this.seekKeysRecord.tFile.fSeekParent == orig(this.seekKeysRecord.tFile.fSeekParent)
this.seekKeysRecord.tFile.directoryRecord == orig(this.seekKeysRecord.tFile.directoryRecord)
this.seekKeysRecord.tFile.seekKeysRecord == orig(this.seekKeysRecord.tFile.seekKeysRecord)
this.seekKeysRecord.tFile.fSeekKeys == orig(this.seekKeysRecord.tFile.fSeekKeys)
this.seekKeysRecord.tFile.fUUID == orig(this.seekKeysRecord.tFile.fUUID)
this.seekKeysRecord.tFile.keyList == orig(this.seekKeysRecord.tFile.keyList)
this.seekKeysRecord.tFile.parent == orig(this.seekKeysRecord.tFile.parent)
this.seekKeysRecord.tFile.subdirectories == orig(this.seekKeysRecord.tFile.subdirectories)
this.seekKeysRecord.tFile.name == orig(this.seekKeysRecord.tFile.name)
this.seekKeysRecord.tFile.name.toString == orig(this.seekKeysRecord.tFile.name.toString)
this.seekKeysRecord.tFile.title == orig(this.seekKeysRecord.tFile.title)
this.seekKeysRecord.tFile.title.toString == orig(this.seekKeysRecord.tFile.title.toString)
this.seekKeysRecord.tFile.fUniqueID == orig(this.seekKeysRecord.tFile.fUniqueID)
this.seekKeysRecord.tFile.fBits == orig(this.seekKeysRecord.tFile.fBits)
this.seekKeysRecord.name == orig(this.seekKeysRecord.name)
this.seekKeysRecord.name.toString == orig(this.seekKeysRecord.name.toString)
this.seekKeysRecord.title == orig(this.seekKeysRecord.title)
this.seekKeysRecord.title.toString == orig(this.seekKeysRecord.title.toString)
this.seekKeysRecord.fUniqueID == orig(this.seekKeysRecord.fUniqueID)
this.seekKeysRecord.fBits == orig(this.seekKeysRecord.fBits)
this.fSeekKeys == orig(this.fSeekKeys)
this.fSeekKeys.value == orig(this.fSeekKeys.value)
this.fSeekKeys.immutable == orig(this.fSeekKeys.immutable)
this.fUUID == orig(this.fUUID)
this.fUUID.uuid == orig(this.fUUID.uuid)
this.keyList == orig(this.keyList)
this.keyList.list == orig(this.keyList.list)
this.keyList.list[] == orig(this.keyList.list[])
this.parent == orig(this.parent)
this.subdirectories == orig(this.subdirectories)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.out has only one value
this.out.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.out.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.out.tFile.fNbytesKeys == 427
this.out.tFile.fNbytesName == 54
this.fEND.value == 71338
this.fSeekInfo has only one value
this.fSeekInfo.value == 67608
this.fNbytesInfo.value == 3303
this.seekInfoRecord has only one value
this.seekInfoRecord.fSeekKey.value == 67608
this.seekInfoRecord.objLen == 12053
this.seekInfoRecord.fDatimeC has only one value
this.seekInfoRecord.keyLen == 64
this.seekInfoRecord.size == 3303
this.seekInfoRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekInfoRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekInfoRecord.tFile.fNbytesKeys == 427
this.seekInfoRecord.tFile.fNbytesName == 54
this.dataRecords[] contains no nulls and has only one value, of length 7
this.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.keyRecords[] contains no nulls and has only one value, of length 1
this.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.fNbytesKeys == 427
this.fNbytesName == 54
this.fSeekDir has only one value
this.fSeekDir.value == 100
this.directoryRecord has only one value
this.directoryRecord.fSeekKey.value == 100
this.directoryRecord.objLen == 71
this.directoryRecord.fDatimeC has only one value
this.directoryRecord.fDatimeC.fDatime == 2030791199
this.directoryRecord.keyLen == 43
this.directoryRecord.size == 114
this.directoryRecord.tFile.out has only one value
this.directoryRecord.tFile.fSeekInfo has only one value
this.directoryRecord.tFile.seekInfoRecord has only one value
this.directoryRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.directoryRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.directoryRecord.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.directoryRecord.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.directoryRecord.tFile.fNbytesKeys == 427
this.directoryRecord.tFile.fNbytesName == 54
this.directoryRecord.tFile.seekKeysRecord has only one value
this.directoryRecord.tFile.fSeekKeys has only one value
this.seekKeysRecord has only one value
this.seekKeysRecord.seekPDir.value == 100
this.seekKeysRecord.fSeekKey.value == 70911
this.seekKeysRecord.objLen == 384
this.seekKeysRecord.fDatimeC has only one value
this.seekKeysRecord.keyLen == 43
this.seekKeysRecord.size == 427
this.seekKeysRecord.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.seekKeysRecord.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.seekKeysRecord.tFile.fNbytesKeys == 427
this.seekKeysRecord.tFile.fNbytesName == 54
this.fSeekKeys has only one value
this.fSeekKeys.value == 70911
this.keyList.list[] contains no nulls and has only one value, of length 6
this.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
size(this.out.tFile.dataRecords[]) == 7
size(this.seekInfoRecord.tFile.dataRecords[]) == 7
size(this.dataRecords[]) == 7
size(this.keyRecords[]) == 1
size(this.directoryRecord.tFile.dataRecords[]) == 7
size(this.directoryRecord.tFile.keyRecords[]) == 1
size(this.seekKeysRecord.tFile.dataRecords[]) == 7
size(this.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TKey:::CLASS
===========================================================================
hep.io.root.output.TKey:::OBJECT
this.objectClass != null
this.className != null
this.seekPDir != null
this.seekPDir.value one of { 0, 100 }
hep.io.root.output.Pointer.ZERO has only one value
hep.io.root.output.Pointer.ZERO != null
hep.io.root.output.Pointer.ZERO.value == 0
hep.io.root.output.Pointer.ZERO.immutable == true
this.fSeekKey != null
this.fSeekKey.value >= 0
this.fSeekKey.immutable == false
this.objects != null
this.objects[] elements != null
this.objects.getClass().getName() == java.util.ArrayList.class
this.objLen >= 0
this.keyLen >= 0
this.size >= 0
this.compressionLevel one of { -1, 0 }
this.tFile has only one value
this.tFile != null
this.tFile.out.tFile has only one value
this.tFile.out.tFile != null
this.tFile.out.classMap has only one value
this.tFile.out.classMap != null
this.tFile.out.classMap.getClass().getName() == java.util.HashMap.class
this.tFile.fEND has only one value
this.tFile.fEND != null
this.tFile.fEND.value one of { 0, 71338 }
this.tFile.fEND.immutable == false
this.tFile.fSeekFree has only one value
this.tFile.fSeekFree != null
this.tFile.fSeekFree.value == 0
this.tFile.fSeekFree.immutable == true
this.tFile.fNbytesFree has only one value
this.tFile.fNbytesFree != null
this.tFile.fNbytesFree.value == 0
this.tFile.fNbytesFree.immutable == true
this.tFile.nfree == 0
this.tFile.largeFile == false
this.tFile.fCompress == 1
this.tFile.fSeekInfo.value one of { 0, 67608 }
this.tFile.fSeekInfo.immutable == false
this.tFile.fNbytesInfo has only one value
this.tFile.fNbytesInfo != null
this.tFile.fNbytesInfo.value one of { 0, 3303 }
this.tFile.fNbytesInfo.immutable == false
this.tFile.seekInfoRecord.objectClass has only one value
this.tFile.seekInfoRecord.objectClass != null
this.tFile.seekInfoRecord.className has only one value
this.tFile.seekInfoRecord.className != null
this.tFile.seekInfoRecord.className.toString == "TList"
this.tFile.seekInfoRecord.seekPDir has only one value
this.tFile.seekInfoRecord.seekPDir != null
this.tFile.seekInfoRecord.fSeekKey has only one value
this.tFile.seekInfoRecord.fSeekKey != null
this.tFile.seekInfoRecord.objects has only one value
this.tFile.seekInfoRecord.objects != null
this.tFile.seekInfoRecord.objects[] elements has only one value
this.tFile.seekInfoRecord.objects[] elements != null
this.tFile.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
this.tFile.seekInfoRecord.objects[].getClass().getName() one of { [], [hep.io.root.output.classes.TList] }
this.tFile.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekInfoRecord.objLen one of { 0, 12053 }
this.tFile.seekInfoRecord.keyLen one of { 0, 64 }
this.tFile.seekInfoRecord.size one of { 0, 3303 }
this.tFile.seekInfoRecord.suppressStreamerInfo == true
this.tFile.seekInfoRecord.compressionLevel == -1
this.tFile.seekInfoRecord.tFile has only one value
this.tFile.seekInfoRecord.tFile != null
this.tFile.seekInfoRecord.name has only one value
this.tFile.seekInfoRecord.name != null
this.tFile.seekInfoRecord.name.toString == "StreamerInfo"
this.tFile.seekInfoRecord.title has only one value
this.tFile.seekInfoRecord.title != null
this.tFile.seekInfoRecord.title.toString == "Doubly linked list"
this.tFile.seekInfoRecord.fUniqueID == 0
this.tFile.seekInfoRecord.fBits == 50331648
this.tFile.streamerInfos has only one value
this.tFile.streamerInfos != null
this.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
this.tFile.dataRecords has only one value
this.tFile.dataRecords != null
this.tFile.dataRecords[] elements != null
this.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
this.tFile.keyRecords has only one value
this.tFile.keyRecords != null
this.tFile.keyRecords[] elements has only one value
this.tFile.keyRecords[] elements != null
this.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
this.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
this.tFile.fDatimeC has only one value
this.tFile.fDatimeC != null
this.tFile.fDatimeC.fDatime == 2030791191
this.tFile.fDatimeF has only one value
this.tFile.fDatimeF != null
this.tFile.fDatimeF.fDatime == 2030791191
this.tFile.fNbytesKeys one of { 0, 427 }
this.tFile.fNbytesName one of { 0, 54 }
this.tFile.fSeekDir.value one of { 0, 100 }
this.tFile.fSeekDir.immutable == false
this.tFile.fSeekParent has only one value
this.tFile.fSeekParent != null
this.tFile.fSeekParent.value == 0
this.tFile.fSeekParent.immutable == true
this.tFile.directoryRecord.objectClass has only one value
this.tFile.directoryRecord.objectClass != null
this.tFile.directoryRecord.className has only one value
this.tFile.directoryRecord.className != null
this.tFile.directoryRecord.className.toString == "TFile"
this.tFile.directoryRecord.seekPDir has only one value
this.tFile.directoryRecord.seekPDir != null
this.tFile.directoryRecord.fSeekKey has only one value
this.tFile.directoryRecord.fSeekKey != null
this.tFile.directoryRecord.objects has only one value
this.tFile.directoryRecord.objects != null
this.tFile.directoryRecord.objects[] elements has only one value
this.tFile.directoryRecord.objects[] elements != null
this.tFile.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.tFile.directoryRecord.objects[].getClass().getName() one of { [], [hep.io.root.output.TFile] }
this.tFile.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.directoryRecord.objLen one of { 0, 71 }
this.tFile.directoryRecord.keyLen one of { 0, 43 }
this.tFile.directoryRecord.size one of { 0, 114 }
this.tFile.directoryRecord.suppressStreamerInfo == true
this.tFile.directoryRecord.compressionLevel == -1
this.tFile.directoryRecord.tFile has only one value
this.tFile.directoryRecord.tFile != null
this.tFile.directoryRecord.name has only one value
this.tFile.directoryRecord.name != null
this.tFile.directoryRecord.name.toString == "play.root"
this.tFile.directoryRecord.title has only one value
this.tFile.directoryRecord.title != null
this.tFile.directoryRecord.title.toString == ""
this.tFile.directoryRecord.fUniqueID == 0
this.tFile.directoryRecord.fBits == 50331648
this.tFile.seekKeysRecord.objectClass has only one value
this.tFile.seekKeysRecord.objectClass != null
this.tFile.seekKeysRecord.className has only one value
this.tFile.seekKeysRecord.className != null
this.tFile.seekKeysRecord.className.toString == "TFile"
this.tFile.seekKeysRecord.seekPDir has only one value
this.tFile.seekKeysRecord.seekPDir != null
this.tFile.seekKeysRecord.fSeekKey has only one value
this.tFile.seekKeysRecord.fSeekKey != null
this.tFile.seekKeysRecord.objects has only one value
this.tFile.seekKeysRecord.objects != null
this.tFile.seekKeysRecord.objects[] elements has only one value
this.tFile.seekKeysRecord.objects[] elements != null
this.tFile.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.tFile.seekKeysRecord.objects[].getClass().getName() one of { [], [hep.io.root.output.TDirectory.KeyList] }
this.tFile.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
this.tFile.seekKeysRecord.objLen one of { 0, 384 }
this.tFile.seekKeysRecord.keyLen one of { 0, 43 }
this.tFile.seekKeysRecord.size one of { 0, 427 }
this.tFile.seekKeysRecord.suppressStreamerInfo == true
this.tFile.seekKeysRecord.compressionLevel one of { -1, 0 }
this.tFile.seekKeysRecord.tFile has only one value
this.tFile.seekKeysRecord.tFile != null
this.tFile.seekKeysRecord.name has only one value
this.tFile.seekKeysRecord.name != null
this.tFile.seekKeysRecord.name.toString == "play.root"
this.tFile.seekKeysRecord.title has only one value
this.tFile.seekKeysRecord.title != null
this.tFile.seekKeysRecord.title.toString == ""
this.tFile.seekKeysRecord.fUniqueID == 0
this.tFile.seekKeysRecord.fBits == 50331648
this.tFile.fSeekKeys.value one of { 0, 70911 }
this.tFile.fSeekKeys.immutable == false
this.tFile.fUUID has only one value
this.tFile.fUUID != null
this.tFile.fUUID.uuid has only one value
this.tFile.fUUID.uuid != null
this.tFile.keyList has only one value
this.tFile.keyList != null
this.tFile.keyList.list has only one value
this.tFile.keyList.list != null
this.tFile.keyList.list[] elements != null
this.tFile.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
this.tFile.parent == null
this.tFile.subdirectories has only one value
this.tFile.subdirectories != null
this.tFile.name has only one value
this.tFile.name != null
this.tFile.name.toString == "play.root"
this.tFile.title has only one value
this.tFile.title != null
this.tFile.title.toString == ""
this.tFile.fUniqueID == 0
this.tFile.fBits == 50331648
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
size(this.objects[]) one of { 0, 1 }
size(this.tFile.seekInfoRecord.objects[]) one of { 0, 1 }
size(this.tFile.keyRecords[]) one of { 0, 1 }
size(this.tFile.directoryRecord.objects[]) one of { 0, 1 }
size(this.tFile.seekKeysRecord.objects[]) one of { 0, 1 }
===========================================================================
hep.io.root.output.TKey.TKey(hep.io.root.output.TFile, java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::ENTER
arg0 has only one value
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value == 0
arg0.fEND.immutable == false
hep.io.root.output.Pointer.ZERO has only one value
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo.value == 0
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value == 0
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen == 0
arg0.seekInfoRecord.fDatimeC == null
arg0.seekInfoRecord.keyLen == 0
arg0.seekInfoRecord.size == 0
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
hep.io.root.output.TFile.nameWarp == null
arg0.dataRecords has only one value
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
hep.io.root.output.TDirectory.timeWarp == null
hep.io.root.output.TDirectory.uuidWarp == null
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName == 0
arg0.fSeekDir.value == 0
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen == 0
arg0.directoryRecord.fDatimeC == null
arg0.directoryRecord.keyLen == 0
arg0.directoryRecord.size == 0
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen == 0
arg0.seekKeysRecord.fDatimeC == null
arg0.seekKeysRecord.keyLen == 0
arg0.seekKeysRecord.size == 0
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys.value == 0
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
arg4.value one of { 0, 100 }
hep.io.root.output.Pointer.ZERO.value == 0
hep.io.root.output.Pointer.ZERO.immutable == true
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.keyRecords[]) one of { 0, 1 }
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.TKey(hep.io.root.output.TFile, java.lang.Class, java.lang.String, java.lang.String, hep.io.root.output.Pointer, boolean):::EXIT
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
arg0.out == orig(arg0.out)
arg0.out.tFile == orig(arg0.out.tFile)
arg0.out.classMap == orig(arg0.out.classMap)
arg0.out.classMap.getClass().getName() == orig(arg0.out.classMap.getClass().getName())
arg0.fEND == orig(arg0.fEND)
arg0.fEND.value == orig(arg0.fEND.value)
arg0.fEND.immutable == orig(arg0.fEND.immutable)
arg0.fSeekFree == orig(arg0.fSeekFree)
arg0.fSeekFree.value == orig(arg0.fSeekFree.value)
arg0.fSeekFree.immutable == orig(arg0.fSeekFree.immutable)
arg0.fNbytesFree == orig(arg0.fNbytesFree)
arg0.fNbytesFree.value == orig(arg0.fNbytesFree.value)
arg0.fNbytesFree.immutable == orig(arg0.fNbytesFree.immutable)
arg0.nfree == orig(arg0.nfree)
arg0.largeFile == orig(arg0.largeFile)
arg0.fCompress == orig(arg0.fCompress)
arg0.fSeekInfo == orig(arg0.fSeekInfo)
arg0.fSeekInfo.value == orig(arg0.fSeekInfo.value)
arg0.fSeekInfo.immutable == orig(arg0.fSeekInfo.immutable)
arg0.fNbytesInfo == orig(arg0.fNbytesInfo)
arg0.fNbytesInfo.value == orig(arg0.fNbytesInfo.value)
arg0.fNbytesInfo.immutable == orig(arg0.fNbytesInfo.immutable)
arg0.seekInfoRecord == orig(arg0.seekInfoRecord)
arg0.seekInfoRecord.objectClass == orig(arg0.seekInfoRecord.objectClass)
arg0.seekInfoRecord.className == orig(arg0.seekInfoRecord.className)
arg0.seekInfoRecord.className.toString == orig(arg0.seekInfoRecord.className.toString)
arg0.seekInfoRecord.seekPDir == orig(arg0.seekInfoRecord.seekPDir)
arg0.seekInfoRecord.fSeekKey == orig(arg0.seekInfoRecord.fSeekKey)
arg0.seekInfoRecord.objects == orig(arg0.seekInfoRecord.objects)
arg0.seekInfoRecord.objects[] == orig(arg0.seekInfoRecord.objects[])
arg0.seekInfoRecord.objects.getClass().getName() == orig(arg0.seekInfoRecord.objects.getClass().getName())
arg0.seekInfoRecord.objLen == orig(arg0.seekInfoRecord.objLen)
arg0.seekInfoRecord.fDatimeC == orig(arg0.seekInfoRecord.fDatimeC)
arg0.seekInfoRecord.keyLen == orig(arg0.seekInfoRecord.keyLen)
arg0.seekInfoRecord.size == orig(arg0.seekInfoRecord.size)
arg0.seekInfoRecord.suppressStreamerInfo == orig(arg0.seekInfoRecord.suppressStreamerInfo)
arg0.seekInfoRecord.compressionLevel == orig(arg0.seekInfoRecord.compressionLevel)
arg0.seekInfoRecord.tFile == orig(arg0.seekInfoRecord.tFile)
arg0.seekInfoRecord.name == orig(arg0.seekInfoRecord.name)
arg0.seekInfoRecord.name.toString == orig(arg0.seekInfoRecord.name.toString)
arg0.seekInfoRecord.title == orig(arg0.seekInfoRecord.title)
arg0.seekInfoRecord.title.toString == orig(arg0.seekInfoRecord.title.toString)
arg0.seekInfoRecord.fUniqueID == orig(arg0.seekInfoRecord.fUniqueID)
arg0.seekInfoRecord.fBits == orig(arg0.seekInfoRecord.fBits)
arg0.streamerInfos == orig(arg0.streamerInfos)
arg0.streamerInfos.getClass().getName() == orig(arg0.streamerInfos.getClass().getName())
arg0.dataRecords == orig(arg0.dataRecords)
arg0.dataRecords[] == orig(arg0.dataRecords[])
arg0.dataRecords.getClass().getName() == orig(arg0.dataRecords.getClass().getName())
arg0.keyRecords == orig(arg0.keyRecords)
arg0.keyRecords[] == orig(arg0.keyRecords[])
arg0.keyRecords.getClass().getName() == orig(arg0.keyRecords.getClass().getName())
arg0.fDatimeC == orig(arg0.fDatimeC)
arg0.fDatimeC.fDatime == orig(arg0.fDatimeC.fDatime)
arg0.fDatimeF == orig(arg0.fDatimeF)
arg0.fDatimeF.fDatime == orig(arg0.fDatimeF.fDatime)
arg0.fNbytesKeys == orig(arg0.fNbytesKeys)
arg0.fNbytesName == orig(arg0.fNbytesName)
arg0.fSeekDir == orig(arg0.fSeekDir)
arg0.fSeekDir.value == orig(arg0.fSeekDir.value)
arg0.fSeekDir.immutable == orig(arg0.fSeekDir.immutable)
arg0.fSeekParent == orig(arg0.fSeekParent)
arg0.fSeekParent.value == orig(arg0.fSeekParent.value)
arg0.fSeekParent.immutable == orig(arg0.fSeekParent.immutable)
arg0.directoryRecord == orig(arg0.directoryRecord)
arg0.directoryRecord.objectClass == orig(arg0.directoryRecord.objectClass)
arg0.directoryRecord.className == orig(arg0.directoryRecord.className)
arg0.directoryRecord.className.toString == orig(arg0.directoryRecord.className.toString)
arg0.directoryRecord.seekPDir == orig(arg0.directoryRecord.seekPDir)
arg0.directoryRecord.fSeekKey == orig(arg0.directoryRecord.fSeekKey)
arg0.directoryRecord.objects == orig(arg0.directoryRecord.objects)
arg0.directoryRecord.objects[] == orig(arg0.directoryRecord.objects[])
arg0.directoryRecord.objects.getClass().getName() == orig(arg0.directoryRecord.objects.getClass().getName())
arg0.directoryRecord.objLen == orig(arg0.directoryRecord.objLen)
arg0.directoryRecord.fDatimeC == orig(arg0.directoryRecord.fDatimeC)
arg0.directoryRecord.keyLen == orig(arg0.directoryRecord.keyLen)
arg0.directoryRecord.size == orig(arg0.directoryRecord.size)
arg0.directoryRecord.suppressStreamerInfo == orig(arg0.directoryRecord.suppressStreamerInfo)
arg0.directoryRecord.compressionLevel == orig(arg0.directoryRecord.compressionLevel)
arg0.directoryRecord.tFile == orig(arg0.directoryRecord.tFile)
arg0.directoryRecord.name == orig(arg0.directoryRecord.name)
arg0.directoryRecord.name.toString == orig(arg0.directoryRecord.name.toString)
arg0.directoryRecord.title == orig(arg0.directoryRecord.title)
arg0.directoryRecord.title.toString == orig(arg0.directoryRecord.title.toString)
arg0.directoryRecord.fUniqueID == orig(arg0.directoryRecord.fUniqueID)
arg0.directoryRecord.fBits == orig(arg0.directoryRecord.fBits)
arg0.seekKeysRecord == orig(arg0.seekKeysRecord)
arg0.seekKeysRecord.objectClass == orig(arg0.seekKeysRecord.objectClass)
arg0.seekKeysRecord.className == orig(arg0.seekKeysRecord.className)
arg0.seekKeysRecord.className.toString == orig(arg0.seekKeysRecord.className.toString)
arg0.seekKeysRecord.seekPDir == orig(arg0.seekKeysRecord.seekPDir)
arg0.seekKeysRecord.fSeekKey == orig(arg0.seekKeysRecord.fSeekKey)
arg0.seekKeysRecord.objects == orig(arg0.seekKeysRecord.objects)
arg0.seekKeysRecord.objects[] == orig(arg0.seekKeysRecord.objects[])
arg0.seekKeysRecord.objects.getClass().getName() == orig(arg0.seekKeysRecord.objects.getClass().getName())
arg0.seekKeysRecord.objLen == orig(arg0.seekKeysRecord.objLen)
arg0.seekKeysRecord.fDatimeC == orig(arg0.seekKeysRecord.fDatimeC)
arg0.seekKeysRecord.keyLen == orig(arg0.seekKeysRecord.keyLen)
arg0.seekKeysRecord.size == orig(arg0.seekKeysRecord.size)
arg0.seekKeysRecord.suppressStreamerInfo == orig(arg0.seekKeysRecord.suppressStreamerInfo)
arg0.seekKeysRecord.compressionLevel == orig(arg0.seekKeysRecord.compressionLevel)
arg0.seekKeysRecord.tFile == orig(arg0.seekKeysRecord.tFile)
arg0.seekKeysRecord.name == orig(arg0.seekKeysRecord.name)
arg0.seekKeysRecord.name.toString == orig(arg0.seekKeysRecord.name.toString)
arg0.seekKeysRecord.title == orig(arg0.seekKeysRecord.title)
arg0.seekKeysRecord.title.toString == orig(arg0.seekKeysRecord.title.toString)
arg0.seekKeysRecord.fUniqueID == orig(arg0.seekKeysRecord.fUniqueID)
arg0.seekKeysRecord.fBits == orig(arg0.seekKeysRecord.fBits)
arg0.fSeekKeys == orig(arg0.fSeekKeys)
arg0.fSeekKeys.value == orig(arg0.fSeekKeys.value)
arg0.fSeekKeys.immutable == orig(arg0.fSeekKeys.immutable)
arg0.fUUID == orig(arg0.fUUID)
arg0.fUUID.uuid == orig(arg0.fUUID.uuid)
arg0.keyList == orig(arg0.keyList)
arg0.keyList.list == orig(arg0.keyList.list)
arg0.keyList.list[] == orig(arg0.keyList.list[])
arg0.parent == orig(arg0.parent)
arg0.subdirectories == orig(arg0.subdirectories)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.fUniqueID == orig(arg0.fUniqueID)
arg0.fBits == orig(arg0.fBits)
arg2.toString == orig(arg2.toString)
arg3.toString == orig(arg3.toString)
arg4.value == orig(arg4.value)
arg4.immutable == orig(arg4.immutable)
this.fSeekKey.value == 0
this.objects[] == []
this.objects[].getClass().getName() == []
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.compressionLevel == -1
this.tFile.fEND.value == 0
this.tFile.fSeekInfo.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC == null
this.tFile.seekInfoRecord.keyLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys.value == 0
arg0.out.tFile has only one value
arg0.out.classMap has only one value
arg0.out.classMap.getClass().getName() == java.util.HashMap.class
arg0.fEND has only one value
arg0.fEND.value == 0
arg0.fEND.immutable == false
arg0.fSeekFree has only one value
arg0.fSeekFree.value == 0
arg0.fSeekFree.immutable == true
arg0.fNbytesFree has only one value
arg0.fNbytesFree.value == 0
arg0.fNbytesFree.immutable == true
arg0.nfree == 0
arg0.largeFile == false
arg0.fCompress == 1
arg0.fSeekInfo.value == 0
arg0.fSeekInfo.immutable == false
arg0.fNbytesInfo has only one value
arg0.fNbytesInfo.value == 0
arg0.fNbytesInfo.immutable == false
arg0.seekInfoRecord.objectClass has only one value
arg0.seekInfoRecord.className has only one value
arg0.seekInfoRecord.className.toString == "TList"
arg0.seekInfoRecord.seekPDir has only one value
arg0.seekInfoRecord.fSeekKey has only one value
arg0.seekInfoRecord.objects has only one value
arg0.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekInfoRecord.objects[] elements has only one value
arg0.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
arg0.seekInfoRecord.objects[].getClass().getName() elements == hep.io.root.output.classes.TList.class
arg0.seekInfoRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekInfoRecord.objLen == 0
arg0.seekInfoRecord.fDatimeC == null
arg0.seekInfoRecord.keyLen == 0
arg0.seekInfoRecord.size == 0
arg0.seekInfoRecord.suppressStreamerInfo == true
arg0.seekInfoRecord.compressionLevel == -1
arg0.seekInfoRecord.tFile has only one value
arg0.seekInfoRecord.name has only one value
arg0.seekInfoRecord.name.toString == "StreamerInfo"
arg0.seekInfoRecord.title has only one value
arg0.seekInfoRecord.title.toString == "Doubly linked list"
arg0.seekInfoRecord.fUniqueID == 0
arg0.seekInfoRecord.fBits == 50331648
arg0.streamerInfos has only one value
arg0.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.dataRecords has only one value
arg0.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.keyRecords has only one value
arg0.keyRecords[] elements has only one value
arg0.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.keyRecords[].getClass().getName() one of { [], [hep.io.root.output.TKey] }
arg0.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.fDatimeC has only one value
arg0.fDatimeC.fDatime == 2030791191
arg0.fDatimeF has only one value
arg0.fDatimeF.fDatime == 2030791191
arg0.fNbytesKeys == 0
arg0.fNbytesName == 0
arg0.fSeekDir.value == 0
arg0.fSeekDir.immutable == false
arg0.fSeekParent has only one value
arg0.fSeekParent.value == 0
arg0.fSeekParent.immutable == true
arg0.directoryRecord.objectClass has only one value
arg0.directoryRecord.className has only one value
arg0.directoryRecord.className.toString == "TFile"
arg0.directoryRecord.seekPDir has only one value
arg0.directoryRecord.fSeekKey has only one value
arg0.directoryRecord.objects has only one value
arg0.directoryRecord.objects[] contains no nulls and has only one value, of length 1
arg0.directoryRecord.objects[] elements has only one value
arg0.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
arg0.directoryRecord.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
arg0.directoryRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.directoryRecord.objLen == 0
arg0.directoryRecord.fDatimeC == null
arg0.directoryRecord.keyLen == 0
arg0.directoryRecord.size == 0
arg0.directoryRecord.suppressStreamerInfo == true
arg0.directoryRecord.compressionLevel == -1
arg0.directoryRecord.tFile has only one value
arg0.directoryRecord.name has only one value
arg0.directoryRecord.name.toString == "play.root"
arg0.directoryRecord.title has only one value
arg0.directoryRecord.title.toString == ""
arg0.directoryRecord.fUniqueID == 0
arg0.directoryRecord.fBits == 50331648
arg0.seekKeysRecord.objectClass has only one value
arg0.seekKeysRecord.className has only one value
arg0.seekKeysRecord.className.toString == "TFile"
arg0.seekKeysRecord.seekPDir has only one value
arg0.seekKeysRecord.fSeekKey has only one value
arg0.seekKeysRecord.objects has only one value
arg0.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
arg0.seekKeysRecord.objects[] elements has only one value
arg0.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
arg0.seekKeysRecord.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
arg0.seekKeysRecord.objects.getClass().getName() == java.util.ArrayList.class
arg0.seekKeysRecord.objLen == 0
arg0.seekKeysRecord.fDatimeC == null
arg0.seekKeysRecord.keyLen == 0
arg0.seekKeysRecord.size == 0
arg0.seekKeysRecord.suppressStreamerInfo == true
arg0.seekKeysRecord.compressionLevel == 0
arg0.seekKeysRecord.tFile has only one value
arg0.seekKeysRecord.name has only one value
arg0.seekKeysRecord.name.toString == "play.root"
arg0.seekKeysRecord.title has only one value
arg0.seekKeysRecord.title.toString == ""
arg0.seekKeysRecord.fUniqueID == 0
arg0.seekKeysRecord.fBits == 50331648
arg0.fSeekKeys.value == 0
arg0.fSeekKeys.immutable == false
arg0.fUUID has only one value
arg0.fUUID.uuid has only one value
arg0.keyList has only one value
arg0.keyList.list has only one value
arg0.keyList.list[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.parent == null
arg0.subdirectories has only one value
arg0.name has only one value
arg0.name.toString == "play.root"
arg0.title has only one value
arg0.title.toString == ""
arg0.fUniqueID == 0
arg0.fBits == 50331648
arg4.value one of { 0, 100 }
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(arg0.seekInfoRecord.objects[]) == 1
size(arg0.keyRecords[]) one of { 0, 1 }
size(arg0.directoryRecord.objects[]) == 1
size(arg0.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.add(java.lang.Object):::ENTER
this.fSeekKey.value == 0
this.objects[] == []
this.objects[].getClass().getName() == []
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.compressionLevel == -1
this.tFile.fEND.value == 0
this.tFile.fSeekInfo.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC == null
this.tFile.seekInfoRecord.keyLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
size(this.tFile.dataRecords[]) >= 1
===========================================================================
hep.io.root.output.TKey.add(java.lang.Object):::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.fDatimeC == orig(this.fDatimeC)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
size(this.objects[])-1 == orig(size(this.objects[]))
this.fSeekKey.value == 0
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.compressionLevel == -1
this.tFile.fEND.value == 0
this.tFile.fSeekInfo.value == 0
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC == null
this.tFile.seekInfoRecord.keyLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.fSeekKeys.value == 0
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) >= 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) >= orig(size(this.tFile.seekInfoRecord.objects[]))
size(this.tFile.seekInfoRecord.objects[])-1 <= orig(size(this.tFile.seekInfoRecord.objects[]))
size(this.tFile.seekInfoRecord.objects[])-1 >= orig(size(this.tFile.seekInfoRecord.objects[]))-1
size(this.tFile.directoryRecord.objects[]) >= orig(size(this.tFile.directoryRecord.objects[]))
size(this.tFile.directoryRecord.objects[])-1 <= orig(size(this.tFile.directoryRecord.objects[]))
size(this.tFile.directoryRecord.objects[])-1 >= orig(size(this.tFile.directoryRecord.objects[]))-1
size(this.tFile.seekKeysRecord.objects[]) >= orig(size(this.tFile.seekKeysRecord.objects[]))
size(this.tFile.seekKeysRecord.objects[])-1 <= orig(size(this.tFile.seekKeysRecord.objects[]))
size(this.tFile.seekKeysRecord.objects[])-1 >= orig(size(this.tFile.seekKeysRecord.objects[]))-1
===========================================================================
hep.io.root.output.TKey.getObjectClass():::ENTER
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 71338
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 384
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 427
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TKey.getObjectClass():::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 71338
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 384
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 427
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TKey.getSeekKey():::ENTER
this.className.toString one of { "TFile", "TList" }
this.fSeekKey.value == 0
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.suppressStreamerInfo == true
this.tFile.fEND.value == 0
this.tFile.fSeekInfo == null
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objects[] == []
this.tFile.seekInfoRecord.objects[].getClass().getName() == []
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC == null
this.tFile.seekInfoRecord.keyLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.tFile.dataRecords[] elements has only one value
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys.value == 0
this.tFile.keyList.list[] == []
this.tFile.keyList.list[].getClass().getName() == []
this.name.toString one of { "StreamerInfo", "play.root" }
this.title.toString one of { "", "Doubly linked list" }
size(this.tFile.dataRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.getSeekKey():::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.fDatimeC == orig(this.fDatimeC)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.className.toString one of { "TFile", "TList" }
this.fSeekKey.value == 0
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.suppressStreamerInfo == true
this.tFile.fEND.value == 0
this.tFile.fSeekInfo == null
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord.objects[] == []
this.tFile.seekInfoRecord.objects[].getClass().getName() == []
this.tFile.seekInfoRecord.objLen == 0
this.tFile.seekInfoRecord.fDatimeC == null
this.tFile.seekInfoRecord.keyLen == 0
this.tFile.seekInfoRecord.size == 0
this.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.tFile.dataRecords[] elements has only one value
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys.value == 0
this.tFile.keyList.list[] == []
this.tFile.keyList.list[].getClass().getName() == []
this.name.toString one of { "StreamerInfo", "play.root" }
this.title.toString one of { "", "Doubly linked list" }
return.value == 0
return.immutable == false
size(this.tFile.dataRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.rewrite(hep.io.root.output.RootRandomAccessFile):::ENTER
this has only one value
this.objectClass has only one value
this.className has only one value
this.className.toString == "TFile"
this.seekPDir has only one value
this.seekPDir.value == 0
this.seekPDir.immutable == true
this.fSeekKey has only one value
this.fSeekKey.value == 100
this.objects has only one value
this.objects[] contains no nulls and has only one value, of length 1
this.objects[] elements has only one value
this.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.objLen == 71
this.fDatimeC has only one value
this.fDatimeC.fDatime == 2030791191
this.keyLen == 43
this.size == 114
this.suppressStreamerInfo == true
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 71338
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 384
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 427
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.name has only one value
this.name.toString == "play.root"
this.title has only one value
this.title.toString == ""
arg0 has only one value
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[] contains no nulls and has only one value, of length 7
arg0.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys == 0
arg0.tFile.fNbytesName == 54
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.classMap has only one value
arg0.classMap.getClass().getName() == java.util.HashMap.class
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
size(arg0.tFile.dataRecords[]) == 7
size(arg0.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TKey.rewrite(hep.io.root.output.RootRandomAccessFile):::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg0.tFile == orig(arg0.tFile)
arg0.tFile.out == orig(arg0.tFile.out)
arg0.tFile.fEND == orig(arg0.tFile.fEND)
arg0.tFile.fSeekFree == orig(arg0.tFile.fSeekFree)
arg0.tFile.fNbytesFree == orig(arg0.tFile.fNbytesFree)
arg0.tFile.nfree == orig(arg0.tFile.nfree)
arg0.tFile.largeFile == orig(arg0.tFile.largeFile)
arg0.tFile.fCompress == orig(arg0.tFile.fCompress)
arg0.tFile.fSeekInfo == orig(arg0.tFile.fSeekInfo)
arg0.tFile.fNbytesInfo == orig(arg0.tFile.fNbytesInfo)
arg0.tFile.seekInfoRecord == orig(arg0.tFile.seekInfoRecord)
arg0.tFile.streamerInfos == orig(arg0.tFile.streamerInfos)
arg0.tFile.streamerInfos.getClass().getName() == orig(arg0.tFile.streamerInfos.getClass().getName())
arg0.tFile.dataRecords == orig(arg0.tFile.dataRecords)
arg0.tFile.dataRecords[] == orig(arg0.tFile.dataRecords[])
arg0.tFile.dataRecords.getClass().getName() == orig(arg0.tFile.dataRecords.getClass().getName())
arg0.tFile.keyRecords == orig(arg0.tFile.keyRecords)
arg0.tFile.keyRecords[] == orig(arg0.tFile.keyRecords[])
arg0.tFile.keyRecords.getClass().getName() == orig(arg0.tFile.keyRecords.getClass().getName())
arg0.tFile.fDatimeC == orig(arg0.tFile.fDatimeC)
arg0.tFile.fDatimeF == orig(arg0.tFile.fDatimeF)
arg0.tFile.fNbytesName == orig(arg0.tFile.fNbytesName)
arg0.tFile.fSeekDir == orig(arg0.tFile.fSeekDir)
arg0.tFile.fSeekParent == orig(arg0.tFile.fSeekParent)
arg0.tFile.directoryRecord == orig(arg0.tFile.directoryRecord)
arg0.tFile.seekKeysRecord == orig(arg0.tFile.seekKeysRecord)
arg0.tFile.fSeekKeys == orig(arg0.tFile.fSeekKeys)
arg0.tFile.fUUID == orig(arg0.tFile.fUUID)
arg0.tFile.keyList == orig(arg0.tFile.keyList)
arg0.tFile.parent == orig(arg0.tFile.parent)
arg0.tFile.subdirectories == orig(arg0.tFile.subdirectories)
arg0.tFile.name == orig(arg0.tFile.name)
arg0.tFile.name.toString == orig(arg0.tFile.name.toString)
arg0.tFile.title == orig(arg0.tFile.title)
arg0.tFile.title.toString == orig(arg0.tFile.title.toString)
arg0.tFile.fUniqueID == orig(arg0.tFile.fUniqueID)
arg0.tFile.fBits == orig(arg0.tFile.fBits)
arg0.classMap == orig(arg0.classMap)
arg0.classMap.getClass().getName() == orig(arg0.classMap.getClass().getName())
this.objectClass has only one value
this.className has only one value
this.className.toString == "TFile"
this.seekPDir has only one value
this.seekPDir.value == 0
this.seekPDir.immutable == true
this.fSeekKey has only one value
this.fSeekKey.value == 100
this.objects has only one value
this.objects[] contains no nulls and has only one value, of length 1
this.objects[] elements has only one value
this.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.objects[].getClass().getName() elements == hep.io.root.output.TFile.class
this.objLen == 71
this.fDatimeC has only one value
this.fDatimeC.fDatime == 2030791199
this.keyLen == 43
this.size == 114
this.suppressStreamerInfo == true
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 71338
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 427
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 384
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 427
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.name has only one value
this.name.toString == "play.root"
this.title has only one value
this.title.toString == ""
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[] contains no nulls and has only one value, of length 7
arg0.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys == 427
arg0.tFile.fNbytesName == 54
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.classMap has only one value
arg0.classMap.getClass().getName() == java.util.HashMap.class
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
size(arg0.tFile.dataRecords[]) == 7
size(arg0.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TKey.setCompressionLevel(int):::ENTER
this has only one value
this.objectClass has only one value
this.className has only one value
this.className.toString == "TFile"
this.seekPDir has only one value
this.seekPDir.value == 0
this.seekPDir.immutable == false
this.fSeekKey has only one value
this.fSeekKey.value == 0
this.objects has only one value
this.objects[] contains no nulls and has only one value, of length 1
this.objects[] elements has only one value
this.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.suppressStreamerInfo == true
this.compressionLevel == -1
this.tFile.out == null
this.tFile.fEND.value == 0
this.tFile.fSeekInfo == null
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord == null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.tFile.dataRecords[] elements has only one value
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == -1
this.tFile.fSeekKeys == null
this.tFile.keyList.list[] == []
this.tFile.keyList.list[].getClass().getName() == []
this.name has only one value
this.name.toString == "play.root"
this.title has only one value
this.title.toString == ""
arg0 == 0
size(this.objects[]) == 1
size(this.tFile.dataRecords[]) == 1
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.setCompressionLevel(int):::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.fDatimeC == orig(this.fDatimeC)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.objectClass has only one value
this.className has only one value
this.className.toString == "TFile"
this.seekPDir has only one value
this.seekPDir.value == 0
this.seekPDir.immutable == false
this.fSeekKey has only one value
this.fSeekKey.value == 0
this.objects has only one value
this.objects[] contains no nulls and has only one value, of length 1
this.objects[] elements has only one value
this.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.objects[].getClass().getName() elements == hep.io.root.output.TDirectory.KeyList.class
this.objLen == 0
this.fDatimeC == null
this.keyLen == 0
this.size == 0
this.suppressStreamerInfo == true
this.compressionLevel == 0
this.tFile.out == null
this.tFile.fEND.value == 0
this.tFile.fSeekInfo == null
this.tFile.fNbytesInfo.value == 0
this.tFile.seekInfoRecord == null
this.tFile.dataRecords[] contains no nulls and has only one value, of length 1
this.tFile.dataRecords[] elements has only one value
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 0
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 0
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 0
this.tFile.directoryRecord.fDatimeC == null
this.tFile.directoryRecord.keyLen == 0
this.tFile.directoryRecord.size == 0
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC == null
this.tFile.seekKeysRecord.keyLen == 0
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys == null
this.tFile.keyList.list[] == []
this.tFile.keyList.list[].getClass().getName() == []
this.name has only one value
this.name.toString == "play.root"
this.title has only one value
this.title.toString == ""
size(this.objects[]) == 1
size(this.tFile.dataRecords[]) == 1
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
===========================================================================
hep.io.root.output.TKey.streamer(hep.io.root.output.RootOutput):::ENTER
this.seekPDir has only one value
this.seekPDir.value == 100
this.seekPDir.immutable == false
this.suppressStreamerInfo == false
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 0
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
arg0 has only one value
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TKey.streamer(hep.io.root.output.RootOutput):::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.value == orig(this.fSeekKey.value)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.objLen == orig(this.objLen)
this.fDatimeC == orig(this.fDatimeC)
this.fDatimeC.fDatime == orig(this.fDatimeC.fDatime)
this.keyLen == orig(this.keyLen)
this.size == orig(this.size)
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.value == orig(this.tFile.fSeekInfo.value)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.objLen == orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.fDatimeC == orig(this.tFile.seekInfoRecord.fDatimeC)
this.tFile.seekInfoRecord.keyLen == orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size == orig(this.tFile.seekInfoRecord.size)
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fNbytesKeys == orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName == orig(this.tFile.fNbytesName)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.value == orig(this.tFile.fSeekDir.value)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.objLen == orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.fDatimeC == orig(this.tFile.directoryRecord.fDatimeC)
this.tFile.directoryRecord.keyLen == orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size == orig(this.tFile.directoryRecord.size)
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.objLen == orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.fDatimeC == orig(this.tFile.seekKeysRecord.fDatimeC)
this.tFile.seekKeysRecord.keyLen == orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size == orig(this.tFile.seekKeysRecord.size)
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.value == orig(this.tFile.fSeekKeys.value)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.seekPDir has only one value
this.seekPDir.value == 100
this.seekPDir.immutable == false
this.suppressStreamerInfo == false
this.compressionLevel == -1
this.tFile.out has only one value
this.tFile.fEND.value == 0
this.tFile.fSeekInfo has only one value
this.tFile.fSeekInfo.value == 67608
this.tFile.fNbytesInfo.value == 3303
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.seekInfoRecord.objLen == 12053
this.tFile.seekInfoRecord.fDatimeC has only one value
this.tFile.seekInfoRecord.keyLen == 64
this.tFile.seekInfoRecord.size == 3303
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.fDatimeC has only one value
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.objLen == 0
this.tFile.seekKeysRecord.fDatimeC has only one value
this.tFile.seekKeysRecord.keyLen == 43
this.tFile.seekKeysRecord.size == 0
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.fSeekKeys.value == 70911
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
===========================================================================
hep.io.root.output.TKey.writeRecord(hep.io.root.output.RootRandomAccessFile):::ENTER
this.fSeekKey.value one of { 0, 100 }
this.objLen one of { 0, 71 }
this.fDatimeC.fDatime == 2030791191
this.keyLen one of { 0, 43 }
this.size one of { 0, 114 }
this.tFile.out has only one value
this.tFile.fSeekInfo has only one value
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesKeys == 0
this.tFile.fSeekDir has only one value
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0 has only one value
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[] contains no nulls and has only one value, of length 7
arg0.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys == 0
arg0.tFile.fNbytesName one of { 0, 54 }
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.classMap has only one value
arg0.classMap.getClass().getName() == java.util.HashMap.class
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
size(arg0.tFile.dataRecords[]) == 7
size(arg0.tFile.keyRecords[]) == 1
===========================================================================
hep.io.root.output.TKey.writeRecord(hep.io.root.output.RootRandomAccessFile):::EXIT
this.objectClass == orig(this.objectClass)
this.className == orig(this.className)
this.className.toString == orig(this.className.toString)
this.seekPDir == orig(this.seekPDir)
this.seekPDir.value == orig(this.seekPDir.value)
this.seekPDir.immutable == orig(this.seekPDir.immutable)
hep.io.root.output.Pointer.ZERO == orig(hep.io.root.output.Pointer.ZERO)
hep.io.root.output.Pointer.ZERO.value == orig(hep.io.root.output.Pointer.ZERO.value)
hep.io.root.output.Pointer.ZERO.immutable == orig(hep.io.root.output.Pointer.ZERO.immutable)
this.fSeekKey == orig(this.fSeekKey)
this.fSeekKey.immutable == orig(this.fSeekKey.immutable)
this.objects == orig(this.objects)
this.objects[] == orig(this.objects[])
this.objects.getClass().getName() == orig(this.objects.getClass().getName())
this.suppressStreamerInfo == orig(this.suppressStreamerInfo)
this.compressionLevel == orig(this.compressionLevel)
this.tFile == orig(this.tFile)
this.tFile.out == orig(this.tFile.out)
this.tFile.out.tFile == orig(this.tFile.out.tFile)
this.tFile.out.classMap == orig(this.tFile.out.classMap)
this.tFile.out.classMap.getClass().getName() == orig(this.tFile.out.classMap.getClass().getName())
this.tFile.fEND == orig(this.tFile.fEND)
this.tFile.fEND.value == orig(this.tFile.fEND.value)
this.tFile.fEND.immutable == orig(this.tFile.fEND.immutable)
this.tFile.fSeekFree == orig(this.tFile.fSeekFree)
this.tFile.fSeekFree.value == orig(this.tFile.fSeekFree.value)
this.tFile.fSeekFree.immutable == orig(this.tFile.fSeekFree.immutable)
this.tFile.fNbytesFree == orig(this.tFile.fNbytesFree)
this.tFile.fNbytesFree.value == orig(this.tFile.fNbytesFree.value)
this.tFile.fNbytesFree.immutable == orig(this.tFile.fNbytesFree.immutable)
this.tFile.nfree == orig(this.tFile.nfree)
this.tFile.largeFile == orig(this.tFile.largeFile)
this.tFile.fCompress == orig(this.tFile.fCompress)
this.tFile.fSeekInfo == orig(this.tFile.fSeekInfo)
this.tFile.fSeekInfo.immutable == orig(this.tFile.fSeekInfo.immutable)
this.tFile.fNbytesInfo == orig(this.tFile.fNbytesInfo)
this.tFile.fNbytesInfo.value == orig(this.tFile.fNbytesInfo.value)
this.tFile.fNbytesInfo.immutable == orig(this.tFile.fNbytesInfo.immutable)
this.tFile.seekInfoRecord == orig(this.tFile.seekInfoRecord)
this.tFile.seekInfoRecord.objectClass == orig(this.tFile.seekInfoRecord.objectClass)
this.tFile.seekInfoRecord.className == orig(this.tFile.seekInfoRecord.className)
this.tFile.seekInfoRecord.className.toString == orig(this.tFile.seekInfoRecord.className.toString)
this.tFile.seekInfoRecord.seekPDir == orig(this.tFile.seekInfoRecord.seekPDir)
this.tFile.seekInfoRecord.fSeekKey == orig(this.tFile.seekInfoRecord.fSeekKey)
this.tFile.seekInfoRecord.objects == orig(this.tFile.seekInfoRecord.objects)
this.tFile.seekInfoRecord.objects[] == orig(this.tFile.seekInfoRecord.objects[])
this.tFile.seekInfoRecord.objects.getClass().getName() == orig(this.tFile.seekInfoRecord.objects.getClass().getName())
this.tFile.seekInfoRecord.suppressStreamerInfo == orig(this.tFile.seekInfoRecord.suppressStreamerInfo)
this.tFile.seekInfoRecord.compressionLevel == orig(this.tFile.seekInfoRecord.compressionLevel)
this.tFile.seekInfoRecord.tFile == orig(this.tFile.seekInfoRecord.tFile)
this.tFile.seekInfoRecord.name == orig(this.tFile.seekInfoRecord.name)
this.tFile.seekInfoRecord.name.toString == orig(this.tFile.seekInfoRecord.name.toString)
this.tFile.seekInfoRecord.title == orig(this.tFile.seekInfoRecord.title)
this.tFile.seekInfoRecord.title.toString == orig(this.tFile.seekInfoRecord.title.toString)
this.tFile.seekInfoRecord.fUniqueID == orig(this.tFile.seekInfoRecord.fUniqueID)
this.tFile.seekInfoRecord.fBits == orig(this.tFile.seekInfoRecord.fBits)
this.tFile.streamerInfos == orig(this.tFile.streamerInfos)
this.tFile.streamerInfos.getClass().getName() == orig(this.tFile.streamerInfos.getClass().getName())
hep.io.root.output.TFile.nameWarp == orig(hep.io.root.output.TFile.nameWarp)
this.tFile.dataRecords == orig(this.tFile.dataRecords)
this.tFile.dataRecords[] == orig(this.tFile.dataRecords[])
this.tFile.dataRecords.getClass().getName() == orig(this.tFile.dataRecords.getClass().getName())
this.tFile.keyRecords == orig(this.tFile.keyRecords)
this.tFile.keyRecords[] == orig(this.tFile.keyRecords[])
this.tFile.keyRecords.getClass().getName() == orig(this.tFile.keyRecords.getClass().getName())
hep.io.root.output.TDirectory.timeWarp == orig(hep.io.root.output.TDirectory.timeWarp)
hep.io.root.output.TDirectory.uuidWarp == orig(hep.io.root.output.TDirectory.uuidWarp)
this.tFile.fDatimeC == orig(this.tFile.fDatimeC)
this.tFile.fDatimeC.fDatime == orig(this.tFile.fDatimeC.fDatime)
this.tFile.fDatimeF == orig(this.tFile.fDatimeF)
this.tFile.fDatimeF.fDatime == orig(this.tFile.fDatimeF.fDatime)
this.tFile.fSeekDir == orig(this.tFile.fSeekDir)
this.tFile.fSeekDir.immutable == orig(this.tFile.fSeekDir.immutable)
this.tFile.fSeekParent == orig(this.tFile.fSeekParent)
this.tFile.fSeekParent.value == orig(this.tFile.fSeekParent.value)
this.tFile.fSeekParent.immutable == orig(this.tFile.fSeekParent.immutable)
this.tFile.directoryRecord == orig(this.tFile.directoryRecord)
this.tFile.directoryRecord.objectClass == orig(this.tFile.directoryRecord.objectClass)
this.tFile.directoryRecord.className == orig(this.tFile.directoryRecord.className)
this.tFile.directoryRecord.className.toString == orig(this.tFile.directoryRecord.className.toString)
this.tFile.directoryRecord.seekPDir == orig(this.tFile.directoryRecord.seekPDir)
this.tFile.directoryRecord.fSeekKey == orig(this.tFile.directoryRecord.fSeekKey)
this.tFile.directoryRecord.objects == orig(this.tFile.directoryRecord.objects)
this.tFile.directoryRecord.objects[] == orig(this.tFile.directoryRecord.objects[])
this.tFile.directoryRecord.objects.getClass().getName() == orig(this.tFile.directoryRecord.objects.getClass().getName())
this.tFile.directoryRecord.suppressStreamerInfo == orig(this.tFile.directoryRecord.suppressStreamerInfo)
this.tFile.directoryRecord.compressionLevel == orig(this.tFile.directoryRecord.compressionLevel)
this.tFile.directoryRecord.tFile == orig(this.tFile.directoryRecord.tFile)
this.tFile.directoryRecord.name == orig(this.tFile.directoryRecord.name)
this.tFile.directoryRecord.name.toString == orig(this.tFile.directoryRecord.name.toString)
this.tFile.directoryRecord.title == orig(this.tFile.directoryRecord.title)
this.tFile.directoryRecord.title.toString == orig(this.tFile.directoryRecord.title.toString)
this.tFile.directoryRecord.fUniqueID == orig(this.tFile.directoryRecord.fUniqueID)
this.tFile.directoryRecord.fBits == orig(this.tFile.directoryRecord.fBits)
this.tFile.seekKeysRecord == orig(this.tFile.seekKeysRecord)
this.tFile.seekKeysRecord.objectClass == orig(this.tFile.seekKeysRecord.objectClass)
this.tFile.seekKeysRecord.className == orig(this.tFile.seekKeysRecord.className)
this.tFile.seekKeysRecord.className.toString == orig(this.tFile.seekKeysRecord.className.toString)
this.tFile.seekKeysRecord.seekPDir == orig(this.tFile.seekKeysRecord.seekPDir)
this.tFile.seekKeysRecord.fSeekKey == orig(this.tFile.seekKeysRecord.fSeekKey)
this.tFile.seekKeysRecord.objects == orig(this.tFile.seekKeysRecord.objects)
this.tFile.seekKeysRecord.objects[] == orig(this.tFile.seekKeysRecord.objects[])
this.tFile.seekKeysRecord.objects.getClass().getName() == orig(this.tFile.seekKeysRecord.objects.getClass().getName())
this.tFile.seekKeysRecord.suppressStreamerInfo == orig(this.tFile.seekKeysRecord.suppressStreamerInfo)
this.tFile.seekKeysRecord.compressionLevel == orig(this.tFile.seekKeysRecord.compressionLevel)
this.tFile.seekKeysRecord.tFile == orig(this.tFile.seekKeysRecord.tFile)
this.tFile.seekKeysRecord.name == orig(this.tFile.seekKeysRecord.name)
this.tFile.seekKeysRecord.name.toString == orig(this.tFile.seekKeysRecord.name.toString)
this.tFile.seekKeysRecord.title == orig(this.tFile.seekKeysRecord.title)
this.tFile.seekKeysRecord.title.toString == orig(this.tFile.seekKeysRecord.title.toString)
this.tFile.seekKeysRecord.fUniqueID == orig(this.tFile.seekKeysRecord.fUniqueID)
this.tFile.seekKeysRecord.fBits == orig(this.tFile.seekKeysRecord.fBits)
this.tFile.fSeekKeys == orig(this.tFile.fSeekKeys)
this.tFile.fSeekKeys.immutable == orig(this.tFile.fSeekKeys.immutable)
this.tFile.fUUID == orig(this.tFile.fUUID)
this.tFile.fUUID.uuid == orig(this.tFile.fUUID.uuid)
this.tFile.keyList == orig(this.tFile.keyList)
this.tFile.keyList.list == orig(this.tFile.keyList.list)
this.tFile.keyList.list[] == orig(this.tFile.keyList.list[])
this.tFile.parent == orig(this.tFile.parent)
this.tFile.subdirectories == orig(this.tFile.subdirectories)
this.tFile.name == orig(this.tFile.name)
this.tFile.name.toString == orig(this.tFile.name.toString)
this.tFile.title == orig(this.tFile.title)
this.tFile.title.toString == orig(this.tFile.title.toString)
this.tFile.fUniqueID == orig(this.tFile.fUniqueID)
this.tFile.fBits == orig(this.tFile.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg0.tFile == orig(arg0.tFile)
arg0.tFile.out == orig(arg0.tFile.out)
arg0.tFile.fEND == orig(arg0.tFile.fEND)
arg0.tFile.fSeekFree == orig(arg0.tFile.fSeekFree)
arg0.tFile.fNbytesFree == orig(arg0.tFile.fNbytesFree)
arg0.tFile.nfree == orig(arg0.tFile.nfree)
arg0.tFile.largeFile == orig(arg0.tFile.largeFile)
arg0.tFile.fCompress == orig(arg0.tFile.fCompress)
arg0.tFile.fSeekInfo == orig(arg0.tFile.fSeekInfo)
arg0.tFile.fNbytesInfo == orig(arg0.tFile.fNbytesInfo)
arg0.tFile.seekInfoRecord == orig(arg0.tFile.seekInfoRecord)
arg0.tFile.streamerInfos == orig(arg0.tFile.streamerInfos)
arg0.tFile.streamerInfos.getClass().getName() == orig(arg0.tFile.streamerInfos.getClass().getName())
arg0.tFile.dataRecords == orig(arg0.tFile.dataRecords)
arg0.tFile.dataRecords[] == orig(arg0.tFile.dataRecords[])
arg0.tFile.dataRecords.getClass().getName() == orig(arg0.tFile.dataRecords.getClass().getName())
arg0.tFile.keyRecords == orig(arg0.tFile.keyRecords)
arg0.tFile.keyRecords[] == orig(arg0.tFile.keyRecords[])
arg0.tFile.keyRecords.getClass().getName() == orig(arg0.tFile.keyRecords.getClass().getName())
arg0.tFile.fDatimeC == orig(arg0.tFile.fDatimeC)
arg0.tFile.fDatimeF == orig(arg0.tFile.fDatimeF)
arg0.tFile.fSeekDir == orig(arg0.tFile.fSeekDir)
arg0.tFile.fSeekParent == orig(arg0.tFile.fSeekParent)
arg0.tFile.directoryRecord == orig(arg0.tFile.directoryRecord)
arg0.tFile.seekKeysRecord == orig(arg0.tFile.seekKeysRecord)
arg0.tFile.fSeekKeys == orig(arg0.tFile.fSeekKeys)
arg0.tFile.fUUID == orig(arg0.tFile.fUUID)
arg0.tFile.keyList == orig(arg0.tFile.keyList)
arg0.tFile.parent == orig(arg0.tFile.parent)
arg0.tFile.subdirectories == orig(arg0.tFile.subdirectories)
arg0.tFile.name == orig(arg0.tFile.name)
arg0.tFile.name.toString == orig(arg0.tFile.name.toString)
arg0.tFile.title == orig(arg0.tFile.title)
arg0.tFile.title.toString == orig(arg0.tFile.title.toString)
arg0.tFile.fUniqueID == orig(arg0.tFile.fUniqueID)
arg0.tFile.fBits == orig(arg0.tFile.fBits)
arg0.classMap == orig(arg0.classMap)
arg0.classMap.getClass().getName() == orig(arg0.classMap.getClass().getName())
this.tFile.out has only one value
this.tFile.fSeekInfo has only one value
this.tFile.seekInfoRecord has only one value
this.tFile.seekInfoRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekInfoRecord.objects[].getClass().getName() == [hep.io.root.output.classes.TList]
this.tFile.dataRecords[] contains no nulls and has only one value, of length 7
this.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
this.tFile.keyRecords[] contains no nulls and has only one value, of length 1
this.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
this.tFile.fNbytesName == 54
this.tFile.fSeekDir has only one value
this.tFile.fSeekDir.value == 100
this.tFile.directoryRecord has only one value
this.tFile.directoryRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.directoryRecord.objects[].getClass().getName() == [hep.io.root.output.TFile]
this.tFile.directoryRecord.objLen == 71
this.tFile.directoryRecord.keyLen == 43
this.tFile.directoryRecord.size == 114
this.tFile.seekKeysRecord has only one value
this.tFile.seekKeysRecord.objects[] contains no nulls and has only one value, of length 1
this.tFile.seekKeysRecord.objects[].getClass().getName() == [hep.io.root.output.TDirectory.KeyList]
this.tFile.seekKeysRecord.compressionLevel == 0
this.tFile.fSeekKeys has only one value
this.tFile.keyList.list[] contains no nulls and has only one value, of length 6
this.tFile.keyList.list[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.tFile has only one value
arg0.tFile.out has only one value
arg0.tFile.fEND has only one value
arg0.tFile.fSeekFree has only one value
arg0.tFile.fNbytesFree has only one value
arg0.tFile.nfree == 0
arg0.tFile.largeFile == false
arg0.tFile.fCompress == 1
arg0.tFile.fSeekInfo has only one value
arg0.tFile.fNbytesInfo has only one value
arg0.tFile.seekInfoRecord has only one value
arg0.tFile.streamerInfos has only one value
arg0.tFile.streamerInfos.getClass().getName() == java.util.HashMap.class
arg0.tFile.dataRecords has only one value
arg0.tFile.dataRecords[] contains no nulls and has only one value, of length 7
arg0.tFile.dataRecords[].getClass().getName() == [hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey, hep.io.root.output.TKey]
arg0.tFile.dataRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.dataRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.keyRecords has only one value
arg0.tFile.keyRecords[] contains no nulls and has only one value, of length 1
arg0.tFile.keyRecords[] elements has only one value
arg0.tFile.keyRecords[].getClass().getName() == [hep.io.root.output.TKey]
arg0.tFile.keyRecords[].getClass().getName() elements == hep.io.root.output.TKey.class
arg0.tFile.keyRecords.getClass().getName() == java.util.ArrayList.class
arg0.tFile.fDatimeC has only one value
arg0.tFile.fDatimeF has only one value
arg0.tFile.fNbytesKeys one of { 0, 427 }
arg0.tFile.fNbytesName == 54
arg0.tFile.fSeekDir has only one value
arg0.tFile.fSeekParent has only one value
arg0.tFile.directoryRecord has only one value
arg0.tFile.seekKeysRecord has only one value
arg0.tFile.fSeekKeys has only one value
arg0.tFile.fUUID has only one value
arg0.tFile.keyList has only one value
arg0.tFile.parent == null
arg0.tFile.subdirectories has only one value
arg0.tFile.name has only one value
arg0.tFile.name.toString == "play.root"
arg0.tFile.title has only one value
arg0.tFile.title.toString == ""
arg0.tFile.fUniqueID == 0
arg0.tFile.fBits == 50331648
arg0.classMap has only one value
arg0.classMap.getClass().getName() == java.util.HashMap.class
size(this.objects[]) == 1
size(this.tFile.seekInfoRecord.objects[]) == 1
size(this.tFile.dataRecords[]) == 7
size(this.tFile.keyRecords[]) == 1
size(this.tFile.directoryRecord.objects[]) == 1
size(this.tFile.seekKeysRecord.objects[]) == 1
size(this.tFile.keyList.list[]) == 6
size(arg0.tFile.dataRecords[]) == 7
size(arg0.tFile.keyRecords[]) == 1
orig(this.fSeekKey.value) % this.fSeekKey.value == 0
this.fSeekKey.value >= orig(this.fSeekKey.value)
orig(this.objLen) % this.objLen == 0
this.objLen >= orig(this.objLen)
orig(this.keyLen) % this.keyLen == 0
this.keyLen >= orig(this.keyLen)
orig(this.size) % this.size == 0
this.size >= orig(this.size)
this.tFile.fSeekInfo.value >= orig(this.tFile.fSeekInfo.value)
this.tFile.seekInfoRecord.objLen >= orig(this.tFile.seekInfoRecord.objLen)
this.tFile.seekInfoRecord.keyLen >= orig(this.tFile.seekInfoRecord.keyLen)
this.tFile.seekInfoRecord.size >= orig(this.tFile.seekInfoRecord.size)
this.tFile.fNbytesKeys >= orig(this.tFile.fNbytesKeys)
this.tFile.fNbytesName >= orig(this.tFile.fNbytesName)
this.tFile.fSeekDir.value >= orig(this.tFile.fSeekDir.value)
this.tFile.directoryRecord.objLen >= orig(this.tFile.directoryRecord.objLen)
this.tFile.directoryRecord.keyLen >= orig(this.tFile.directoryRecord.keyLen)
this.tFile.directoryRecord.size >= orig(this.tFile.directoryRecord.size)
this.tFile.seekKeysRecord.objLen >= orig(this.tFile.seekKeysRecord.objLen)
this.tFile.seekKeysRecord.keyLen >= orig(this.tFile.seekKeysRecord.keyLen)
this.tFile.seekKeysRecord.size >= orig(this.tFile.seekKeysRecord.size)
this.tFile.fSeekKeys.value >= orig(this.tFile.fSeekKeys.value)
arg0.tFile.fNbytesKeys >= orig(arg0.tFile.fNbytesKeys)
arg0.tFile.fNbytesName >= orig(arg0.tFile.fNbytesName)
===========================================================================
hep.io.root.output.TStreamerBase:::OBJECT
this.fType one of { 0, 66, 67 }
this.fSize == 0
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex != null
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName has only one value
this.fTypeName != null
this.fTypeName.toString == "BASE"
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerBase.TStreamerBase(hep.io.root.output.StreamerClassInfo):::ENTER
arg0 != null
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerBase.TStreamerBase(hep.io.root.output.StreamerClassInfo):::EXIT
arg0.javaClass == orig(arg0.javaClass)
arg0.classDef == orig(arg0.classDef)
arg0.classDef.getClass().getName() == orig(arg0.classDef.getClass().getName())
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.checkSum == orig(arg0.checkSum)
arg0.fields == orig(arg0.fields)
arg0.fields.getClass().getName() == orig(arg0.fields.getClass().getName())
arg0.superClass == orig(arg0.superClass)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.depenciesResolved == orig(arg0.depenciesResolved)
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerBasicPointer:::OBJECT
this has only one value
this.fCountVersion == 6
this.fCountName has only one value
this.fCountName.toString == "fBufferSize"
this.fCountClass has only one value
this.fCountClass.toString == "TH1"
this.fType == 48
this.fSize == 0
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex has only one value
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName has only one value
this.fTypeName.toString == "double*"
this.name has only one value
this.name.toString == "fBuffer"
this.title has only one value
this.title.toString == "entry buffer"
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerBasicPointer.TStreamerBasicPointer(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0 has only one value
arg0.parentClassInfo has only one value
arg0.parentClassInfo.javaClass has only one value
arg0.parentClassInfo.classDef has only one value
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title has only one value
arg0.parentClassInfo.title.toString == "1-Dim histogram base class"
arg0.parentClassInfo.checkSum == -381522971
arg0.parentClassInfo.fields has only one value
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.superClass has only one value
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.field has only one value
arg0.title has only one value
arg0.title.toString == "entry buffer"
arg0.isBase == false
arg0.isArray == true
arg0.counter has only one value
arg0.counter.toString == "fBufferSize"
arg0.fClass has only one value
arg0.fieldClassInfo has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields has only one value
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 48
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerBasicPointer.TStreamerBasicPointer(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.counter.toString == orig(arg0.counter.toString)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo has only one value
arg0.parentClassInfo.javaClass has only one value
arg0.parentClassInfo.classDef has only one value
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title has only one value
arg0.parentClassInfo.title.toString == "1-Dim histogram base class"
arg0.parentClassInfo.checkSum == -381522971
arg0.parentClassInfo.fields has only one value
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.superClass has only one value
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.field has only one value
arg0.title has only one value
arg0.title.toString == "entry buffer"
arg0.isBase == false
arg0.isArray == true
arg0.counter has only one value
arg0.counter.toString == "fBufferSize"
arg0.fClass has only one value
arg0.fieldClassInfo has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields has only one value
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 48
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerBasicType:::OBJECT
this.fSize is a power of 2
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex != null
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName != null
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerBasicType.TStreamerBasicType(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0 != null
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size is a power of 2
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerBasicType.TStreamerBasicType(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size is a power of 2
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement:::OBJECT
this.fType >= 0
this.fSize >= 0
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex != null
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName != null
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerElement.TStreamerElement(hep.io.root.output.StreamerClassInfo):::ENTER
arg0 != null
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.TStreamerElement(hep.io.root.output.StreamerClassInfo):::EXIT
arg0.javaClass == orig(arg0.javaClass)
arg0.classDef == orig(arg0.classDef)
arg0.classDef.getClass().getName() == orig(arg0.classDef.getClass().getName())
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.checkSum == orig(arg0.checkSum)
arg0.fields == orig(arg0.fields)
arg0.fields.getClass().getName() == orig(arg0.fields.getClass().getName())
arg0.superClass == orig(arg0.superClass)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.depenciesResolved == orig(arg0.depenciesResolved)
this.fType one of { 0, 66, 67 }
this.fSize == 0
this.fTypeName has only one value
this.fTypeName.toString == "BASE"
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.TStreamerElement(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0 != null
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.isBase == false
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.title.toString one of { "", "Array of doubles" }
arg0.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value >= 2
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size >= 0
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.TStreamerElement(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.counter.toString == orig(arg0.counter.toString)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.classDef.getClass().getName() == orig(arg0.fieldClassInfo.classDef.getClass().getName())
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
this.fType >= 2
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.isBase == false
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.title.toString one of { "", "Array of doubles" }
arg0.fieldClassInfo.checkSum one of { 0, 302164956, 2116140609 }
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value >= 2
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size >= 0
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerClassInfo):::ENTER
arg0 != null
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerClassInfo):::EXIT
arg0.javaClass == orig(arg0.javaClass)
arg0.classDef == orig(arg0.classDef)
arg0.classDef.getClass().getName() == orig(arg0.classDef.getClass().getName())
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.checkSum == orig(arg0.checkSum)
arg0.fields == orig(arg0.fields)
arg0.fields.getClass().getName() == orig(arg0.fields.getClass().getName())
arg0.superClass == orig(arg0.superClass)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.depenciesResolved == orig(arg0.depenciesResolved)
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass == null
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value one of { 62, 66, 67 }
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName.toString one of { "TNamed", "TObject" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == false
return != null
return.getClass().getName() == hep.io.root.output.TStreamerBase.class
return.fType one of { 0, 66, 67 }
return.fSize == 0
return.fArrayLength == 0
return.fArrayDim == 0
return.fMaxIndex != null
return.fMaxIndex[] == [0, 0, 0, 0, 0]
return.fMaxIndex[] elements == 0
return.fTypeName has only one value
return.fTypeName != null
return.fTypeName.toString == "BASE"
return.name != null
return.title != null
return.fUniqueID == 0
return.fBits == 50331648
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
size(return.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0 != null
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value >= 2
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size >= 0
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT47
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
arg0.parentClassInfo.type has only one value
arg0.title has only one value
arg0.title.toString == ""
arg0.isBase == true
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.type has only one value
arg0.type has only one value
arg0.type.value == 62
arg0.type.size == 0
arg0.type.typeName == null
return.getClass().getName() == hep.io.root.output.TStreamerBase.class
return.fType == 0
return.fSize == 0
return.fTypeName has only one value
return.fTypeName.toString == "BASE"
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT49
arg0.parentClassInfo has only one value
arg0.parentClassInfo.javaClass has only one value
arg0.parentClassInfo.classDef has only one value
arg0.parentClassInfo.title has only one value
arg0.parentClassInfo.title.toString == "1-Dim histogram base class"
arg0.parentClassInfo.checkSum == -381522971
arg0.parentClassInfo.fields has only one value
arg0.parentClassInfo.superClass has only one value
arg0.parentClassInfo.type has only one value
arg0.field has only one value
arg0.title has only one value
arg0.title.toString == "entry buffer"
arg0.isBase == false
arg0.isArray == true
arg0.counter has only one value
arg0.fClass has only one value
arg0.fieldClassInfo has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields has only one value
arg0.fieldClassInfo.type has only one value
arg0.type has only one value
arg0.type.value == 48
hep.io.root.output.Type.types has only one value
arg0.type.size == 0
arg0.type.typeName == null
return has only one value
return.getClass().getName() == hep.io.root.output.TStreamerBasicPointer.class
return.fType == 48
return.fSize == 0
return.fMaxIndex has only one value
return.fTypeName has only one value
return.fTypeName.toString == "double*"
return.name has only one value
return.name.toString == "fBuffer"
return.title has only one value
return.title.toString == "entry buffer"
orig(arg0) has only one value
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT51
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.type.size is a power of 2
return.getClass().getName() == hep.io.root.output.TStreamerBasicType.class
return.fSize is a power of 2
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT55
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fClass has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.type has only one value
arg0.type has only one value
arg0.type.value == 65
arg0.type.size == 8
arg0.type.typeName has only one value
arg0.type.typeName.toString == "TString"
return.getClass().getName() == hep.io.root.output.TStreamerString.class
return.fType == 65
return.fSize == 8
return.fTypeName has only one value
return.fTypeName.toString == "TString"
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT58
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
arg0.parentClassInfo.checkSum one of { -381522971, 2116140609 }
arg0.parentClassInfo.type has only one value
arg0.title.toString one of { "List of labels", "Pointer to list of functions (fits and user)" }
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum one of { 0, 302164956 }
arg0.fieldClassInfo.type has only one value
arg0.type.value one of { 63, 64 }
hep.io.root.output.Type.types has only one value
arg0.type.size == 0
arg0.type.typeName == null
return.getClass().getName() == hep.io.root.output.TStreamerObjectPointer.class
return.fType one of { 63, 64 }
return.fSize == 0
return.fTypeName.toString one of { "THashList*", "TList*" }
return.name.toString one of { "fFunctions", "fLabels" }
return.title.toString one of { "List of labels", "Pointer to list of functions (fits and user)" }
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT60
arg0.parentClassInfo.type has only one value
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.title.toString one of { "", "Array of doubles" }
arg0.fieldClassInfo.checkSum one of { 0, 2116140609 }
arg0.fieldClassInfo.type has only one value
arg0.type has only one value
arg0.type.value == 62
hep.io.root.output.Type.types has only one value
arg0.type.size == 0
arg0.type.typeName == null
return.getClass().getName() == hep.io.root.output.TStreamerObjectAny.class
return.fType == 62
return.fSize == 0
return.fTypeName.toString one of { "TArrayD", "TAxis" }
===========================================================================
hep.io.root.output.TStreamerElement.create(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.counter.toString == orig(arg0.counter.toString)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.classDef.getClass().getName() == orig(arg0.fieldClassInfo.classDef.getClass().getName())
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo != null
arg0.parentClassInfo.javaClass != null
arg0.parentClassInfo.classDef != null
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title != null
arg0.parentClassInfo.fields != null
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type != null
arg0.parentClassInfo.depenciesResolved == true
arg0.field != null
arg0.title != null
arg0.counter.toString == "fBufferSize"
arg0.fClass != null
arg0.fieldClassInfo != null
arg0.fieldClassInfo.javaClass != null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title != null
arg0.fieldClassInfo.fields != null
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type != null
arg0.fieldClassInfo.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
arg0.type.value >= 2
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size >= 0
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
return != null
return.fType >= 0
return.fSize >= 0
return.fArrayLength == 0
return.fArrayDim == 0
return.fMaxIndex != null
return.fMaxIndex[] == [0, 0, 0, 0, 0]
return.fMaxIndex[] elements == 0
return.fTypeName != null
return.name != null
return.title != null
return.fUniqueID == 0
return.fBits == 50331648
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
size(return.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerElement.write(hep.io.root.output.RootOutput):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.TStreamerElement.write(hep.io.root.output.RootOutput):::EXIT
this.fType == orig(this.fType)
this.fSize == orig(this.fSize)
this.fArrayLength == orig(this.fArrayLength)
this.fArrayDim == orig(this.fArrayDim)
this.fMaxIndex == orig(this.fMaxIndex)
this.fMaxIndex[] == orig(this.fMaxIndex[])
this.fTypeName == orig(this.fTypeName)
this.fTypeName.toString == orig(this.fTypeName.toString)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.TStreamerInfo:::OBJECT
this.fClassVersion >= 0
this.fElements != null
this.fElements.fLowerBound == 0
this.fElements.name has only one value
this.fElements.name != null
this.fElements.name.toString == ""
this.fElements.fSize == 0
this.fElements.list != null
this.fElements.list.getClass().getName() == java.util.ArrayList.class
this.fElements.fUniqueID == 0
this.fElements.fBits == 50331648
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.TStreamerInfo.TStreamerInfo(hep.io.root.output.StreamerClassInfo):::ENTER
arg0 != null
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.javaClass != null
arg0.superClass.classDef != null
arg0.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.superClass.title != null
arg0.superClass.fields != null
arg0.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.superClass == null
arg0.superClass.type != null
arg0.superClass.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size one of { 0, 8 }
arg0.type.typeName.toString one of { "TNamed", "TObject", "TString" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == true
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerInfo.TStreamerInfo(hep.io.root.output.StreamerClassInfo):::EXIT
arg0.javaClass == orig(arg0.javaClass)
arg0.classDef == orig(arg0.classDef)
arg0.classDef.getClass().getName() == orig(arg0.classDef.getClass().getName())
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.fields == orig(arg0.fields)
arg0.fields.getClass().getName() == orig(arg0.fields.getClass().getName())
arg0.superClass == orig(arg0.superClass)
arg0.superClass.javaClass == orig(arg0.superClass.javaClass)
arg0.superClass.classDef == orig(arg0.superClass.classDef)
arg0.superClass.classDef.getClass().getName() == orig(arg0.superClass.classDef.getClass().getName())
arg0.superClass.title == orig(arg0.superClass.title)
arg0.superClass.title.toString == orig(arg0.superClass.title.toString)
arg0.superClass.checkSum == orig(arg0.superClass.checkSum)
arg0.superClass.fields == orig(arg0.superClass.fields)
arg0.superClass.fields.getClass().getName() == orig(arg0.superClass.fields.getClass().getName())
arg0.superClass.superClass == orig(arg0.superClass.superClass)
arg0.superClass.type == orig(arg0.superClass.type)
arg0.superClass.depenciesResolved == orig(arg0.superClass.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.depenciesResolved == orig(arg0.depenciesResolved)
arg0.javaClass != null
arg0.classDef != null
arg0.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.title != null
arg0.fields != null
arg0.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.javaClass != null
arg0.superClass.classDef != null
arg0.superClass.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.superClass.title != null
arg0.superClass.fields != null
arg0.superClass.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.superClass.superClass == null
arg0.superClass.type != null
arg0.superClass.depenciesResolved == false
arg0.type != null
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size one of { 0, 8 }
arg0.type.typeName.toString one of { "TNamed", "TObject", "TString" }
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
arg0.depenciesResolved == true
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
orig(arg0.checkSum) % arg0.checkSum == 0
===========================================================================
hep.io.root.output.TStreamerInfo.write(hep.io.root.output.RootOutput):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.TStreamerInfo.write(hep.io.root.output.RootOutput):::EXIT
this.fClassVersion == orig(this.fClassVersion)
this.fCheckSum == orig(this.fCheckSum)
this.fElements == orig(this.fElements)
this.fElements.fLowerBound == orig(this.fElements.fLowerBound)
this.fElements.name == orig(this.fElements.name)
this.fElements.name.toString == orig(this.fElements.name.toString)
this.fElements.fSize == orig(this.fElements.fSize)
this.fElements.list == orig(this.fElements.list)
this.fElements.list.getClass().getName() == orig(this.fElements.list.getClass().getName())
this.fElements.fUniqueID == orig(this.fElements.fUniqueID)
this.fElements.fBits == orig(this.fElements.fBits)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.TStreamerObjectAny:::OBJECT
this.fType == 62
this.fSize == 0
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName.toString one of { "TArrayD", "TAxis" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerObjectAny.TStreamerObjectAny(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title.toString one of { "", "Array of doubles" }
arg0.fieldClassInfo.checkSum one of { 0, 2116140609 }
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 62
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerObjectAny.TStreamerObjectAny(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.classDef.getClass().getName() == orig(arg0.fieldClassInfo.classDef.getClass().getName())
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title.toString one of { "", "Array of doubles" }
arg0.fieldClassInfo.checkSum one of { 0, 2116140609 }
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 62
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerObjectPointer:::OBJECT
this.fType one of { 63, 64 }
this.fSize == 0
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName.toString one of { "THashList*", "TList*" }
this.name.toString one of { "fFunctions", "fLabels" }
this.title.toString one of { "List of labels", "Pointer to list of functions (fits and user)" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerObjectPointer.TStreamerObjectPointer(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
arg0.parentClassInfo.checkSum one of { -381522971, 2116140609 }
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.title.toString one of { "List of labels", "Pointer to list of functions (fits and user)" }
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum one of { 0, 302164956 }
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value one of { 63, 64 }
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerObjectPointer.TStreamerObjectPointer(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.classDef.getClass().getName() == orig(arg0.fieldClassInfo.classDef.getClass().getName())
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class" }
arg0.parentClassInfo.checkSum one of { -381522971, 2116140609 }
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.type has only one value
arg0.parentClassInfo.depenciesResolved == true
arg0.title.toString one of { "List of labels", "Pointer to list of functions (fits and user)" }
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fieldClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum one of { 0, 302164956 }
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value one of { 63, 64 }
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 0
arg0.type.typeName == null
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerString:::OBJECT
this.fType == 65
this.fSize == 8
this.fArrayLength == 0
this.fArrayDim == 0
this.fMaxIndex[] == [0, 0, 0, 0, 0]
this.fMaxIndex[] elements == 0
this.fTypeName has only one value
this.fTypeName.toString == "TString"
this.fUniqueID == 0
this.fBits == 50331648
size(this.fMaxIndex[]) == 5
===========================================================================
hep.io.root.output.TStreamerString.TStreamerString(hep.io.root.output.StreamerFieldInfo):::ENTER
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.depenciesResolved == true
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fClass has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 65
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 8
arg0.type.typeName has only one value
arg0.type.typeName.toString == "TString"
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.TStreamerString.TStreamerString(hep.io.root.output.StreamerFieldInfo):::EXIT
arg0.parentClassInfo == orig(arg0.parentClassInfo)
arg0.parentClassInfo.javaClass == orig(arg0.parentClassInfo.javaClass)
arg0.parentClassInfo.classDef == orig(arg0.parentClassInfo.classDef)
arg0.parentClassInfo.classDef.getClass().getName() == orig(arg0.parentClassInfo.classDef.getClass().getName())
arg0.parentClassInfo.title == orig(arg0.parentClassInfo.title)
arg0.parentClassInfo.title.toString == orig(arg0.parentClassInfo.title.toString)
arg0.parentClassInfo.checkSum == orig(arg0.parentClassInfo.checkSum)
arg0.parentClassInfo.fields == orig(arg0.parentClassInfo.fields)
arg0.parentClassInfo.fields.getClass().getName() == orig(arg0.parentClassInfo.fields.getClass().getName())
arg0.parentClassInfo.superClass == orig(arg0.parentClassInfo.superClass)
arg0.parentClassInfo.type == orig(arg0.parentClassInfo.type)
arg0.parentClassInfo.depenciesResolved == orig(arg0.parentClassInfo.depenciesResolved)
arg0.field == orig(arg0.field)
arg0.title == orig(arg0.title)
arg0.title.toString == orig(arg0.title.toString)
arg0.isBase == orig(arg0.isBase)
arg0.isArray == orig(arg0.isArray)
arg0.counter == orig(arg0.counter)
arg0.fClass == orig(arg0.fClass)
arg0.fieldClassInfo == orig(arg0.fieldClassInfo)
arg0.fieldClassInfo.javaClass == orig(arg0.fieldClassInfo.javaClass)
arg0.fieldClassInfo.classDef == orig(arg0.fieldClassInfo.classDef)
arg0.fieldClassInfo.title == orig(arg0.fieldClassInfo.title)
arg0.fieldClassInfo.title.toString == orig(arg0.fieldClassInfo.title.toString)
arg0.fieldClassInfo.checkSum == orig(arg0.fieldClassInfo.checkSum)
arg0.fieldClassInfo.fields == orig(arg0.fieldClassInfo.fields)
arg0.fieldClassInfo.fields.getClass().getName() == orig(arg0.fieldClassInfo.fields.getClass().getName())
arg0.fieldClassInfo.superClass == orig(arg0.fieldClassInfo.superClass)
arg0.fieldClassInfo.type == orig(arg0.fieldClassInfo.type)
arg0.fieldClassInfo.depenciesResolved == orig(arg0.fieldClassInfo.depenciesResolved)
arg0.type == orig(arg0.type)
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
arg0.type.value == orig(arg0.type.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
arg0.type.size == orig(arg0.type.size)
arg0.type.typeName == orig(arg0.type.typeName)
arg0.type.typeName.toString == orig(arg0.type.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
arg0.parentClassInfo.classDef.getClass().getName() == com.sun.proxy.$Proxy2.class
arg0.parentClassInfo.title.toString one of { "", "1-Dim histogram base class", "The basis for a named object (name, title)" }
arg0.parentClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.parentClassInfo.depenciesResolved == true
arg0.isBase == false
arg0.isArray == false
arg0.counter == null
arg0.fClass has only one value
arg0.fieldClassInfo.javaClass has only one value
arg0.fieldClassInfo.classDef == null
arg0.fieldClassInfo.title has only one value
arg0.fieldClassInfo.title.toString == ""
arg0.fieldClassInfo.checkSum == 0
arg0.fieldClassInfo.fields.getClass().getName() == java.util.LinkedHashMap.class
arg0.fieldClassInfo.superClass == null
arg0.fieldClassInfo.type has only one value
arg0.fieldClassInfo.depenciesResolved == false
arg0.type has only one value
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTNamed has only one value
arg0.type.value == 65
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0.type.size == 8
arg0.type.typeName has only one value
arg0.type.typeName.toString == "TString"
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.Type:::CLASS
hep.io.root.output.Type.kBase has only one value
hep.io.root.output.Type.kBase != null
hep.io.root.output.Type.kCounter has only one value
hep.io.root.output.Type.kCounter != null
hep.io.root.output.Type.kCharStar has only one value
hep.io.root.output.Type.kCharStar != null
hep.io.root.output.Type.kChar has only one value
hep.io.root.output.Type.kChar != null
hep.io.root.output.Type.kShort has only one value
hep.io.root.output.Type.kShort != null
hep.io.root.output.Type.kInt has only one value
hep.io.root.output.Type.kInt != null
hep.io.root.output.Type.kEnum has only one value
hep.io.root.output.Type.kEnum != null
hep.io.root.output.Type.kLong has only one value
hep.io.root.output.Type.kLong != null
hep.io.root.output.Type.kFloat has only one value
hep.io.root.output.Type.kFloat != null
hep.io.root.output.Type.kDouble has only one value
hep.io.root.output.Type.kDouble != null
hep.io.root.output.Type.kDouble32 has only one value
hep.io.root.output.Type.kDouble32 != null
hep.io.root.output.Type.kLegacyChar has only one value
hep.io.root.output.Type.kLegacyChar != null
hep.io.root.output.Type.kUChar has only one value
hep.io.root.output.Type.kUChar != null
hep.io.root.output.Type.kUShort has only one value
hep.io.root.output.Type.kUShort != null
hep.io.root.output.Type.kUInt has only one value
hep.io.root.output.Type.kUInt != null
hep.io.root.output.Type.kULong has only one value
hep.io.root.output.Type.kULong != null
hep.io.root.output.Type.kBits has only one value
hep.io.root.output.Type.kBits != null
hep.io.root.output.Type.kLong64 has only one value
hep.io.root.output.Type.kLong64 != null
hep.io.root.output.Type.kULong64 has only one value
hep.io.root.output.Type.kULong64 != null
hep.io.root.output.Type.kBool has only one value
hep.io.root.output.Type.kBool != null
hep.io.root.output.Type.kFloat16 has only one value
hep.io.root.output.Type.kFloat16 != null
hep.io.root.output.Type.kCharArray has only one value
hep.io.root.output.Type.kCharArray != null
hep.io.root.output.Type.kShortArray has only one value
hep.io.root.output.Type.kShortArray != null
hep.io.root.output.Type.kIntArray has only one value
hep.io.root.output.Type.kIntArray != null
hep.io.root.output.Type.kLongArray has only one value
hep.io.root.output.Type.kLongArray != null
hep.io.root.output.Type.kFloatArray has only one value
hep.io.root.output.Type.kFloatArray != null
hep.io.root.output.Type.kDoubleArray has only one value
hep.io.root.output.Type.kDoubleArray != null
hep.io.root.output.Type.kDouble32Array has only one value
hep.io.root.output.Type.kDouble32Array != null
hep.io.root.output.Type.kObject has only one value
hep.io.root.output.Type.kObject != null
hep.io.root.output.Type.kAny has only one value
hep.io.root.output.Type.kAny != null
hep.io.root.output.Type.kObjectp has only one value
hep.io.root.output.Type.kObjectp != null
hep.io.root.output.Type.kObjectP has only one value
hep.io.root.output.Type.kObjectP != null
hep.io.root.output.Type.kTString has only one value
hep.io.root.output.Type.kTString != null
hep.io.root.output.Type.kTObject has only one value
hep.io.root.output.Type.kTObject != null
hep.io.root.output.Type.kTNamed has only one value
hep.io.root.output.Type.kTNamed != null
hep.io.root.output.Type.kBase.value == 0
hep.io.root.output.Type.types.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.kBase.size == 0
hep.io.root.output.Type.kBase.typeName has only one value
hep.io.root.output.Type.kBase.typeName != null
hep.io.root.output.Type.kBase.typeName.toString == "BASE"
hep.io.root.output.Type.javaToRoot has only one value
hep.io.root.output.Type.javaToRoot != null
hep.io.root.output.Type.javaToRoot.getClass().getName() == java.util.HashMap.class
hep.io.root.output.Type.$VALUES has only one value
hep.io.root.output.Type.$VALUES != null
hep.io.root.output.Type.$VALUES.getClass().getName() == hep.io.root.output.Type[].class
hep.io.root.output.Type.$VALUES[] contains no nulls and has only one value, of length 35
hep.io.root.output.Type.$VALUES[] elements != null
hep.io.root.output.Type.$VALUES[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type]
hep.io.root.output.Type.$VALUES[].getClass().getName() elements == hep.io.root.output.Type.class
hep.io.root.output.Type.$VALUES[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
hep.io.root.output.Type.$VALUES[].value elements >= 0
hep.io.root.output.Type.$VALUES[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
hep.io.root.output.Type.$VALUES[].size elements >= 0
hep.io.root.output.Type.$VALUES[].typeName has only one value, of length 35
hep.io.root.output.Type.$VALUES[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
hep.io.root.output.Type.kCounter.value == 6
hep.io.root.output.Type.kCounter.size == 4
hep.io.root.output.Type.kCounter.typeName has only one value
hep.io.root.output.Type.kCounter.typeName != null
hep.io.root.output.Type.kCounter.typeName.toString == "Int_t"
hep.io.root.output.Type.kCharStar.value == 7
hep.io.root.output.Type.kCharStar.size == 0
hep.io.root.output.Type.kCharStar.typeName == null
hep.io.root.output.Type.kChar.value == 1
hep.io.root.output.Type.kChar.size == 0
hep.io.root.output.Type.kChar.typeName == null
hep.io.root.output.Type.kShort.value == 2
hep.io.root.output.Type.kShort.size == 2
hep.io.root.output.Type.kShort.typeName has only one value
hep.io.root.output.Type.kShort.typeName != null
hep.io.root.output.Type.kShort.typeName.toString == "short"
hep.io.root.output.Type.kInt.value == 3
hep.io.root.output.Type.kInt.size == 4
hep.io.root.output.Type.kInt.typeName has only one value
hep.io.root.output.Type.kInt.typeName != null
hep.io.root.output.Type.kInt.typeName.toString == "Int_t"
hep.io.root.output.Type.kEnum.value == 3
hep.io.root.output.Type.kEnum.size == 4
hep.io.root.output.Type.kEnum.typeName == null
hep.io.root.output.Type.kLong.value == 4
hep.io.root.output.Type.kLong.size == 8
hep.io.root.output.Type.kLong.typeName has only one value
hep.io.root.output.Type.kLong.typeName != null
hep.io.root.output.Type.kLong.typeName.toString == "Long_t"
hep.io.root.output.Type.kFloat.value == 5
hep.io.root.output.Type.kFloat.size == 4
hep.io.root.output.Type.kFloat.typeName has only one value
hep.io.root.output.Type.kFloat.typeName != null
hep.io.root.output.Type.kFloat.typeName.toString == "Float_t"
hep.io.root.output.Type.kDouble.value == 8
hep.io.root.output.Type.kDouble.size == 8
hep.io.root.output.Type.kDouble.typeName has only one value
hep.io.root.output.Type.kDouble.typeName != null
hep.io.root.output.Type.kDouble.typeName.toString == "Double_t"
hep.io.root.output.Type.kDouble32.value == 9
hep.io.root.output.Type.kDouble32.size == 0
hep.io.root.output.Type.kDouble32.typeName == null
hep.io.root.output.Type.kLegacyChar.value == 10
hep.io.root.output.Type.kLegacyChar.size == 0
hep.io.root.output.Type.kLegacyChar.typeName == null
hep.io.root.output.Type.kUChar.value == 11
hep.io.root.output.Type.kUChar.size == 0
hep.io.root.output.Type.kUChar.typeName == null
hep.io.root.output.Type.kUShort.value == 12
hep.io.root.output.Type.kUShort.size == 2
hep.io.root.output.Type.kUShort.typeName has only one value
hep.io.root.output.Type.kUShort.typeName != null
hep.io.root.output.Type.kUShort.typeName.toString == "UShort_t"
hep.io.root.output.Type.kUInt.value == 13
hep.io.root.output.Type.kUInt.size == 4
hep.io.root.output.Type.kUInt.typeName has only one value
hep.io.root.output.Type.kUInt.typeName != null
hep.io.root.output.Type.kUInt.typeName.toString == "UInt_t"
hep.io.root.output.Type.kULong.value == 14
hep.io.root.output.Type.kULong.size == 8
hep.io.root.output.Type.kULong.typeName has only one value
hep.io.root.output.Type.kULong.typeName != null
hep.io.root.output.Type.kULong.typeName.toString == "ULong_t"
hep.io.root.output.Type.kBits.value == 15
hep.io.root.output.Type.kBits.size == 0
hep.io.root.output.Type.kBits.typeName == null
hep.io.root.output.Type.kLong64.value == 16
hep.io.root.output.Type.kLong64.size == 0
hep.io.root.output.Type.kLong64.typeName == null
hep.io.root.output.Type.kULong64.value == 17
hep.io.root.output.Type.kULong64.size == 0
hep.io.root.output.Type.kULong64.typeName == null
hep.io.root.output.Type.kBool.value == 18
hep.io.root.output.Type.kBool.size == 1
hep.io.root.output.Type.kBool.typeName has only one value
hep.io.root.output.Type.kBool.typeName != null
hep.io.root.output.Type.kBool.typeName.toString == "Bool_t"
hep.io.root.output.Type.kFloat16.value == 19
hep.io.root.output.Type.kFloat16.size == 0
hep.io.root.output.Type.kFloat16.typeName == null
hep.io.root.output.Type.kCharArray.value == 41
hep.io.root.output.Type.kCharArray.size == 0
hep.io.root.output.Type.kCharArray.typeName == null
hep.io.root.output.Type.kShortArray.value == 42
hep.io.root.output.Type.kShortArray.size == 0
hep.io.root.output.Type.kShortArray.typeName == null
hep.io.root.output.Type.kIntArray.value == 43
hep.io.root.output.Type.kIntArray.size == 0
hep.io.root.output.Type.kIntArray.typeName == null
hep.io.root.output.Type.kLongArray.value == 44
hep.io.root.output.Type.kLongArray.size == 0
hep.io.root.output.Type.kLongArray.typeName == null
hep.io.root.output.Type.kFloatArray.value == 45
hep.io.root.output.Type.kFloatArray.size == 0
hep.io.root.output.Type.kFloatArray.typeName == null
hep.io.root.output.Type.kDoubleArray.value == 48
hep.io.root.output.Type.kDoubleArray.size == 0
hep.io.root.output.Type.kDoubleArray.typeName == null
hep.io.root.output.Type.kDouble32Array.value == 49
hep.io.root.output.Type.kDouble32Array.size == 0
hep.io.root.output.Type.kDouble32Array.typeName == null
hep.io.root.output.Type.kObject.value == 61
hep.io.root.output.Type.kObject.size == 0
hep.io.root.output.Type.kObject.typeName == null
hep.io.root.output.Type.kAny.value == 62
hep.io.root.output.Type.kAny.size == 0
hep.io.root.output.Type.kAny.typeName == null
hep.io.root.output.Type.kObjectp.value == 63
hep.io.root.output.Type.kObjectp.size == 0
hep.io.root.output.Type.kObjectp.typeName == null
hep.io.root.output.Type.kObjectP.value == 64
hep.io.root.output.Type.kObjectP.size == 0
hep.io.root.output.Type.kObjectP.typeName == null
hep.io.root.output.Type.kTString.value == 65
hep.io.root.output.Type.kTString.size == 8
hep.io.root.output.Type.kTString.typeName has only one value
hep.io.root.output.Type.kTString.typeName != null
hep.io.root.output.Type.kTString.typeName.toString == "TString"
hep.io.root.output.Type.kTObject.value == 66
hep.io.root.output.Type.kTObject.size == 0
hep.io.root.output.Type.kTObject.typeName has only one value
hep.io.root.output.Type.kTObject.typeName != null
hep.io.root.output.Type.kTObject.typeName.toString == "TObject"
hep.io.root.output.Type.kTNamed.value == 67
hep.io.root.output.Type.kTNamed.size == 0
hep.io.root.output.Type.kTNamed.typeName has only one value
hep.io.root.output.Type.kTNamed.typeName != null
hep.io.root.output.Type.kTNamed.typeName.toString == "TNamed"
size(hep.io.root.output.Type.types[]) == 100
size(hep.io.root.output.Type.$VALUES[]) == 35
===========================================================================
hep.io.root.output.Type:::OBJECT
this.value >= 0
this.size >= 0
===========================================================================
hep.io.root.output.Type.Type(java.lang.String, int, int):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.Type.Type(java.lang.String, int, int):::EXIT
arg0.toString == orig(arg0.toString)
this.size == 0
this.typeName == null
===========================================================================
hep.io.root.output.Type.Type(java.lang.String, int, int, int, java.lang.String):::ENTER
arg0 != null
arg3 >= 0
===========================================================================
hep.io.root.output.Type.Type(java.lang.String, int, int, int, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg4.toString == orig(arg4.toString)
===========================================================================
hep.io.root.output.Type.arrayType():::ENTER
this has only one value
hep.io.root.output.Type.types == null
this.value == 8
this.size == 8
this.typeName has only one value
this.typeName.toString == "Double_t"
===========================================================================
hep.io.root.output.Type.arrayType():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.value == orig(this.value)
this.size == orig(this.size)
this.typeName == orig(this.typeName)
this.typeName.toString == orig(this.typeName.toString)
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.value == 8
this.size == 8
this.typeName has only one value
this.typeName.toString == "Double_t"
return has only one value
return.value == 48
return.size == 0
return.typeName == null
===========================================================================
hep.io.root.output.Type.forClass(java.lang.Class):::ENTER
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
arg0 != null
===========================================================================
hep.io.root.output.Type.forClass(java.lang.Class):::EXIT112
hep.io.root.output.Type.types has only one value
return has only one value
return.value == 3
return.size == 4
return.typeName == null
orig(arg0) has only one value
===========================================================================
hep.io.root.output.Type.forClass(java.lang.Class):::EXIT115
===========================================================================
hep.io.root.output.Type.forClass(java.lang.Class):::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
return != null
return.value >= 2
return.size >= 0
===========================================================================
hep.io.root.output.Type.getName():::ENTER
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.value >= 2
===========================================================================
hep.io.root.output.Type.getName():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.value == orig(this.value)
this.size == orig(this.size)
this.typeName == orig(this.typeName)
this.typeName.toString == orig(this.typeName.toString)
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.value >= 2
===========================================================================
hep.io.root.output.Type.getSize():::ENTER
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.value >= 2
===========================================================================
hep.io.root.output.Type.getSize():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.value == orig(this.value)
this.size == orig(this.size)
this.typeName == orig(this.typeName)
this.typeName.toString == orig(this.typeName.toString)
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
this.value >= 2
return >= 0
===========================================================================
hep.io.root.output.Type.getValue():::ENTER
===========================================================================
hep.io.root.output.Type.getValue():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
this.value == orig(this.value)
this.size == orig(this.size)
this.typeName == orig(this.typeName)
this.typeName.toString == orig(this.typeName.toString)
return >= 0
===========================================================================
hep.io.root.output.Type.types():::ENTER
hep.io.root.output.Type.types == null
===========================================================================
hep.io.root.output.Type.types():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
hep.io.root.output.Type.types has only one value
hep.io.root.output.Type.types[] has only one value, of length 100
hep.io.root.output.Type.types[].getClass().getName() == [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
return has only one value
return.getClass().getName() == hep.io.root.output.Type[].class
return[] has only one value, of length 100
size(return[]) == 100
===========================================================================
hep.io.root.output.Type.values():::ENTER
hep.io.root.output.Type.types[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null] }
===========================================================================
hep.io.root.output.Type.values():::EXIT
hep.io.root.output.Type.kBase == orig(hep.io.root.output.Type.kBase)
hep.io.root.output.Type.kCounter == orig(hep.io.root.output.Type.kCounter)
hep.io.root.output.Type.kCharStar == orig(hep.io.root.output.Type.kCharStar)
hep.io.root.output.Type.kChar == orig(hep.io.root.output.Type.kChar)
hep.io.root.output.Type.kShort == orig(hep.io.root.output.Type.kShort)
hep.io.root.output.Type.kInt == orig(hep.io.root.output.Type.kInt)
hep.io.root.output.Type.kEnum == orig(hep.io.root.output.Type.kEnum)
hep.io.root.output.Type.kLong == orig(hep.io.root.output.Type.kLong)
hep.io.root.output.Type.kFloat == orig(hep.io.root.output.Type.kFloat)
hep.io.root.output.Type.kDouble == orig(hep.io.root.output.Type.kDouble)
hep.io.root.output.Type.kDouble32 == orig(hep.io.root.output.Type.kDouble32)
hep.io.root.output.Type.kLegacyChar == orig(hep.io.root.output.Type.kLegacyChar)
hep.io.root.output.Type.kUChar == orig(hep.io.root.output.Type.kUChar)
hep.io.root.output.Type.kUShort == orig(hep.io.root.output.Type.kUShort)
hep.io.root.output.Type.kUInt == orig(hep.io.root.output.Type.kUInt)
hep.io.root.output.Type.kULong == orig(hep.io.root.output.Type.kULong)
hep.io.root.output.Type.kBits == orig(hep.io.root.output.Type.kBits)
hep.io.root.output.Type.kLong64 == orig(hep.io.root.output.Type.kLong64)
hep.io.root.output.Type.kULong64 == orig(hep.io.root.output.Type.kULong64)
hep.io.root.output.Type.kBool == orig(hep.io.root.output.Type.kBool)
hep.io.root.output.Type.kFloat16 == orig(hep.io.root.output.Type.kFloat16)
hep.io.root.output.Type.kCharArray == orig(hep.io.root.output.Type.kCharArray)
hep.io.root.output.Type.kShortArray == orig(hep.io.root.output.Type.kShortArray)
hep.io.root.output.Type.kIntArray == orig(hep.io.root.output.Type.kIntArray)
hep.io.root.output.Type.kLongArray == orig(hep.io.root.output.Type.kLongArray)
hep.io.root.output.Type.kFloatArray == orig(hep.io.root.output.Type.kFloatArray)
hep.io.root.output.Type.kDoubleArray == orig(hep.io.root.output.Type.kDoubleArray)
hep.io.root.output.Type.kDouble32Array == orig(hep.io.root.output.Type.kDouble32Array)
hep.io.root.output.Type.kObject == orig(hep.io.root.output.Type.kObject)
hep.io.root.output.Type.kAny == orig(hep.io.root.output.Type.kAny)
hep.io.root.output.Type.kObjectp == orig(hep.io.root.output.Type.kObjectp)
hep.io.root.output.Type.kObjectP == orig(hep.io.root.output.Type.kObjectP)
hep.io.root.output.Type.kTString == orig(hep.io.root.output.Type.kTString)
hep.io.root.output.Type.kTObject == orig(hep.io.root.output.Type.kTObject)
hep.io.root.output.Type.kTNamed == orig(hep.io.root.output.Type.kTNamed)
hep.io.root.output.Type.kBase.value == orig(hep.io.root.output.Type.kBase.value)
hep.io.root.output.Type.types == orig(hep.io.root.output.Type.types)
hep.io.root.output.Type.types.getClass().getName() == orig(hep.io.root.output.Type.types.getClass().getName())
hep.io.root.output.Type.types[] == orig(hep.io.root.output.Type.types[])
hep.io.root.output.Type.kBase.size == orig(hep.io.root.output.Type.kBase.size)
hep.io.root.output.Type.kBase.typeName == orig(hep.io.root.output.Type.kBase.typeName)
hep.io.root.output.Type.kBase.typeName.toString == orig(hep.io.root.output.Type.kBase.typeName.toString)
hep.io.root.output.Type.javaToRoot == orig(hep.io.root.output.Type.javaToRoot)
hep.io.root.output.Type.javaToRoot.getClass().getName() == orig(hep.io.root.output.Type.javaToRoot.getClass().getName())
hep.io.root.output.Type.$VALUES == orig(hep.io.root.output.Type.$VALUES)
hep.io.root.output.Type.$VALUES.getClass().getName() == orig(hep.io.root.output.Type.$VALUES.getClass().getName())
hep.io.root.output.Type.$VALUES[] == orig(hep.io.root.output.Type.$VALUES[])
hep.io.root.output.Type.$VALUES[].value == orig(hep.io.root.output.Type.$VALUES[].value)
hep.io.root.output.Type.$VALUES[].size == orig(hep.io.root.output.Type.$VALUES[].size)
hep.io.root.output.Type.$VALUES[].typeName == orig(hep.io.root.output.Type.$VALUES[].typeName)
hep.io.root.output.Type.kCounter.value == orig(hep.io.root.output.Type.kCounter.value)
hep.io.root.output.Type.kCounter.size == orig(hep.io.root.output.Type.kCounter.size)
hep.io.root.output.Type.kCounter.typeName == orig(hep.io.root.output.Type.kCounter.typeName)
hep.io.root.output.Type.kCounter.typeName.toString == orig(hep.io.root.output.Type.kCounter.typeName.toString)
hep.io.root.output.Type.kCharStar.value == orig(hep.io.root.output.Type.kCharStar.value)
hep.io.root.output.Type.kCharStar.size == orig(hep.io.root.output.Type.kCharStar.size)
hep.io.root.output.Type.kCharStar.typeName == orig(hep.io.root.output.Type.kCharStar.typeName)
hep.io.root.output.Type.kChar.value == orig(hep.io.root.output.Type.kChar.value)
hep.io.root.output.Type.kChar.size == orig(hep.io.root.output.Type.kChar.size)
hep.io.root.output.Type.kChar.typeName == orig(hep.io.root.output.Type.kChar.typeName)
hep.io.root.output.Type.kShort.value == orig(hep.io.root.output.Type.kShort.value)
hep.io.root.output.Type.kShort.size == orig(hep.io.root.output.Type.kShort.size)
hep.io.root.output.Type.kShort.typeName == orig(hep.io.root.output.Type.kShort.typeName)
hep.io.root.output.Type.kShort.typeName.toString == orig(hep.io.root.output.Type.kShort.typeName.toString)
hep.io.root.output.Type.kInt.value == orig(hep.io.root.output.Type.kInt.value)
hep.io.root.output.Type.kInt.size == orig(hep.io.root.output.Type.kInt.size)
hep.io.root.output.Type.kInt.typeName == orig(hep.io.root.output.Type.kInt.typeName)
hep.io.root.output.Type.kInt.typeName.toString == orig(hep.io.root.output.Type.kInt.typeName.toString)
hep.io.root.output.Type.kEnum.value == orig(hep.io.root.output.Type.kEnum.value)
hep.io.root.output.Type.kEnum.size == orig(hep.io.root.output.Type.kEnum.size)
hep.io.root.output.Type.kEnum.typeName == orig(hep.io.root.output.Type.kEnum.typeName)
hep.io.root.output.Type.kLong.value == orig(hep.io.root.output.Type.kLong.value)
hep.io.root.output.Type.kLong.size == orig(hep.io.root.output.Type.kLong.size)
hep.io.root.output.Type.kLong.typeName == orig(hep.io.root.output.Type.kLong.typeName)
hep.io.root.output.Type.kLong.typeName.toString == orig(hep.io.root.output.Type.kLong.typeName.toString)
hep.io.root.output.Type.kFloat.value == orig(hep.io.root.output.Type.kFloat.value)
hep.io.root.output.Type.kFloat.size == orig(hep.io.root.output.Type.kFloat.size)
hep.io.root.output.Type.kFloat.typeName == orig(hep.io.root.output.Type.kFloat.typeName)
hep.io.root.output.Type.kFloat.typeName.toString == orig(hep.io.root.output.Type.kFloat.typeName.toString)
hep.io.root.output.Type.kDouble.value == orig(hep.io.root.output.Type.kDouble.value)
hep.io.root.output.Type.kDouble.size == orig(hep.io.root.output.Type.kDouble.size)
hep.io.root.output.Type.kDouble.typeName == orig(hep.io.root.output.Type.kDouble.typeName)
hep.io.root.output.Type.kDouble.typeName.toString == orig(hep.io.root.output.Type.kDouble.typeName.toString)
hep.io.root.output.Type.kDouble32.value == orig(hep.io.root.output.Type.kDouble32.value)
hep.io.root.output.Type.kDouble32.size == orig(hep.io.root.output.Type.kDouble32.size)
hep.io.root.output.Type.kDouble32.typeName == orig(hep.io.root.output.Type.kDouble32.typeName)
hep.io.root.output.Type.kLegacyChar.value == orig(hep.io.root.output.Type.kLegacyChar.value)
hep.io.root.output.Type.kLegacyChar.size == orig(hep.io.root.output.Type.kLegacyChar.size)
hep.io.root.output.Type.kLegacyChar.typeName == orig(hep.io.root.output.Type.kLegacyChar.typeName)
hep.io.root.output.Type.kUChar.value == orig(hep.io.root.output.Type.kUChar.value)
hep.io.root.output.Type.kUChar.size == orig(hep.io.root.output.Type.kUChar.size)
hep.io.root.output.Type.kUChar.typeName == orig(hep.io.root.output.Type.kUChar.typeName)
hep.io.root.output.Type.kUShort.value == orig(hep.io.root.output.Type.kUShort.value)
hep.io.root.output.Type.kUShort.size == orig(hep.io.root.output.Type.kUShort.size)
hep.io.root.output.Type.kUShort.typeName == orig(hep.io.root.output.Type.kUShort.typeName)
hep.io.root.output.Type.kUShort.typeName.toString == orig(hep.io.root.output.Type.kUShort.typeName.toString)
hep.io.root.output.Type.kUInt.value == orig(hep.io.root.output.Type.kUInt.value)
hep.io.root.output.Type.kUInt.size == orig(hep.io.root.output.Type.kUInt.size)
hep.io.root.output.Type.kUInt.typeName == orig(hep.io.root.output.Type.kUInt.typeName)
hep.io.root.output.Type.kUInt.typeName.toString == orig(hep.io.root.output.Type.kUInt.typeName.toString)
hep.io.root.output.Type.kULong.value == orig(hep.io.root.output.Type.kULong.value)
hep.io.root.output.Type.kULong.size == orig(hep.io.root.output.Type.kULong.size)
hep.io.root.output.Type.kULong.typeName == orig(hep.io.root.output.Type.kULong.typeName)
hep.io.root.output.Type.kULong.typeName.toString == orig(hep.io.root.output.Type.kULong.typeName.toString)
hep.io.root.output.Type.kBits.value == orig(hep.io.root.output.Type.kBits.value)
hep.io.root.output.Type.kBits.size == orig(hep.io.root.output.Type.kBits.size)
hep.io.root.output.Type.kBits.typeName == orig(hep.io.root.output.Type.kBits.typeName)
hep.io.root.output.Type.kLong64.value == orig(hep.io.root.output.Type.kLong64.value)
hep.io.root.output.Type.kLong64.size == orig(hep.io.root.output.Type.kLong64.size)
hep.io.root.output.Type.kLong64.typeName == orig(hep.io.root.output.Type.kLong64.typeName)
hep.io.root.output.Type.kULong64.value == orig(hep.io.root.output.Type.kULong64.value)
hep.io.root.output.Type.kULong64.size == orig(hep.io.root.output.Type.kULong64.size)
hep.io.root.output.Type.kULong64.typeName == orig(hep.io.root.output.Type.kULong64.typeName)
hep.io.root.output.Type.kBool.value == orig(hep.io.root.output.Type.kBool.value)
hep.io.root.output.Type.kBool.size == orig(hep.io.root.output.Type.kBool.size)
hep.io.root.output.Type.kBool.typeName == orig(hep.io.root.output.Type.kBool.typeName)
hep.io.root.output.Type.kBool.typeName.toString == orig(hep.io.root.output.Type.kBool.typeName.toString)
hep.io.root.output.Type.kFloat16.value == orig(hep.io.root.output.Type.kFloat16.value)
hep.io.root.output.Type.kFloat16.size == orig(hep.io.root.output.Type.kFloat16.size)
hep.io.root.output.Type.kFloat16.typeName == orig(hep.io.root.output.Type.kFloat16.typeName)
hep.io.root.output.Type.kCharArray.value == orig(hep.io.root.output.Type.kCharArray.value)
hep.io.root.output.Type.kCharArray.size == orig(hep.io.root.output.Type.kCharArray.size)
hep.io.root.output.Type.kCharArray.typeName == orig(hep.io.root.output.Type.kCharArray.typeName)
hep.io.root.output.Type.kShortArray.value == orig(hep.io.root.output.Type.kShortArray.value)
hep.io.root.output.Type.kShortArray.size == orig(hep.io.root.output.Type.kShortArray.size)
hep.io.root.output.Type.kShortArray.typeName == orig(hep.io.root.output.Type.kShortArray.typeName)
hep.io.root.output.Type.kIntArray.value == orig(hep.io.root.output.Type.kIntArray.value)
hep.io.root.output.Type.kIntArray.size == orig(hep.io.root.output.Type.kIntArray.size)
hep.io.root.output.Type.kIntArray.typeName == orig(hep.io.root.output.Type.kIntArray.typeName)
hep.io.root.output.Type.kLongArray.value == orig(hep.io.root.output.Type.kLongArray.value)
hep.io.root.output.Type.kLongArray.size == orig(hep.io.root.output.Type.kLongArray.size)
hep.io.root.output.Type.kLongArray.typeName == orig(hep.io.root.output.Type.kLongArray.typeName)
hep.io.root.output.Type.kFloatArray.value == orig(hep.io.root.output.Type.kFloatArray.value)
hep.io.root.output.Type.kFloatArray.size == orig(hep.io.root.output.Type.kFloatArray.size)
hep.io.root.output.Type.kFloatArray.typeName == orig(hep.io.root.output.Type.kFloatArray.typeName)
hep.io.root.output.Type.kDoubleArray.value == orig(hep.io.root.output.Type.kDoubleArray.value)
hep.io.root.output.Type.kDoubleArray.size == orig(hep.io.root.output.Type.kDoubleArray.size)
hep.io.root.output.Type.kDoubleArray.typeName == orig(hep.io.root.output.Type.kDoubleArray.typeName)
hep.io.root.output.Type.kDouble32Array.value == orig(hep.io.root.output.Type.kDouble32Array.value)
hep.io.root.output.Type.kDouble32Array.size == orig(hep.io.root.output.Type.kDouble32Array.size)
hep.io.root.output.Type.kDouble32Array.typeName == orig(hep.io.root.output.Type.kDouble32Array.typeName)
hep.io.root.output.Type.kObject.value == orig(hep.io.root.output.Type.kObject.value)
hep.io.root.output.Type.kObject.size == orig(hep.io.root.output.Type.kObject.size)
hep.io.root.output.Type.kObject.typeName == orig(hep.io.root.output.Type.kObject.typeName)
hep.io.root.output.Type.kAny.value == orig(hep.io.root.output.Type.kAny.value)
hep.io.root.output.Type.kAny.size == orig(hep.io.root.output.Type.kAny.size)
hep.io.root.output.Type.kAny.typeName == orig(hep.io.root.output.Type.kAny.typeName)
hep.io.root.output.Type.kObjectp.value == orig(hep.io.root.output.Type.kObjectp.value)
hep.io.root.output.Type.kObjectp.size == orig(hep.io.root.output.Type.kObjectp.size)
hep.io.root.output.Type.kObjectp.typeName == orig(hep.io.root.output.Type.kObjectp.typeName)
hep.io.root.output.Type.kObjectP.value == orig(hep.io.root.output.Type.kObjectP.value)
hep.io.root.output.Type.kObjectP.size == orig(hep.io.root.output.Type.kObjectP.size)
hep.io.root.output.Type.kObjectP.typeName == orig(hep.io.root.output.Type.kObjectP.typeName)
hep.io.root.output.Type.kTString.value == orig(hep.io.root.output.Type.kTString.value)
hep.io.root.output.Type.kTString.size == orig(hep.io.root.output.Type.kTString.size)
hep.io.root.output.Type.kTString.typeName == orig(hep.io.root.output.Type.kTString.typeName)
hep.io.root.output.Type.kTString.typeName.toString == orig(hep.io.root.output.Type.kTString.typeName.toString)
hep.io.root.output.Type.kTObject.value == orig(hep.io.root.output.Type.kTObject.value)
hep.io.root.output.Type.kTObject.size == orig(hep.io.root.output.Type.kTObject.size)
hep.io.root.output.Type.kTObject.typeName == orig(hep.io.root.output.Type.kTObject.typeName)
hep.io.root.output.Type.kTObject.typeName.toString == orig(hep.io.root.output.Type.kTObject.typeName.toString)
hep.io.root.output.Type.kTNamed.value == orig(hep.io.root.output.Type.kTNamed.value)
hep.io.root.output.Type.kTNamed.size == orig(hep.io.root.output.Type.kTNamed.size)
hep.io.root.output.Type.kTNamed.typeName == orig(hep.io.root.output.Type.kTNamed.typeName)
hep.io.root.output.Type.kTNamed.typeName.toString == orig(hep.io.root.output.Type.kTNamed.typeName.toString)
hep.io.root.output.Type.types[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, hep.io.root.output.Type, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null] }
return.getClass().getName() == hep.io.root.output.Type[].class
return[] contains no nulls and has only one value, of length 35
return[].value == [0, 6, 7, 1, 2, 3, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 48, 49, 61, 62, 63, 64, 65, 66, 67]
return[].value elements >= 0
return[].size == [0, 4, 0, 0, 2, 4, 4, 8, 4, 8, 0, 0, 0, 2, 4, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]
return[].size elements >= 0
return[].typeName has only one value, of length 35
return[].typeName.toString == [BASE, Int_t, null, null, short, Int_t, null, Long_t, Float_t, Double_t, null, null, null, UShort_t, UInt_t, ULong_t, null, null, null, Bool_t, null, null, null, null, null, null, null, null, null, null, null, null, TString, TObject, TNamed]
size(return[]) == 35
===========================================================================
hep.io.root.output.classes.TArrayD:::OBJECT
this.fArray != null
this.fArray[] elements >= 0.0
size(this.fArray[]) one of { 102, 10404 }
===========================================================================
hep.io.root.output.classes.TArrayD.TArrayD(double[]):::ENTER
arg0[] elements >= 0.0
size(arg0[]) one of { 102, 10404 }
===========================================================================
hep.io.root.output.classes.TArrayD.TArrayD(double[]):::EXIT
arg0[] == orig(arg0[])
arg0[] elements >= 0.0
===========================================================================
hep.io.root.output.classes.TArrayD.write(hep.io.root.output.RootOutput):::ENTER
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TArrayD.write(hep.io.root.output.RootOutput):::EXIT
this.fArray == orig(this.fArray)
this.fArray[] == orig(this.fArray[])
===========================================================================
hep.io.root.output.classes.TCollection:::OBJECT
this.name has only one value
this.name != null
this.name.toString == ""
this.fSize == 0
this.list != null
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TCollection.TCollection():::EXIT
this.list.getClass().getName() == java.util.ArrayList.class
===========================================================================
hep.io.root.output.classes.TCollection.add(java.lang.Object):::ENTER
this.getClass().getName() == hep.io.root.output.classes.TObjArray.class
this.list.getClass().getName() == java.util.ArrayList.class
arg0 != null
===========================================================================
hep.io.root.output.classes.TCollection.add(java.lang.Object):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fSize == orig(this.fSize)
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.list.getClass().getName() == java.util.ArrayList.class
===========================================================================
hep.io.root.output.classes.TCollection.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TCollection.write(hep.io.root.output.RootOutput):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fSize == orig(this.fSize)
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TDatime:::OBJECT
===========================================================================
hep.io.root.output.classes.TDatime.TDatime(java.util.Date):::ENTER
arg0 == null
===========================================================================
hep.io.root.output.classes.TDatime.TDatime(java.util.Date):::EXIT
===========================================================================
hep.io.root.output.classes.TDatime.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.classes.TDatime.write(hep.io.root.output.RootOutput):::EXIT
this.fDatime == orig(this.fDatime)
===========================================================================
hep.io.root.output.classes.TList:::OBJECT
this.name has only one value
this.name != null
this.name.toString == ""
this.fSize == 0
this.list != null
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TList.TList():::EXIT
this.list.getClass().getName() == java.util.ArrayList.class
===========================================================================
hep.io.root.output.classes.TList.TList(java.util.Collection):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.util.HashMap$Values.class
===========================================================================
hep.io.root.output.classes.TList.TList(java.util.Collection):::EXIT
this.list has only one value
this.list.getClass().getName() == java.util.HashMap$Values.class
===========================================================================
hep.io.root.output.classes.TList.write(hep.io.root.output.RootOutput):::ENTER
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TList.write(hep.io.root.output.RootOutput):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fSize == orig(this.fSize)
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TNamed:::OBJECT
this.name != null
this.title != null
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TNamed.TNamed(java.lang.String, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
hep.io.root.output.classes.TNamed.TNamed(java.lang.String, java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
===========================================================================
hep.io.root.output.classes.TNamed.getName():::ENTER
===========================================================================
hep.io.root.output.classes.TNamed.getName():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
return != null
===========================================================================
hep.io.root.output.classes.TNamed.getTitle():::ENTER
===========================================================================
hep.io.root.output.classes.TNamed.getTitle():::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
return != null
===========================================================================
hep.io.root.output.classes.TNamed.setTitle(java.lang.String):::ENTER
this.title has only one value
this.title.toString == ""
arg0.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.TNamed.setTitle(java.lang.String):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg0.toString == orig(arg0.toString)
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.TObjArray:::OBJECT
this.fLowerBound == 0
this.name has only one value
this.name != null
this.name.toString == ""
this.fSize == 0
this.list != null
this.list.getClass().getName() == java.util.ArrayList.class
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TObjArray.TObjArray():::EXIT
===========================================================================
hep.io.root.output.classes.TObjArray.write(hep.io.root.output.RootOutput):::ENTER
arg0 has only one value
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TObjArray.write(hep.io.root.output.RootOutput):::EXIT
this.fLowerBound == orig(this.fLowerBound)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fSize == orig(this.fSize)
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TObjString:::OBJECT
this has only one value
this.fString has only one value
this.fString.toString == "I am a root file written from Java!"
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TObjString.TObjString(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "I am a root file written from Java!"
===========================================================================
hep.io.root.output.classes.TObjString.TObjString(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "I am a root file written from Java!"
===========================================================================
hep.io.root.output.classes.TObjString.write(hep.io.root.output.RootOutput):::ENTER
arg0 has only one value
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TObjString.write(hep.io.root.output.RootOutput):::EXIT
this.fString == orig(this.fString)
this.fString.toString == orig(this.fString.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TObject:::OBJECT
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TObject.TObject():::EXIT
===========================================================================
hep.io.root.output.classes.TObject.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TObject.write(hep.io.root.output.RootOutput):::EXIT
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TSeqCollection:::OBJECT
this.name has only one value
this.name != null
this.name.toString == ""
this.fSize == 0
this.list != null
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.TSeqCollection.TSeqCollection():::EXIT
this.list.getClass().getName() == java.util.ArrayList.class
===========================================================================
hep.io.root.output.classes.TSeqCollection.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.TSeqCollection.write(hep.io.root.output.RootOutput):::EXIT
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.fSize == orig(this.fSize)
this.list == orig(this.list)
this.list.getClass().getName() == orig(this.list.getClass().getName())
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
===========================================================================
hep.io.root.output.classes.TString:::CLASS
hep.io.root.output.classes.TString.empty has only one value
hep.io.root.output.classes.TString.empty != null
hep.io.root.output.classes.TString.empty.string has only one value
hep.io.root.output.classes.TString.empty.string != null
hep.io.root.output.classes.TString.empty.string.toString == ""
===========================================================================
hep.io.root.output.classes.TString:::OBJECT
this.string != null
===========================================================================
hep.io.root.output.classes.TString.TString(java.lang.String):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.classes.TString.TString(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
hep.io.root.output.classes.TString.write(hep.io.root.output.RootOutput):::ENTER
arg0 != null
===========================================================================
hep.io.root.output.classes.TString.write(hep.io.root.output.RootOutput):::EXIT
this.string == orig(this.string)
this.string.toString == orig(this.string.toString)
hep.io.root.output.classes.TString.empty == orig(hep.io.root.output.classes.TString.empty)
hep.io.root.output.classes.TString.empty.string == orig(hep.io.root.output.classes.TString.empty.string)
hep.io.root.output.classes.TString.empty.string.toString == orig(hep.io.root.output.classes.TString.empty.string.toString)
===========================================================================
hep.io.root.output.classes.TUUID:::OBJECT
this has only one value
this.uuid has only one value
===========================================================================
hep.io.root.output.classes.TUUID.TUUID(java.util.UUID):::ENTER
arg0 == null
===========================================================================
hep.io.root.output.classes.TUUID.TUUID(java.util.UUID):::EXIT
===========================================================================
hep.io.root.output.classes.TUUID.write(hep.io.root.output.RootOutput):::ENTER
===========================================================================
hep.io.root.output.classes.TUUID.write(hep.io.root.output.RootOutput):::EXIT
this.uuid == orig(this.uuid)
===========================================================================
hep.io.root.output.classes.hist.EErrorType:::OBJECT
===========================================================================
hep.io.root.output.classes.hist.EErrorType.EErrorType(java.lang.String, int):::ENTER
===========================================================================
hep.io.root.output.classes.hist.EErrorType.EErrorType(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
hep.io.root.output.classes.hist.TAttAxis:::OBJECT
this.fNdivisions == 510
this.fAxisColor == 1
this.fLabelColor == 1
this.fLabelFont == 62
this.fLabelOffset == 0.005
this.fLabelSize == 0.04
this.fTickLength == 0.03
this.fTitleOffset == 1.0
this.fTitleSize == 0.04
this.fTitleColor == 1
this.fTitleFont == 62
===========================================================================
hep.io.root.output.classes.hist.TAttAxis.TAttAxis():::EXIT
===========================================================================
hep.io.root.output.classes.hist.TAttFill:::OBJECT
this.fFillColor == 0
this.fFillStyle == 1001
===========================================================================
hep.io.root.output.classes.hist.TAttFill.TAttFill():::EXIT
===========================================================================
hep.io.root.output.classes.hist.TAttLine:::OBJECT
this.fLineColor == 1
this.fLineStyle == 1
this.fLineWidth == 1
===========================================================================
hep.io.root.output.classes.hist.TAttLine.TAttLine():::EXIT
===========================================================================
hep.io.root.output.classes.hist.TAttMarker:::OBJECT
this.fMarkerColor == 1
this.fMarkerStyle == 1
this.fMarkerSize == 1.0
===========================================================================
hep.io.root.output.classes.hist.TAttMarker.TAttMarker():::EXIT
===========================================================================
hep.io.root.output.classes.hist.TAxis:::OBJECT
this.tAttAxis != null
this.tAttAxis.fNdivisions == 510
this.tAttAxis.fAxisColor == 1
this.tAttAxis.fLabelColor == 1
this.tAttAxis.fLabelFont == 62
this.tAttAxis.fLabelOffset == 0.005
this.tAttAxis.fLabelSize == 0.04
this.tAttAxis.fTickLength == 0.03
this.tAttAxis.fTitleOffset == 1.0
this.tAttAxis.fTitleSize == 0.04
this.tAttAxis.fTitleColor == 1
this.tAttAxis.fTitleFont == 62
this.fNbins one of { 1, 100 }
this.fXmin one of { -5.0, 0.0 }
this.fXmax one of { 1.0, 5.0 }
this.fXbins == null
this.fFirst == 0
this.fLast == 0
this.fBits2 == 0
this.fTimeDisplay == false
this.fTimeFormat == null
this.fLabels == null
this.name != null
this.name.toString one of { "xaxis", "yaxis", "zAxis" }
this.title has only one value
this.title != null
this.title.toString == ""
this.fUniqueID == 0
this.fBits == 50331648
===========================================================================
hep.io.root.output.classes.hist.TAxis.TAxis(java.lang.String, int, double, double):::ENTER
arg0 != null
arg0.toString one of { "xaxis", "yaxis", "zAxis" }
arg1 one of { 1, 100 }
arg2 one of { -5.0, 0.0 }
arg3 one of { 1.0, 5.0 }
===========================================================================
hep.io.root.output.classes.hist.TAxis.TAxis(java.lang.String, int, double, double):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "xaxis", "yaxis", "zAxis" }
===========================================================================
hep.io.root.output.classes.hist.TH1$EBinErrorOpt:::OBJECT
===========================================================================
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.EBinErrorOpt(java.lang.String, int):::ENTER
arg0.toString one of { "kNormal", "kPoisson", "kPoisson2" }
arg1 one of { 0, 1, 2 }
===========================================================================
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.EBinErrorOpt(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "kNormal", "kPoisson", "kPoisson2" }
===========================================================================
hep.io.root.output.classes.hist.TH1:::OBJECT
this.tAttLine != null
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill != null
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker != null
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells one of { 102, 10404 }
this.fXaxis != null
this.fXaxis.tAttAxis != null
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name != null
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title != null
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis != null
this.fYaxis.tAttAxis != null
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins one of { 1, 100 }
this.fYaxis.fXmin one of { -5.0, 0.0 }
this.fYaxis.fXmax one of { 1.0, 5.0 }
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name != null
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title != null
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis != null
this.fZaxis.tAttAxis != null
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name != null
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title != null
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries >= 0.0
this.fTsumw >= 0.0
this.fTsumw2 >= 0.0
this.fTsumwx2 >= 0.0
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2.fArray != null
this.fSumw2.fArray[] one of {}
this.fSumw2.fArray[] elements >= 0.0
this.fOption has only one value
this.fOption != null
this.fOption.toString == ""
this.fFunctions != null
this.fFunctions.name has only one value
this.fFunctions.name != null
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list != null
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
this.fBinStatErrOpt != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] elements != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name != null
this.title != null
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fSumw2.fArray[]) one of { 102, 10404 }
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TH1.TH1(java.lang.String, int, double, double):::ENTER
arg1 == 100
arg2 == -5.0
arg3 == 5.0
===========================================================================
hep.io.root.output.classes.hist.TH1.TH1(java.lang.String, int, double, double):::EXIT
arg0.toString == orig(arg0.toString)
this.fNcells == 102
this.fYaxis.fNbins == 1
this.fYaxis.fXmin == 0.0
this.fYaxis.fXmax == 1.0
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.fSumw2 == null
this.title has only one value
this.title.toString == ""
===========================================================================
hep.io.root.output.classes.hist.TH1.setEntries(double):::ENTER
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0 one of { 10000.0, 25000.0, 100000.0 }
===========================================================================
hep.io.root.output.classes.hist.TH1.setEntries(double):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfSumw2(hep.io.root.output.classes.TArrayD):::ENTER
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.fSumw2 == null
this.name.toString one of { "test4", "test5" }
this.title has only one value
this.title.toString == ""
arg0.fArray[] one of {}
arg0.fArray[] elements >= 0.0
size(arg0.fArray[]) one of { 102, 10404 }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfSumw2(hep.io.root.output.classes.TArrayD):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
arg0.fArray == orig(arg0.fArray)
arg0.fArray[] == orig(arg0.fArray[])
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.name.toString one of { "test4", "test5" }
this.title has only one value
this.title.toString == ""
arg0.fArray[] one of {}
arg0.fArray[] elements >= 0.0
size(arg0.fArray[]) one of { 102, 10404 }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumw(double):::ENTER
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0 one of { 10000.0, 25000.0, 100000.0 }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumw(double):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumw2(double):::ENTER
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0 one of { 10000.0, 25000.0, 100000.0 }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumw2(double):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumwx(double):::ENTER
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumwx(double):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumwx2(double):::ENTER
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.fTsumwx2 == 0.0
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.setfTsumwx2(double):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1.write(hep.io.root.output.RootOutput):::ENTER
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0.getClass().getName() == hep.io.root.output.RootBufferedOutputStream.class
===========================================================================
hep.io.root.output.classes.hist.TH1.write(hep.io.root.output.RootOutput):::EXIT
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fEntries one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw one of { 10000.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 10000.0, 25000.0, 100000.0 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH1D:::OBJECT
this.array.fArray[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 7.0, 7.0, 15.0, 16.0, 26.0, 30.0, 35.0, 46.0, 49.0, 79.0, 76.0, 90.0, 108.0, 114.0, 140.0, 136.0, 194.0, 181.0, 229.0, 282.0, 266.0, 325.0, 315.0, 321.0, 368.0, 369.0, 385.0, 373.0, 418.0, 360.0, 415.0, 390.0, 363.0, 365.0, 348.0, 338.0, 316.0, 301.0, 264.0, 229.0, 196.0, 172.0, 123.0, 127.0, 119.0, 110.0, 71.0, 74.0, 56.0, 44.0, 56.0, 32.0, 30.0, 18.0, 19.0, 13.0, 9.0, 11.0, 5.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 4.0, 3.0, 4.0, 4.0, 8.0, 10.0, 10.0, 16.0, 17.0, 23.0, 26.0, 41.0, 46.0, 67.0, 62.0, 74.0, 83.0, 135.0, 150.0, 163.0, 167.0, 198.0, 216.0, 262.0, 287.0, 284.0, 326.0, 361.0, 381.0, 355.0, 393.0, 372.0, 379.0, 402.0, 363.0, 417.0, 376.0, 366.0, 330.0, 346.0, 283.0, 254.0, 252.0, 267.0, 214.0, 212.0, 161.0, 140.0, 112.0, 116.0, 96.0, 76.0, 41.0, 50.0, 36.0, 38.0, 27.0, 23.0, 24.0, 12.0, 7.0, 11.0, 8.0, 5.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
this.array.fArray[] elements >= 0.0
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells == 102
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins == 1
this.fYaxis.fXmin == 0.0
this.fYaxis.fXmax == 1.0
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2 == null
this.fOption has only one value
this.fOption.toString == ""
this.fFunctions.name has only one value
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name.toString one of { "test1", "test2", "test4" }
this.title has only one value
this.title.toString == ""
this.fUniqueID == 0
this.fBits == 50331648
size(this.array.fArray[]) == 102
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TH1D.TH1D(java.lang.String, int, double, double, double[]):::ENTER
arg0.toString one of { "test1", "test2", "test4" }
arg1 == 100
arg2 == -5.0
arg3 == 5.0
arg4[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 7.0, 7.0, 15.0, 16.0, 26.0, 30.0, 35.0, 46.0, 49.0, 79.0, 76.0, 90.0, 108.0, 114.0, 140.0, 136.0, 194.0, 181.0, 229.0, 282.0, 266.0, 325.0, 315.0, 321.0, 368.0, 369.0, 385.0, 373.0, 418.0, 360.0, 415.0, 390.0, 363.0, 365.0, 348.0, 338.0, 316.0, 301.0, 264.0, 229.0, 196.0, 172.0, 123.0, 127.0, 119.0, 110.0, 71.0, 74.0, 56.0, 44.0, 56.0, 32.0, 30.0, 18.0, 19.0, 13.0, 9.0, 11.0, 5.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 4.0, 3.0, 4.0, 4.0, 8.0, 10.0, 10.0, 16.0, 17.0, 23.0, 26.0, 41.0, 46.0, 67.0, 62.0, 74.0, 83.0, 135.0, 150.0, 163.0, 167.0, 198.0, 216.0, 262.0, 287.0, 284.0, 326.0, 361.0, 381.0, 355.0, 393.0, 372.0, 379.0, 402.0, 363.0, 417.0, 376.0, 366.0, 330.0, 346.0, 283.0, 254.0, 252.0, 267.0, 214.0, 212.0, 161.0, 140.0, 112.0, 116.0, 96.0, 76.0, 41.0, 50.0, 36.0, 38.0, 27.0, 23.0, 24.0, 12.0, 7.0, 11.0, 8.0, 5.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg4[] elements >= 0.0
size(arg4[]) == 102
===========================================================================
hep.io.root.output.classes.hist.TH1D.TH1D(java.lang.String, int, double, double, double[]):::EXIT
arg0.toString == orig(arg0.toString)
arg4[] == orig(arg4[])
arg0.toString one of { "test1", "test2", "test4" }
arg4[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 7.0, 7.0, 15.0, 16.0, 26.0, 30.0, 35.0, 46.0, 49.0, 79.0, 76.0, 90.0, 108.0, 114.0, 140.0, 136.0, 194.0, 181.0, 229.0, 282.0, 266.0, 325.0, 315.0, 321.0, 368.0, 369.0, 385.0, 373.0, 418.0, 360.0, 415.0, 390.0, 363.0, 365.0, 348.0, 338.0, 316.0, 301.0, 264.0, 229.0, 196.0, 172.0, 123.0, 127.0, 119.0, 110.0, 71.0, 74.0, 56.0, 44.0, 56.0, 32.0, 30.0, 18.0, 19.0, 13.0, 9.0, 11.0, 5.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 4.0, 3.0, 4.0, 4.0, 8.0, 10.0, 10.0, 16.0, 17.0, 23.0, 26.0, 41.0, 46.0, 67.0, 62.0, 74.0, 83.0, 135.0, 150.0, 163.0, 167.0, 198.0, 216.0, 262.0, 287.0, 284.0, 326.0, 361.0, 381.0, 355.0, 393.0, 372.0, 379.0, 402.0, 363.0, 417.0, 376.0, 366.0, 330.0, 346.0, 283.0, 254.0, 252.0, 267.0, 214.0, 212.0, 161.0, 140.0, 112.0, 116.0, 96.0, 76.0, 41.0, 50.0, 36.0, 38.0, 27.0, 23.0, 24.0, 12.0, 7.0, 11.0, 8.0, 5.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
arg4[] elements >= 0.0
===========================================================================
hep.io.root.output.classes.hist.TH2:::OBJECT
this.fScalefactor == 1.0
this.fTsumwy one of { -89.90044995049783, 0.0, 281.0846390360272 }
this.fTsumwy2 one of { 0.0, 25124.041480849166, 100614.0499710697 }
this.fTsumwxy one of { -149.6464999933312, 0.0 }
this.tAttLine != null
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill != null
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker != null
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells == 10404
this.fXaxis != null
this.fXaxis.tAttAxis != null
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name != null
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title != null
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis != null
this.fYaxis.tAttAxis != null
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins == 100
this.fYaxis.fXmin == -5.0
this.fYaxis.fXmax == 5.0
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name != null
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title != null
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis != null
this.fZaxis.tAttAxis != null
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name != null
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title != null
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries one of { 0.0, 25000.0, 100000.0 }
this.fTsumw one of { 0.0, 25000.0, 100000.0 }
this.fTsumw2 one of { 0.0, 25000.0, 100000.0 }
this.fTsumwx one of { -171.43424466256175, 0.0, 31.88254774666985 }
this.fTsumwx2 one of { 0.0, 25440.254425694213, 100132.80644921324 }
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2.fArray has only one value
this.fSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 229.55365320525362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.35743590965694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 278.2870161068039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 275.98581915449836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 159.93124636748806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.40159409347527, 0.0, 0.0, 158.50386259492845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 123.02608699260242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 379.9512514614612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.8529894663116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 110.04637700272667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.39633381618849, 0.0, 0.0, 0.0, 0.0, 145.81075958281144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.47405200490914, 0.0, 0.0, 105.68982488289707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.85176446237296, 108.65678032834029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.3640639790128, 0.0, 0.0, 270.644012116525, 0.0, 0.0, 0.0, 113.45972820740744, 0.0, 208.20006007377322, 0.0, 0.0, 0.0, 0.0, 0.0, 91.64394450277584, 0.0, 90.75644906101401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.64048704242822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.4483025707086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 207.85708972727898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 187.07098957996038, 0.0, 0.0, 0.0, 0.0, 0.0, 149.58048532825316, 75.56510013741186, 78.28588728281352, 0.0, 155.97401517376358, 0.0, 0.0, 0.0, 162.63512946738751, 0.0, 0.0, 82.56083755949028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.00861538539576, 260.06646661993227, 0.0, 0.0, 0.0, 0.0, 93.71807826389512, 0.0, 0.0, 76.44346803824827, 0.0, 0.0, 76.01074028910294, 68.28834594179257, 0.0, 63.66077688414116, 63.71105354807626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.04618328857103, 0.0, 0.0, 0.0, 0.0, 87.90937430152617, 0.0, 97.79613557027211, 0.0, 111.57562061881144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.10881886948316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.85866518537023, 0.0, 0.0, 0.0, 63.824335079404776, 0.0, 59.00659728176397, 115.53402979440975, 115.55517185176194, 0.0, 115.23884099682374, 119.77667754706664, 60.3282316731778, 0.0, 62.37656520285095, 64.86484908774327, 0.0, 0.0, 0.0, 79.45592090879668, 82.41023253285763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.47705045808848, 74.17959237459432, 0.0, 0.0, 69.25081101538709, 65.10129723940173, 63.76804228106964, 120.4490199928676, 171.80705201293097, 105.71858655582817, 48.96610869644089, 53.452686392419075, 50.72461251473717, 0.0, 52.29608645083905, 102.69323313095512, 49.2515325396414, 0.0, 0.0, 51.6406238144346, 0.0, 0.0, 110.33691259456103, 56.120709769063936, 61.64844314131909, 135.87817200723055, 0.0, 73.34769837257272, 0.0, 81.57385100488682, 0.0, 92.3265575071039, 0.0, 111.59657392195705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 176.2306185222046, 0.0, 75.77576465203073, 73.02392866507496, 125.34753540539907, 0.0, 55.201097787482226, 0.0, 49.712700295114836, 51.87828635748076, 189.9188299387942, 137.29967933865916, 172.68959924000762, 128.7105370335912, 123.57497549527332, 43.289292601993196, 85.74863101214106, 128.2884649760985, 43.14512055797298, 0.0, 43.85913889574651, 46.3035876840471, 49.22634420929598, 0.0, 45.798909762920076, 51.39857919654231, 54.32492456901119, 0.0, 0.0, 60.37712683167125, 0.0, 77.41270951889318, 150.69582940219595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.74362093328763, 0.0, 0.0, 67.55322034461781, 0.0, 61.19229043499082, 53.191645308430076, 0.0, 96.98427110923504, 147.03782618453803, 0.0, 42.38341510222756, 85.4477382483048, 75.21553969308582, 36.61728655559116, 35.858026034671035, 74.45852553250445, 70.21190963756641, 33.63725682546873, 74.04502528238974, 39.453637274699275, 107.04652418225399, 35.17590388437419, 79.41872262872698, 79.02667690923093, 127.00124780634732, 176.51031822846772, 41.57425413208977, 96.52842669913667, 0.0, 55.057133935416985, 55.61852778364321, 0.0, 130.9154406692775, 0.0, 0.0, 84.36327272356431, 0.0, 96.45100737995433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.0126056013084, 0.0, 74.3015630623963, 0.0, 0.0, 59.35589814166099, 0.0, 0.0, 45.89408050353946, 132.18317493141595, 123.28945932825562, 234.01372285225375, 76.62397503258039, 0.0, 69.96663024923015, 96.92140756515711, 32.466947388369874, 30.57982408070632, 60.74457292352491, 31.744206478709064, 122.75628696414273, 92.17734442313854, 95.28616775186262, 0.0, 31.905076966541838, 65.43436410214917, 182.46342212544266, 35.424441883694044, 117.90101609862276, 82.32898086297504, 89.88628610132244, 44.54035201373501, 0.0, 108.03446299180003, 114.32000640021437, 61.86682634375864, 66.79140297461221, 0.0, 0.0, 86.5752209573222, 190.12325528539316, 94.32931705182773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.87248416012525, 65.07478112999974, 54.99471497369431, 50.978635866945574, 94.58418983723604, 85.99382715728291, 0.0, 112.75335773254878, 136.34538642060053, 0.0, 93.03225010477875, 32.085600431519254, 88.77034642125724, 56.32606760819358, 136.9408103531372, 104.41546640532853, 105.80343746776937, 27.735703674465835, 0.0, 78.75335367234446, 203.59559208385315, 28.2146991254042, 167.1522613503965, 88.8156285322849, 152.6835607242328, 0.0, 63.97931334403411, 0.0, 115.37216076862751, 121.5845359941977, 43.28715742160725, 0.0, 53.10372098573565, 53.19220561176862, 0.0, 0.0, 0.0, 0.0, 0.0, 96.44579757444714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.80782780566676, 0.0, 0.0, 69.7512878425508, 124.12108489648884, 63.679274907683336, 0.0, 0.0, 92.94973182502156, 41.61776156924985, 35.62411184936818, 105.16750160561594, 129.94489908403574, 58.68403337313864, 84.8657691564491, 0.0, 98.43220219506296, 72.64267733262403, 139.015433494785, 131.22124115080598, 66.65775632713822, 64.23449704357427, 89.17887507824922, 61.134264974869225, 44.62997349340849, 112.48339836041335, 141.6775693798691, 22.737266623408793, 68.63472123850593, 154.23502969174302, 50.404125972395164, 52.618632921346816, 0.0, 64.685406014828, 0.0, 41.297476912632625, 0.0, 42.18620768587905, 0.0, 0.0, 59.899876671401216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.81164474904509, 99.40524480844729, 0.0, 0.0, 159.0101606142522, 71.96500722840818, 129.39821795321762, 58.7933844188441, 106.21265492965313, 95.7364514492786, 40.8995877993734, 76.40616800140606, 0.0, 64.01633002358021, 0.0, 57.362625865009775, 130.11907493166584, 122.94359890195842, 94.64604508067772, 87.10985077994724, 21.028217936885696, 96.52516776782635, 149.50754281405082, 38.12639538727588, 85.46530041909091, 176.31270351985444, 105.17366012736395, 160.11887052252143, 51.298863431768964, 128.50448591706393, 20.916094014620953, 59.4519018667372, 126.90434246977415, 87.10745009899763, 100.07647461335591, 74.97036213580513, 114.38846319775851, 29.78290785343491, 96.07148566746852, 36.08159288059311, 0.0, 43.52844282818297, 44.39331169679729, 52.03833726879191, 116.76010709635003, 125.29907848375267, 0.0, 0.0, 87.42458647292077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155.8282001291064, 144.98053542150282, 125.00278009130808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.25501672925883, 99.83866533472178, 0.0, 0.0, 79.68234546973652, 142.75009370896012, 33.03512067722765, 0.0, 80.20521201039912, 46.2048255320734, 114.59201152233068, 60.98074762107923, 111.19919635869869, 53.26758921511582, 68.61461961501757, 66.4603250671317, 46.0793406699626, 75.24146765331604, 15.471499277186755, 104.1161939926075, 29.7807907287141, 118.75419442383092, 28.393979291626966, 107.8417388647864, 62.51829677438094, 104.6764930214776, 74.19520060606939, 72.00417563211158, 119.9713539162593, 22.696695372506632, 70.46254063594819, 53.41399273864517, 140.54116464748225, 96.63038338795033, 69.71702716629295, 73.1172562104637, 124.77184335739588, 193.88512620081087, 101.70311621872463, 53.39796779549814, 0.0, 0.0, 84.07662820797185, 0.0, 91.31706365344655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 163.39762758554716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.49799027815374, 0.0, 0.0, 55.43877412544088, 0.0, 0.0, 71.91418574768119, 137.39343732549455, 0.0, 108.99663737446025, 120.95542077001913, 20.70726277863156, 64.54600329583195, 58.23960922620472, 99.37772723678185, 34.78526281340007, 73.96065745003702, 26.32602193523804, 50.548979609419106, 111.78453557300409, 70.27147749838196, 105.44640641279287, 93.47584642407195, 130.421170185466, 49.16918279048018, 45.95905922752406, 101.27639133469992, 119.15552677638182, 29.56032176047979, 123.85111927780173, 142.59001001574987, 50.08976763177327, 72.99809824144418, 62.71248212374534, 66.56520259115752, 49.23758110854864, 49.85727985853512, 0.0, 101.74683440365928, 114.78636114083335, 0.0, 44.42398055881819, 214.2834312475526, 0.0, 61.83518279805181, 67.32082283981421, 0.0, 92.30049676614446, 93.85465338459962, 110.62956778365023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.327425085282, 0.0, 0.0, 0.0, 58.982339103595656, 0.0, 46.50139634205521, 166.65512553167298, 77.73085540983976, 0.0, 118.11379082825961, 28.74306396808696, 90.59501842180565, 108.66228614184887, 96.87660898247876, 32.72613072526663, 93.76759614886451, 111.53346780905949, 80.11206831261617, 37.94240721719452, 65.94984302866442, 52.60592454014743, 140.888850497338, 78.38709489594865, 135.51871826014985, 56.78121947184084, 120.6005962744034, 76.63452340499593, 47.24806612854611, 79.1827263198794, 140.6925808269452, 104.55945423170866, 73.86227544109164, 50.72087114236646, 112.9594166790661, 75.93771016534257, 17.043418236777715, 57.367398369139465, 66.61242170432783, 94.09695666449805, 26.633166264380023, 62.603232584997784, 102.86006042630198, 70.95065429134496, 85.50752994919844, 45.490213075164995, 53.58734194569119, 55.48560263504428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.62735720567542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.77443258242002, 82.75391461245854, 149.75905535069012, 32.94176553358096, 59.75016413778833, 132.43227972661157, 67.95280980318154, 41.729434512229176, 128.45254468243283, 31.490887843836468, 58.842242780932494, 53.709120396063554, 82.65623394017584, 87.0995461495352, 88.27926428051704, 71.49600917552776, 26.970599592838763, 76.9834270878494, 55.26958332021109, 60.96901983711648, 59.292666166026294, 100.46771293083448, 90.64826772554898, 53.70989377569014, 41.21867191663198, 33.14974425271784, 98.42015234598321, 48.747421339598674, 43.00619902741906, 82.01609566227305, 36.05554025263148, 102.25280465280532, 99.3161523204922, 110.01578566052655, 62.04583615798126, 92.2596498013781, 79.24349754518974, 92.23045868895422, 33.77599899572211, 226.9648619800256, 0.0, 50.735671223183786, 54.24769175796975, 0.0, 199.31822082817766, 0.0, 0.0, 0.0, 0.0, 114.97811950920448, 0.0, 0.0, 0.0, 172.9378894127552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 362.74132926294567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.65651536135877, 264.0689330779427, 0.0, 0.0, 102.42353064016963, 0.0, 0.0, 0.0, 126.7966489983335, 60.31602319030501, 50.23388082141289, 47.74999490380937, 0.0, 33.330837340942274, 115.19736770703841, 104.39384579849187, 138.79634389352321, 205.01773598618453, 50.22426973331841, 123.094916405812, 98.39028673905713, 108.91842513025618, 56.38270284116252, 135.0615159778349, 68.20949355435312, 78.11631524029819, 67.13671974554819, 53.86983234187614, 56.5906571834926, 75.97211952139328, 80.12269974057563, 61.62801584191782, 87.62081805018808, 58.30089344202064, 58.77043541574457, 112.23010891227939, 92.3771730685003, 77.27392693462562, 48.670737615579796, 60.71630546072935, 84.31435691843168, 86.89521978163762, 87.45273397301085, 68.92235469244609, 92.01205532756096, 68.68265275843129, 21.439558912169378, 46.198891460562606, 52.89763762419861, 59.49179467452124, 67.7875651965373, 75.29914071440743, 130.8452017609734, 101.43064315699411, 111.48247687391915, 123.25700147480258, 0.0, 239.85094158436317, 0.0, 196.25132341257404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 577.0576158416308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.39952946854949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.78441458516486, 155.03861753518834, 89.77158147094303, 82.35849138975277, 35.41168934483266, 90.54722831583895, 78.59904719535291, 46.68320482280234, 40.29461127364081, 34.75625779122851, 169.107407554225, 39.22529635848413, 109.91437233820625, 104.6823214747146, 99.5625003499524, 73.72918914708765, 50.89304612709884, 69.87293068600079, 58.48829496963017, 75.91843523136914, 64.24880266988013, 64.81901552248317, 113.72809254746753, 70.5516623764586, 75.97306452670428, 50.20661286973154, 74.45717153444905, 47.55361628148176, 58.57767152447191, 74.82213059115146, 31.10730954153201, 78.65700357653544, 63.86159104067712, 52.679163557855944, 112.4295262890605, 24.840095491807535, 55.20424135711698, 87.74270270138439, 86.99282877082442, 161.44831346391013, 48.58016664845033, 135.4018961534745, 93.14474445187078, 34.95773744356466, 37.14626651752572, 93.21752653990798, 50.40334719355437, 59.46073104432909, 0.0, 0.0, 166.89110494996504, 0.0, 0.0, 0.0, 0.0, 152.76213470355145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80.36418707539866, 0.0, 59.115982844708945, 110.47001309849173, 48.66654468786166, 82.0402279040487, 71.97022715549559, 32.298808078438455, 28.020550755365825, 47.73372124398868, 81.49895985604228, 108.32010387680666, 124.06165719875987, 135.45424860545495, 34.644956172371174, 118.10317523237453, 153.38641412453978, 66.97104584991088, 79.14308241173926, 40.59326771923172, 47.774058324550765, 55.29930528513921, 77.9568686682653, 53.602302011703834, 41.63399051194583, 84.44644172246899, 51.29279753286911, 67.87770427001689, 50.50490967982072, 42.01027483296726, 38.47677057897876, 34.2230016582743, 35.290576507463136, 86.77584144311278, 46.79883550136131, 45.13449043250257, 45.09578534363247, 50.93339983017997, 130.4426514602074, 77.65697039130572, 53.40804014486609, 30.798266822530266, 54.83871267508411, 84.33294382106098, 71.78317802105377, 25.755201132944894, 0.0, 34.41083433736867, 251.41412714895938, 51.60834185350436, 110.24577774905612, 0.0, 210.82458741681512, 78.76912712976548, 0.0, 0.0, 118.33587858388069, 241.31555009438472, 132.67625322017088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.80980473410496, 0.0, 0.0, 83.01969278015027, 69.83416509414013, 0.0, 53.686157482914886, 101.7457837008034, 90.07698266578277, 38.99044040070461, 68.67245574668333, 172.06232098326234, 73.41207545209876, 66.02532847720903, 71.36103127995338, 80.01954135191228, 53.47830986298942, 113.5905069575592, 127.87346352542859, 84.44064925144195, 59.711109315759096, 56.26024495452275, 50.123959881760115, 44.28082162873222, 46.832861921745206, 36.64132221732507, 55.79646750533727, 43.16589688023939, 41.18590191096612, 34.40583061304242, 35.593388982513304, 28.994136979007102, 50.79327449748443, 26.685020596188938, 38.30115772117425, 63.08407984052806, 46.152698942373185, 56.90642687688841, 28.11532429563729, 61.362849847125496, 104.40981675534213, 64.45209448839175, 82.65618026941857, 78.64912561045963, 103.35415267725213, 93.59164319483028, 138.92079208117673, 18.36923905904019, 89.87959803988106, 25.915242955561318, 112.01450642659645, 69.31727688697133, 150.92183920246603, 0.0, 0.0, 173.7004826412198, 128.0221343054746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 194.7396827416469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85.48937031491751, 80.09777596841595, 0.0, 0.0, 55.20329701647426, 43.559997482047535, 122.75631612322462, 141.16072165970485, 86.16607217315489, 106.92124299434111, 178.19277340122727, 79.06235671068274, 112.52678419185511, 27.92277899940084, 80.8443270167069, 58.51691281878451, 58.239864680728175, 61.95068146926641, 72.51582161078935, 88.2074607813107, 95.85302531298385, 55.29922788144327, 58.04699411822454, 72.59120919016421, 45.63034827125365, 22.61536272994676, 25.094632269675024, 43.399350345074204, 23.57250960599127, 43.74426238639652, 22.577184134023394, 44.789802556233624, 42.71608798829925, 50.45956464610798, 48.694079418338426, 45.192853357196206, 68.87758907637537, 66.58313716219237, 53.89674114732674, 66.89119436253785, 90.44206290927593, 145.3949783236273, 100.30270542126381, 83.20717793807547, 137.51667447601602, 61.9905341924899, 79.43092960799355, 68.92887955157975, 229.57130157419675, 88.70277694382509, 0.0, 159.04469093536343, 46.87426440116997, 109.49040985642166, 60.92775724404597, 144.21757007107107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.6838664138985, 0.0, 0.0, 0.0, 0.0, 0.0, 72.93275801548862, 0.0, 229.00026585653586, 52.016316548507056, 134.51259055440602, 39.582331412079334, 70.21696073237676, 82.68818743857686, 147.48501428028194, 62.48183227464868, 122.66903634143137, 59.39262095495915, 98.57761824936071, 92.43279493055981, 54.0309611910521, 84.6439171638776, 46.1515178116212, 55.408411095494344, 54.440860029964234, 31.801419223903878, 64.36199665873568, 54.76605930046601, 34.161869533461086, 37.099527036714676, 33.00139233209618, 30.28472142574541, 26.601934992526036, 24.729337735807995, 26.06392246193631, 38.14628026209487, 23.96522891021309, 31.362452912861247, 32.217901103026975, 47.908077299536664, 69.47993474584976, 50.92831048555135, 57.22954151875376, 73.29477253794599, 48.06761629996402, 83.66803015416308, 68.2752634489674, 94.21773543403941, 103.32371187644338, 156.93632732871515, 58.47603930129575, 34.29809305873772, 80.74487113473559, 47.584230941846315, 135.2909790163402, 67.39806745028268, 76.70031527815877, 42.39412797018666, 100.78033483326631, 0.0, 198.85461789378087, 0.0, 0.0, 0.0, 0.0, 0.0, 141.77306848956775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 184.7753388279434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.54755938862762, 0.0, 106.86534480035372, 49.69161095457881, 126.17079123658885, 71.73567235866489, 87.45054358303608, 0.0, 172.05310790975187, 56.29312487197646, 48.978828379995946, 120.56214047023082, 75.26714625381558, 97.36822409702319, 80.42506853685695, 96.50744112226012, 72.96537201117921, 51.334652799278125, 80.18504572079746, 54.342923415618756, 29.204205356735716, 40.08654638876014, 44.684592226824016, 32.83825328542101, 20.12017267626417, 21.503032443311536, 18.96899104186014, 15.842237846539488, 20.88013365809346, 22.788261500060365, 28.02536275200034, 19.842989556429238, 18.676326052310344, 35.4507570946693, 27.902228269828854, 45.03022427738869, 54.19873329771316, 53.190678248836534, 35.19604579957739, 59.14549436482239, 105.91198535116044, 74.0867104657807, 88.02767404781764, 106.5392750304619, 130.04642236100804, 123.44071344680012, 131.56458807807468, 154.6526587469822, 50.860448572903394, 91.73393779839684, 0.0, 0.0, 97.12654107586211, 108.1357449814765, 254.97781248974312, 0.0, 76.5830991398771, 99.03275421671832, 0.0, 0.0, 124.61574490192085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 218.4202204932932, 102.39281487788107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 192.1492114010502, 103.5963933200712, 56.52774746927433, 25.457055059746153, 60.69137325896504, 101.15808592902378, 90.8306276119856, 45.569739221374945, 129.74051992955404, 71.97285175047705, 85.57458477821861, 61.68189629040636, 56.73227458538487, 73.8457917332454, 34.45643631582108, 31.307477995759243, 46.541097744098906, 31.926745372799992, 27.952409369670093, 23.276068198339694, 13.123163538405334, 18.811648392485683, 16.15219466447909, 10.298701209671343, 13.654393680823842, 13.191569556264074, 18.75043929235855, 21.21852025636613, 23.529088576382946, 16.74775245968398, 40.53263637901025, 39.94897013346628, 26.178052724741836, 42.97203980247357, 57.39809486605118, 37.61854993837104, 72.34623399134294, 51.303745489099484, 46.4884353515144, 56.23580178313853, 166.59342027878202, 154.68648261785196, 50.68202204010113, 60.869357480011445, 121.88016445803463, 28.530883195288066, 139.66726434251783, 82.24658644363751, 92.62697901139404, 51.46384410505798, 64.13244505164495, 136.2396014942725, 78.37189876321257, 0.0, 305.18464558833244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.52559076055223, 0.0, 0.0, 118.01417083469367, 0.0, 94.610727572766, 87.27935397187082, 143.43482926770372, 0.0, 0.0, 47.20806201282373, 176.69885132560654, 35.996706227608804, 97.37114948868248, 109.2172143424864, 116.863210886047, 95.78619784987778, 80.91508354997107, 52.71854202706877, 86.310468345841, 87.12428746410087, 48.949049238682385, 74.58834252889372, 40.11261109765839, 63.795091150380145, 36.481354479903146, 36.67344774613592, 38.108322158332236, 22.9115599382618, 18.7534411940693, 25.772197625768428, 12.66322134359813, 15.136735409740954, 14.279361408515584, 10.165845514039564, 7.570833369083759, 9.60642117744691, 11.729850499200241, 15.140738745598126, 11.601170591529113, 18.15052016121831, 15.713740719411202, 33.77216915652698, 34.12405519571115, 30.73812352806019, 59.95932860270445, 45.22211010906793, 48.516211465489974, 70.40557937749189, 95.0026844541638, 50.909328021502894, 131.74291086975725, 57.3003205595073, 128.60132641438761, 79.27276890157836, 76.83392713569427, 185.5673295233945, 104.62642354820505, 159.09711090164905, 0.0, 87.09064737254762, 0.0, 57.31412750374452, 70.06225464542894, 0.0, 0.0, 95.2164915231418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 82.78224452741232, 137.16929378932744, 0.0, 110.70756408301705, 95.25094490821009, 39.77841710615291, 136.3475661844411, 57.18511558306038, 103.093531833182, 193.7870284056478, 55.26299065034186, 45.3904450583596, 81.43045432158262, 67.9208534377207, 41.143808938472525, 50.98860237237986, 70.86199311129393, 51.98935870567064, 37.685381647618485, 37.4991308823228, 40.89790718053626, 40.3082103639045, 26.911354155307535, 16.736284860552754, 17.252290095728856, 11.033222703594058, 6.58066841870488, 7.9999971211157765, 5.418288699350806, 5.362833830118454, 8.048025270251902, 5.508666070608042, 5.940493753122858, 10.623101360308926, 9.459707369713495, 9.070465773036434, 18.409107859013996, 27.47863232372501, 28.961980464851962, 38.52191833303561, 34.74041523144559, 36.65874678032981, 47.5139171739326, 70.36472433418942, 64.00373624853816, 93.7802236415084, 39.04705417499656, 72.69187769235745, 120.42357014954128, 55.125057587958096, 46.10417049246102, 76.34974766496609, 27.676841952335064, 107.23949880577158, 0.0, 48.64222810355162, 53.5518775323989, 0.0, 75.3855805479568, 0.0, 0.0, 100.82970157406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 135.95706562951278, 0.0, 107.84606471179839, 88.46787698810436, 79.68092202186365, 71.42623329061348, 0.0, 0.0, 92.33160081437181, 39.39710565547193, 65.95304380893495, 27.719650339413512, 123.32792438822568, 58.57594300887993, 98.20492578519018, 83.58085459075123, 23.337128283142974, 190.79195832245156, 111.83349413952679, 70.22792367440219, 63.73250817244047, 60.90628579805319, 26.260582153702497, 48.120393506859244, 35.54112786676529, 18.11388095428163, 23.801454665832093, 14.466197304939332, 9.517285879013027, 8.473651754372849, 3.6334115534089393, 5.788857679803861, 3.2617603817865293, 2.141142723420467, 2.786720227709269, 5.0126706886584556, 3.977149886826007, 5.762688121638053, 8.980262570724573, 11.717762835888179, 14.81712827807744, 18.578815568346425, 28.75888753528506, 26.56215702250392, 34.90177315166071, 34.30071788941423, 73.57163766367552, 52.849097515865004, 80.93512702819586, 60.24781131495108, 90.72280481108511, 124.494685926463, 114.90820396149766, 83.21832534893032, 136.99133713217557, 51.79237288693341, 87.8118210428845, 101.81943894916282, 80.85702562713364, 0.0, 56.06809754524636, 0.0, 72.10861205479006, 0.0, 0.0, 0.0, 248.62315889819374, 127.9721698174996, 0.0, 0.0, 0.0, 199.55551456329977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.08285562348024, 0.0, 0.0, 0.0, 90.89084117254866, 82.53203481907374, 67.54103521855356, 63.92866403735849, 50.9062799395014, 44.6208949062901, 0.0, 35.23752332859621, 116.96102750076238, 73.43142970506128, 57.54975626847025, 146.14130726843726, 119.0065174078333, 29.61795973936003, 51.05568347560719, 86.64476682421224, 47.59555037634091, 66.7088001934678, 15.666112551008405, 40.1860629228165, 26.383218769644955, 41.692321582658565, 21.789754624853273, 18.668975841004574, 11.995250050032409, 11.13223858235838, 6.410934430702938, 4.54130405078594, 2.542211352484711, 1.848307604821613, 1.7955393960012074, 1.5983729684166734, 1.8163692677650762, 2.4266729657182915, 3.7437224379552947, 4.486141610523994, 6.57841387310106, 15.11813794009453, 18.623986860857773, 19.95546379754919, 33.846652399431285, 34.59090670835769, 36.11472425697137, 63.1817180677642, 57.61633472958843, 68.27101349631093, 81.39746215729663, 65.70978273154321, 85.30145958975955, 88.18033856913698, 94.24367079552981, 95.7610199517557, 94.35573214146967, 193.9991641894014, 30.7701099207667, 37.36957638921763, 42.089465938279645, 0.0, 0.0, 67.4703135230557, 151.1070655015325, 0.0, 0.0, 0.0, 0.0, 148.70067073697948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.35625778273224, 0.0, 0.0, 0.0, 81.15839925606659, 0.0, 0.0, 49.5054346170472, 89.1545096959832, 150.26262223508488, 29.865149762951617, 54.99977199096137, 129.56791308828784, 149.2802971526409, 61.229587202806385, 138.76142982789517, 50.971713970772754, 50.019101951731045, 72.74041978276092, 84.83745318361484, 57.87365096602439, 57.05710386912156, 22.784125363780014, 23.660797783657287, 31.571967252073687, 11.54731378027221, 13.774263137820547, 8.86013535918713, 5.769896600661059, 4.401277454535642, 2.235118837463988, 1.6480005534170736, 0.9515545509597647, 0.4513458184903597, 0.5990689574435293, 0.6768614133367638, 1.5527946416138696, 2.9364960850124184, 4.687744163520578, 6.43910027503344, 8.493500747742758, 14.262889782861924, 24.430044158442758, 32.34909328690139, 28.66719672626494, 40.10490528091065, 46.18536575108504, 54.93748975076831, 54.37269985626439, 88.66792298305664, 90.16500606931815, 59.62874464780559, 98.29775865953553, 77.1620294547301, 40.19451782441628, 87.22805310342025, 51.813965358170776, 92.40129455765262, 143.93909469408396, 0.0, 50.32330364840139, 120.29906235734902, 67.12460829292995, 83.3944569427634, 0.0, 208.31228946092088, 0.0, 0.0, 0.0, 330.4091600238463, 175.79744123814646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.70486308684676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5003852302134, 123.91979265796228, 38.31753757511929, 126.59809450003189, 0.0, 131.35704898180342, 33.9744195446459, 13.724493132092986, 118.59692160849704, 59.80742441399711, 114.9187459413847, 60.67308359101389, 42.94093583029363, 46.87574994106345, 33.61029885126904, 31.054124554706753, 23.11440072853358, 31.00348249034258, 13.114877149770013, 10.44663378766947, 6.123215165162253, 4.215599324349762, 2.7985639246070004, 1.5269233385256988, 0.7735345079703058, 0.30043927072822574, 0.17005033885673712, 0.2061049584860092, 0.28853741994938364, 0.4801592019494058, 1.040626697450619, 2.423093252607128, 5.083904455016013, 6.6354234449554905, 10.29634957480302, 12.282848447446055, 15.912125040117871, 24.793097325829063, 42.5711613763268, 25.59864010488372, 73.44282693821084, 77.96329150811529, 98.90998226350791, 64.63658493993363, 88.14933060543768, 46.56935847751821, 59.62220281798911, 18.7879385537689, 21.110666254438325, 53.5446640370607, 93.85813962253302, 114.00753089226156, 42.03735401214923, 47.7310064844055, 115.67748140217549, 0.0, 80.51608524663864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.2106390129483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.03566940373678, 0.0, 92.90034693337951, 78.24936837971845, 132.18494618524622, 58.218054088972735, 46.845221980193394, 40.53970883906497, 35.27421616318624, 0.0, 76.59884960340156, 0.0, 73.42442984131605, 42.45582478667888, 108.13217212188135, 35.53134263056385, 119.03038499084407, 73.33716727748173, 65.00486288277051, 50.83741204689097, 61.9491725576898, 45.20052128818956, 43.58626516838483, 17.05976875688613, 20.9735890673001, 13.337858067398342, 6.793783729585614, 3.235101274096022, 1.6805344575046595, 0.8407861318912019, 0.24836892319432854, 0.10016078306399902, 0.02512398291998388, 0.026987136494899637, 0.10880761025759056, 0.3325725434878212, 0.7085579012897424, 2.0262449312690634, 3.697805943118953, 5.502672057844092, 9.807812395357647, 17.317704603941436, 19.24984221572063, 25.4633504983856, 35.35837365290946, 40.66973655306464, 59.479379568618455, 68.14266221942735, 82.68445253938022, 52.54154338001041, 75.11790032785977, 61.0616541981082, 116.2072397852617, 72.56630759105985, 87.5062765554899, 103.56065239121833, 92.34894752141112, 36.556854044158854, 41.92038362689841, 96.53126458811775, 53.63393766361024, 61.765694824087234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.13076786195208, 128.2039008703583, 55.72889423514349, 47.526420761549964, 172.30663419366755, 33.92325853085258, 87.67044381934045, 50.76052769163083, 64.35434090132391, 135.48858158920223, 116.83316459412373, 57.39754896911401, 38.00026017709808, 59.45012380682094, 77.62938056650252, 71.91693589724834, 75.90125039228072, 37.350453805302394, 42.136328464069464, 27.998195140099526, 26.239542466512027, 13.082259616807686, 12.983571273611933, 5.573864796734041, 2.7869799355733784, 1.455417173227919, 0.518643027695543, 0.16107232609364866, 0.025842194690793553, 0.002188117341539604, 0.002044792613609386, 0.03304860853265137, 0.1848561961306062, 0.5638412006988327, 1.283959803029776, 2.8349087799071007, 6.207703130277893, 6.886570033495204, 14.693584430452322, 20.124812227729453, 20.325216615786417, 38.54024386662932, 40.22558174642854, 51.853198227274156, 39.960990138867245, 74.74352848826743, 52.220277115637174, 97.21766426791095, 117.59336670388952, 86.94617950128054, 119.9787904577981, 21.69523265546981, 100.12385503810913, 62.05066451704447, 141.54110556649727, 84.15166139721447, 48.66730554626663, 0.0, 0.0, 0.0, 88.37839569988094, 0.0, 108.65108386082237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 97.22511515047786, 0.0, 76.76201122307192, 0.0, 0.0, 48.996814326562564, 0.0, 70.65337985649758, 91.42732718356974, 54.14694031545642, 102.68708050069098, 53.59965897238124, 71.08469718371131, 72.06122835460899, 104.29925246533824, 81.93143674384976, 36.69415260991937, 43.945970748250076, 54.5823983732621, 39.44466629618073, 22.076789140783553, 35.32441968586843, 20.680329176416247, 12.1246438378513, 9.946654501302874, 6.926109074875256, 3.318194695804697, 1.980620318278768, 0.48671621655423913, 0.13317837961294796, 0.03026026645179651, 0.002709855897200594, 0.0022336281749421034, 0.016961305376532496, 0.19543216422426243, 0.6104382130358033, 1.3058532823742033, 3.532510935095334, 5.893851104878079, 7.933343090961521, 11.064958689995954, 18.770129233526625, 29.913626609016042, 25.64906326476843, 40.778738508147626, 46.1366675119582, 90.81426441498527, 80.42925136152157, 66.9344874504162, 73.79874898020002, 91.2070916401451, 101.7720347932443, 67.34141582399883, 128.8739404159066, 104.53418850194339, 92.11954798137427, 104.51945390155606, 133.06154449746828, 49.444607610769545, 57.72862277316785, 65.87864893897179, 77.31448939043382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 87.54111041638953, 0.0, 0.0, 61.105115675337636, 53.21971398000627, 0.0, 34.7585390438064, 31.927741408779177, 78.70852395327086, 154.45469753006162, 87.80282847495596, 70.52945832271978, 68.9296536442538, 109.12431570811411, 133.89207428387633, 67.12690973857529, 46.803968668841506, 43.726844609495984, 48.96403800613273, 32.067574948031, 27.611169779011842, 20.170390546657632, 14.40116525071324, 9.924276719251477, 6.032512534430186, 4.289926654863538, 1.9450169302538185, 0.9531792674620779, 0.24588386961017383, 0.09530839597437948, 0.04278715607215878, 0.03269367562717054, 0.08097278471325678, 0.3398684488040151, 0.9638410634711951, 2.164821886087108, 3.5939427422673274, 6.592202683426857, 7.762514824738063, 8.838684729582459, 22.057186649484247, 24.849977994296037, 28.61531082237224, 48.11467274911029, 34.30186649545678, 48.69915593535421, 69.8833640093118, 47.28770273324561, 56.60872337798956, 120.67234405642928, 31.016312896034833, 105.13287566820975, 85.21233930520495, 81.4002204656784, 0.0, 0.0, 83.06075106838662, 0.0, 114.91830557501828, 70.99513290473415, 78.68118708443396, 0.0, 0.0, 0.0, 126.7135065864287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 165.13090254423201, 0.0, 0.0, 0.0, 0.0, 0.0, 78.4620850770524, 0.0, 0.0, 148.45137059376304, 0.0, 150.55416620527316, 30.4141810067672, 81.0304552678308, 113.10291357313776, 74.58850461722623, 117.93969623193577, 151.58072380745713, 76.05734894503397, 100.84892706316272, 112.16763380983956, 83.41338042545576, 55.96196016985297, 46.86530415904609, 37.05219175840271, 26.274818822198704, 26.079007212236725, 18.01975552593438, 13.747887637035955, 8.846625212764133, 4.442015202590422, 2.8507221556333113, 1.1956895968032322, 0.4057643488828679, 0.32491415699376275, 0.15279851700626748, 0.20477010202628243, 0.2447095951640769, 0.6164373248308666, 1.5009867205557397, 2.2548106551459126, 4.149743064797714, 8.649045718995724, 9.747747755256274, 14.947579865918014, 24.37531518275056, 33.31759357433862, 48.09703917524668, 45.18366926811374, 69.51018816946771, 55.917224764767894, 84.4924256850878, 132.5878349216076, 59.00574646346526, 57.58238289814116, 56.94308846975442, 129.32625615718982, 65.0711482015661, 179.37456326462254, 127.13594262300367, 109.15788498424325, 83.86598932511015, 49.38919832350677, 117.35988585779711, 64.26235354435683, 79.28136295227546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 106.34664044223032, 0.0, 155.3429162557435, 66.16077901825172, 0.0, 98.57331064605077, 130.7966984024134, 112.17645930218524, 95.92437471426466, 55.36376744748354, 92.40934098810158, 20.052689077953605, 140.5004359455739, 62.770657375614434, 21.15292378331271, 71.1925803493691, 110.36376578639108, 55.6022020379057, 30.85144484666963, 30.773747904826827, 48.453750137813984, 25.66067916720845, 20.726652917059184, 16.43967284095496, 14.328353895816148, 8.083664525466833, 5.673342716147897, 3.8004846278631192, 2.3196003591622407, 1.2529514600002842, 0.7085479710878978, 0.4333477556649128, 0.4137713214616468, 0.6519927757452277, 1.4513440478897848, 2.5004342473606367, 3.6315992638886048, 5.811169727080222, 7.95744403469308, 12.543714707862245, 15.457200597541123, 26.10733499515674, 50.3537835404154, 42.249944411964506, 44.951655526280625, 47.37740271993644, 66.63247387117745, 65.37547053404353, 100.6517577329073, 63.01997070660221, 149.4403929057865, 135.40742010151348, 95.02067170083535, 86.29956703807211, 76.6819202224883, 29.073949566098644, 36.68111333995876, 130.76246080941644, 214.62184004209325, 58.884509011832, 0.0, 78.23102384645291, 0.0, 105.135871148407, 112.15312798717395, 122.48435910019798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.499738079827495, 103.3611036109795, 41.88216264372175, 36.36945459561321, 61.99998865369673, 0.0, 118.67447585136225, 95.39221675722509, 65.35879269939323, 80.60626213264104, 75.08216243921261, 113.71407778836722, 47.9461760854768, 80.66796915960221, 53.53711432205565, 42.194901316978076, 50.0325086888395, 33.6466155347263, 27.640092500687835, 16.170691901900994, 19.434009101884953, 8.854205861492742, 8.023138136499089, 6.066535597185251, 3.011108903607253, 2.513986198463983, 1.6338662045954286, 1.58112457801575, 1.2995414280380064, 2.029642708398941, 2.148467409044827, 3.29900147411493, 5.417917350185477, 5.273636111855336, 9.564104890397719, 18.131774011468902, 19.700918785583944, 19.73365452729478, 27.533482938474393, 42.96303322354737, 54.595224233967706, 81.72247824970084, 57.40135324663781, 104.68363493016176, 54.45797084324, 80.24991680511408, 96.79013904255332, 113.79188374130514, 95.62459147958228, 23.78849871433308, 84.3355856227641, 0.0, 75.27098450412673, 42.007281963395734, 48.807960853149545, 118.91959820646696, 0.0, 0.0, 0.0, 101.93380183467774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.66288916978047, 0.0, 0.0, 0.0, 0.0, 122.288316399974, 0.0, 0.0, 0.0, 0.0, 62.19744051619039, 0.0, 0.0, 74.81985489860753, 67.18488631480395, 60.57644041241005, 74.37537513504387, 39.19783979047241, 84.67018432230152, 120.54695074436998, 68.29454170915987, 75.99474137778228, 58.795455899234106, 63.52426272272516, 36.03169509523802, 51.76556378313666, 35.5638812544104, 38.50100269310522, 20.036021992062636, 35.37854963417371, 18.059010132312814, 15.142403764435233, 10.116405887750897, 9.591561590019605, 6.200127074605774, 3.906247134933527, 4.155207584358734, 4.925477665198109, 3.7627779766696303, 3.7961955302273087, 3.673425355699354, 4.138181205960234, 7.480014078942517, 10.681229376782243, 19.700072732442003, 21.965589644197802, 22.88758684868431, 33.46551683533885, 24.660753543776977, 48.070540602467105, 56.16036560094994, 78.62029925955841, 33.88274000599729, 107.84694334707574, 55.182495140577686, 76.6530112147529, 97.59773963744715, 49.972649289947796, 59.54333585229894, 146.30316631263938, 57.48582934027364, 169.83699828053693, 73.57024885501802, 49.47719256453544, 53.27896969719029, 0.0, 149.64988883125662, 82.58273681147261, 87.73891945841221, 0.0, 0.0, 0.0, 147.70889907396725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.66603617924366, 0.0, 0.0, 0.0, 0.0, 94.29965859688545, 160.94285256263584, 68.17193506897698, 61.72519205173548, 27.289045754152024, 22.746273973757322, 106.94329334840282, 136.50144044954652, 70.42420527626138, 38.972489908895966, 56.75768818209175, 50.50159599572324, 80.40016528378212, 66.84853797170534, 66.37372924246169, 45.90173287143718, 37.447521777789525, 31.336120963949643, 27.182175085822674, 14.131355197162026, 15.675397581586543, 12.86322659867392, 7.834458701094034, 6.7128604653083865, 7.268902895124291, 4.820242764206089, 6.811635309642248, 7.894436373290218, 8.038226795710333, 9.057895349938594, 6.966702147979598, 9.804340131117826, 15.200610593969863, 31.055141680155057, 46.00668455873346, 44.57876129556682, 30.85973017138248, 52.05539724545085, 43.31043316284034, 64.87946301089174, 75.93213768343205, 108.65963569255442, 96.93676738806292, 82.74261896639453, 44.41202570175, 57.22264312841502, 66.18037148037487, 104.28959718822671, 92.47244764282729, 73.02430253181467, 43.05178603132986, 44.895974180288974, 110.35280991348839, 126.89115289707831, 0.0, 253.34903988879452, 91.27342921405878, 216.95345733430682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.11702346997598, 127.38622174734297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.2031340536108, 53.03254565037918, 92.71877035120018, 114.48375727682912, 80.10509873432427, 54.33040272849464, 127.70402876120124, 71.02793200332934, 78.90091369883945, 73.52898764970337, 44.170485959409554, 69.47950622349411, 42.692766107564815, 28.13048755793238, 23.51679739444332, 29.286953325183813, 25.66657798516845, 13.547747631398682, 12.510682000239452, 13.808673031452779, 11.835859283890935, 10.509122210513901, 12.650516793577633, 10.20925346238578, 6.797751086047326, 12.142066412329363, 13.915479808970847, 18.118461597530146, 18.314924001046997, 23.166828778717182, 17.808416061715942, 43.41483899881184, 42.36812922957452, 42.55978130864874, 70.88573952907397, 54.20506396610007, 65.01690208225187, 43.814510734373584, 76.86805054676917, 96.11994861996615, 118.63092456664198, 48.08427951356589, 40.24603981732177, 0.0, 102.45650374105136, 93.62659037934654, 113.70086298197472, 82.18182705659629, 47.23650601442311, 53.91122807302066, 69.69334122057364, 0.0, 89.37548389148934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 129.56806101888438, 0.0, 0.0, 0.0, 77.80560586214766, 66.6379638070748, 56.07039575722456, 53.37599296067835, 95.65604764231175, 151.8428677859999, 31.046957598621113, 142.07877024961908, 47.12083870272552, 142.183470334814, 117.79180080721989, 55.487412110423364, 60.61077882797264, 66.0206017076123, 97.01814084428162, 26.138311110554127, 58.092037303134894, 43.40861924139172, 49.60760211574423, 56.10157539826261, 56.20375789361352, 40.455783165701526, 30.29263421114118, 25.454390402306004, 20.941883897374638, 18.908326232015803, 15.220079329644905, 12.299858694991178, 14.327338164711415, 13.407970614827182, 17.21078704522102, 19.007378266792045, 19.02414153412366, 27.630831257268543, 22.924043339552856, 19.808825271928736, 25.25241451739987, 57.520962677667825, 46.45255398947511, 69.90314097009315, 52.95451372037499, 56.51704865995707, 71.22731407259069, 77.61133142519425, 67.47154726395785, 130.12520830720285, 44.69743561695613, 156.2182982689175, 101.88279601212504, 25.537237042949908, 88.11301470118914, 71.03057782841222, 0.0, 87.10538615603696, 0.0, 112.14542588279437, 202.21504741771145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.26992119514998, 185.56988805830875, 0.0, 47.3374793224532, 80.27708399956043, 72.66782590118964, 65.16175677179172, 79.94049287302998, 110.29153003502898, 76.42275697903507, 48.79733241373634, 66.51041901753102, 162.9608251467697, 91.74463044955799, 64.44694899207187, 76.00583108391007, 72.24474282558965, 59.950989755099044, 69.19220117335792, 45.11815302395109, 45.66449796588131, 22.618072310770756, 37.237219752761895, 43.57840043887901, 23.235040710394838, 15.749019978469928, 23.988648486879832, 19.189829511160085, 29.209931373821217, 22.014004447852972, 32.86978936342206, 30.60598272147311, 31.38948250607206, 28.872926505683576, 34.89504286954417, 43.85679040162389, 30.403332529264503, 37.72755971058786, 80.78888472188, 58.896769090453915, 95.309847445546, 89.50202042513155, 44.49808093884381, 114.07083427862689, 78.43645841063523, 77.1711601705137, 73.70542100425962, 86.891001016393, 78.95337232504342, 28.542882398381835, 71.93270160135602, 43.0741945551523, 0.0, 0.0, 62.988668984134875, 76.84609035304842, 0.0, 89.97297809100571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.79846241170134, 0.0, 94.54695637093621, 174.13911794703614, 0.0, 66.75187853050369, 116.6329630495643, 0.0, 0.0, 0.0, 135.95798222698517, 56.15127371073002, 47.93464099029682, 41.95116797045827, 67.65700030885051, 114.97448905726532, 123.53302429183739, 91.18825483541059, 42.5583736120554, 103.57506703806747, 85.2349814724617, 74.23277036340453, 76.75390909295515, 33.61719670900524, 28.194983378119982, 61.75162886342327, 53.078522741466315, 39.6003895968241, 33.89003662332073, 31.16606213499074, 20.575465461476586, 21.232350994866497, 21.454783935534348, 25.944634714667885, 22.154948299695878, 26.895947251187824, 23.614093310514335, 21.769248460494317, 27.93604742272482, 33.81966829210653, 64.39539043481587, 67.28763488684022, 54.637760399104344, 93.53204849579939, 51.094859714899385, 51.51082440302425, 93.58520475031172, 99.29688363989945, 72.43175396947669, 100.32396373006412, 181.75357987671276, 49.3126887378147, 0.0, 32.75033111153121, 39.241907997292536, 41.31786193312722, 0.0, 0.0, 70.26829323336388, 0.0, 0.0, 93.30670785760336, 103.06890676993122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.29250792030453, 0.0, 245.42253112979915, 66.30419316882791, 62.10287180735781, 105.55394055698852, 94.05317398878927, 0.0, 285.2804119638823, 148.41673769421612, 103.92684152097576, 69.4607479428397, 56.13193249147003, 63.71830385096544, 55.98423967210678, 93.1996155922186, 51.570393982868026, 69.78238173688214, 101.21442660550868, 64.78842764332902, 69.04911666623244, 86.75724213070525, 51.003914589611846, 67.73893551325887, 54.838831259130515, 34.973910724547565, 18.593959517107756, 45.52416433601582, 47.756933360379705, 46.056442652476136, 38.10581474344641, 38.01377859774372, 30.54677623030568, 35.938242346493155, 38.18434152921598, 64.41568615258075, 39.673141602805515, 37.57178297393651, 41.8617891528569, 71.05831140284896, 63.66262867346999, 79.95166641409644, 67.58286538033755, 90.33303660903871, 106.46261542494362, 66.174773811352, 97.30316682423094, 134.72535486409117, 132.8298674696577, 130.9455280480311, 86.03750614677081, 70.3176474217382, 0.0, 0.0, 0.0, 60.10294358488362, 145.39743624864423, 74.50750731778828, 0.0, 0.0, 0.0, 0.0, 146.36738520102156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.11492431718884, 0.0, 0.0, 0.0, 131.0062141734794, 112.93872427935969, 0.0, 55.813498461852326, 154.66941477336, 63.86130733695624, 94.00800676294807, 111.38222032154006, 93.12988450532923, 99.98672400093989, 68.82940687418893, 101.60629316252503, 99.29396069910409, 75.69882394207161, 66.94592275086946, 67.58064869568705, 44.00643024648798, 79.76405543119569, 57.515943233117056, 60.31766752989818, 37.70422799550364, 39.568913091593274, 39.63186052683983, 38.85417804034725, 46.07497241894931, 42.47467470255333, 40.57016504917021, 38.741385064321754, 66.43268168867195, 73.93129404239662, 63.00919313443767, 90.01797851521152, 64.7830682453414, 78.8430970189495, 43.537371430061, 60.34425491059451, 56.706532716627876, 38.60057999752432, 127.84149260711375, 70.81989910278203, 64.42992842429152, 72.90459781004765, 29.712707266493435, 136.15087939795637, 115.28501602728355, 46.1322966299064, 97.66087888174943, 59.542628579354485, 62.2033798875167, 146.41871378643359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.2466212812277, 0.0, 0.0, 0.0, 0.0, 0.0, 93.17596164216152, 0.0, 82.27156922000657, 65.01466274790248, 64.7100336498754, 0.0, 46.24802485685454, 42.919977198601885, 141.99580242785325, 185.9982018311077, 29.543753379693246, 70.64007312442769, 124.39008862922012, 86.88655483800576, 151.9405588685785, 160.07622585750752, 102.48156956986276, 39.06260980361325, 49.93400900885065, 99.04899864150032, 63.99498015971435, 48.5404913509736, 56.14074711136339, 66.92742231019685, 52.04356768884514, 53.1409368119715, 75.13632331089923, 31.064271947727203, 59.0092877497943, 44.04355456070803, 74.84957914603748, 52.963723777930056, 70.94807864819076, 86.05426621516371, 46.59637702441288, 80.67961788897502, 96.00752635651179, 89.31999558622309, 83.9975097361179, 119.90183727435029, 102.21295381095499, 79.52206478252931, 105.41070255383696, 80.71438948277465, 89.03328628463495, 85.08236556963847, 73.43609155737484, 108.73026597075142, 31.061512250223945, 0.0, 0.0, 44.99225996462522, 0.0, 0.0, 71.58823412442527, 79.37181218396405, 87.07540413055804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 512.0933314306071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 78.75431338387749, 77.94508872037031, 128.67692733421234, 55.815953677251386, 0.0, 132.09692700061538, 80.2541313500393, 0.0, 123.66221892218735, 81.08307966645678, 46.26961206458868, 59.115195077592524, 49.74381693026994, 108.63719812263614, 102.95049625466488, 131.44348638568167, 81.59495550171953, 63.43646872098047, 122.13961317515287, 124.86418459812307, 72.0238812674676, 57.84906091781949, 78.48452619640982, 80.37758989234473, 64.20968217190774, 71.18764264435855, 63.73023710023513, 72.14351463077355, 78.18072104389232, 58.421912801890926, 69.22424218261833, 40.68580501842436, 88.0436312536473, 43.95254782412807, 73.23445025925797, 88.02607377291109, 71.38850606124838, 70.85775428818677, 45.39518682501545, 64.64623963542583, 75.388584667622, 35.81583714374515, 163.84842677927236, 23.287376704017305, 137.58420867770985, 0.0, 37.12822490480958, 124.13161220951045, 0.0, 0.0, 0.0, 0.0, 0.0, 160.31031789613752, 179.457126882294, 0.0, 0.0, 0.0, 0.0, 0.0, 178.76870294038906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.05879592720305, 0.0, 0.0, 0.0, 82.34742763458985, 0.0, 124.82355429905995, 111.30804524961806, 98.55083708054153, 44.27165683458167, 80.46025563400516, 33.994869394751504, 120.3409165976771, 75.65307256886219, 94.42272154844225, 85.2479586867108, 175.98934686683094, 135.80846300898332, 81.18654674717315, 62.388448993558555, 76.90387524771157, 55.879972410970765, 68.53673416018222, 45.70296951868455, 72.87774713652195, 68.5897020737445, 82.79647693305742, 42.87694758590477, 42.280679144049294, 114.99337284163276, 55.33028840961062, 73.32281226078958, 47.22657085590412, 69.97968229168922, 125.17937335033297, 22.736618181315475, 73.75492994507402, 54.08789996527999, 92.25088832068884, 130.59432453741613, 73.83896182626569, 84.00432256481744, 157.347923723631, 53.60103773165767, 41.2142362135766, 25.04832258199615, 53.46651268758005, 208.46033631464118, 36.290319887932746, 37.94019916939712, 87.8544838359634, 105.97358465676032, 0.0, 121.84070573519304, 0.0, 75.17146440703182, 0.0, 198.97114889585606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 231.1905498906006, 0.0, 0.0, 0.0, 0.0, 683.1104290005455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 158.88131214721415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.51484722112059, 58.74115983165087, 111.16778896789675, 0.0, 85.2469344643398, 113.62152018470715, 133.60284902892886, 124.7792583852409, 76.0372420610131, 138.8852278478347, 157.68368502191035, 52.87299822755848, 113.56500112979936, 14.98793940218816, 105.80868867675849, 93.47997918124751, 85.12072743423356, 81.18587251569313, 63.307264361432, 52.54660601932014, 65.81231214657296, 92.38569474990565, 97.76911416153756, 44.95990012863325, 13.755944084218244, 82.50701110224563, 99.88803122041615, 23.189621991926906, 51.51331392608493, 89.37731245084157, 87.81114223289839, 55.06812595736979, 119.48237192603445, 68.49504795550592, 73.67173329518178, 33.933358059118675, 129.21251095805056, 62.338638088866, 156.35606537759773, 105.21657509267573, 90.5420009479092, 139.540643048854, 76.99981275166769, 80.26996034619023, 96.28493035816186, 105.95733811885755, 61.08002590048862, 0.0, 0.0, 0.0, 90.75895626310066, 104.80197409978275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.58519043922298, 58.27762736444411, 0.0, 0.0, 171.0686335289834, 0.0, 98.60101134876321, 59.47137764625677, 242.33377298228757, 234.95786783552583, 86.25999853547484, 94.48391553164703, 84.5598307893743, 109.62863135978611, 41.00276516696951, 121.88324525321092, 50.007472028008614, 69.10605698211053, 88.23567206673373, 49.34361478922676, 124.44506833595894, 92.81378123291681, 90.69328854081898, 106.92243279896996, 98.33646555565824, 89.34412733662643, 82.24725604835099, 65.69336511759738, 87.90158327895628, 74.01700009493015, 67.50392587731255, 13.406699107732496, 65.42033947153348, 86.44599331398828, 77.79996021801685, 65.75918629709395, 218.3115147422123, 53.71207526909102, 88.00100714143616, 62.88047865933732, 149.18411545757039, 42.11375211732282, 0.0, 51.96590871632659, 0.0, 70.03981824078882, 73.59292565597748, 0.0, 0.0, 0.0, 0.0, 129.29625908368664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 260.9420620144606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.15384843422237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.10390043533058, 0.0, 0.0, 92.09880168637505, 45.58857743392459, 114.5981400394632, 0.0, 92.82228907655875, 56.6635752039194, 96.85280326705997, 70.48537690625781, 124.58031825136727, 134.70651525632047, 68.5465506934033, 48.02169785601148, 91.06930165428574, 69.7118500880667, 64.6514716509175, 53.34794747513037, 68.41426357428392, 80.38166206481321, 150.33107281934338, 110.70475654151684, 140.7325349762423, 108.06857369249767, 76.18928703724427, 147.36264777481523, 82.03953147636692, 131.56420535925577, 157.19735618329838, 67.27643801703448, 131.35169812681525, 80.24504974093104, 132.06406211964588, 27.240824362706977, 82.35996334216469, 90.66920745807778, 63.237407229306505, 72.21637184700755, 79.45773940829508, 137.09490634427553, 52.92687127000112, 0.0, 0.0, 0.0, 153.7527206300132, 0.0, 93.92552784993069, 0.0, 0.0, 0.0, 0.0, 170.6031228963052, 179.98059548968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.08137013959254, 0.0, 103.39075022194335, 0.0, 0.0, 80.10599482884436, 140.7244997531779, 0.0, 0.0, 102.0575411989843, 0.0, 38.73384565915955, 77.20277838149462, 34.5612800604505, 190.7282897274312, 26.785147614386283, 75.52235323641531, 95.9956505518795, 45.42527117503178, 62.58843127894498, 75.67299379287255, 36.19423419217398, 99.45839962173164, 32.17147277625163, 88.06736467756832, 45.955384972999006, 43.23741981287666, 60.411927576998714, 41.699867861355514, 90.18547031514427, 71.93728454822786, 77.42798048445547, 93.2675674955101, 35.00179390169231, 70.16606737584192, 208.39178671641992, 39.45601430516197, 90.24954195253352, 74.64636613460631, 106.37457197509997, 85.68963987707136, 92.77619848169202, 249.48012358676192, 76.35330254727698, 83.73939833818973, 232.2313388575694, 103.22817214435561, 59.55165795411456, 0.0, 0.0, 0.0, 164.7642435034516, 0.0, 0.0, 0.0, 119.82411880880163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.01463122836805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.29064978326578, 74.16008148234535, 73.7015434113958, 0.0, 0.0, 53.85910452409994, 49.84798611550507, 0.0, 83.53808111256018, 100.97371501680487, 0.0, 96.1589800869812, 108.63300457513142, 123.87291380370016, 47.29752895845898, 0.0, 84.49466462002061, 139.6812667170638, 97.12593002461011, 38.73040618894969, 54.74741110962377, 69.63030073509462, 91.08778145519751, 34.76743612008514, 36.300569449882786, 57.685807266855534, 146.0475038747914, 142.09453660451652, 125.33226203124079, 84.36404534903022, 22.104642040055733, 73.7577991325516, 126.5718006100485, 134.224937015389, 88.89451488424972, 135.05856009835006, 33.7283873307039, 38.84576856024864, 43.36419004783761, 45.05875829071597, 0.0, 56.99512699168794, 128.50881602729868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74.2877297617897, 0.0, 0.0, 0.0, 54.403843232422915, 243.2690818920171, 138.30365863863713, 38.59328412357248, 73.32909977223517, 136.74819901230904, 67.07488349473488, 93.47379712347535, 118.28319076381071, 25.720401336242134, 101.83415934160794, 48.686753836609846, 47.339297309655244, 159.35505338418625, 137.77298237865645, 106.9039172547111, 88.8034686275138, 84.96455012923492, 150.32048451666702, 110.1141674738972, 110.313591266667, 185.1449442182747, 47.85964681007849, 101.5790662661107, 237.61650267871659, 30.48175435139965, 62.01610039180875, 67.75921596742025, 72.46761552667712, 113.91718876851789, 41.12890134621962, 91.77774267719391, 105.36628165187668, 0.0, 0.0, 0.0, 0.0, 77.83708766696435, 0.0, 0.0, 0.0, 0.0, 123.04486660962016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.486301125909286, 0.0, 0.0, 93.24634146290691, 128.9535253516135, 81.26532883548172, 116.30724581995392, 0.0, 68.18077817282685, 126.90340672207775, 60.22921550572854, 109.50351675160786, 84.71553538309539, 0.0, 80.58919487053761, 127.44860204044105, 55.18322828428914, 51.065714804584644, 50.8025564280643, 83.49727795223441, 160.91095854773135, 196.45324995117653, 136.16424935196937, 87.57714495025465, 91.76113722201558, 102.1150606691518, 36.58600255695933, 37.89988133445884, 38.13565951334403, 39.90871228764865, 142.1208831387791, 46.454552297626236, 104.68693063469871, 0.0, 0.0, 0.0, 0.0, 170.61631177224984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.60324618940743, 0.0, 60.28286012654514, 51.12807196972976, 0.0, 0.0, 87.30750447139191, 83.53476073210388, 77.50755210744134, 151.32897767175032, 37.72679295632877, 174.68603108913544, 65.61849298709727, 34.261202251719524, 30.46379830188696, 157.68616540250412, 57.53503588893232, 59.60908905047099, 87.84881554436737, 93.81274360768924, 96.47174184441221, 95.70668818410887, 33.47471627076902, 0.0, 36.83709944965444, 0.0, 208.4391402212578, 0.0, 96.08038907068145, 95.84536474603429, 0.0, 56.347535987731135, 60.45787000120274, 70.98425823274607, 0.0, 166.54540263778136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.19762735551632, 0.0, 160.67064124828903, 0.0, 0.0, 128.21207616359473, 56.12684927553137, 0.0, 0.0, 0.0, 46.64036208646203, 39.69364034480131, 0.0, 80.11515071454762, 77.752095124422, 107.08976633370443, 112.42073751873652, 34.84549058217706, 0.0, 34.909954131444884, 37.43630882520503, 37.402838232190845, 151.7040467592389, 76.27594591846281, 233.40667027881295, 40.15760737845034, 43.67814424416987, 45.02004822404974, 188.9812117385274, 0.0, 111.33833173468375, 119.78091756097439, 62.6077846589605, 0.0, 0.0, 74.43647339798423, 80.81103617252404, 0.0, 0.0, 0.0, 218.9006512469074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.91709737979488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 267.0827595828322, 123.09761773619081, 54.026978100959994, 0.0, 156.35864950242456, 50.78637702834017, 47.75542979220776, 0.0, 45.60957199748818, 45.692490724417176, 0.0, 211.22654407592643, 88.40621150787058, 0.0, 0.0, 44.00434648485665, 40.87485513916764, 44.01498493719346, 49.26439551836856, 0.0, 51.093452176737884, 0.0, 0.0, 57.140199885330674, 58.541144846404364, 0.0, 69.54912506006153, 0.0, 154.9246275229101, 81.26963074243723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 98.14017904379722, 0.0, 0.0, 0.0, 0.0, 67.6075345498144, 61.736080841844, 127.93372734290352, 112.24331004369068, 170.0041465753198, 110.65881669397615, 103.15935836196724, 0.0, 103.04727671581716, 52.92694113644016, 50.28847409567516, 147.50409933791488, 140.8563313645806, 195.63870657704305, 0.0, 54.05276784469715, 0.0, 0.0, 0.0, 109.9667368316586, 124.45597328943947, 0.0, 61.934889206692205, 0.0, 148.5048778894491, 0.0, 167.7435873256984, 92.24307788789461, 0.0, 0.0, 0.0, 120.86245095783273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 397.12809538505957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05601205673338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.35429267800549, 0.0, 82.90190061418201, 81.33847239577696, 0.0, 69.43859771683876, 0.0, 129.39124779363613, 64.75109111334433, 126.42279016246556, 0.0, 0.0, 233.95407267939012, 0.0, 0.0, 0.0, 0.0, 0.0, 59.84310425505958, 59.84065841208439, 125.08567421506623, 0.0, 195.5880517429354, 71.13536130399874, 0.0, 0.0, 0.0, 0.0, 84.51593539149934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.76038617923513, 0.0, 82.71198893216418, 82.06191952585996, 81.60842868724205, 0.0, 140.3924449753012, 0.0, 67.98326720988702, 68.32980104809873, 0.0, 70.20799055325578, 62.01348391612866, 62.244525339673835, 0.0, 0.0, 68.70942166895242, 0.0, 0.0, 70.97682849349265, 0.0, 0.0, 81.10784212893785, 247.15993678519104, 87.12127320492301, 95.4479413566035, 96.35252079818447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.50348543251386, 0.0, 147.93500659055977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.74945056644269, 94.85122402019783, 0.0, 84.00798866132908, 0.0, 81.76385624578649, 0.0, 0.0, 0.0, 0.0, 0.0, 155.16186713215507, 80.33187480399664, 226.3419384830923, 0.0, 0.0, 0.0, 0.0, 0.0, 90.13003224827351, 176.79476806368672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.17047495594964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.56390603764018, 85.97334502298109, 96.88124774630373, 0.0, 89.5914840478297, 0.0, 0.0, 81.58592670784444, 82.84269248095897, 92.74027061018151, 83.4826326258558, 0.0, 96.06886574058558, 0.0, 0.0, 0.0, 0.0, 109.75495379446856, 108.52134313501466, 0.0, 0.0, 0.0, 0.0, 140.24718370963996, 148.32324844178774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 387.50512916948225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.59483207077288, 0.0, 106.20380127945195, 97.38895365414201, 0.0, 0.0, 99.09084417370245, 0.0, 100.77789530740216, 105.33433240005462, 0.0, 216.79587265365873, 0.0, 0.0, 0.0, 122.06789004342444, 121.77459864351154, 0.0, 135.5345364839824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 151.6110544713247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 119.05818037935114, 118.07350944638264, 0.0, 0.0, 0.0, 108.37126414832127, 0.0, 0.0, 0.0, 0.0, 0.0, 109.74060882763929, 0.0, 0.0, 0.0, 0.0, 134.5267467115779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05087260171794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.95676534354004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.1069686450285, 267.18950905385543, 0.0, 0.0, 138.13252010013355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 193.01115132188883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.8557517163636, 0.0, 0.0, 0.0, 0.0, 0.0, 148.98876853013948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.0393581621168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 168.2824924290136, 0.0, 0.0, 155.1789114058798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 205.17556857409946, 0.0, 0.0, 0.0, 174.66503048058067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.4077710446529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.04902464387305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 407.93320258975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fSumw2.fArray[] elements >= 0.0
this.fOption has only one value
this.fOption != null
this.fOption.toString == ""
this.fFunctions != null
this.fFunctions.name has only one value
this.fFunctions.name != null
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list != null
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
this.fBinStatErrOpt != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] elements != null
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name != null
this.name.toString one of { "test3", "test5" }
this.title != null
this.title.toString one of { "", "Histogram created from Java", "Profile created from Java" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fSumw2.fArray[]) == 10404
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TH2.TH2(java.lang.String, int, double, double, int, double, double):::ENTER
arg0.toString one of { "test3", "test5" }
arg1 == 100
arg2 == -5.0
arg3 == 5.0
arg4 == 100
arg5 == -5.0
arg6 == 5.0
===========================================================================
hep.io.root.output.classes.hist.TH2.TH2(java.lang.String, int, double, double, int, double, double):::EXIT
arg0.toString == orig(arg0.toString)
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fTsumwxy == 0.0
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.fSumw2 == null
this.title has only one value
this.title.toString == ""
arg0.toString one of { "test3", "test5" }
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwxy(double):::ENTER
this has only one value
this.fTsumwy == -89.90044995049783
this.fTsumwy2 == 100614.0499710697
this.fTsumwxy == 0.0
this.tAttLine has only one value
this.tAttFill has only one value
this.tAttMarker has only one value
this.fXaxis has only one value
this.fXaxis.tAttAxis has only one value
this.fYaxis has only one value
this.fYaxis.tAttAxis has only one value
this.fZaxis has only one value
this.fZaxis.tAttAxis has only one value
this.fEntries == 100000.0
this.fTsumw == 100000.0
this.fTsumw2 == 100000.0
this.fTsumwx == -171.43424466256175
this.fTsumwx2 == 100132.80644921324
this.fSumw2 == null
this.fFunctions has only one value
this.fFunctions.list has only one value
this.name has only one value
this.name.toString == "test3"
this.title has only one value
this.title.toString == "Histogram created from Java"
arg0 == -149.6464999933312
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwxy(double):::EXIT
this.fScalefactor == orig(this.fScalefactor)
this.fTsumwy == orig(this.fTsumwy)
this.fTsumwy2 == orig(this.fTsumwy2)
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwy == -89.90044995049783
this.fTsumwy2 == 100614.0499710697
this.fTsumwxy == -149.6464999933312
this.tAttLine has only one value
this.tAttFill has only one value
this.tAttMarker has only one value
this.fXaxis has only one value
this.fXaxis.tAttAxis has only one value
this.fYaxis has only one value
this.fYaxis.tAttAxis has only one value
this.fZaxis has only one value
this.fZaxis.tAttAxis has only one value
this.fEntries == 100000.0
this.fTsumw == 100000.0
this.fTsumw2 == 100000.0
this.fTsumwx == -171.43424466256175
this.fTsumwx2 == 100132.80644921324
this.fSumw2 == null
this.fFunctions has only one value
this.fFunctions.list has only one value
this.name has only one value
this.name.toString == "test3"
this.title has only one value
this.title.toString == "Histogram created from Java"
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwy(double):::ENTER
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fTsumwxy == 0.0
this.fEntries one of { 25000.0, 100000.0 }
this.fTsumw one of { 25000.0, 100000.0 }
this.fTsumw2 one of { 25000.0, 100000.0 }
this.fTsumwx one of { -171.43424466256175, 31.88254774666985 }
this.fTsumwx2 one of { 25440.254425694213, 100132.80644921324 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0 one of { -89.90044995049783, 281.0846390360272 }
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwy(double):::EXIT
this.fScalefactor == orig(this.fScalefactor)
this.fTsumwy2 == orig(this.fTsumwy2)
this.fTsumwxy == orig(this.fTsumwxy)
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwy one of { -89.90044995049783, 281.0846390360272 }
this.fTsumwy2 == 0.0
this.fTsumwxy == 0.0
this.fEntries one of { 25000.0, 100000.0 }
this.fTsumw one of { 25000.0, 100000.0 }
this.fTsumw2 one of { 25000.0, 100000.0 }
this.fTsumwx one of { -171.43424466256175, 31.88254774666985 }
this.fTsumwx2 one of { 25440.254425694213, 100132.80644921324 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwy2(double):::ENTER
this.fTsumwy one of { -89.90044995049783, 281.0846390360272 }
this.fTsumwy2 == 0.0
this.fTsumwxy == 0.0
this.fEntries one of { 25000.0, 100000.0 }
this.fTsumw one of { 25000.0, 100000.0 }
this.fTsumw2 one of { 25000.0, 100000.0 }
this.fTsumwx one of { -171.43424466256175, 31.88254774666985 }
this.fTsumwx2 one of { 25440.254425694213, 100132.80644921324 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
arg0 one of { 25124.041480849166, 100614.0499710697 }
===========================================================================
hep.io.root.output.classes.hist.TH2.setfTsumwy2(double):::EXIT
this.fScalefactor == orig(this.fScalefactor)
this.fTsumwy == orig(this.fTsumwy)
this.fTsumwxy == orig(this.fTsumwxy)
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwy one of { -89.90044995049783, 281.0846390360272 }
this.fTsumwy2 one of { 25124.041480849166, 100614.0499710697 }
this.fTsumwxy == 0.0
this.fEntries one of { 25000.0, 100000.0 }
this.fTsumw one of { 25000.0, 100000.0 }
this.fTsumw2 one of { 25000.0, 100000.0 }
this.fTsumwx one of { -171.43424466256175, 31.88254774666985 }
this.fTsumwx2 one of { 25440.254425694213, 100132.80644921324 }
this.title.toString one of { "Histogram created from Java", "Profile created from Java" }
===========================================================================
hep.io.root.output.classes.hist.TH2D:::OBJECT
this.array.fArray[] one of {}
this.array.fArray[] elements >= 0.0
this.fScalefactor == 1.0
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fTsumwxy == 0.0
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells == 10404
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins == 100
this.fYaxis.fXmin == -5.0
this.fYaxis.fXmax == 5.0
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2 == null
this.fOption has only one value
this.fOption.toString == ""
this.fFunctions.name has only one value
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name.toString one of { "test3", "test5" }
this.title has only one value
this.title.toString == ""
this.fUniqueID == 0
this.fBits == 50331648
size(this.array.fArray[]) == 10404
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TH2D.TH2D(java.lang.String, int, double, double, int, double, double, double[]):::ENTER
arg0.toString one of { "test3", "test5" }
arg1 == 100
arg2 == -5.0
arg3 == 5.0
arg4 == 100
arg5 == -5.0
arg6 == 5.0
arg7[] one of {}
arg7[] elements >= 0.0
size(arg7[]) == 10404
===========================================================================
hep.io.root.output.classes.hist.TH2D.TH2D(java.lang.String, int, double, double, int, double, double, double[]):::EXIT
arg0.toString == orig(arg0.toString)
arg7[] == orig(arg7[])
arg0.toString one of { "test3", "test5" }
arg7[] one of {}
arg7[] elements >= 0.0
===========================================================================
hep.io.root.output.classes.hist.TProfile:::OBJECT
this has only one value
this.fBinEntries has only one value
this.fBinEntries.fArray has only one value
this.fBinEntries.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fBinEntries.fArray[] elements >= 0.0
this.fErrorMode has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.EErrorType[].class
hep.io.root.output.classes.hist.EErrorType.$VALUES[] contains no nulls and has only one value, of length 4
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType]
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.EErrorType.class
this.fYmin == 0.0
this.fYmax == 0.0
this.fTsumwy one of { 0.0, 50427.84456005312 }
this.fTsumwy2 one of { 0.0, 204799.5721980136 }
this.fBinSumw2 has only one value
this.fBinSumw2.fArray has only one value
this.fBinSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fBinSumw2.fArray[] elements >= 0.0
this.array has only one value
this.array.fArray has only one value
this.array.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.array.fArray[] elements >= 0.0
this.tAttLine has only one value
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill has only one value
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker has only one value
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells == 102
this.fXaxis has only one value
this.fXaxis.tAttAxis has only one value
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis has only one value
this.fYaxis.tAttAxis has only one value
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins == 1
this.fYaxis.fXmin == 0.0
this.fYaxis.fXmax == 1.0
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis has only one value
this.fZaxis.tAttAxis has only one value
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries one of { 0.0, 25000.0 }
this.fTsumw one of { 0.0, 25000.0 }
this.fTsumw2 one of { 0.0, 25000.0 }
this.fTsumwx one of { 0.0, 29.864086313789908 }
this.fTsumwx2 one of { 0.0, 25347.729783886123 }
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2 has only one value
this.fSumw2.fArray has only one value
this.fSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 359.8698404092188, 0.0, 0.0, 0.0, 0.0, 216.70495401515893, 0.0, 169.0725363427862, 366.82517841876427, 782.9574590874524, 882.296415971126, 534.8169924333753, 659.2658367170086, 891.6456449832834, 958.4573665993378, 1069.1918092876158, 1948.0731751553867, 2220.116683123788, 1860.9079986328843, 3093.781237904801, 2286.7852109104756, 3823.885925912681, 3078.982969081898, 4581.8109415910085, 3719.9585532301708, 3894.313476273699, 3803.395743731895, 4072.5234166769924, 4602.588098047616, 3977.282315736033, 3985.632818724484, 3872.3505548248086, 3709.129794279721, 3422.6090296005377, 4088.2601821954486, 3507.8789990294185, 3169.1867574774074, 3486.130629057977, 3252.9491735606657, 3165.2589450270507, 2539.0266705547815, 3163.1591869538147, 3097.510970179204, 3032.900319985419, 2682.4587635107678, 2597.906426119974, 3855.203274994983, 3513.0835997821678, 2549.0183957788563, 3123.2760098585286, 3601.408897084873, 3637.062061397905, 3793.8087989781116, 3668.7870871299456, 3786.139009753603, 4071.4072754579242, 3850.1982566261922, 3855.140042409932, 3617.4630616619042, 3908.070730939738, 3707.405603030554, 4082.0548689318994, 4375.19900698208, 3820.815963359348, 3588.1894429277263, 3546.4448256218366, 2996.348015617748, 3426.9780452261257, 2883.5014655038012, 2078.075149971109, 2176.4007096583805, 1425.8992725613286, 2287.179479539038, 1218.5833758203992, 1171.4151291377664, 1278.4480467600235, 1080.9576273132504, 121.87950389345428, 600.7018688150821, 367.11225603534876, 0.0, 537.7646089243046, 225.66984828671315, 0.0, 0.0, 0.0, 344.62258088578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fSumw2.fArray[] elements >= 0.0
this.fOption has only one value
this.fOption.toString == ""
this.fFunctions has only one value
this.fFunctions.name has only one value
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list has only one value
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name has only one value
this.name.toString == "test4"
this.title.toString one of { "", "Profile created from Java" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fBinEntries.fArray[]) == 102
size(hep.io.root.output.classes.hist.EErrorType.$VALUES[]) == 4
size(this.fBinSumw2.fArray[]) == 102
size(this.array.fArray[]) == 102
size(this.fSumw2.fArray[]) == 102
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TProfile2D:::OBJECT
this has only one value
this.fBinEntries has only one value
this.fBinEntries.fArray has only one value
this.fBinEntries.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fBinEntries.fArray[] elements >= 0.0
this.fErrorMode has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.EErrorType[].class
hep.io.root.output.classes.hist.EErrorType.$VALUES[] contains no nulls and has only one value, of length 4
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType]
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.EErrorType.class
this.fZmin == 0.0
this.fZmax == 0.0
this.fTsumwz one of { 0.0, 50564.295906543724 }
this.fTsumwz2 one of { 0.0, 205814.97216125613 }
this.fBinSumw2 has only one value
this.fBinSumw2.fArray has only one value
this.fBinSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fBinSumw2.fArray[] elements >= 0.0
this.array has only one value
this.array.fArray has only one value
this.array.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.151028123703474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.012759753512402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.681936821208858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.612820927058063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.64639262270028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.545979200264732, 0.0, 0.0, 12.589831714321223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.091712536511322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.56630889117372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.351343068831618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.490299185567906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.242612410653873, 0.0, 0.0, 0.0, 0.0, 12.075212610252933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.066799537576758, 0.0, 0.0, 10.280555669947859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.790391435605267, 10.423856307928476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.9369263729455, 0.0, 0.0, 23.262056086117163, 0.0, 0.0, 0.0, 10.651747659769613, 0.0, 20.39944794644649, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573084377711075, 0.0, 9.526617923534774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.232762854009238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.342527158783454, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.417249728269223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.34172074663722, 0.0, 0.0, 0.0, 0.0, 0.0, 17.29513314462019, 8.692818883274393, 8.847931243110647, 0.0, 17.65989963487231, 0.0, 0.0, 0.0, 18.03513374801036, 0.0, 0.0, 9.086299442539316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.489500223482123, 22.80641919796369, 0.0, 0.0, 0.0, 0.0, 9.680809793808322, 0.0, 0.0, 8.743195527851832, 0.0, 0.0, 8.718413863146377, 8.263676297011674, 0.0, 7.978770386728844, 7.981920417297848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.309403305206159, 0.0, 0.0, 0.0, 0.0, 9.37599990942439, 0.0, 9.889192867482771, 0.0, 10.562936174133187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.005439464085681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.927642481192024, 0.0, 0.0, 0.0, 7.989013398374343, 0.0, 7.681575182328425, 15.20002885872729, 15.196938512091329, 0.0, 15.180228018078765, 15.47683888668726, 7.767125058422698, 0.0, 7.89788359010507, 8.053871683093993, 0.0, 0.0, 0.0, 8.913805074646667, 9.078008180920396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.026470625743194, 8.612757536038869, 0.0, 0.0, 8.321707217595863, 8.06853749073534, 7.985489482872646, 15.520561199689848, 22.701264579578947, 14.537262903755082, 6.997578773864635, 7.311134412142829, 7.122121349340881, 0.0, 7.231603311219376, 14.330610525428481, 7.017943611888129, 0.0, 0.0, 7.186141093412695, 0.0, 0.0, 14.852955840868253, 7.491375692692493, 7.851652255501328, 16.48498783083202, 0.0, 8.564327082297401, 0.0, 9.03182434532951, 0.0, 9.60867095425293, 0.0, 10.563927958953386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.773928149149192, 0.0, 8.704927607512353, 8.545403949789323, 15.833327609320783, 0.0, 7.4297441266494655, 0.0, 7.050723388072662, 7.202658284097668, 27.55861328208682, 20.29122150262875, 26.280590096476004, 19.647500908890116, 19.252313951345045, 6.579459901997518, 13.09502607652561, 19.614139142763843, 6.56849454273755, 0.0, 6.622623263914875, 6.804673958688036, 7.016148816073956, 0.0, 6.76748917715574, 7.169280242572633, 7.370544387561287, 0.0, 0.0, 7.770271992129442, 0.0, 8.798449267847896, 17.358240702534808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.47331098050136, 0.0, 0.0, 8.219076611433781, 0.0, 7.822550123520514, 7.2932602660559205, 0.0, 13.923649511184376, 21.002395196323924, 0.0, 6.51025461116749, 13.072693346340152, 12.26503463546263, 6.051221905994785, 5.988157148461539, 12.201550594514062, 11.847069768698876, 5.79976351461581, 12.168684375205473, 6.2812130416583765, 17.91770671504996, 5.930927742299192, 12.602755826852302, 12.571000737409406, 19.512334976541556, 26.56958710185711, 6.447810026054565, 13.89130619259359, 0.0, 7.420049456399666, 7.457783034095535, 0.0, 16.18115799633466, 0.0, 0.0, 9.184948161180024, 0.0, 9.820947376905872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.601751490580206, 0.0, 8.619835442883831, 0.0, 0.0, 7.704277911761815, 0.0, 0.0, 6.7745169941140055, 19.91044964460032, 19.22900324364384, 37.462197050260755, 12.37736876374272, 0.0, 11.828484548912478, 17.050476551088888, 5.697977482262445, 5.529902718918871, 11.020828191951388, 5.634199719455201, 22.151650486266906, 16.623235622428822, 16.899632090604968, 0.0, 5.64845792819083, 11.438157845293786, 30.20024509276573, 5.951843570163286, 18.799282411924256, 12.831204317227094, 13.398468577448355, 6.673855858028027, 0.0, 14.689130644792343, 15.120495123073047, 7.865546792420641, 8.172600747290437, 0.0, 0.0, 9.304580643818516, 19.492258165703284, 9.71232809638491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.116186552816862, 8.0668941439689, 7.415842162134676, 7.13993248336044, 13.75367137973485, 13.114396701767353, 0.0, 18.389579019598617, 23.34795401294593, 0.0, 16.7045141514584, 5.664415277106654, 16.313773047560353, 10.612662529219657, 26.156812699001225, 20.432887345313837, 20.568507268136713, 5.2664697544432775, 0.0, 15.366468374101885, 40.34386650685221, 5.311751041361426, 31.659086332169004, 16.32115660929363, 27.61547254350318, 0.0, 11.31053585392776, 0.0, 18.600683725478305, 19.092240843282106, 6.5792976389282805, 0.0, 7.287229994019377, 7.2932986783600615, 0.0, 0.0, 0.0, 0.0, 0.0, 9.820682133866626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.990386769573377, 0.0, 0.0, 8.35172364500591, 15.752868351376708, 7.97992950518257, 0.0, 0.0, 13.63344876484517, 6.451182958903727, 5.9685937916202825, 17.76098713231086, 22.79510577987169, 10.831621910295997, 15.954808687585725, 0.0, 19.837441410948365, 14.756181429722123, 28.8724108034041, 28.05760936105202, 14.134009791790266, 13.87528498734131, 18.883945093500042, 13.541587097726795, 9.447574285405619, 23.709024479519712, 29.154288948995113, 4.768360999694632, 14.348613133681338, 30.413123962492225, 10.039956233221796, 10.258492201459584, 0.0, 11.37241044329036, 0.0, 6.426311299076059, 0.0, 6.495091045234012, 0.0, 0.0, 7.739501060882492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.991435063222868, 9.970217891723696, 0.0, 0.0, 17.833113318611737, 8.483219154802509, 16.08564355943179, 7.667684423529968, 14.574594796276003, 13.834492908767043, 6.395278555260388, 12.361583027633058, 0.0, 11.311986973737882, 0.0, 10.710862004335212, 25.501696692545035, 24.78897969721473, 19.454895789129935, 18.656742015892647, 4.585653490712714, 21.961028069953436, 34.57138169388268, 8.730939871897338, 20.66708756081994, 41.97163206868673, 25.111468892134507, 37.94404067187976, 12.404542322927824, 29.98454665287755, 4.573411638440274, 13.351125029366912, 27.586458577818043, 18.661364636577424, 20.00599579108919, 14.995793694469539, 21.381263810936197, 5.457371881541051, 16.970461431241652, 6.006795558414911, 0.0, 6.597608872021967, 6.662830606941564, 7.213760272478696, 15.278434387724184, 15.83025304054901, 0.0, 0.0, 9.350111575426293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.483116603200756, 12.040786329036107, 11.180464216270632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.506149909701286, 14.130325557704492, 0.0, 0.0, 12.623119605517639, 23.886373380474176, 5.747618696227826, 0.0, 15.50830756853781, 9.612962719552229, 23.929825109039715, 13.520949867106209, 25.821557013371866, 12.639887341795681, 16.563405216858182, 16.298122945238525, 11.753023207548939, 19.38937086781055, 3.9333826761690447, 26.988096257248746, 7.716919602010264, 30.817045157613855, 7.535017439448509, 27.464277618996306, 15.808518281110441, 25.056882073783278, 17.22491855486352, 16.970692098435876, 26.827882331915667, 4.76410488680787, 14.537627816414478, 10.334933164742775, 26.50281145207024, 17.023969990761408, 11.808218794191085, 12.092746265483623, 19.346562027019974, 27.84491836483643, 14.26082762846275, 7.307391312602476, 0.0, 0.0, 9.1693308484301, 0.0, 9.555996214599844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.782708147554146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.940472912778905, 0.0, 0.0, 7.4457218673168875, 0.0, 0.0, 11.990509811158486, 23.43182824011405, 0.0, 20.87267062762542, 24.591473625290277, 4.550523352168579, 13.915039728466333, 13.217303279083508, 24.413447804181914, 8.340536289406142, 19.221064030294166, 7.253501011150695, 14.215221126140513, 31.71442570300443, 20.532608867748287, 30.800437970029524, 27.329199314441112, 37.85178098795286, 14.016492908641515, 13.555016065391673, 28.44228918149635, 32.730353444229706, 7.686515358845656, 31.47193006798544, 35.80450427239423, 12.254926459496753, 17.084765977485436, 13.715362532289042, 14.126876605329882, 9.920911771141526, 9.985467171260527, 0.0, 17.46434470441563, 18.55536800485455, 0.0, 6.66513169853516, 29.272651915996725, 0.0, 7.863535006474621, 8.204926741891985, 0.0, 9.607314753152645, 9.687861135699645, 10.518059126267081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04139318108135, 0.0, 0.0, 0.0, 7.679996035389319, 0.0, 6.819193232491305, 25.812146088825095, 12.46688411541945, 0.0, 21.73230376349418, 5.361255820056245, 19.035682010343322, 23.30322715808078, 21.995210901879148, 8.089831790067658, 23.714719035305762, 29.85495288654129, 21.915837983586705, 10.665438083482204, 19.886638204906603, 16.21508517738812, 44.380827064079156, 25.03140846724543, 43.53670995917351, 18.451798041356806, 39.571604800178775, 24.750327367434714, 15.359342242424153, 25.16021714652994, 42.740647635596005, 30.66614846252848, 21.046606992033567, 14.237220878677746, 30.04956024977756, 19.48088417164439, 4.128367502630757, 13.118012954167735, 14.135978913437642, 19.396277152801385, 5.160733113074151, 11.187033317852066, 17.563589209697344, 11.911975271429062, 13.072091067908229, 6.744643287466357, 7.320337556813292, 7.448865862333962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.476919425657906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.90771325974671, 12.862989157165712, 24.47417865148239, 5.7394917487161665, 10.931620425620885, 25.724936213853972, 14.27746424771829, 9.128981034106243, 29.970825617290505, 7.928801542270209, 15.335208137581958, 14.656045381118332, 24.048630407973675, 26.383198612970645, 28.17169428557682, 23.907528921527174, 8.99311061561986, 26.318692222833885, 19.661390867916232, 22.07101495822213, 21.76750288940249, 37.48054692826017, 32.958848990834184, 19.380176474654384, 14.349552287296135, 11.50097503076284, 32.87788415624407, 15.602023569131584, 13.115287220208733, 23.950071857753215, 10.39987304376072, 26.742655998562693, 24.401689119595854, 25.677369856330316, 13.641902126744895, 19.205445018658374, 15.414304059357187, 16.632151210635516, 5.811712225817974, 36.894094151248915, 0.0, 7.122897670413621, 7.365303235982192, 0.0, 24.448560340553463, 0.0, 0.0, 0.0, 0.0, 10.722785063088995, 0.0, 0.0, 0.0, 13.150585135755565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04576932714837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.556134570852558, 22.97736618305438, 0.0, 0.0, 10.120451108531162, 0.0, 0.0, 0.0, 15.922195209245732, 7.76633911120967, 7.08758638899117, 6.910137111795205, 0.0, 5.773286528567786, 21.45970864421321, 20.42937365831101, 28.84725082983361, 45.270779793573496, 12.273628557523594, 31.37739643338275, 26.239116573567053, 31.292306776885468, 16.780273411807137, 43.4669007102765, 23.346199283847504, 27.933237775700196, 24.571631859350322, 20.74731848837061, 22.547077028625715, 31.401823525394583, 33.47755922371345, 26.027541488894002, 36.23384988661514, 24.131499455464642, 24.231593658222533, 43.66031235997703, 35.95547900792143, 29.139754897695283, 17.0799632762686, 20.613886746830104, 27.53310970611963, 26.362722665469708, 24.724582101113402, 18.55862707634531, 23.48144003527003, 16.570995906067505, 4.630287130639889, 9.608837088918744, 10.285345083055995, 10.906572067274187, 11.643662019290627, 12.271344917431167, 19.810925225668672, 14.241663316390051, 14.929759690676327, 15.695042471728087, 0.0, 26.820411551537397, 0.0, 19.811518614885955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.022023558427186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.15345370136755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.796436018153734, 21.551582221884694, 13.398034666260086, 12.834207357327664, 5.950772163747547, 16.47952801106808, 15.355527738329924, 9.662380259953462, 8.976689136802005, 8.336311490155321, 43.111238779465175, 10.846510796044814, 31.443554923393396, 32.32951346449266, 33.08905632440246, 25.73690590502669, 18.855982321670336, 27.717733384154528, 24.16929555817104, 32.5773765661032, 28.875864402885934, 30.109104676807757, 53.278984395609264, 33.57482383387074, 35.911543088040325, 23.479736815072826, 34.49558552403765, 21.790999029279252, 25.367013566059992, 31.15862106950175, 12.4655636072286, 29.401588726526803, 22.595988317861472, 17.76320434261981, 35.147602342897564, 7.047663629974897, 14.851308731178436, 22.93874773002458, 20.846927603410798, 35.92413543146813, 9.856992750796834, 26.014774396997435, 16.708200622578445, 5.91250686625941, 6.094773705194124, 13.65034808799021, 7.0995314770451134, 7.711078461819014, 0.0, 0.0, 18.26579678701703, 0.0, 0.0, 0.0, 0.0, 12.359698002117668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.964607469119809, 0.0, 7.6886918812441, 14.860254539868356, 6.976141102920844, 12.809381729086812, 11.99363081089334, 5.683204032800376, 5.293444129804888, 9.766316246613965, 18.0540722179363, 25.48881842962269, 31.492467007142423, 36.781804465178006, 10.192793725062742, 37.63592469734482, 52.51845414574255, 24.53188250031553, 30.80555497984603, 16.849000131686815, 20.724665206650165, 25.73529748784714, 38.45288670030334, 28.334910937104333, 22.340004059894977, 45.91259430806845, 27.720904889787015, 37.72586365451012, 27.512800076114186, 22.438005457199388, 20.56945826956743, 16.516631363170575, 16.788579492849966, 38.374224557050944, 19.33635789797816, 17.768220109035358, 16.445989253141278, 17.46079076651872, 41.15383429648058, 23.305221356835848, 14.615548722438756, 7.844331933201617, 12.824777798776122, 18.363218107192505, 14.665825942474022, 5.074958239527188, 0.0, 5.866074866328307, 38.83120551129576, 7.183894615979856, 14.84508794641026, 0.0, 25.14758294659083, 8.875197300892273, 0.0, 0.0, 10.878229570287653, 21.964473114016513, 11.518517839556045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.574015544442185, 0.0, 0.0, 9.11151429676485, 8.356683857496353, 0.0, 7.3270838321200396, 14.261808814172884, 13.421308132469473, 6.244232570997385, 11.714424035884733, 32.125209327278185, 14.83892125798872, 14.06874203873872, 16.888778836997684, 19.99232639067638, 14.620830475612411, 33.69558173290923, 40.73165829428086, 29.050048517421573, 23.165056807524696, 23.71211523321662, 22.37688670562641, 21.03142649361996, 23.689173722357683, 20.063032741816322, 31.666729454891883, 25.420353773460835, 25.65169917253989, 21.929561143419402, 22.30029019152261, 18.623563216101722, 31.843425378163687, 16.316089453413237, 22.291786733688895, 35.47514324446663, 24.473620206848004, 28.195112600483174, 12.985256358808796, 27.125414175199253, 42.11214153792393, 24.068947960789096, 28.733764533688472, 25.06667561046921, 30.475170007768504, 25.587114733311644, 35.35597928492604, 4.285935027393695, 18.95462592629335, 5.0907016172195085, 21.164117204942812, 11.774172422504183, 24.56478749447784, 0.0, 0.0, 22.821147710717206, 15.99639378783933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.954916077914868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.246046199047326, 8.94973608372984, 0.0, 0.0, 7.42989212683968, 6.599999809246023, 19.180720346691984, 23.752837821785107, 16.076538022934674, 20.673309354361145, 37.74737023100879, 17.771009091942325, 28.059977734548458, 7.4728345709363175, 23.772638828792445, 18.734339509116424, 20.18013875910607, 23.597244080308887, 29.477771900171682, 39.80824220649606, 46.91671344950455, 28.775357544630623, 33.18960136826902, 44.21887204355408, 29.412825335156707, 15.750468297975614, 18.042621342213682, 32.230842541485316, 18.148540268537317, 33.02792326714657, 17.114814366727323, 32.072166428204746, 29.182048172028818, 33.28375778085775, 30.399377018593658, 26.01173673572661, 36.13955567126747, 32.62081090797904, 24.313403602106057, 27.11236882793153, 34.26377707489031, 49.695698562605024, 31.645729249364834, 24.127026671275853, 37.05470761037043, 15.746148844964974, 17.819834952333252, 14.372499920014992, 45.43824826849321, 16.312505449731297, 0.0, 25.220948521624607, 6.846478248060821, 14.79749740024302, 7.80562343724356, 16.982793702834115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.52228746592777, 0.0, 0.0, 0.0, 0.0, 0.0, 8.540067799232546, 0.0, 30.257948157261456, 7.212233811275606, 20.08396088169154, 6.291449070927884, 11.849876469825134, 15.74421928079018, 29.741011224212773, 13.689950640342111, 29.289786654259295, 15.40918492245064, 28.07336489192981, 28.827708166768872, 18.00177134527761, 31.855474376769287, 19.205208771284763, 24.67101297824654, 26.57557714848147, 17.81999432798259, 38.43591880235796, 35.4368531533444, 24.075909731127787, 27.88566924616586, 26.901812703028412, 25.788582121037045, 23.037205010570233, 22.74691837048768, 23.920974801905533, 33.77037759576947, 20.731294666013937, 25.62946352312456, 24.727090379168995, 33.869342097722246, 45.58365101244769, 31.07312213299972, 31.16149587052966, 36.29877277484718, 21.896090980162963, 34.202141725993215, 26.112962772640078, 32.18315286763007, 32.1247435940665, 45.15760554627489, 15.29227275993207, 8.281952493167022, 17.968647833239267, 9.754980424324675, 25.99925346982152, 11.60552487920081, 12.385500818750945, 6.51107732792252, 14.194338617617412, 0.0, 24.42399377487142, 0.0, 0.0, 0.0, 0.0, 0.0, 11.906849645878953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.593209290963756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.339517935026437, 0.0, 14.619520859973282, 7.04922768497222, 19.449318588379285, 11.975784396485196, 16.197158154786358, 0.0, 37.09352788870528, 12.990628071246677, 12.115914005806316, 32.93232952007431, 22.948874730785843, 32.704500504562894, 29.717825083863694, 39.2668372771025, 33.06769499274013, 25.806969311584805, 43.82427514127488, 32.935339613196646, 20.198405747655013, 30.319704694685132, 37.1811074436142, 29.730245967569452, 20.038208827967892, 22.21160253968355, 20.392035527793993, 17.781727887508612, 23.252025163853304, 24.76786720107023, 28.95736400620029, 19.386934385089827, 16.71676433056758, 29.12760123901485, 21.106250139854037, 30.72630471104298, 32.891269520958396, 30.048770262144895, 17.78253292985094, 27.72075057535836, 42.41787726623684, 27.19806341078344, 29.654779281936463, 32.62793262360806, 36.03642872893782, 31.416217084552585, 30.329389830545537, 32.887156553912256, 10.08477358241899, 16.58223445375397, 0.0, 0.0, 13.935872148504071, 14.704284885177822, 31.92649460817625, 0.0, 8.75117701454365, 9.951520196267419, 0.0, 0.0, 11.163142250366644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.900428282335636, 10.118933485198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30.989143556206994, 17.62598030011264, 10.629733841984182, 5.045498494672866, 13.48908112081962, 24.630928456606725, 23.341676043323147, 13.498507742296136, 41.05270491631667, 25.4438308374419, 33.34006660880466, 27.186772892939747, 28.15801642323244, 40.268265087105945, 21.147046915635435, 21.64619226320122, 36.05927500316296, 27.64550897048044, 26.916119479841402, 25.02228079748444, 15.325888697384766, 23.70874865331386, 21.592668495179726, 14.671778797823212, 19.16065030543864, 17.742594463363588, 24.050839333433913, 25.17043063493164, 25.632836239365517, 16.344288404526694, 34.79666540815366, 30.919400647181803, 17.694199094735996, 26.205286506954774, 32.118936532224595, 18.375444280048995, 31.797669630038804, 20.24542740023844, 16.698123929929295, 18.35781774951042, 48.268657081237016, 41.2375759942298, 12.329196457471713, 13.511242974371472, 24.677654416605115, 5.341430819105314, 23.634951475049306, 12.825443914144143, 13.610177002537656, 7.173830504344104, 8.008273537513872, 16.497570751931878, 8.852790450655238, 0.0, 30.245505709400117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.1729112484884, 0.0, 0.0, 10.863432737155124, 0.0, 9.726804592093233, 9.34234199608807, 16.93717960042091, 0.0, 0.0, 6.870812325542281, 26.579872427710754, 5.999725512688793, 17.085241387506883, 20.897592048600163, 24.162049901246267, 21.876706109904568, 20.10903932845201, 14.519427115975239, 26.264225802863102, 29.49607103783366, 18.500699569316808, 31.11712761718693, 18.99253531235623, 33.85882016215605, 21.748072381317776, 24.932309386896108, 29.56568683093075, 20.297313970535992, 18.84613813597381, 29.54366968194033, 16.265026698037463, 21.270112419652637, 22.594468698656737, 17.421783659122127, 13.429579392624017, 17.20445194433063, 20.203170089065303, 24.234834920897423, 16.97724800417629, 23.287274710506257, 18.137157295741527, 34.30550279093998, 30.30825321209848, 24.14720425144345, 41.64814659611398, 27.695405451111743, 25.087623206112724, 33.55076972578813, 40.16904305385777, 18.864181879237897, 44.40498649225306, 16.92285251478536, 35.841746968272886, 19.89778029687176, 17.51791800185739, 38.52391469222232, 20.456222046711265, 28.19398168879031, 0.0, 13.196355889819785, 0.0, 7.570609453917466, 8.37031986518012, 0.0, 0.0, 9.75789380569095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.09847484622628, 16.56286122542545, 0.0, 14.87795652143199, 13.80223626733621, 6.307013326936365, 23.3520964979759, 10.694398461785992, 20.301999042674822, 41.749155543890225, 12.874577097648523, 11.66822681226225, 23.868336616005113, 21.794913375487027, 14.335921014281999, 20.189126232113267, 31.477757843592588, 25.978943799896147, 21.24821921543203, 24.45603603611372, 29.96486154118728, 35.307616781234366, 26.9118852545783, 19.594140922902408, 23.454712201946116, 17.499408620572837, 11.445261383942771, 16.447589985346177, 12.502207247779626, 12.643602337589265, 18.313281952071073, 11.935191906527022, 11.891782196965547, 19.51434742842991, 15.041333405353047, 12.394541017171129, 21.827834734643936, 27.674876958406028, 25.215905475911814, 29.068671831912567, 22.80733843096617, 20.953465076838448, 23.856823151499707, 31.361202069998054, 25.276303981884308, 33.52771248718702, 12.491719267755393, 20.8752584724292, 31.02279806710608, 12.858451044368685, 9.602504520459696, 15.130873495431477, 5.260878439228097, 17.933437612586644, 0.0, 6.97439804596437, 7.317914835005864, 0.0, 8.682487002464029, 0.0, 0.0, 10.04139938325669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.660062848437516, 0.0, 10.384895989454993, 9.405736387338546, 8.926417087603719, 8.451404220046127, 0.0, 0.0, 13.588253647570662, 6.276711372643475, 11.484078861180178, 5.264945426062222, 24.8288998262306, 13.256175252432161, 24.271691038850275, 22.38838747507508, 6.8309727458550595, 63.26699362221367, 40.93186949662144, 29.015967733053564, 29.83891964015259, 32.15348034004717, 16.177421258348854, 33.94655415362633, 29.164376317045317, 17.521157591257108, 27.534631930441854, 20.08259939172489, 15.37613828409366, 16.667154691807898, 8.494349109073115, 15.517015231128028, 9.834948071680413, 7.135722991084876, 9.099423788309204, 14.773084806437177, 10.337221783467085, 13.3075380735109, 17.662416289870755, 18.993715852201642, 20.331092094669607, 21.50732491044815, 27.826676278751425, 22.416717840645177, 25.037689737083692, 21.098340742064643, 39.28305704229571, 25.165166925534574, 33.63610625352512, 21.945932767176295, 30.10478445547885, 36.981154891558205, 30.308243674741952, 20.385717333614444, 30.962832277600686, 10.177646036414643, 16.22638407126172, 17.471850409167104, 12.70942466019914, 0.0, 7.487863349797882, 0.0, 8.491678989151088, 0.0, 0.0, 0.0, 22.29897465687943, 11.312478500200546, 0.0, 0.0, 0.0, 14.126411949369867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.209949042624226, 0.0, 0.0, 0.0, 9.533668820163026, 9.084714349888705, 8.218335307016474, 7.995540259254436, 7.134863694528537, 6.679887342335205, 0.0, 5.9361202252478185, 21.626235362861397, 14.841360244705657, 13.133029276410108, 36.2628278145881, 32.71706944051127, 9.425301028739263, 17.48955863658477, 32.22694808778863, 20.684410391625544, 32.64331019447755, 8.843922318184914, 26.117829572862163, 20.53158368385214, 37.60348800254891, 23.293973248134836, 24.386190613327567, 18.919769290266082, 21.81540962762764, 15.356185853897838, 13.386702846462073, 9.512492591443054, 7.863576728375129, 9.020607950213325, 7.529490006997773, 7.808285170587875, 9.167136900039186, 11.57742795168149, 10.973480947344488, 13.0186419113996, 23.90663198490636, 24.358819181512104, 21.858818263197517, 30.187873058405582, 26.266083042151088, 23.999296600432988, 35.50874669815096, 28.369756564845225, 29.777226470112225, 31.23989430569485, 22.910138349448662, 26.10478666825387, 24.841143791799297, 23.77044143840864, 21.87525625403014, 19.42074503302156, 36.8331041715542, 5.547081207334782, 6.113066038349138, 6.487639473512662, 0.0, 0.0, 8.21403150243872, 17.384291628849958, 0.0, 0.0, 0.0, 0.0, 12.194288447342037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.240829941900742, 0.0, 0.0, 0.0, 9.008795660689978, 0.0, 0.0, 7.036009850550751, 13.352664274491948, 24.5142285937528, 5.46490162427025, 10.486215499936959, 27.87921178570216, 34.547459160587835, 15.642785590767186, 39.04487652341257, 15.953104969037929, 17.314263036309278, 28.272714258295697, 37.9465992648494, 29.448586689375524, 33.74830706248044, 15.814851422515694, 19.412036160087247, 30.73279972398328, 13.562448795187104, 19.956239980555818, 16.252149307333468, 13.309350269195354, 13.361819468711863, 8.802206888123395, 8.528870216408956, 6.330075599341857, 3.5035969759905057, 4.782820912579143, 4.672907474666917, 7.984633363376749, 11.651762653911804, 14.295360093688394, 14.758953724114933, 15.665978931372747, 20.97544780216645, 28.331681912768662, 31.620400526862234, 23.304010392121548, 27.56918350990958, 27.159582209442384, 27.716635104802837, 24.44205713326356, 35.2184047247206, 31.473085596370368, 18.90761493719862, 28.034064439377918, 19.628585243186052, 8.965942769598179, 18.67653595629754, 10.178145409221711, 16.649348189560317, 23.99408316677318, 0.0, 7.093891995822983, 15.51095731989691, 8.192960899023621, 9.132056556042752, 0.0, 20.41138287520834, 0.0, 0.0, 0.0, 25.706229751392144, 13.258862743016328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.153388954807903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.176376887414247, 19.28077513226412, 6.190116119679766, 22.495950899932556, 0.0, 28.067534473739144, 8.242902636820515, 3.704658301664674, 34.42903013985756, 18.931032567718646, 41.499885574270046, 24.61843488908081, 19.644766202945018, 24.661929557467616, 20.876112728740452, 22.27156103502256, 19.786343518965587, 31.94271543131465, 16.555342637544868, 16.74949136754696, 12.569840203835044, 11.554769782438143, 10.245582892013868, 8.114634734866021, 5.6915159705524605, 3.238383169892228, 2.3961351046541775, 2.9616152709024433, 3.419553373207075, 3.7562625213041767, 5.544227288307424, 9.0302290635342, 13.65549197608733, 13.348570450325505, 16.645822464458128, 15.647017055613782, 16.40861396377346, 21.113155261792574, 30.558314098174954, 15.988128686432553, 39.242702281731546, 36.38863769118388, 39.75817127026018, 22.729017341011648, 28.157450875664605, 13.64532738351466, 15.436020033300487, 4.334505572008058, 4.5946345071657575, 10.34385004575449, 16.77140625282386, 18.493602448405774, 6.483621982514807, 6.908763021294441, 15.20911157037958, 0.0, 8.973075573438498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.336047529741744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.537346411869393, 0.0, 9.63848260533677, 8.8458673051159, 16.258218263743018, 7.63007562799824, 6.844356944241978, 6.367080087376393, 5.939210062220921, 0.0, 15.156958663182998, 0.0, 17.131012158720853, 11.281711194096442, 31.175011535809478, 11.92039221351031, 43.619104219750234, 29.654318795729214, 30.146144768606298, 27.589294632958115, 39.30235513346173, 34.24808410677397, 38.44190133516287, 18.452486149528365, 27.42550741847295, 21.864971991804218, 14.924038845582016, 9.650230295078927, 7.280483599160583, 5.644615962538039, 2.8706101832672073, 2.124680767188776, 0.8525381817301357, 0.9785113320242633, 2.27502375300581, 3.6563097254041805, 4.631194448625679, 8.70234300636644, 11.332305125625066, 12.362251977025645, 17.10588741740762, 23.123651492334563, 20.081394280595152, 22.528065801328584, 25.891958047442568, 25.477385326338183, 31.76905621342602, 30.870294733524894, 33.996751255657216, 19.16446494484049, 24.50381307919716, 17.468214778303057, 30.485791202773516, 17.028182346814802, 18.70141782832851, 20.347807868573433, 16.6436820557395, 6.046226430109846, 6.474595248113848, 13.894465139299468, 7.323519486122109, 7.85911539704611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.492983448821272, 16.01133363319159, 7.465178781190943, 6.893940873081953, 26.248618033670745, 5.824367650728496, 16.217603785378703, 10.075421314133731, 13.889499365629959, 32.91622559195817, 30.561608073216682, 16.938400262244077, 12.325165382963824, 21.799711825804224, 31.747091316269067, 33.88696682861894, 41.74267161009685, 23.63246194206969, 31.761594705485198, 25.335644122125014, 28.926288305398877, 18.039970133700027, 23.00720290642688, 13.098634377903416, 8.64324134118583, 7.079080617806863, 4.146033544858598, 2.455632084368443, 0.8775414676689082, 0.27111880630645147, 0.2270178759129509, 1.1283359984949235, 2.4648869172573793, 4.3695851742479475, 6.3694617794292885, 9.024269958213674, 14.894265252395577, 12.276973285985738, 20.252716973148615, 21.91927476532546, 18.568143434278635, 29.085498895289202, 26.13036250564898, 28.78521991430198, 18.9550999281865, 31.144294791847386, 19.11152760158352, 31.16870833719921, 34.28052234660303, 22.83648900753683, 28.973340267145197, 4.657814149949503, 20.00826786396504, 11.137885956570342, 23.793174255325425, 12.972175669605113, 6.976195635607321, 0.0, 0.0, 0.0, 9.40097844375153, 0.0, 10.423583062499304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.86027966897886, 0.0, 8.761393223858402, 0.0, 0.0, 6.999772448198767, 0.0, 11.88576958265906, 16.56100595993291, 10.40605059631434, 22.654040328110383, 12.6803678627507, 18.842993279971267, 20.780885593107715, 33.85549941049086, 30.00560344995658, 14.82988322406395, 20.947133520099648, 29.512406146889735, 25.103672097982027, 16.92701652243825, 31.40191148069845, 22.68827046271425, 16.296362917474713, 16.94485473960153, 15.740462029968528, 10.570069354700165, 9.36166332611491, 3.777308163454032, 1.9242786602944573, 1.0684334065796057, 0.26879136591862207, 0.23504614706565974, 0.659384864495866, 2.6615050100702122, 4.642128622635772, 6.313828219575138, 11.382196880532529, 13.467190053334106, 14.045778353013684, 14.848804095876304, 20.29549733908259, 26.75001536085803, 19.5940375050494, 25.51786812229348, 25.38747149276785, 42.57977448878097, 33.53725478046563, 24.53633821996451, 24.29148208273382, 27.002228462439028, 26.685356572770285, 16.41111003188101, 27.794296550567687, 20.447224309343824, 16.621537694376283, 17.705282234540707, 19.97664870161478, 7.031685972138513, 7.597935428336296, 8.116566326900298, 8.792865823520442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.3563406530753, 0.0, 0.0, 7.816976120939454, 7.295184300619572, 0.0, 5.895637289030457, 5.650463822446718, 15.361861487811316, 32.873576330484084, 20.950061301512346, 18.77570035367393, 20.32844235395195, 36.16666713329317, 49.06303422934991, 27.16346878462753, 21.617158686902815, 23.82155804317407, 31.272513677341184, 23.318179518523586, 24.615669176479656, 21.499489248333276, 19.690312497776223, 17.225876367709212, 13.618249671047327, 12.86433212849131, 8.522358382686422, 6.418756964367325, 2.741095825688941, 1.9597947823539537, 1.3060521291998406, 1.1595373306273944, 1.6466615756287364, 3.6283318690813564, 6.51994284406365, 9.356132168029003, 10.835131747900345, 14.698538880747885, 13.606830740275326, 11.867439825786887, 23.907156661507788, 22.255316355426576, 21.36979401466501, 30.18917491270766, 18.508458588585313, 23.125553047725198, 28.936226810412336, 16.835850687676604, 18.42009217138871, 34.715509065271156, 7.874333796303372, 25.11407301044611, 18.45958508700773, 15.623274139388425, 0.0, 0.0, 12.888804806385178, 0.0, 15.159634394736074, 8.42586095925717, 8.87024165873929, 0.0, 0.0, 0.0, 11.25670940312615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.850326943087168, 0.0, 0.0, 0.0, 0.0, 0.0, 8.857882652025392, 0.0, 0.0, 21.095074394489437, 0.0, 24.534258667063465, 5.514905348849353, 15.5913826304011, 23.767442813082226, 17.269468484039436, 30.710492846339815, 42.638853208455714, 24.66054958651595, 36.19152362867733, 44.89384681757604, 38.72188734063161, 29.90062570055147, 29.014811870206202, 27.19430769598603, 22.891472684497035, 26.972170808832846, 22.803805259047042, 21.88395045458569, 17.80422701785064, 11.875802372120644, 10.73440970982848, 6.299700310288096, 3.1597040241320036, 3.715124239161183, 2.3284801339374166, 2.837614867238177, 2.707161016349053, 4.784774195162909, 7.764527154265211, 8.716140003111263, 11.130033296310128, 17.592076112810105, 15.563971427969415, 18.901470731222545, 25.13879654730288, 28.23993408557932, 34.63466264467156, 27.68475542691432, 37.26302073435266, 25.8874294661112, 34.37878123656214, 47.45220441156605, 18.810076949729083, 16.963996561988814, 15.085630642240632, 30.074515009291495, 13.966337473528384, 35.42453974176587, 22.547971291196387, 18.08865271588132, 12.949565426982703, 7.02774489601798, 15.314454523825416, 8.016380326828115, 8.904008252033208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.312450748596588, 0.0, 17.626155087365028, 8.133927650173176, 0.0, 14.040757972052127, 19.805767163152876, 18.341407273296117, 16.962140779061773, 10.522137706058238, 19.22472501017813, 4.478022898328414, 35.54221425636326, 17.702508741196716, 6.503962054134689, 25.29717959363515, 43.28950727792264, 24.71980251438288, 15.69693562081703, 18.38445822798371, 32.617177364394394, 20.8535832545152, 20.33309051392222, 19.421688553535102, 21.026541467268377, 14.711569640223658, 13.402392763246342, 11.488155851097828, 9.093087472689897, 6.847205063829936, 4.643598826133427, 3.619526294397999, 3.0632300290293673, 4.293340098144949, 7.554677571948431, 9.793891983275753, 10.906160333021813, 13.598696180641303, 14.36063575356164, 18.369615482971128, 18.404132539081623, 25.502567799758225, 40.099236201533834, 29.03830156686558, 26.808384407264498, 24.79188254517361, 29.40989154703646, 25.551832705467962, 34.74495282362888, 19.4385769447408, 42.32912915583295, 34.89438679354069, 21.787094738896997, 18.578974307436674, 15.165385149237878, 5.39202648047083, 6.056493485504526, 19.805782714374658, 29.298410408419503, 7.673624242288125, 0.0, 8.844830345826477, 0.0, 10.253578455759092, 10.590237390501402, 11.067265204204604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.778157756167427, 14.37368628045255, 6.471642963245249, 6.030709294570019, 11.135481459804701, 0.0, 24.349753831955958, 21.829714525933305, 16.158934202824238, 21.97974854711757, 22.919477245936342, 38.42752446413638, 18.314640021074027, 34.757986001784104, 26.34880293991505, 24.28732855484585, 32.38833210808129, 25.920674708254012, 25.177521133218402, 17.50967514446126, 25.28159574682756, 13.938411328869956, 15.973022282511858, 14.53629047149693, 8.954537660856133, 9.469712075263981, 7.077233345852675, 7.783267184502883, 6.191370310336775, 8.487821000981997, 7.978946116964099, 10.078360512849969, 13.315175036620442, 10.242036723396419, 15.130646662103874, 24.037073357170577, 21.244394301911335, 17.74753113234468, 20.96121655836467, 28.543786141818522, 30.43492741510174, 40.39637897958084, 25.106180814440577, 40.907442329061155, 18.072011948658883, 25.333809711944642, 26.02302537821904, 28.217088858988937, 21.85698046064872, 4.8773454577601, 15.903722414299075, 0.0, 12.268597364640293, 6.481302489731191, 6.98626945179969, 15.421923295410146, 0.0, 0.0, 0.0, 10.096227108909433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.98795514611698, 0.0, 0.0, 0.0, 0.0, 11.058404785500212, 0.0, 0.0, 0.0, 0.0, 7.88653539370682, 0.0, 0.0, 12.231967921339706, 11.590978876676914, 11.006943384037054, 14.934522052715216, 8.850360822751433, 20.567666325340316, 32.92795172575271, 20.229748646771235, 24.65283844990028, 21.6773235275343, 26.41329978064966, 16.969303486692624, 27.845380582503598, 21.47570497367842, 27.720020923192394, 16.729515665974198, 34.623476894873306, 21.212795681545238, 20.907107260850275, 16.48598374730345, 18.52437579830131, 14.255011207290288, 10.592452737703159, 12.673585429541573, 15.449281833466179, 12.053009279281632, 11.29365982565434, 9.91954693793523, 9.932163817699916, 14.423140354251142, 17.57389608487392, 26.93175173662816, 24.73173049613697, 22.408088530457746, 27.703471140938834, 17.88850128279352, 29.39272035651677, 29.95581822600392, 36.531920938796006, 14.24782223773807, 40.19873446580964, 18.18881107813314, 23.156741697246343, 26.127437637019035, 12.24090219221253, 13.365004417697374, 29.616031303853955, 10.722159732253427, 29.131719801250625, 12.129853284816647, 7.034002599127715, 7.29924446070895, 0.0, 17.30002208319835, 9.087504432542117, 9.366905543369818, 0.0, 0.0, 0.0, 12.15355499736465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.780901603596861, 0.0, 0.0, 0.0, 0.0, 13.730470562657263, 25.366767494521937, 11.672293497772843, 11.109814296151635, 5.223891820678528, 4.769305397409283, 25.32711682951114, 35.03320061612837, 20.549882363367914, 12.48215895651656, 19.9190546189108, 20.093867762145134, 35.83539971573089, 33.69502152358236, 38.1824226605999, 29.504929330223014, 28.015974143740703, 27.378430630065097, 27.544877762700285, 16.784214518478624, 21.62851438511937, 20.223870897839358, 14.217969957561118, 13.676820027322186, 16.339994427195375, 11.351463051694184, 16.042933355514876, 17.696275782110696, 16.48064039212042, 16.69105644236642, 11.1563708042358, 13.611148101687728, 18.24491307987067, 31.47764210777403, 40.64008167019766, 32.65035194385344, 20.022873463431743, 29.72509875742904, 21.81251532413119, 29.02287235895215, 30.166545561673964, 38.98451832793384, 31.122305855056098, 24.051927979540093, 11.534740809869602, 13.101729800821175, 14.0853641698803, 20.421428284139356, 16.649418266531754, 12.083279189310026, 6.561385984022725, 6.700445819517458, 14.85562153546676, 15.930057070988521, 0.0, 27.559135256736585, 9.55371284967571, 20.83001690341152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.53763508999899, 11.28655048043214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.550588286883507, 10.29712213132466, 19.25529715752782, 26.20231732063011, 20.00874340356974, 14.732459727068047, 39.132970172018204, 23.827412228810765, 29.443963377006884, 30.89187173829533, 20.99809171454389, 37.239216140519495, 25.29192894532905, 19.109227809545285, 18.12366925155998, 25.913402414631754, 26.2827217892999, 15.147628952738144, 16.56477877521323, 19.957591994907922, 18.806142535098513, 17.692180835946928, 22.154293547757227, 17.73843206338555, 11.626595084800286, 19.039215255420366, 20.036919602861555, 23.64526429687833, 20.920038313181927, 23.55810517930833, 15.19726163985119, 33.55794652970399, 29.065620255255208, 26.07343400305946, 37.62213602349414, 25.482595514855035, 27.917296559888197, 16.20337603240285, 26.29731395499547, 29.40171302505625, 32.660255563916664, 12.002794283778975, 8.971453598745445, 0.0, 20.24233052978384, 16.759377807475005, 18.467701068907733, 12.819811571798, 6.872881929323616, 7.3424265793415096, 8.348253782712504, 0.0, 9.453860792897753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.382796713412938, 0.0, 0.0, 0.0, 8.820748599872216, 8.163207936042962, 7.48801681069324, 7.305887554615, 13.831449731298317, 24.643670875282314, 5.57197968397419, 26.65036834578649, 9.706289154205779, 31.522677332891575, 28.699070114314527, 14.89405382635749, 17.40293063790135, 21.488973340969753, 34.10106276846127, 10.223490654618416, 25.252998578097277, 20.81665657567128, 27.266146931451217, 34.28168537105896, 38.16680603411008, 31.7540969964087, 26.358195555038954, 25.190948227250843, 22.374948015967725, 22.539664071685493, 19.469362162173173, 16.4112989226799, 19.64173801756526, 18.629357198168464, 23.04856172615214, 24.229826536451554, 22.630323834969417, 29.683245518965506, 22.414025242374056, 17.204810686321906, 19.43899845228422, 40.102043433245264, 28.886025377825298, 38.28597087801775, 26.22019295116018, 24.9148005643358, 27.967322464016917, 27.850454681155004, 21.72344694403003, 37.81510150297426, 11.577766911302641, 37.48794663386318, 22.562743585892246, 5.053438140805714, 16.255455959074087, 11.918369662919185, 0.0, 13.198633337545953, 0.0, 14.976304536555169, 24.62812597514977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.201824260196629, 23.590356906051706, 0.0, 6.880223784329489, 12.669456031412142, 12.053808653090844, 11.414774551696283, 15.4820905327026, 23.480848270764746, 17.476385008366996, 12.098303472579857, 18.233171795207905, 49.42077124496205, 30.270553801149717, 24.070443535498033, 31.42568395450727, 31.786081757913717, 29.952038442438134, 38.09205130892771, 27.68252233052423, 30.913397709633365, 17.120600465991597, 30.474959985364286, 38.97758003232178, 23.083856504225974, 16.339186087232196, 25.872368091486717, 20.969777096561927, 31.927582729804122, 23.885815822744707, 33.864476699034, 30.25213953066553, 29.065174006505863, 23.98976064132909, 26.3777391850271, 30.320305885155154, 19.083358631589054, 21.25334262204314, 41.16420280159801, 26.5663656875276, 39.036401630030504, 32.75934695585864, 14.911472505760761, 35.41181196754873, 21.68584837066905, 19.63402530025771, 17.16749369901125, 18.63639519069642, 15.380936270217346, 5.342553920961569, 11.992086290966071, 6.563093367852716, 0.0, 0.0, 7.936540114189235, 8.766190184626867, 0.0, 9.485408693936478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.304798203050833, 0.0, 9.723525922778023, 18.659197037997956, 0.0, 8.170182282575077, 15.273034426130149, 0.0, 0.0, 0.0, 23.31380764774745, 10.597225653854832, 9.790614606015748, 9.159781631536406, 16.449974400080592, 30.31742821138548, 35.135179193137056, 28.63043315900901, 14.575621360810505, 39.39017908202693, 35.74108250950654, 33.34646886685934, 38.159703940793776, 18.317272670061268, 16.789072752862953, 40.01544291471445, 37.80537474952754, 30.126310435802733, 27.87372471221549, 26.745047639235633, 18.11020787580801, 19.526217661985225, 19.629687459704368, 22.757307494226303, 18.806938557001608, 21.96951624352896, 18.1604579426351, 15.467250044652296, 18.290245695248572, 20.125552078223787, 34.94233384792959, 33.7911941051226, 24.49543865759108, 38.66542883802393, 18.903944594682844, 17.56249143527034, 29.00564929033998, 28.165408870865722, 19.028252749825683, 24.53191332164668, 40.427535343854835, 9.930923453885477, 0.0, 5.72279050040548, 6.264336197658339, 6.427897162612919, 0.0, 0.0, 8.382618518897534, 0.0, 0.0, 9.65953973321728, 10.152285790398693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.113975871056077, 0.0, 27.134082640378715, 8.142738677424685, 7.8805375328944285, 14.528225863996946, 13.713077983132026, 0.0, 47.75607854224146, 27.236311987935554, 20.382334280679174, 14.43304649368271, 12.971101158377945, 15.964419539903016, 14.95613115780397, 27.29533001448095, 16.055186082258206, 23.61401568037425, 37.62195367799231, 26.677922930493374, 31.06699506066213, 42.66426290950601, 26.691434343970492, 38.57555575317747, 33.86924228836612, 22.88152202391662, 12.918648073977725, 32.32791679215794, 35.18819484162065, 35.211846351561455, 28.92983921008836, 28.224109367637027, 22.07947130426659, 24.694836726770127, 24.693226152708185, 39.28323963548675, 22.69905087205667, 20.318848019641674, 20.44488362251159, 31.51596285277252, 26.449846246808637, 30.955758693801513, 23.242986265896835, 28.503799801080792, 30.944142286412358, 18.18661315257046, 24.15471072358973, 30.701611326530653, 28.22956990564699, 25.583884443787596, 16.063990047056812, 11.852653744001087, 0.0, 0.0, 0.0, 7.752608824446363, 17.05265760945564, 8.631773127103624, 0.0, 0.0, 0.0, 0.0, 12.09823892973773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.917173230005833, 0.0, 0.0, 0.0, 19.822535442930217, 18.397488398136243, 0.0, 10.565327544168115, 30.460442601539505, 13.837014574166469, 21.675804903108922, 27.91503732600368, 25.524533410270074, 29.98657592371766, 21.938497147929887, 34.90081087373445, 37.264616728675314, 30.12201158261036, 29.474403380713827, 31.810954664469893, 21.979835256890446, 42.80394674740159, 32.14810392190277, 35.557867346761725, 22.94959918662679, 25.128773704602555, 25.151685322899215, 24.90275592610006, 28.764090142705605, 26.055914710855127, 23.812931361532087, 21.545341978311864, 35.49714537917413, 36.447386037629684, 29.68620532954052, 39.10036332267141, 26.68003445663147, 29.437168808221873, 14.751214789650488, 19.023703854587406, 16.835271580244033, 10.759584681604514, 31.964536911503, 16.82916650148408, 13.898745619089283, 14.786744121481759, 5.450936366028633, 23.335860900474714, 18.59358307580824, 6.792076017677246, 13.975730308408458, 7.716387015913243, 7.886911936082252, 17.108503687717544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.973067711895899, 0.0, 0.0, 0.0, 0.0, 0.0, 9.652769635817563, 0.0, 9.070367645250471, 8.063167042043869, 8.04425469822254, 0.0, 6.800590037405176, 6.551334001453588, 23.82701728606959, 33.39753649802911, 5.435416578303198, 14.554062862850296, 27.31156822449772, 20.836692662223804, 38.95670157315083, 43.80978537645765, 30.365454431152575, 12.498085988481481, 17.30215830364218, 35.869900939026664, 25.28931697180892, 20.894603674999814, 24.845629742185565, 30.59687226493743, 25.994669505261445, 27.250578290082657, 39.69193302300567, 16.707363755648093, 32.56392672466718, 24.811171888259995, 40.5559815763933, 28.153720248356784, 36.68524344880984, 42.483452977060644, 21.572163322257015, 35.90759561528603, 40.37101986276435, 35.34406410963815, 30.37905332907918, 40.95326400277211, 31.954222401082898, 23.5854617800875, 29.024849837598556, 20.08555634469009, 21.08840747174422, 18.438792226879187, 14.833182202742499, 20.848948017538085, 5.573285588432011, 0.0, 0.0, 6.707626999515195, 0.0, 0.0, 8.460983047165694, 8.909085934256334, 9.331420263312442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.00055703205669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.874362702970704, 8.828651579962271, 16.042239678675973, 7.4710075409713905, 0.0, 19.904721606242767, 12.667465300631937, 0.0, 22.231094959726114, 15.590910632348796, 9.619076834945615, 13.311952409421549, 12.21023828256803, 27.55980978980121, 28.691933503109233, 38.00271756949226, 25.54451397287676, 21.063303448850608, 42.77768825291667, 47.369291484846926, 28.123267073780085, 24.035995224041834, 34.279326410072635, 35.83999764077679, 29.963540327299157, 33.726920154383194, 29.847866396774787, 33.950925720249074, 36.42959045834825, 27.54373811525784, 31.10778180576534, 18.023323620097237, 36.31806466658632, 17.53237456730791, 27.033138643535906, 31.09879036758993, 23.882650136801875, 22.26064691706533, 13.474082610834028, 17.972636054186957, 19.40954184084364, 8.460572875895359, 36.176001226343956, 4.825699607727081, 26.220574788700524, 0.0, 6.093293436624366, 19.293656863728046, 0.0, 0.0, 0.0, 0.0, 0.0, 17.90348522288516, 18.944950470670996, 0.0, 0.0, 0.0, 0.0, 0.0, 13.370441389138545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.182969012172173, 0.0, 0.0, 0.0, 9.07454834328353, 0.0, 15.799214935869887, 14.91971773089602, 14.039033244434838, 6.653694976070189, 12.685158884452722, 5.830511932476556, 21.929503527976323, 15.062334831069117, 19.428756733242253, 18.465882126220077, 41.93686598750816, 34.95361380989073, 22.05701407050235, 17.649484044629897, 23.19651230156447, 18.30129821654128, 23.403882274277212, 16.555809958092148, 26.986013369728482, 26.18338510214134, 32.78085414648565, 17.315137107659375, 17.191856464116874, 47.918227599142234, 23.508952555222447, 29.64490227722537, 19.432909533465004, 27.722202455650777, 47.43226254201416, 8.257322744942861, 25.750242355082232, 18.000622844083914, 28.809291677461648, 39.55806489390858, 21.037014958740766, 22.43966833550317, 39.65886247809114, 12.6788697942231, 9.079012576798599, 5.004829925381696, 10.336397753755396, 38.18920884554815, 6.024144743275409, 6.159561605292792, 13.253917374095472, 14.557872176795925, 0.0, 15.609123277483809, 0.0, 8.67014788841758, 0.0, 19.938785767597494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.204951492543493, 0.0, 0.0, 0.0, 0.0, 36.961178348253114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.604813054830053, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.216741885998402, 7.664278167684865, 14.906226306337789, 0.0, 13.057329428702454, 18.460972550845657, 23.10666661971928, 22.339847699615028, 15.102923509853278, 28.853849636631463, 35.51045848448257, 12.59211660938489, 28.180382464152366, 3.8714260166233525, 29.08436182634553, 27.341313631103734, 26.082996783347934, 25.470493480504977, 21.045947571017333, 17.74738937015989, 22.92960680552427, 33.270030464833475, 35.62236118525044, 16.417389311205504, 5.2447943912641986, 30.11228244691712, 36.013999160553794, 8.331367575904713, 17.576219168716555, 29.874663209004336, 28.095218241378607, 16.590541603319217, 34.55617484960017, 18.499464139732, 19.180973612609925, 8.237656353367633, 30.06859123129381, 13.674935662118513, 33.07608417997457, 20.513482682212604, 16.477238892381983, 23.623743366492988, 12.409052659172506, 12.670429630119521, 13.875360712132505, 14.554310072011031, 7.815371130054453, 0.0, 0.0, 0.0, 9.526749511932213, 10.237283531278342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.098468400828825, 7.633978475503065, 0.0, 0.0, 26.155188140786034, 0.0, 17.19842144512884, 10.905588675778572, 46.69035866643151, 48.466996207417836, 18.573852723693836, 21.734136949200305, 20.547718422621156, 27.691650272964075, 11.088833784903159, 33.10559443749139, 14.14155805858119, 20.35209752207108, 26.551891114719602, 15.700656034383194, 40.21459176767403, 30.44441136196486, 30.093314234975892, 34.28697490610085, 31.349768701668708, 28.349501878934984, 25.643021009512836, 19.844397383263072, 26.504422416446708, 21.065548254905597, 18.36950480121878, 3.66151595759632, 16.174597842350483, 20.787976297689347, 17.63757666358275, 14.040014259711347, 44.307219075779585, 10.364452713971342, 16.24743241374981, 11.213540560079492, 24.422369170204227, 6.4895109305187875, 0.0, 7.2087383581544, 0.0, 8.368979522067718, 8.578631922164366, 0.0, 0.0, 0.0, 0.0, 11.370851291072565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.153701186243993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.922828877167632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.943796349059471, 0.0, 0.0, 13.563668531312928, 6.751931385457393, 18.53642846491303, 0.0, 16.686586148554916, 10.64416040012491, 19.67988618126337, 14.538985658254685, 27.331151527945977, 30.69447990161096, 16.553922070479302, 11.993067442729533, 23.369659710344877, 18.6604568522378, 17.973799592821425, 14.605110327545475, 20.25833908144049, 23.70940501235754, 44.17740282460485, 31.560516465923783, 41.08521662333338, 31.182573066936815, 21.37273888814693, 40.24547632469189, 22.176538888364128, 34.400401845374425, 39.638659830106214, 16.403075454273964, 30.30974352212354, 17.90551851391208, 28.143797122431007, 5.219274313801391, 15.7107597562353, 16.49242962476253, 11.245979307445637, 12.017139404173106, 12.605688011576826, 20.27417772330785, 7.275085653791378, 0.0, 0.0, 0.0, 17.53556072925668, 0.0, 9.691518345952336, 0.0, 0.0, 0.0, 0.0, 13.061513040084797, 13.415684682105526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.31730401374782, 0.0, 10.16812422337293, 0.0, 0.0, 8.950195239705353, 16.776147281018922, 0.0, 0.0, 14.285285264890778, 0.0, 6.2236521158528415, 12.425312738704639, 5.87888425302374, 33.8218532127089, 5.1754369491267385, 15.050159361108266, 19.59046067006394, 9.531408391789196, 13.702327254160135, 17.39546923016982, 8.507999312712514, 24.41863908801964, 8.016685593140735, 22.98148493053175, 11.73617902439732, 11.386905531548937, 15.540296650078671, 11.180606246091077, 23.258107838249657, 18.9606595208978, 19.67547521309259, 23.648860267380968, 8.363276632984434, 16.73932242691169, 47.869028380852015, 8.882491707573216, 18.98740800570456, 14.957155542561262, 20.62532802032315, 16.03059727820615, 16.68167755764802, 41.78136143745098, 12.357421142777795, 12.939124625497081, 34.065339803284516, 14.368076262876357, 7.716972071616857, 0.0, 0.0, 0.0, 18.1528819101079, 0.0, 0.0, 0.0, 10.946420365069196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.884666515993654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.016132750978425, 8.611624787596435, 8.584960303425742, 0.0, 0.0, 7.338876243955879, 7.0603106245763065, 0.0, 12.92579253684484, 17.40399003961933, 0.0, 16.97871041930009, 20.841149365570732, 24.884951147534206, 9.725347467859208, 0.0, 18.381441984393682, 31.252828273283626, 22.02534798196855, 8.798239301617404, 12.812884286293706, 16.684212851390342, 21.332295841091828, 8.333085204186904, 8.518301868570196, 13.153239884330157, 34.16335072308928, 31.532433759060858, 27.41835073332246, 18.36310152172738, 4.701557405802436, 14.867105105703942, 25.152131183815193, 25.901652036912374, 16.3297259390123, 23.239281533504027, 5.807614599016011, 6.232637367940528, 6.585149204675442, 6.712582088191993, 0.0, 7.549511705513671, 16.030901415322443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.6190329945876, 0.0, 0.0, 0.0, 7.375896096910728, 34.86739088201665, 20.363623796653847, 6.21234932401362, 12.109095976190234, 23.387375442715204, 11.580075906021676, 16.738157297330442, 21.74891593763582, 5.0715285009789834, 20.180078367687813, 9.860534348885924, 9.729083204723942, 33.37991434684933, 28.742967089614005, 23.111632900949306, 18.841257201417584, 18.431282539083583, 32.4349481537933, 23.45924086684627, 23.474669070036846, 38.476587156925426, 9.779986098072538, 20.152547441694914, 46.23819831846233, 5.521028378065055, 11.136722636893593, 11.641231686207533, 12.038842548373013, 18.481795779913725, 6.413181842597294, 13.545947848768476, 14.516621519439775, 0.0, 0.0, 0.0, 0.0, 8.82253295074404, 0.0, 0.0, 0.0, 0.0, 11.092559064959724, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.777293946219937, 0.0, 0.0, 13.653556670404457, 19.66874053678471, 12.741435813288296, 18.667501840669168, 0.0, 11.67318123266151, 22.52423719992859, 10.974066950986579, 20.926224187860477, 15.9379402423314, 0.0, 15.545113609416678, 25.23671457960668, 10.505446316360317, 10.103726146320845, 10.074692980395913, 15.826386913468571, 31.065987623244016, 37.072758226410095, 26.09189489833289, 16.205619891890652, 16.583355194807346, 17.49792353708918, 6.048636421290284, 6.156287950905061, 6.175407639447297, 6.3173342706911315, 20.643537144639488, 6.815757646632268, 14.469014687287904, 0.0, 0.0, 0.0, 0.0, 18.471244149155538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.912221318277657, 0.0, 7.764203766423518, 7.150389637616244, 0.0, 0.0, 13.212267146309244, 12.922637340015065, 12.450305356011725, 24.600658326506192, 6.142214010951489, 29.54958292647288, 11.455185455288298, 5.853306950068442, 5.519401987705458, 28.071594417487464, 10.72640678314325, 10.916476362338834, 16.233611104837255, 16.770297062236903, 17.008907220006606, 16.94207029437508, 5.785733857581856, 0.0, 6.069357416535497, 0.0, 32.277449054499534, 0.0, 13.862137311801007, 13.844574568577128, 0.0, 7.506499582876904, 7.775465902516887, 8.425215619362277, 0.0, 18.250712233771047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.65389182431191, 0.0, 17.92480492355255, 0.0, 0.0, 16.012821796674988, 7.491785453116725, 0.0, 0.0, 0.0, 6.829374941124702, 6.3002889096295664, 0.0, 12.652493472047052, 12.469894645545697, 17.923664648307692, 18.356061220617896, 5.903006910226098, 0.0, 5.908464617093419, 6.118521784320542, 6.115785986460844, 24.627062023821118, 12.351062148955279, 37.42058659724951, 6.33700302812381, 6.6089442609368305, 6.7096980724954935, 27.49024813235417, 0.0, 14.921140336737666, 15.477671231029085, 7.9125081143061395, 0.0, 0.0, 8.627657468744586, 8.989495879776799, 0.0, 0.0, 0.0, 20.92370088831934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.291603246326341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.68108248870819, 15.686897627254535, 7.350304626405629, 0.0, 21.650270508559153, 7.126456133895736, 6.910530355349563, 0.0, 6.753485914510238, 6.759622084437648, 0.0, 32.493050398808656, 13.296161551539663, 0.0, 0.0, 6.633577201243432, 6.393344597248583, 6.634379016697302, 7.018859987089681, 0.0, 7.14796839505729, 0.0, 0.0, 7.559113697076574, 7.651218520366829, 0.0, 8.339611805117881, 0.0, 17.597512110557638, 9.014967040563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.906572517465221, 0.0, 0.0, 0.0, 0.0, 8.22238010248945, 7.85723111801123, 15.995848458793596, 14.982860315657067, 22.580808362797526, 14.872644932137607, 14.363698396429324, 0.0, 14.353672862980854, 7.275090455550375, 7.091436673599727, 21.033787775530453, 20.55602336496904, 27.96777629931556, 0.0, 7.352058748724547, 0.0, 0.0, 0.0, 14.830047259122678, 15.776864336307016, 0.0, 7.869872248435308, 0.0, 17.22827108354261, 0.0, 18.315202823746414, 9.604325998626589, 0.0, 0.0, 0.0, 10.993745992964943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.92807304746396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.381181265371655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.662002519043632, 0.0, 9.105048084122457, 9.018784418965616, 0.0, 8.33298252229289, 0.0, 16.08230814826978, 8.046806267914267, 15.899313749124385, 0.0, 0.0, 30.589545659383873, 0.0, 0.0, 0.0, 0.0, 0.0, 7.735832486233113, 7.735674399306397, 15.815957320660463, 0.0, 24.218119714955364, 8.434178164112893, 0.0, 0.0, 0.0, 0.0, 9.193254885594076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.73449465453832, 0.0, 9.094613182107537, 9.058803426825198, 9.033738356142603, 0.0, 16.755988499323326, 0.0, 8.245196614386282, 8.2661841890983, 0.0, 8.379020858862674, 7.874864056993534, 7.889519968900125, 0.0, 0.0, 8.289114649282661, 0.0, 0.0, 8.424774685028238, 0.0, 0.0, 9.00598923655463, 27.229989775686555, 9.333877715340126, 9.769746227850726, 9.815931988261964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.903622957623718, 0.0, 12.162853554596461, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.136540364761672, 9.739159307671162, 0.0, 9.16558719675554, 0.0, 9.042336879689149, 0.0, 0.0, 0.0, 0.0, 0.0, 17.61514390017978, 8.962805074528656, 26.052087037923116, 0.0, 0.0, 0.0, 0.0, 0.0, 9.493683808104919, 18.794685851247962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.232563151656421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.826693545523854, 9.272181244075263, 9.842827223227264, 0.0, 9.465277811444823, 0.0, 0.0, 9.03249282910562, 9.101796112908648, 9.630175004130585, 9.136883091396967, 0.0, 9.801472631221575, 0.0, 0.0, 0.0, 0.0, 10.476399848920838, 10.417357780887372, 0.0, 0.0, 0.0, 0.0, 11.842600377857895, 12.178803243413851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.685149965633542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.27593460814017, 0.0, 10.305522853278816, 9.868584176777437, 0.0, 0.0, 9.954438415787324, 0.0, 10.038819418009378, 10.263251551046316, 0.0, 20.82260248709028, 0.0, 0.0, 0.0, 11.048433827625725, 11.035152859997524, 0.0, 11.641930101318355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.31304407818492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.911378482086997, 10.86616351093534, 0.0, 0.0, 0.0, 10.410151975274966, 0.0, 0.0, 0.0, 0.0, 0.0, 10.475715194087671, 0.0, 0.0, 0.0, 0.0, 11.598566580038153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.380989223585749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.163747997370713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.537199341479218, 23.116620080230803, 0.0, 0.0, 11.752979201042328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.892845328509521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.761494885645789, 0.0, 0.0, 0.0, 0.0, 0.0, 12.206095548132478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.411259330225793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.972374201703156, 0.0, 0.0, 12.457082780726786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.323950871672922, 0.0, 0.0, 0.0, 13.216089833251765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.014555684881804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.78582694813311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.197356326751034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.array.fArray[] elements >= 0.0
this.fScalefactor == 1.0
this.fTsumwy one of { 0.0, 281.0846390360272 }
this.fTsumwy2 one of { 0.0, 25124.041480849166 }
this.fTsumwxy == 0.0
this.tAttLine has only one value
this.tAttLine.fLineColor == 1
this.tAttLine.fLineStyle == 1
this.tAttLine.fLineWidth == 1
this.tAttFill has only one value
this.tAttFill.fFillColor == 0
this.tAttFill.fFillStyle == 1001
this.tAttMarker has only one value
this.tAttMarker.fMarkerColor == 1
this.tAttMarker.fMarkerStyle == 1
this.tAttMarker.fMarkerSize == 1.0
this.fNcells == 10404
this.fXaxis has only one value
this.fXaxis.tAttAxis has only one value
this.fXaxis.tAttAxis.fNdivisions == 510
this.fXaxis.tAttAxis.fAxisColor == 1
this.fXaxis.tAttAxis.fLabelColor == 1
this.fXaxis.tAttAxis.fLabelFont == 62
this.fXaxis.tAttAxis.fLabelOffset == 0.005
this.fXaxis.tAttAxis.fLabelSize == 0.04
this.fXaxis.tAttAxis.fTickLength == 0.03
this.fXaxis.tAttAxis.fTitleOffset == 1.0
this.fXaxis.tAttAxis.fTitleSize == 0.04
this.fXaxis.tAttAxis.fTitleColor == 1
this.fXaxis.tAttAxis.fTitleFont == 62
this.fXaxis.fNbins == 100
this.fXaxis.fXmin == -5.0
this.fXaxis.fXmax == 5.0
this.fXaxis.fXbins == null
this.fXaxis.fFirst == 0
this.fXaxis.fLast == 0
this.fXaxis.fBits2 == 0
this.fXaxis.fTimeDisplay == false
this.fXaxis.fTimeFormat == null
this.fXaxis.fLabels == null
this.fXaxis.name has only one value
this.fXaxis.name.toString == "xaxis"
this.fXaxis.title has only one value
this.fXaxis.title.toString == ""
this.fXaxis.fUniqueID == 0
this.fXaxis.fBits == 50331648
this.fYaxis has only one value
this.fYaxis.tAttAxis has only one value
this.fYaxis.tAttAxis.fNdivisions == 510
this.fYaxis.tAttAxis.fAxisColor == 1
this.fYaxis.tAttAxis.fLabelColor == 1
this.fYaxis.tAttAxis.fLabelFont == 62
this.fYaxis.tAttAxis.fLabelOffset == 0.005
this.fYaxis.tAttAxis.fLabelSize == 0.04
this.fYaxis.tAttAxis.fTickLength == 0.03
this.fYaxis.tAttAxis.fTitleOffset == 1.0
this.fYaxis.tAttAxis.fTitleSize == 0.04
this.fYaxis.tAttAxis.fTitleColor == 1
this.fYaxis.tAttAxis.fTitleFont == 62
this.fYaxis.fNbins == 100
this.fYaxis.fXmin == -5.0
this.fYaxis.fXmax == 5.0
this.fYaxis.fXbins == null
this.fYaxis.fFirst == 0
this.fYaxis.fLast == 0
this.fYaxis.fBits2 == 0
this.fYaxis.fTimeDisplay == false
this.fYaxis.fTimeFormat == null
this.fYaxis.fLabels == null
this.fYaxis.name has only one value
this.fYaxis.name.toString == "yaxis"
this.fYaxis.title has only one value
this.fYaxis.title.toString == ""
this.fYaxis.fUniqueID == 0
this.fYaxis.fBits == 50331648
this.fZaxis has only one value
this.fZaxis.tAttAxis has only one value
this.fZaxis.tAttAxis.fNdivisions == 510
this.fZaxis.tAttAxis.fAxisColor == 1
this.fZaxis.tAttAxis.fLabelColor == 1
this.fZaxis.tAttAxis.fLabelFont == 62
this.fZaxis.tAttAxis.fLabelOffset == 0.005
this.fZaxis.tAttAxis.fLabelSize == 0.04
this.fZaxis.tAttAxis.fTickLength == 0.03
this.fZaxis.tAttAxis.fTitleOffset == 1.0
this.fZaxis.tAttAxis.fTitleSize == 0.04
this.fZaxis.tAttAxis.fTitleColor == 1
this.fZaxis.tAttAxis.fTitleFont == 62
this.fZaxis.fNbins == 1
this.fZaxis.fXmin == 0.0
this.fZaxis.fXmax == 1.0
this.fZaxis.fXbins == null
this.fZaxis.fFirst == 0
this.fZaxis.fLast == 0
this.fZaxis.fBits2 == 0
this.fZaxis.fTimeDisplay == false
this.fZaxis.fTimeFormat == null
this.fZaxis.fLabels == null
this.fZaxis.name has only one value
this.fZaxis.name.toString == "zAxis"
this.fZaxis.title has only one value
this.fZaxis.title.toString == ""
this.fZaxis.fUniqueID == 0
this.fZaxis.fBits == 50331648
this.fBarOffset == 0
this.fBarWidth == 1000
this.fEntries one of { 0.0, 25000.0 }
this.fTsumw one of { 0.0, 25000.0 }
this.fTsumw2 one of { 0.0, 25000.0 }
this.fTsumwx one of { 0.0, 31.88254774666985 }
this.fTsumwx2 one of { 0.0, 25440.254425694213 }
this.fMaximum == -1111.0
this.fMinimum == -1111.0
this.fNormFactor == 0.0
this.fContour == null
this.fSumw2 has only one value
this.fSumw2.fArray has only one value
this.fSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 229.55365320525362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.35743590965694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 278.2870161068039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 275.98581915449836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 159.93124636748806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.40159409347527, 0.0, 0.0, 158.50386259492845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 123.02608699260242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 379.9512514614612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.8529894663116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 110.04637700272667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.39633381618849, 0.0, 0.0, 0.0, 0.0, 145.81075958281144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.47405200490914, 0.0, 0.0, 105.68982488289707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.85176446237296, 108.65678032834029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.3640639790128, 0.0, 0.0, 270.644012116525, 0.0, 0.0, 0.0, 113.45972820740744, 0.0, 208.20006007377322, 0.0, 0.0, 0.0, 0.0, 0.0, 91.64394450277584, 0.0, 90.75644906101401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.64048704242822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.4483025707086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 207.85708972727898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 187.07098957996038, 0.0, 0.0, 0.0, 0.0, 0.0, 149.58048532825316, 75.56510013741186, 78.28588728281352, 0.0, 155.97401517376358, 0.0, 0.0, 0.0, 162.63512946738751, 0.0, 0.0, 82.56083755949028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.00861538539576, 260.06646661993227, 0.0, 0.0, 0.0, 0.0, 93.71807826389512, 0.0, 0.0, 76.44346803824827, 0.0, 0.0, 76.01074028910294, 68.28834594179257, 0.0, 63.66077688414116, 63.71105354807626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.04618328857103, 0.0, 0.0, 0.0, 0.0, 87.90937430152617, 0.0, 97.79613557027211, 0.0, 111.57562061881144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.10881886948316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.85866518537023, 0.0, 0.0, 0.0, 63.824335079404776, 0.0, 59.00659728176397, 115.53402979440975, 115.55517185176194, 0.0, 115.23884099682374, 119.77667754706664, 60.3282316731778, 0.0, 62.37656520285095, 64.86484908774327, 0.0, 0.0, 0.0, 79.45592090879668, 82.41023253285763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.47705045808848, 74.17959237459432, 0.0, 0.0, 69.25081101538709, 65.10129723940173, 63.76804228106964, 120.4490199928676, 171.80705201293097, 105.71858655582817, 48.96610869644089, 53.452686392419075, 50.72461251473717, 0.0, 52.29608645083905, 102.69323313095512, 49.2515325396414, 0.0, 0.0, 51.6406238144346, 0.0, 0.0, 110.33691259456103, 56.120709769063936, 61.64844314131909, 135.87817200723055, 0.0, 73.34769837257272, 0.0, 81.57385100488682, 0.0, 92.3265575071039, 0.0, 111.59657392195705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 176.2306185222046, 0.0, 75.77576465203073, 73.02392866507496, 125.34753540539907, 0.0, 55.201097787482226, 0.0, 49.712700295114836, 51.87828635748076, 189.9188299387942, 137.29967933865916, 172.68959924000762, 128.7105370335912, 123.57497549527332, 43.289292601993196, 85.74863101214106, 128.2884649760985, 43.14512055797298, 0.0, 43.85913889574651, 46.3035876840471, 49.22634420929598, 0.0, 45.798909762920076, 51.39857919654231, 54.32492456901119, 0.0, 0.0, 60.37712683167125, 0.0, 77.41270951889318, 150.69582940219595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.74362093328763, 0.0, 0.0, 67.55322034461781, 0.0, 61.19229043499082, 53.191645308430076, 0.0, 96.98427110923504, 147.03782618453803, 0.0, 42.38341510222756, 85.4477382483048, 75.21553969308582, 36.61728655559116, 35.858026034671035, 74.45852553250445, 70.21190963756641, 33.63725682546873, 74.04502528238974, 39.453637274699275, 107.04652418225399, 35.17590388437419, 79.41872262872698, 79.02667690923093, 127.00124780634732, 176.51031822846772, 41.57425413208977, 96.52842669913667, 0.0, 55.057133935416985, 55.61852778364321, 0.0, 130.9154406692775, 0.0, 0.0, 84.36327272356431, 0.0, 96.45100737995433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.0126056013084, 0.0, 74.3015630623963, 0.0, 0.0, 59.35589814166099, 0.0, 0.0, 45.89408050353946, 132.18317493141595, 123.28945932825562, 234.01372285225375, 76.62397503258039, 0.0, 69.96663024923015, 96.92140756515711, 32.466947388369874, 30.57982408070632, 60.74457292352491, 31.744206478709064, 122.75628696414273, 92.17734442313854, 95.28616775186262, 0.0, 31.905076966541838, 65.43436410214917, 182.46342212544266, 35.424441883694044, 117.90101609862276, 82.32898086297504, 89.88628610132244, 44.54035201373501, 0.0, 108.03446299180003, 114.32000640021437, 61.86682634375864, 66.79140297461221, 0.0, 0.0, 86.5752209573222, 190.12325528539316, 94.32931705182773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.87248416012525, 65.07478112999974, 54.99471497369431, 50.978635866945574, 94.58418983723604, 85.99382715728291, 0.0, 112.75335773254878, 136.34538642060053, 0.0, 93.03225010477875, 32.085600431519254, 88.77034642125724, 56.32606760819358, 136.9408103531372, 104.41546640532853, 105.80343746776937, 27.735703674465835, 0.0, 78.75335367234446, 203.59559208385315, 28.2146991254042, 167.1522613503965, 88.8156285322849, 152.6835607242328, 0.0, 63.97931334403411, 0.0, 115.37216076862751, 121.5845359941977, 43.28715742160725, 0.0, 53.10372098573565, 53.19220561176862, 0.0, 0.0, 0.0, 0.0, 0.0, 96.44579757444714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.80782780566676, 0.0, 0.0, 69.7512878425508, 124.12108489648884, 63.679274907683336, 0.0, 0.0, 92.94973182502156, 41.61776156924985, 35.62411184936818, 105.16750160561594, 129.94489908403574, 58.68403337313864, 84.8657691564491, 0.0, 98.43220219506296, 72.64267733262403, 139.015433494785, 131.22124115080598, 66.65775632713822, 64.23449704357427, 89.17887507824922, 61.134264974869225, 44.62997349340849, 112.48339836041335, 141.6775693798691, 22.737266623408793, 68.63472123850593, 154.23502969174302, 50.404125972395164, 52.618632921346816, 0.0, 64.685406014828, 0.0, 41.297476912632625, 0.0, 42.18620768587905, 0.0, 0.0, 59.899876671401216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.81164474904509, 99.40524480844729, 0.0, 0.0, 159.0101606142522, 71.96500722840818, 129.39821795321762, 58.7933844188441, 106.21265492965313, 95.7364514492786, 40.8995877993734, 76.40616800140606, 0.0, 64.01633002358021, 0.0, 57.362625865009775, 130.11907493166584, 122.94359890195842, 94.64604508067772, 87.10985077994724, 21.028217936885696, 96.52516776782635, 149.50754281405082, 38.12639538727588, 85.46530041909091, 176.31270351985444, 105.17366012736395, 160.11887052252143, 51.298863431768964, 128.50448591706393, 20.916094014620953, 59.4519018667372, 126.90434246977415, 87.10745009899763, 100.07647461335591, 74.97036213580513, 114.38846319775851, 29.78290785343491, 96.07148566746852, 36.08159288059311, 0.0, 43.52844282818297, 44.39331169679729, 52.03833726879191, 116.76010709635003, 125.29907848375267, 0.0, 0.0, 87.42458647292077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155.8282001291064, 144.98053542150282, 125.00278009130808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.25501672925883, 99.83866533472178, 0.0, 0.0, 79.68234546973652, 142.75009370896012, 33.03512067722765, 0.0, 80.20521201039912, 46.2048255320734, 114.59201152233068, 60.98074762107923, 111.19919635869869, 53.26758921511582, 68.61461961501757, 66.4603250671317, 46.0793406699626, 75.24146765331604, 15.471499277186755, 104.1161939926075, 29.7807907287141, 118.75419442383092, 28.393979291626966, 107.8417388647864, 62.51829677438094, 104.6764930214776, 74.19520060606939, 72.00417563211158, 119.9713539162593, 22.696695372506632, 70.46254063594819, 53.41399273864517, 140.54116464748225, 96.63038338795033, 69.71702716629295, 73.1172562104637, 124.77184335739588, 193.88512620081087, 101.70311621872463, 53.39796779549814, 0.0, 0.0, 84.07662820797185, 0.0, 91.31706365344655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 163.39762758554716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.49799027815374, 0.0, 0.0, 55.43877412544088, 0.0, 0.0, 71.91418574768119, 137.39343732549455, 0.0, 108.99663737446025, 120.95542077001913, 20.70726277863156, 64.54600329583195, 58.23960922620472, 99.37772723678185, 34.78526281340007, 73.96065745003702, 26.32602193523804, 50.548979609419106, 111.78453557300409, 70.27147749838196, 105.44640641279287, 93.47584642407195, 130.421170185466, 49.16918279048018, 45.95905922752406, 101.27639133469992, 119.15552677638182, 29.56032176047979, 123.85111927780173, 142.59001001574987, 50.08976763177327, 72.99809824144418, 62.71248212374534, 66.56520259115752, 49.23758110854864, 49.85727985853512, 0.0, 101.74683440365928, 114.78636114083335, 0.0, 44.42398055881819, 214.2834312475526, 0.0, 61.83518279805181, 67.32082283981421, 0.0, 92.30049676614446, 93.85465338459962, 110.62956778365023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.327425085282, 0.0, 0.0, 0.0, 58.982339103595656, 0.0, 46.50139634205521, 166.65512553167298, 77.73085540983976, 0.0, 118.11379082825961, 28.74306396808696, 90.59501842180565, 108.66228614184887, 96.87660898247876, 32.72613072526663, 93.76759614886451, 111.53346780905949, 80.11206831261617, 37.94240721719452, 65.94984302866442, 52.60592454014743, 140.888850497338, 78.38709489594865, 135.51871826014985, 56.78121947184084, 120.6005962744034, 76.63452340499593, 47.24806612854611, 79.1827263198794, 140.6925808269452, 104.55945423170866, 73.86227544109164, 50.72087114236646, 112.9594166790661, 75.93771016534257, 17.043418236777715, 57.367398369139465, 66.61242170432783, 94.09695666449805, 26.633166264380023, 62.603232584997784, 102.86006042630198, 70.95065429134496, 85.50752994919844, 45.490213075164995, 53.58734194569119, 55.48560263504428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.62735720567542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.77443258242002, 82.75391461245854, 149.75905535069012, 32.94176553358096, 59.75016413778833, 132.43227972661157, 67.95280980318154, 41.729434512229176, 128.45254468243283, 31.490887843836468, 58.842242780932494, 53.709120396063554, 82.65623394017584, 87.0995461495352, 88.27926428051704, 71.49600917552776, 26.970599592838763, 76.9834270878494, 55.26958332021109, 60.96901983711648, 59.292666166026294, 100.46771293083448, 90.64826772554898, 53.70989377569014, 41.21867191663198, 33.14974425271784, 98.42015234598321, 48.747421339598674, 43.00619902741906, 82.01609566227305, 36.05554025263148, 102.25280465280532, 99.3161523204922, 110.01578566052655, 62.04583615798126, 92.2596498013781, 79.24349754518974, 92.23045868895422, 33.77599899572211, 226.9648619800256, 0.0, 50.735671223183786, 54.24769175796975, 0.0, 199.31822082817766, 0.0, 0.0, 0.0, 0.0, 114.97811950920448, 0.0, 0.0, 0.0, 172.9378894127552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 362.74132926294567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.65651536135877, 264.0689330779427, 0.0, 0.0, 102.42353064016963, 0.0, 0.0, 0.0, 126.7966489983335, 60.31602319030501, 50.23388082141289, 47.74999490380937, 0.0, 33.330837340942274, 115.19736770703841, 104.39384579849187, 138.79634389352321, 205.01773598618453, 50.22426973331841, 123.094916405812, 98.39028673905713, 108.91842513025618, 56.38270284116252, 135.0615159778349, 68.20949355435312, 78.11631524029819, 67.13671974554819, 53.86983234187614, 56.5906571834926, 75.97211952139328, 80.12269974057563, 61.62801584191782, 87.62081805018808, 58.30089344202064, 58.77043541574457, 112.23010891227939, 92.3771730685003, 77.27392693462562, 48.670737615579796, 60.71630546072935, 84.31435691843168, 86.89521978163762, 87.45273397301085, 68.92235469244609, 92.01205532756096, 68.68265275843129, 21.439558912169378, 46.198891460562606, 52.89763762419861, 59.49179467452124, 67.7875651965373, 75.29914071440743, 130.8452017609734, 101.43064315699411, 111.48247687391915, 123.25700147480258, 0.0, 239.85094158436317, 0.0, 196.25132341257404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 577.0576158416308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.39952946854949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.78441458516486, 155.03861753518834, 89.77158147094303, 82.35849138975277, 35.41168934483266, 90.54722831583895, 78.59904719535291, 46.68320482280234, 40.29461127364081, 34.75625779122851, 169.107407554225, 39.22529635848413, 109.91437233820625, 104.6823214747146, 99.5625003499524, 73.72918914708765, 50.89304612709884, 69.87293068600079, 58.48829496963017, 75.91843523136914, 64.24880266988013, 64.81901552248317, 113.72809254746753, 70.5516623764586, 75.97306452670428, 50.20661286973154, 74.45717153444905, 47.55361628148176, 58.57767152447191, 74.82213059115146, 31.10730954153201, 78.65700357653544, 63.86159104067712, 52.679163557855944, 112.4295262890605, 24.840095491807535, 55.20424135711698, 87.74270270138439, 86.99282877082442, 161.44831346391013, 48.58016664845033, 135.4018961534745, 93.14474445187078, 34.95773744356466, 37.14626651752572, 93.21752653990798, 50.40334719355437, 59.46073104432909, 0.0, 0.0, 166.89110494996504, 0.0, 0.0, 0.0, 0.0, 152.76213470355145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80.36418707539866, 0.0, 59.115982844708945, 110.47001309849173, 48.66654468786166, 82.0402279040487, 71.97022715549559, 32.298808078438455, 28.020550755365825, 47.73372124398868, 81.49895985604228, 108.32010387680666, 124.06165719875987, 135.45424860545495, 34.644956172371174, 118.10317523237453, 153.38641412453978, 66.97104584991088, 79.14308241173926, 40.59326771923172, 47.774058324550765, 55.29930528513921, 77.9568686682653, 53.602302011703834, 41.63399051194583, 84.44644172246899, 51.29279753286911, 67.87770427001689, 50.50490967982072, 42.01027483296726, 38.47677057897876, 34.2230016582743, 35.290576507463136, 86.77584144311278, 46.79883550136131, 45.13449043250257, 45.09578534363247, 50.93339983017997, 130.4426514602074, 77.65697039130572, 53.40804014486609, 30.798266822530266, 54.83871267508411, 84.33294382106098, 71.78317802105377, 25.755201132944894, 0.0, 34.41083433736867, 251.41412714895938, 51.60834185350436, 110.24577774905612, 0.0, 210.82458741681512, 78.76912712976548, 0.0, 0.0, 118.33587858388069, 241.31555009438472, 132.67625322017088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.80980473410496, 0.0, 0.0, 83.01969278015027, 69.83416509414013, 0.0, 53.686157482914886, 101.7457837008034, 90.07698266578277, 38.99044040070461, 68.67245574668333, 172.06232098326234, 73.41207545209876, 66.02532847720903, 71.36103127995338, 80.01954135191228, 53.47830986298942, 113.5905069575592, 127.87346352542859, 84.44064925144195, 59.711109315759096, 56.26024495452275, 50.123959881760115, 44.28082162873222, 46.832861921745206, 36.64132221732507, 55.79646750533727, 43.16589688023939, 41.18590191096612, 34.40583061304242, 35.593388982513304, 28.994136979007102, 50.79327449748443, 26.685020596188938, 38.30115772117425, 63.08407984052806, 46.152698942373185, 56.90642687688841, 28.11532429563729, 61.362849847125496, 104.40981675534213, 64.45209448839175, 82.65618026941857, 78.64912561045963, 103.35415267725213, 93.59164319483028, 138.92079208117673, 18.36923905904019, 89.87959803988106, 25.915242955561318, 112.01450642659645, 69.31727688697133, 150.92183920246603, 0.0, 0.0, 173.7004826412198, 128.0221343054746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 194.7396827416469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85.48937031491751, 80.09777596841595, 0.0, 0.0, 55.20329701647426, 43.559997482047535, 122.75631612322462, 141.16072165970485, 86.16607217315489, 106.92124299434111, 178.19277340122727, 79.06235671068274, 112.52678419185511, 27.92277899940084, 80.8443270167069, 58.51691281878451, 58.239864680728175, 61.95068146926641, 72.51582161078935, 88.2074607813107, 95.85302531298385, 55.29922788144327, 58.04699411822454, 72.59120919016421, 45.63034827125365, 22.61536272994676, 25.094632269675024, 43.399350345074204, 23.57250960599127, 43.74426238639652, 22.577184134023394, 44.789802556233624, 42.71608798829925, 50.45956464610798, 48.694079418338426, 45.192853357196206, 68.87758907637537, 66.58313716219237, 53.89674114732674, 66.89119436253785, 90.44206290927593, 145.3949783236273, 100.30270542126381, 83.20717793807547, 137.51667447601602, 61.9905341924899, 79.43092960799355, 68.92887955157975, 229.57130157419675, 88.70277694382509, 0.0, 159.04469093536343, 46.87426440116997, 109.49040985642166, 60.92775724404597, 144.21757007107107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.6838664138985, 0.0, 0.0, 0.0, 0.0, 0.0, 72.93275801548862, 0.0, 229.00026585653586, 52.016316548507056, 134.51259055440602, 39.582331412079334, 70.21696073237676, 82.68818743857686, 147.48501428028194, 62.48183227464868, 122.66903634143137, 59.39262095495915, 98.57761824936071, 92.43279493055981, 54.0309611910521, 84.6439171638776, 46.1515178116212, 55.408411095494344, 54.440860029964234, 31.801419223903878, 64.36199665873568, 54.76605930046601, 34.161869533461086, 37.099527036714676, 33.00139233209618, 30.28472142574541, 26.601934992526036, 24.729337735807995, 26.06392246193631, 38.14628026209487, 23.96522891021309, 31.362452912861247, 32.217901103026975, 47.908077299536664, 69.47993474584976, 50.92831048555135, 57.22954151875376, 73.29477253794599, 48.06761629996402, 83.66803015416308, 68.2752634489674, 94.21773543403941, 103.32371187644338, 156.93632732871515, 58.47603930129575, 34.29809305873772, 80.74487113473559, 47.584230941846315, 135.2909790163402, 67.39806745028268, 76.70031527815877, 42.39412797018666, 100.78033483326631, 0.0, 198.85461789378087, 0.0, 0.0, 0.0, 0.0, 0.0, 141.77306848956775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 184.7753388279434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.54755938862762, 0.0, 106.86534480035372, 49.69161095457881, 126.17079123658885, 71.73567235866489, 87.45054358303608, 0.0, 172.05310790975187, 56.29312487197646, 48.978828379995946, 120.56214047023082, 75.26714625381558, 97.36822409702319, 80.42506853685695, 96.50744112226012, 72.96537201117921, 51.334652799278125, 80.18504572079746, 54.342923415618756, 29.204205356735716, 40.08654638876014, 44.684592226824016, 32.83825328542101, 20.12017267626417, 21.503032443311536, 18.96899104186014, 15.842237846539488, 20.88013365809346, 22.788261500060365, 28.02536275200034, 19.842989556429238, 18.676326052310344, 35.4507570946693, 27.902228269828854, 45.03022427738869, 54.19873329771316, 53.190678248836534, 35.19604579957739, 59.14549436482239, 105.91198535116044, 74.0867104657807, 88.02767404781764, 106.5392750304619, 130.04642236100804, 123.44071344680012, 131.56458807807468, 154.6526587469822, 50.860448572903394, 91.73393779839684, 0.0, 0.0, 97.12654107586211, 108.1357449814765, 254.97781248974312, 0.0, 76.5830991398771, 99.03275421671832, 0.0, 0.0, 124.61574490192085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 218.4202204932932, 102.39281487788107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 192.1492114010502, 103.5963933200712, 56.52774746927433, 25.457055059746153, 60.69137325896504, 101.15808592902378, 90.8306276119856, 45.569739221374945, 129.74051992955404, 71.97285175047705, 85.57458477821861, 61.68189629040636, 56.73227458538487, 73.8457917332454, 34.45643631582108, 31.307477995759243, 46.541097744098906, 31.926745372799992, 27.952409369670093, 23.276068198339694, 13.123163538405334, 18.811648392485683, 16.15219466447909, 10.298701209671343, 13.654393680823842, 13.191569556264074, 18.75043929235855, 21.21852025636613, 23.529088576382946, 16.74775245968398, 40.53263637901025, 39.94897013346628, 26.178052724741836, 42.97203980247357, 57.39809486605118, 37.61854993837104, 72.34623399134294, 51.303745489099484, 46.4884353515144, 56.23580178313853, 166.59342027878202, 154.68648261785196, 50.68202204010113, 60.869357480011445, 121.88016445803463, 28.530883195288066, 139.66726434251783, 82.24658644363751, 92.62697901139404, 51.46384410505798, 64.13244505164495, 136.2396014942725, 78.37189876321257, 0.0, 305.18464558833244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.52559076055223, 0.0, 0.0, 118.01417083469367, 0.0, 94.610727572766, 87.27935397187082, 143.43482926770372, 0.0, 0.0, 47.20806201282373, 176.69885132560654, 35.996706227608804, 97.37114948868248, 109.2172143424864, 116.863210886047, 95.78619784987778, 80.91508354997107, 52.71854202706877, 86.310468345841, 87.12428746410087, 48.949049238682385, 74.58834252889372, 40.11261109765839, 63.795091150380145, 36.481354479903146, 36.67344774613592, 38.108322158332236, 22.9115599382618, 18.7534411940693, 25.772197625768428, 12.66322134359813, 15.136735409740954, 14.279361408515584, 10.165845514039564, 7.570833369083759, 9.60642117744691, 11.729850499200241, 15.140738745598126, 11.601170591529113, 18.15052016121831, 15.713740719411202, 33.77216915652698, 34.12405519571115, 30.73812352806019, 59.95932860270445, 45.22211010906793, 48.516211465489974, 70.40557937749189, 95.0026844541638, 50.909328021502894, 131.74291086975725, 57.3003205595073, 128.60132641438761, 79.27276890157836, 76.83392713569427, 185.5673295233945, 104.62642354820505, 159.09711090164905, 0.0, 87.09064737254762, 0.0, 57.31412750374452, 70.06225464542894, 0.0, 0.0, 95.2164915231418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 82.78224452741232, 137.16929378932744, 0.0, 110.70756408301705, 95.25094490821009, 39.77841710615291, 136.3475661844411, 57.18511558306038, 103.093531833182, 193.7870284056478, 55.26299065034186, 45.3904450583596, 81.43045432158262, 67.9208534377207, 41.143808938472525, 50.98860237237986, 70.86199311129393, 51.98935870567064, 37.685381647618485, 37.4991308823228, 40.89790718053626, 40.3082103639045, 26.911354155307535, 16.736284860552754, 17.252290095728856, 11.033222703594058, 6.58066841870488, 7.9999971211157765, 5.418288699350806, 5.362833830118454, 8.048025270251902, 5.508666070608042, 5.940493753122858, 10.623101360308926, 9.459707369713495, 9.070465773036434, 18.409107859013996, 27.47863232372501, 28.961980464851962, 38.52191833303561, 34.74041523144559, 36.65874678032981, 47.5139171739326, 70.36472433418942, 64.00373624853816, 93.7802236415084, 39.04705417499656, 72.69187769235745, 120.42357014954128, 55.125057587958096, 46.10417049246102, 76.34974766496609, 27.676841952335064, 107.23949880577158, 0.0, 48.64222810355162, 53.5518775323989, 0.0, 75.3855805479568, 0.0, 0.0, 100.82970157406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 135.95706562951278, 0.0, 107.84606471179839, 88.46787698810436, 79.68092202186365, 71.42623329061348, 0.0, 0.0, 92.33160081437181, 39.39710565547193, 65.95304380893495, 27.719650339413512, 123.32792438822568, 58.57594300887993, 98.20492578519018, 83.58085459075123, 23.337128283142974, 190.79195832245156, 111.83349413952679, 70.22792367440219, 63.73250817244047, 60.90628579805319, 26.260582153702497, 48.120393506859244, 35.54112786676529, 18.11388095428163, 23.801454665832093, 14.466197304939332, 9.517285879013027, 8.473651754372849, 3.6334115534089393, 5.788857679803861, 3.2617603817865293, 2.141142723420467, 2.786720227709269, 5.0126706886584556, 3.977149886826007, 5.762688121638053, 8.980262570724573, 11.717762835888179, 14.81712827807744, 18.578815568346425, 28.75888753528506, 26.56215702250392, 34.90177315166071, 34.30071788941423, 73.57163766367552, 52.849097515865004, 80.93512702819586, 60.24781131495108, 90.72280481108511, 124.494685926463, 114.90820396149766, 83.21832534893032, 136.99133713217557, 51.79237288693341, 87.8118210428845, 101.81943894916282, 80.85702562713364, 0.0, 56.06809754524636, 0.0, 72.10861205479006, 0.0, 0.0, 0.0, 248.62315889819374, 127.9721698174996, 0.0, 0.0, 0.0, 199.55551456329977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.08285562348024, 0.0, 0.0, 0.0, 90.89084117254866, 82.53203481907374, 67.54103521855356, 63.92866403735849, 50.9062799395014, 44.6208949062901, 0.0, 35.23752332859621, 116.96102750076238, 73.43142970506128, 57.54975626847025, 146.14130726843726, 119.0065174078333, 29.61795973936003, 51.05568347560719, 86.64476682421224, 47.59555037634091, 66.7088001934678, 15.666112551008405, 40.1860629228165, 26.383218769644955, 41.692321582658565, 21.789754624853273, 18.668975841004574, 11.995250050032409, 11.13223858235838, 6.410934430702938, 4.54130405078594, 2.542211352484711, 1.848307604821613, 1.7955393960012074, 1.5983729684166734, 1.8163692677650762, 2.4266729657182915, 3.7437224379552947, 4.486141610523994, 6.57841387310106, 15.11813794009453, 18.623986860857773, 19.95546379754919, 33.846652399431285, 34.59090670835769, 36.11472425697137, 63.1817180677642, 57.61633472958843, 68.27101349631093, 81.39746215729663, 65.70978273154321, 85.30145958975955, 88.18033856913698, 94.24367079552981, 95.7610199517557, 94.35573214146967, 193.9991641894014, 30.7701099207667, 37.36957638921763, 42.089465938279645, 0.0, 0.0, 67.4703135230557, 151.1070655015325, 0.0, 0.0, 0.0, 0.0, 148.70067073697948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.35625778273224, 0.0, 0.0, 0.0, 81.15839925606659, 0.0, 0.0, 49.5054346170472, 89.1545096959832, 150.26262223508488, 29.865149762951617, 54.99977199096137, 129.56791308828784, 149.2802971526409, 61.229587202806385, 138.76142982789517, 50.971713970772754, 50.019101951731045, 72.74041978276092, 84.83745318361484, 57.87365096602439, 57.05710386912156, 22.784125363780014, 23.660797783657287, 31.571967252073687, 11.54731378027221, 13.774263137820547, 8.86013535918713, 5.769896600661059, 4.401277454535642, 2.235118837463988, 1.6480005534170736, 0.9515545509597647, 0.4513458184903597, 0.5990689574435293, 0.6768614133367638, 1.5527946416138696, 2.9364960850124184, 4.687744163520578, 6.43910027503344, 8.493500747742758, 14.262889782861924, 24.430044158442758, 32.34909328690139, 28.66719672626494, 40.10490528091065, 46.18536575108504, 54.93748975076831, 54.37269985626439, 88.66792298305664, 90.16500606931815, 59.62874464780559, 98.29775865953553, 77.1620294547301, 40.19451782441628, 87.22805310342025, 51.813965358170776, 92.40129455765262, 143.93909469408396, 0.0, 50.32330364840139, 120.29906235734902, 67.12460829292995, 83.3944569427634, 0.0, 208.31228946092088, 0.0, 0.0, 0.0, 330.4091600238463, 175.79744123814646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.70486308684676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5003852302134, 123.91979265796228, 38.31753757511929, 126.59809450003189, 0.0, 131.35704898180342, 33.9744195446459, 13.724493132092986, 118.59692160849704, 59.80742441399711, 114.9187459413847, 60.67308359101389, 42.94093583029363, 46.87574994106345, 33.61029885126904, 31.054124554706753, 23.11440072853358, 31.00348249034258, 13.114877149770013, 10.44663378766947, 6.123215165162253, 4.215599324349762, 2.7985639246070004, 1.5269233385256988, 0.7735345079703058, 0.30043927072822574, 0.17005033885673712, 0.2061049584860092, 0.28853741994938364, 0.4801592019494058, 1.040626697450619, 2.423093252607128, 5.083904455016013, 6.6354234449554905, 10.29634957480302, 12.282848447446055, 15.912125040117871, 24.793097325829063, 42.5711613763268, 25.59864010488372, 73.44282693821084, 77.96329150811529, 98.90998226350791, 64.63658493993363, 88.14933060543768, 46.56935847751821, 59.62220281798911, 18.7879385537689, 21.110666254438325, 53.5446640370607, 93.85813962253302, 114.00753089226156, 42.03735401214923, 47.7310064844055, 115.67748140217549, 0.0, 80.51608524663864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.2106390129483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.03566940373678, 0.0, 92.90034693337951, 78.24936837971845, 132.18494618524622, 58.218054088972735, 46.845221980193394, 40.53970883906497, 35.27421616318624, 0.0, 76.59884960340156, 0.0, 73.42442984131605, 42.45582478667888, 108.13217212188135, 35.53134263056385, 119.03038499084407, 73.33716727748173, 65.00486288277051, 50.83741204689097, 61.9491725576898, 45.20052128818956, 43.58626516838483, 17.05976875688613, 20.9735890673001, 13.337858067398342, 6.793783729585614, 3.235101274096022, 1.6805344575046595, 0.8407861318912019, 0.24836892319432854, 0.10016078306399902, 0.02512398291998388, 0.026987136494899637, 0.10880761025759056, 0.3325725434878212, 0.7085579012897424, 2.0262449312690634, 3.697805943118953, 5.502672057844092, 9.807812395357647, 17.317704603941436, 19.24984221572063, 25.4633504983856, 35.35837365290946, 40.66973655306464, 59.479379568618455, 68.14266221942735, 82.68445253938022, 52.54154338001041, 75.11790032785977, 61.0616541981082, 116.2072397852617, 72.56630759105985, 87.5062765554899, 103.56065239121833, 92.34894752141112, 36.556854044158854, 41.92038362689841, 96.53126458811775, 53.63393766361024, 61.765694824087234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.13076786195208, 128.2039008703583, 55.72889423514349, 47.526420761549964, 172.30663419366755, 33.92325853085258, 87.67044381934045, 50.76052769163083, 64.35434090132391, 135.48858158920223, 116.83316459412373, 57.39754896911401, 38.00026017709808, 59.45012380682094, 77.62938056650252, 71.91693589724834, 75.90125039228072, 37.350453805302394, 42.136328464069464, 27.998195140099526, 26.239542466512027, 13.082259616807686, 12.983571273611933, 5.573864796734041, 2.7869799355733784, 1.455417173227919, 0.518643027695543, 0.16107232609364866, 0.025842194690793553, 0.002188117341539604, 0.002044792613609386, 0.03304860853265137, 0.1848561961306062, 0.5638412006988327, 1.283959803029776, 2.8349087799071007, 6.207703130277893, 6.886570033495204, 14.693584430452322, 20.124812227729453, 20.325216615786417, 38.54024386662932, 40.22558174642854, 51.853198227274156, 39.960990138867245, 74.74352848826743, 52.220277115637174, 97.21766426791095, 117.59336670388952, 86.94617950128054, 119.9787904577981, 21.69523265546981, 100.12385503810913, 62.05066451704447, 141.54110556649727, 84.15166139721447, 48.66730554626663, 0.0, 0.0, 0.0, 88.37839569988094, 0.0, 108.65108386082237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 97.22511515047786, 0.0, 76.76201122307192, 0.0, 0.0, 48.996814326562564, 0.0, 70.65337985649758, 91.42732718356974, 54.14694031545642, 102.68708050069098, 53.59965897238124, 71.08469718371131, 72.06122835460899, 104.29925246533824, 81.93143674384976, 36.69415260991937, 43.945970748250076, 54.5823983732621, 39.44466629618073, 22.076789140783553, 35.32441968586843, 20.680329176416247, 12.1246438378513, 9.946654501302874, 6.926109074875256, 3.318194695804697, 1.980620318278768, 0.48671621655423913, 0.13317837961294796, 0.03026026645179651, 0.002709855897200594, 0.0022336281749421034, 0.016961305376532496, 0.19543216422426243, 0.6104382130358033, 1.3058532823742033, 3.532510935095334, 5.893851104878079, 7.933343090961521, 11.064958689995954, 18.770129233526625, 29.913626609016042, 25.64906326476843, 40.778738508147626, 46.1366675119582, 90.81426441498527, 80.42925136152157, 66.9344874504162, 73.79874898020002, 91.2070916401451, 101.7720347932443, 67.34141582399883, 128.8739404159066, 104.53418850194339, 92.11954798137427, 104.51945390155606, 133.06154449746828, 49.444607610769545, 57.72862277316785, 65.87864893897179, 77.31448939043382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 87.54111041638953, 0.0, 0.0, 61.105115675337636, 53.21971398000627, 0.0, 34.7585390438064, 31.927741408779177, 78.70852395327086, 154.45469753006162, 87.80282847495596, 70.52945832271978, 68.9296536442538, 109.12431570811411, 133.89207428387633, 67.12690973857529, 46.803968668841506, 43.726844609495984, 48.96403800613273, 32.067574948031, 27.611169779011842, 20.170390546657632, 14.40116525071324, 9.924276719251477, 6.032512534430186, 4.289926654863538, 1.9450169302538185, 0.9531792674620779, 0.24588386961017383, 0.09530839597437948, 0.04278715607215878, 0.03269367562717054, 0.08097278471325678, 0.3398684488040151, 0.9638410634711951, 2.164821886087108, 3.5939427422673274, 6.592202683426857, 7.762514824738063, 8.838684729582459, 22.057186649484247, 24.849977994296037, 28.61531082237224, 48.11467274911029, 34.30186649545678, 48.69915593535421, 69.8833640093118, 47.28770273324561, 56.60872337798956, 120.67234405642928, 31.016312896034833, 105.13287566820975, 85.21233930520495, 81.4002204656784, 0.0, 0.0, 83.06075106838662, 0.0, 114.91830557501828, 70.99513290473415, 78.68118708443396, 0.0, 0.0, 0.0, 126.7135065864287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 165.13090254423201, 0.0, 0.0, 0.0, 0.0, 0.0, 78.4620850770524, 0.0, 0.0, 148.45137059376304, 0.0, 150.55416620527316, 30.4141810067672, 81.0304552678308, 113.10291357313776, 74.58850461722623, 117.93969623193577, 151.58072380745713, 76.05734894503397, 100.84892706316272, 112.16763380983956, 83.41338042545576, 55.96196016985297, 46.86530415904609, 37.05219175840271, 26.274818822198704, 26.079007212236725, 18.01975552593438, 13.747887637035955, 8.846625212764133, 4.442015202590422, 2.8507221556333113, 1.1956895968032322, 0.4057643488828679, 0.32491415699376275, 0.15279851700626748, 0.20477010202628243, 0.2447095951640769, 0.6164373248308666, 1.5009867205557397, 2.2548106551459126, 4.149743064797714, 8.649045718995724, 9.747747755256274, 14.947579865918014, 24.37531518275056, 33.31759357433862, 48.09703917524668, 45.18366926811374, 69.51018816946771, 55.917224764767894, 84.4924256850878, 132.5878349216076, 59.00574646346526, 57.58238289814116, 56.94308846975442, 129.32625615718982, 65.0711482015661, 179.37456326462254, 127.13594262300367, 109.15788498424325, 83.86598932511015, 49.38919832350677, 117.35988585779711, 64.26235354435683, 79.28136295227546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 106.34664044223032, 0.0, 155.3429162557435, 66.16077901825172, 0.0, 98.57331064605077, 130.7966984024134, 112.17645930218524, 95.92437471426466, 55.36376744748354, 92.40934098810158, 20.052689077953605, 140.5004359455739, 62.770657375614434, 21.15292378331271, 71.1925803493691, 110.36376578639108, 55.6022020379057, 30.85144484666963, 30.773747904826827, 48.453750137813984, 25.66067916720845, 20.726652917059184, 16.43967284095496, 14.328353895816148, 8.083664525466833, 5.673342716147897, 3.8004846278631192, 2.3196003591622407, 1.2529514600002842, 0.7085479710878978, 0.4333477556649128, 0.4137713214616468, 0.6519927757452277, 1.4513440478897848, 2.5004342473606367, 3.6315992638886048, 5.811169727080222, 7.95744403469308, 12.543714707862245, 15.457200597541123, 26.10733499515674, 50.3537835404154, 42.249944411964506, 44.951655526280625, 47.37740271993644, 66.63247387117745, 65.37547053404353, 100.6517577329073, 63.01997070660221, 149.4403929057865, 135.40742010151348, 95.02067170083535, 86.29956703807211, 76.6819202224883, 29.073949566098644, 36.68111333995876, 130.76246080941644, 214.62184004209325, 58.884509011832, 0.0, 78.23102384645291, 0.0, 105.135871148407, 112.15312798717395, 122.48435910019798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.499738079827495, 103.3611036109795, 41.88216264372175, 36.36945459561321, 61.99998865369673, 0.0, 118.67447585136225, 95.39221675722509, 65.35879269939323, 80.60626213264104, 75.08216243921261, 113.71407778836722, 47.9461760854768, 80.66796915960221, 53.53711432205565, 42.194901316978076, 50.0325086888395, 33.6466155347263, 27.640092500687835, 16.170691901900994, 19.434009101884953, 8.854205861492742, 8.023138136499089, 6.066535597185251, 3.011108903607253, 2.513986198463983, 1.6338662045954286, 1.58112457801575, 1.2995414280380064, 2.029642708398941, 2.148467409044827, 3.29900147411493, 5.417917350185477, 5.273636111855336, 9.564104890397719, 18.131774011468902, 19.700918785583944, 19.73365452729478, 27.533482938474393, 42.96303322354737, 54.595224233967706, 81.72247824970084, 57.40135324663781, 104.68363493016176, 54.45797084324, 80.24991680511408, 96.79013904255332, 113.79188374130514, 95.62459147958228, 23.78849871433308, 84.3355856227641, 0.0, 75.27098450412673, 42.007281963395734, 48.807960853149545, 118.91959820646696, 0.0, 0.0, 0.0, 101.93380183467774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.66288916978047, 0.0, 0.0, 0.0, 0.0, 122.288316399974, 0.0, 0.0, 0.0, 0.0, 62.19744051619039, 0.0, 0.0, 74.81985489860753, 67.18488631480395, 60.57644041241005, 74.37537513504387, 39.19783979047241, 84.67018432230152, 120.54695074436998, 68.29454170915987, 75.99474137778228, 58.795455899234106, 63.52426272272516, 36.03169509523802, 51.76556378313666, 35.5638812544104, 38.50100269310522, 20.036021992062636, 35.37854963417371, 18.059010132312814, 15.142403764435233, 10.116405887750897, 9.591561590019605, 6.200127074605774, 3.906247134933527, 4.155207584358734, 4.925477665198109, 3.7627779766696303, 3.7961955302273087, 3.673425355699354, 4.138181205960234, 7.480014078942517, 10.681229376782243, 19.700072732442003, 21.965589644197802, 22.88758684868431, 33.46551683533885, 24.660753543776977, 48.070540602467105, 56.16036560094994, 78.62029925955841, 33.88274000599729, 107.84694334707574, 55.182495140577686, 76.6530112147529, 97.59773963744715, 49.972649289947796, 59.54333585229894, 146.30316631263938, 57.48582934027364, 169.83699828053693, 73.57024885501802, 49.47719256453544, 53.27896969719029, 0.0, 149.64988883125662, 82.58273681147261, 87.73891945841221, 0.0, 0.0, 0.0, 147.70889907396725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.66603617924366, 0.0, 0.0, 0.0, 0.0, 94.29965859688545, 160.94285256263584, 68.17193506897698, 61.72519205173548, 27.289045754152024, 22.746273973757322, 106.94329334840282, 136.50144044954652, 70.42420527626138, 38.972489908895966, 56.75768818209175, 50.50159599572324, 80.40016528378212, 66.84853797170534, 66.37372924246169, 45.90173287143718, 37.447521777789525, 31.336120963949643, 27.182175085822674, 14.131355197162026, 15.675397581586543, 12.86322659867392, 7.834458701094034, 6.7128604653083865, 7.268902895124291, 4.820242764206089, 6.811635309642248, 7.894436373290218, 8.038226795710333, 9.057895349938594, 6.966702147979598, 9.804340131117826, 15.200610593969863, 31.055141680155057, 46.00668455873346, 44.57876129556682, 30.85973017138248, 52.05539724545085, 43.31043316284034, 64.87946301089174, 75.93213768343205, 108.65963569255442, 96.93676738806292, 82.74261896639453, 44.41202570175, 57.22264312841502, 66.18037148037487, 104.28959718822671, 92.47244764282729, 73.02430253181467, 43.05178603132986, 44.895974180288974, 110.35280991348839, 126.89115289707831, 0.0, 253.34903988879452, 91.27342921405878, 216.95345733430682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.11702346997598, 127.38622174734297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.2031340536108, 53.03254565037918, 92.71877035120018, 114.48375727682912, 80.10509873432427, 54.33040272849464, 127.70402876120124, 71.02793200332934, 78.90091369883945, 73.52898764970337, 44.170485959409554, 69.47950622349411, 42.692766107564815, 28.13048755793238, 23.51679739444332, 29.286953325183813, 25.66657798516845, 13.547747631398682, 12.510682000239452, 13.808673031452779, 11.835859283890935, 10.509122210513901, 12.650516793577633, 10.20925346238578, 6.797751086047326, 12.142066412329363, 13.915479808970847, 18.118461597530146, 18.314924001046997, 23.166828778717182, 17.808416061715942, 43.41483899881184, 42.36812922957452, 42.55978130864874, 70.88573952907397, 54.20506396610007, 65.01690208225187, 43.814510734373584, 76.86805054676917, 96.11994861996615, 118.63092456664198, 48.08427951356589, 40.24603981732177, 0.0, 102.45650374105136, 93.62659037934654, 113.70086298197472, 82.18182705659629, 47.23650601442311, 53.91122807302066, 69.69334122057364, 0.0, 89.37548389148934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 129.56806101888438, 0.0, 0.0, 0.0, 77.80560586214766, 66.6379638070748, 56.07039575722456, 53.37599296067835, 95.65604764231175, 151.8428677859999, 31.046957598621113, 142.07877024961908, 47.12083870272552, 142.183470334814, 117.79180080721989, 55.487412110423364, 60.61077882797264, 66.0206017076123, 97.01814084428162, 26.138311110554127, 58.092037303134894, 43.40861924139172, 49.60760211574423, 56.10157539826261, 56.20375789361352, 40.455783165701526, 30.29263421114118, 25.454390402306004, 20.941883897374638, 18.908326232015803, 15.220079329644905, 12.299858694991178, 14.327338164711415, 13.407970614827182, 17.21078704522102, 19.007378266792045, 19.02414153412366, 27.630831257268543, 22.924043339552856, 19.808825271928736, 25.25241451739987, 57.520962677667825, 46.45255398947511, 69.90314097009315, 52.95451372037499, 56.51704865995707, 71.22731407259069, 77.61133142519425, 67.47154726395785, 130.12520830720285, 44.69743561695613, 156.2182982689175, 101.88279601212504, 25.537237042949908, 88.11301470118914, 71.03057782841222, 0.0, 87.10538615603696, 0.0, 112.14542588279437, 202.21504741771145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.26992119514998, 185.56988805830875, 0.0, 47.3374793224532, 80.27708399956043, 72.66782590118964, 65.16175677179172, 79.94049287302998, 110.29153003502898, 76.42275697903507, 48.79733241373634, 66.51041901753102, 162.9608251467697, 91.74463044955799, 64.44694899207187, 76.00583108391007, 72.24474282558965, 59.950989755099044, 69.19220117335792, 45.11815302395109, 45.66449796588131, 22.618072310770756, 37.237219752761895, 43.57840043887901, 23.235040710394838, 15.749019978469928, 23.988648486879832, 19.189829511160085, 29.209931373821217, 22.014004447852972, 32.86978936342206, 30.60598272147311, 31.38948250607206, 28.872926505683576, 34.89504286954417, 43.85679040162389, 30.403332529264503, 37.72755971058786, 80.78888472188, 58.896769090453915, 95.309847445546, 89.50202042513155, 44.49808093884381, 114.07083427862689, 78.43645841063523, 77.1711601705137, 73.70542100425962, 86.891001016393, 78.95337232504342, 28.542882398381835, 71.93270160135602, 43.0741945551523, 0.0, 0.0, 62.988668984134875, 76.84609035304842, 0.0, 89.97297809100571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.79846241170134, 0.0, 94.54695637093621, 174.13911794703614, 0.0, 66.75187853050369, 116.6329630495643, 0.0, 0.0, 0.0, 135.95798222698517, 56.15127371073002, 47.93464099029682, 41.95116797045827, 67.65700030885051, 114.97448905726532, 123.53302429183739, 91.18825483541059, 42.5583736120554, 103.57506703806747, 85.2349814724617, 74.23277036340453, 76.75390909295515, 33.61719670900524, 28.194983378119982, 61.75162886342327, 53.078522741466315, 39.6003895968241, 33.89003662332073, 31.16606213499074, 20.575465461476586, 21.232350994866497, 21.454783935534348, 25.944634714667885, 22.154948299695878, 26.895947251187824, 23.614093310514335, 21.769248460494317, 27.93604742272482, 33.81966829210653, 64.39539043481587, 67.28763488684022, 54.637760399104344, 93.53204849579939, 51.094859714899385, 51.51082440302425, 93.58520475031172, 99.29688363989945, 72.43175396947669, 100.32396373006412, 181.75357987671276, 49.3126887378147, 0.0, 32.75033111153121, 39.241907997292536, 41.31786193312722, 0.0, 0.0, 70.26829323336388, 0.0, 0.0, 93.30670785760336, 103.06890676993122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.29250792030453, 0.0, 245.42253112979915, 66.30419316882791, 62.10287180735781, 105.55394055698852, 94.05317398878927, 0.0, 285.2804119638823, 148.41673769421612, 103.92684152097576, 69.4607479428397, 56.13193249147003, 63.71830385096544, 55.98423967210678, 93.1996155922186, 51.570393982868026, 69.78238173688214, 101.21442660550868, 64.78842764332902, 69.04911666623244, 86.75724213070525, 51.003914589611846, 67.73893551325887, 54.838831259130515, 34.973910724547565, 18.593959517107756, 45.52416433601582, 47.756933360379705, 46.056442652476136, 38.10581474344641, 38.01377859774372, 30.54677623030568, 35.938242346493155, 38.18434152921598, 64.41568615258075, 39.673141602805515, 37.57178297393651, 41.8617891528569, 71.05831140284896, 63.66262867346999, 79.95166641409644, 67.58286538033755, 90.33303660903871, 106.46261542494362, 66.174773811352, 97.30316682423094, 134.72535486409117, 132.8298674696577, 130.9455280480311, 86.03750614677081, 70.3176474217382, 0.0, 0.0, 0.0, 60.10294358488362, 145.39743624864423, 74.50750731778828, 0.0, 0.0, 0.0, 0.0, 146.36738520102156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.11492431718884, 0.0, 0.0, 0.0, 131.0062141734794, 112.93872427935969, 0.0, 55.813498461852326, 154.66941477336, 63.86130733695624, 94.00800676294807, 111.38222032154006, 93.12988450532923, 99.98672400093989, 68.82940687418893, 101.60629316252503, 99.29396069910409, 75.69882394207161, 66.94592275086946, 67.58064869568705, 44.00643024648798, 79.76405543119569, 57.515943233117056, 60.31766752989818, 37.70422799550364, 39.568913091593274, 39.63186052683983, 38.85417804034725, 46.07497241894931, 42.47467470255333, 40.57016504917021, 38.741385064321754, 66.43268168867195, 73.93129404239662, 63.00919313443767, 90.01797851521152, 64.7830682453414, 78.8430970189495, 43.537371430061, 60.34425491059451, 56.706532716627876, 38.60057999752432, 127.84149260711375, 70.81989910278203, 64.42992842429152, 72.90459781004765, 29.712707266493435, 136.15087939795637, 115.28501602728355, 46.1322966299064, 97.66087888174943, 59.542628579354485, 62.2033798875167, 146.41871378643359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.2466212812277, 0.0, 0.0, 0.0, 0.0, 0.0, 93.17596164216152, 0.0, 82.27156922000657, 65.01466274790248, 64.7100336498754, 0.0, 46.24802485685454, 42.919977198601885, 141.99580242785325, 185.9982018311077, 29.543753379693246, 70.64007312442769, 124.39008862922012, 86.88655483800576, 151.9405588685785, 160.07622585750752, 102.48156956986276, 39.06260980361325, 49.93400900885065, 99.04899864150032, 63.99498015971435, 48.5404913509736, 56.14074711136339, 66.92742231019685, 52.04356768884514, 53.1409368119715, 75.13632331089923, 31.064271947727203, 59.0092877497943, 44.04355456070803, 74.84957914603748, 52.963723777930056, 70.94807864819076, 86.05426621516371, 46.59637702441288, 80.67961788897502, 96.00752635651179, 89.31999558622309, 83.9975097361179, 119.90183727435029, 102.21295381095499, 79.52206478252931, 105.41070255383696, 80.71438948277465, 89.03328628463495, 85.08236556963847, 73.43609155737484, 108.73026597075142, 31.061512250223945, 0.0, 0.0, 44.99225996462522, 0.0, 0.0, 71.58823412442527, 79.37181218396405, 87.07540413055804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 512.0933314306071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 78.75431338387749, 77.94508872037031, 128.67692733421234, 55.815953677251386, 0.0, 132.09692700061538, 80.2541313500393, 0.0, 123.66221892218735, 81.08307966645678, 46.26961206458868, 59.115195077592524, 49.74381693026994, 108.63719812263614, 102.95049625466488, 131.44348638568167, 81.59495550171953, 63.43646872098047, 122.13961317515287, 124.86418459812307, 72.0238812674676, 57.84906091781949, 78.48452619640982, 80.37758989234473, 64.20968217190774, 71.18764264435855, 63.73023710023513, 72.14351463077355, 78.18072104389232, 58.421912801890926, 69.22424218261833, 40.68580501842436, 88.0436312536473, 43.95254782412807, 73.23445025925797, 88.02607377291109, 71.38850606124838, 70.85775428818677, 45.39518682501545, 64.64623963542583, 75.388584667622, 35.81583714374515, 163.84842677927236, 23.287376704017305, 137.58420867770985, 0.0, 37.12822490480958, 124.13161220951045, 0.0, 0.0, 0.0, 0.0, 0.0, 160.31031789613752, 179.457126882294, 0.0, 0.0, 0.0, 0.0, 0.0, 178.76870294038906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.05879592720305, 0.0, 0.0, 0.0, 82.34742763458985, 0.0, 124.82355429905995, 111.30804524961806, 98.55083708054153, 44.27165683458167, 80.46025563400516, 33.994869394751504, 120.3409165976771, 75.65307256886219, 94.42272154844225, 85.2479586867108, 175.98934686683094, 135.80846300898332, 81.18654674717315, 62.388448993558555, 76.90387524771157, 55.879972410970765, 68.53673416018222, 45.70296951868455, 72.87774713652195, 68.5897020737445, 82.79647693305742, 42.87694758590477, 42.280679144049294, 114.99337284163276, 55.33028840961062, 73.32281226078958, 47.22657085590412, 69.97968229168922, 125.17937335033297, 22.736618181315475, 73.75492994507402, 54.08789996527999, 92.25088832068884, 130.59432453741613, 73.83896182626569, 84.00432256481744, 157.347923723631, 53.60103773165767, 41.2142362135766, 25.04832258199615, 53.46651268758005, 208.46033631464118, 36.290319887932746, 37.94019916939712, 87.8544838359634, 105.97358465676032, 0.0, 121.84070573519304, 0.0, 75.17146440703182, 0.0, 198.97114889585606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 231.1905498906006, 0.0, 0.0, 0.0, 0.0, 683.1104290005455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 158.88131214721415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.51484722112059, 58.74115983165087, 111.16778896789675, 0.0, 85.2469344643398, 113.62152018470715, 133.60284902892886, 124.7792583852409, 76.0372420610131, 138.8852278478347, 157.68368502191035, 52.87299822755848, 113.56500112979936, 14.98793940218816, 105.80868867675849, 93.47997918124751, 85.12072743423356, 81.18587251569313, 63.307264361432, 52.54660601932014, 65.81231214657296, 92.38569474990565, 97.76911416153756, 44.95990012863325, 13.755944084218244, 82.50701110224563, 99.88803122041615, 23.189621991926906, 51.51331392608493, 89.37731245084157, 87.81114223289839, 55.06812595736979, 119.48237192603445, 68.49504795550592, 73.67173329518178, 33.933358059118675, 129.21251095805056, 62.338638088866, 156.35606537759773, 105.21657509267573, 90.5420009479092, 139.540643048854, 76.99981275166769, 80.26996034619023, 96.28493035816186, 105.95733811885755, 61.08002590048862, 0.0, 0.0, 0.0, 90.75895626310066, 104.80197409978275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.58519043922298, 58.27762736444411, 0.0, 0.0, 171.0686335289834, 0.0, 98.60101134876321, 59.47137764625677, 242.33377298228757, 234.95786783552583, 86.25999853547484, 94.48391553164703, 84.5598307893743, 109.62863135978611, 41.00276516696951, 121.88324525321092, 50.007472028008614, 69.10605698211053, 88.23567206673373, 49.34361478922676, 124.44506833595894, 92.81378123291681, 90.69328854081898, 106.92243279896996, 98.33646555565824, 89.34412733662643, 82.24725604835099, 65.69336511759738, 87.90158327895628, 74.01700009493015, 67.50392587731255, 13.406699107732496, 65.42033947153348, 86.44599331398828, 77.79996021801685, 65.75918629709395, 218.3115147422123, 53.71207526909102, 88.00100714143616, 62.88047865933732, 149.18411545757039, 42.11375211732282, 0.0, 51.96590871632659, 0.0, 70.03981824078882, 73.59292565597748, 0.0, 0.0, 0.0, 0.0, 129.29625908368664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 260.9420620144606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.15384843422237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.10390043533058, 0.0, 0.0, 92.09880168637505, 45.58857743392459, 114.5981400394632, 0.0, 92.82228907655875, 56.6635752039194, 96.85280326705997, 70.48537690625781, 124.58031825136727, 134.70651525632047, 68.5465506934033, 48.02169785601148, 91.06930165428574, 69.7118500880667, 64.6514716509175, 53.34794747513037, 68.41426357428392, 80.38166206481321, 150.33107281934338, 110.70475654151684, 140.7325349762423, 108.06857369249767, 76.18928703724427, 147.36264777481523, 82.03953147636692, 131.56420535925577, 157.19735618329838, 67.27643801703448, 131.35169812681525, 80.24504974093104, 132.06406211964588, 27.240824362706977, 82.35996334216469, 90.66920745807778, 63.237407229306505, 72.21637184700755, 79.45773940829508, 137.09490634427553, 52.92687127000112, 0.0, 0.0, 0.0, 153.7527206300132, 0.0, 93.92552784993069, 0.0, 0.0, 0.0, 0.0, 170.6031228963052, 179.98059548968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.08137013959254, 0.0, 103.39075022194335, 0.0, 0.0, 80.10599482884436, 140.7244997531779, 0.0, 0.0, 102.0575411989843, 0.0, 38.73384565915955, 77.20277838149462, 34.5612800604505, 190.7282897274312, 26.785147614386283, 75.52235323641531, 95.9956505518795, 45.42527117503178, 62.58843127894498, 75.67299379287255, 36.19423419217398, 99.45839962173164, 32.17147277625163, 88.06736467756832, 45.955384972999006, 43.23741981287666, 60.411927576998714, 41.699867861355514, 90.18547031514427, 71.93728454822786, 77.42798048445547, 93.2675674955101, 35.00179390169231, 70.16606737584192, 208.39178671641992, 39.45601430516197, 90.24954195253352, 74.64636613460631, 106.37457197509997, 85.68963987707136, 92.77619848169202, 249.48012358676192, 76.35330254727698, 83.73939833818973, 232.2313388575694, 103.22817214435561, 59.55165795411456, 0.0, 0.0, 0.0, 164.7642435034516, 0.0, 0.0, 0.0, 119.82411880880163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.01463122836805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.29064978326578, 74.16008148234535, 73.7015434113958, 0.0, 0.0, 53.85910452409994, 49.84798611550507, 0.0, 83.53808111256018, 100.97371501680487, 0.0, 96.1589800869812, 108.63300457513142, 123.87291380370016, 47.29752895845898, 0.0, 84.49466462002061, 139.6812667170638, 97.12593002461011, 38.73040618894969, 54.74741110962377, 69.63030073509462, 91.08778145519751, 34.76743612008514, 36.300569449882786, 57.685807266855534, 146.0475038747914, 142.09453660451652, 125.33226203124079, 84.36404534903022, 22.104642040055733, 73.7577991325516, 126.5718006100485, 134.224937015389, 88.89451488424972, 135.05856009835006, 33.7283873307039, 38.84576856024864, 43.36419004783761, 45.05875829071597, 0.0, 56.99512699168794, 128.50881602729868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74.2877297617897, 0.0, 0.0, 0.0, 54.403843232422915, 243.2690818920171, 138.30365863863713, 38.59328412357248, 73.32909977223517, 136.74819901230904, 67.07488349473488, 93.47379712347535, 118.28319076381071, 25.720401336242134, 101.83415934160794, 48.686753836609846, 47.339297309655244, 159.35505338418625, 137.77298237865645, 106.9039172547111, 88.8034686275138, 84.96455012923492, 150.32048451666702, 110.1141674738972, 110.313591266667, 185.1449442182747, 47.85964681007849, 101.5790662661107, 237.61650267871659, 30.48175435139965, 62.01610039180875, 67.75921596742025, 72.46761552667712, 113.91718876851789, 41.12890134621962, 91.77774267719391, 105.36628165187668, 0.0, 0.0, 0.0, 0.0, 77.83708766696435, 0.0, 0.0, 0.0, 0.0, 123.04486660962016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.486301125909286, 0.0, 0.0, 93.24634146290691, 128.9535253516135, 81.26532883548172, 116.30724581995392, 0.0, 68.18077817282685, 126.90340672207775, 60.22921550572854, 109.50351675160786, 84.71553538309539, 0.0, 80.58919487053761, 127.44860204044105, 55.18322828428914, 51.065714804584644, 50.8025564280643, 83.49727795223441, 160.91095854773135, 196.45324995117653, 136.16424935196937, 87.57714495025465, 91.76113722201558, 102.1150606691518, 36.58600255695933, 37.89988133445884, 38.13565951334403, 39.90871228764865, 142.1208831387791, 46.454552297626236, 104.68693063469871, 0.0, 0.0, 0.0, 0.0, 170.61631177224984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.60324618940743, 0.0, 60.28286012654514, 51.12807196972976, 0.0, 0.0, 87.30750447139191, 83.53476073210388, 77.50755210744134, 151.32897767175032, 37.72679295632877, 174.68603108913544, 65.61849298709727, 34.261202251719524, 30.46379830188696, 157.68616540250412, 57.53503588893232, 59.60908905047099, 87.84881554436737, 93.81274360768924, 96.47174184441221, 95.70668818410887, 33.47471627076902, 0.0, 36.83709944965444, 0.0, 208.4391402212578, 0.0, 96.08038907068145, 95.84536474603429, 0.0, 56.347535987731135, 60.45787000120274, 70.98425823274607, 0.0, 166.54540263778136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.19762735551632, 0.0, 160.67064124828903, 0.0, 0.0, 128.21207616359473, 56.12684927553137, 0.0, 0.0, 0.0, 46.64036208646203, 39.69364034480131, 0.0, 80.11515071454762, 77.752095124422, 107.08976633370443, 112.42073751873652, 34.84549058217706, 0.0, 34.909954131444884, 37.43630882520503, 37.402838232190845, 151.7040467592389, 76.27594591846281, 233.40667027881295, 40.15760737845034, 43.67814424416987, 45.02004822404974, 188.9812117385274, 0.0, 111.33833173468375, 119.78091756097439, 62.6077846589605, 0.0, 0.0, 74.43647339798423, 80.81103617252404, 0.0, 0.0, 0.0, 218.9006512469074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.91709737979488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 267.0827595828322, 123.09761773619081, 54.026978100959994, 0.0, 156.35864950242456, 50.78637702834017, 47.75542979220776, 0.0, 45.60957199748818, 45.692490724417176, 0.0, 211.22654407592643, 88.40621150787058, 0.0, 0.0, 44.00434648485665, 40.87485513916764, 44.01498493719346, 49.26439551836856, 0.0, 51.093452176737884, 0.0, 0.0, 57.140199885330674, 58.541144846404364, 0.0, 69.54912506006153, 0.0, 154.9246275229101, 81.26963074243723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 98.14017904379722, 0.0, 0.0, 0.0, 0.0, 67.6075345498144, 61.736080841844, 127.93372734290352, 112.24331004369068, 170.0041465753198, 110.65881669397615, 103.15935836196724, 0.0, 103.04727671581716, 52.92694113644016, 50.28847409567516, 147.50409933791488, 140.8563313645806, 195.63870657704305, 0.0, 54.05276784469715, 0.0, 0.0, 0.0, 109.9667368316586, 124.45597328943947, 0.0, 61.934889206692205, 0.0, 148.5048778894491, 0.0, 167.7435873256984, 92.24307788789461, 0.0, 0.0, 0.0, 120.86245095783273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 397.12809538505957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05601205673338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.35429267800549, 0.0, 82.90190061418201, 81.33847239577696, 0.0, 69.43859771683876, 0.0, 129.39124779363613, 64.75109111334433, 126.42279016246556, 0.0, 0.0, 233.95407267939012, 0.0, 0.0, 0.0, 0.0, 0.0, 59.84310425505958, 59.84065841208439, 125.08567421506623, 0.0, 195.5880517429354, 71.13536130399874, 0.0, 0.0, 0.0, 0.0, 84.51593539149934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.76038617923513, 0.0, 82.71198893216418, 82.06191952585996, 81.60842868724205, 0.0, 140.3924449753012, 0.0, 67.98326720988702, 68.32980104809873, 0.0, 70.20799055325578, 62.01348391612866, 62.244525339673835, 0.0, 0.0, 68.70942166895242, 0.0, 0.0, 70.97682849349265, 0.0, 0.0, 81.10784212893785, 247.15993678519104, 87.12127320492301, 95.4479413566035, 96.35252079818447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.50348543251386, 0.0, 147.93500659055977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.74945056644269, 94.85122402019783, 0.0, 84.00798866132908, 0.0, 81.76385624578649, 0.0, 0.0, 0.0, 0.0, 0.0, 155.16186713215507, 80.33187480399664, 226.3419384830923, 0.0, 0.0, 0.0, 0.0, 0.0, 90.13003224827351, 176.79476806368672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.17047495594964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.56390603764018, 85.97334502298109, 96.88124774630373, 0.0, 89.5914840478297, 0.0, 0.0, 81.58592670784444, 82.84269248095897, 92.74027061018151, 83.4826326258558, 0.0, 96.06886574058558, 0.0, 0.0, 0.0, 0.0, 109.75495379446856, 108.52134313501466, 0.0, 0.0, 0.0, 0.0, 140.24718370963996, 148.32324844178774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 387.50512916948225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.59483207077288, 0.0, 106.20380127945195, 97.38895365414201, 0.0, 0.0, 99.09084417370245, 0.0, 100.77789530740216, 105.33433240005462, 0.0, 216.79587265365873, 0.0, 0.0, 0.0, 122.06789004342444, 121.77459864351154, 0.0, 135.5345364839824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 151.6110544713247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 119.05818037935114, 118.07350944638264, 0.0, 0.0, 0.0, 108.37126414832127, 0.0, 0.0, 0.0, 0.0, 0.0, 109.74060882763929, 0.0, 0.0, 0.0, 0.0, 134.5267467115779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05087260171794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.95676534354004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.1069686450285, 267.18950905385543, 0.0, 0.0, 138.13252010013355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 193.01115132188883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.8557517163636, 0.0, 0.0, 0.0, 0.0, 0.0, 148.98876853013948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.0393581621168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 168.2824924290136, 0.0, 0.0, 155.1789114058798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 205.17556857409946, 0.0, 0.0, 0.0, 174.66503048058067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.4077710446529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.04902464387305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 407.93320258975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
this.fSumw2.fArray[] elements >= 0.0
this.fOption has only one value
this.fOption.toString == ""
this.fFunctions has only one value
this.fFunctions.name has only one value
this.fFunctions.name.toString == ""
this.fFunctions.fSize == 0
this.fFunctions.list has only one value
this.fFunctions.list.getClass().getName() == java.util.ArrayList.class
this.fFunctions.fUniqueID == 0
this.fFunctions.fBits == 50331648
this.fBufferSize == 0
this.fBuffer == null
this.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
this.name has only one value
this.name.toString == "test5"
this.title.toString one of { "", "Profile created from Java" }
this.fUniqueID == 0
this.fBits == 50331648
size(this.fBinEntries.fArray[]) == 10404
size(hep.io.root.output.classes.hist.EErrorType.$VALUES[]) == 4
size(this.fBinSumw2.fArray[]) == 10404
size(this.array.fArray[]) == 10404
size(this.fSumw2.fArray[]) == 10404
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.TProfile2D(java.lang.String, int, double, double, int, double, double, double[], double[], double[], double[]):::ENTER
arg0 has only one value
arg0.toString == "test5"
arg1 == 100
arg2 == -5.0
arg3 == 5.0
arg4 == 100
arg5 == -5.0
arg6 == 5.0
arg7 has only one value
arg7[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 229.55365320525362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.35743590965694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 278.2870161068039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 275.98581915449836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 159.93124636748806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.40159409347527, 0.0, 0.0, 158.50386259492845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 123.02608699260242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 379.9512514614612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.8529894663116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 110.04637700272667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.39633381618849, 0.0, 0.0, 0.0, 0.0, 145.81075958281144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.47405200490914, 0.0, 0.0, 105.68982488289707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.85176446237296, 108.65678032834029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.3640639790128, 0.0, 0.0, 270.644012116525, 0.0, 0.0, 0.0, 113.45972820740744, 0.0, 208.20006007377322, 0.0, 0.0, 0.0, 0.0, 0.0, 91.64394450277584, 0.0, 90.75644906101401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.64048704242822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.4483025707086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 207.85708972727898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 187.07098957996038, 0.0, 0.0, 0.0, 0.0, 0.0, 149.58048532825316, 75.56510013741186, 78.28588728281352, 0.0, 155.97401517376358, 0.0, 0.0, 0.0, 162.63512946738751, 0.0, 0.0, 82.56083755949028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.00861538539576, 260.06646661993227, 0.0, 0.0, 0.0, 0.0, 93.71807826389512, 0.0, 0.0, 76.44346803824827, 0.0, 0.0, 76.01074028910294, 68.28834594179257, 0.0, 63.66077688414116, 63.71105354807626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.04618328857103, 0.0, 0.0, 0.0, 0.0, 87.90937430152617, 0.0, 97.79613557027211, 0.0, 111.57562061881144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.10881886948316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.85866518537023, 0.0, 0.0, 0.0, 63.824335079404776, 0.0, 59.00659728176397, 115.53402979440975, 115.55517185176194, 0.0, 115.23884099682374, 119.77667754706664, 60.3282316731778, 0.0, 62.37656520285095, 64.86484908774327, 0.0, 0.0, 0.0, 79.45592090879668, 82.41023253285763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.47705045808848, 74.17959237459432, 0.0, 0.0, 69.25081101538709, 65.10129723940173, 63.76804228106964, 120.4490199928676, 171.80705201293097, 105.71858655582817, 48.96610869644089, 53.452686392419075, 50.72461251473717, 0.0, 52.29608645083905, 102.69323313095512, 49.2515325396414, 0.0, 0.0, 51.6406238144346, 0.0, 0.0, 110.33691259456103, 56.120709769063936, 61.64844314131909, 135.87817200723055, 0.0, 73.34769837257272, 0.0, 81.57385100488682, 0.0, 92.3265575071039, 0.0, 111.59657392195705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 176.2306185222046, 0.0, 75.77576465203073, 73.02392866507496, 125.34753540539907, 0.0, 55.201097787482226, 0.0, 49.712700295114836, 51.87828635748076, 189.9188299387942, 137.29967933865916, 172.68959924000762, 128.7105370335912, 123.57497549527332, 43.289292601993196, 85.74863101214106, 128.2884649760985, 43.14512055797298, 0.0, 43.85913889574651, 46.3035876840471, 49.22634420929598, 0.0, 45.798909762920076, 51.39857919654231, 54.32492456901119, 0.0, 0.0, 60.37712683167125, 0.0, 77.41270951889318, 150.69582940219595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.74362093328763, 0.0, 0.0, 67.55322034461781, 0.0, 61.19229043499082, 53.191645308430076, 0.0, 96.98427110923504, 147.03782618453803, 0.0, 42.38341510222756, 85.4477382483048, 75.21553969308582, 36.61728655559116, 35.858026034671035, 74.45852553250445, 70.21190963756641, 33.63725682546873, 74.04502528238974, 39.453637274699275, 107.04652418225399, 35.17590388437419, 79.41872262872698, 79.02667690923093, 127.00124780634732, 176.51031822846772, 41.57425413208977, 96.52842669913667, 0.0, 55.057133935416985, 55.61852778364321, 0.0, 130.9154406692775, 0.0, 0.0, 84.36327272356431, 0.0, 96.45100737995433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.0126056013084, 0.0, 74.3015630623963, 0.0, 0.0, 59.35589814166099, 0.0, 0.0, 45.89408050353946, 132.18317493141595, 123.28945932825562, 234.01372285225375, 76.62397503258039, 0.0, 69.96663024923015, 96.92140756515711, 32.466947388369874, 30.57982408070632, 60.74457292352491, 31.744206478709064, 122.75628696414273, 92.17734442313854, 95.28616775186262, 0.0, 31.905076966541838, 65.43436410214917, 182.46342212544266, 35.424441883694044, 117.90101609862276, 82.32898086297504, 89.88628610132244, 44.54035201373501, 0.0, 108.03446299180003, 114.32000640021437, 61.86682634375864, 66.79140297461221, 0.0, 0.0, 86.5752209573222, 190.12325528539316, 94.32931705182773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.87248416012525, 65.07478112999974, 54.99471497369431, 50.978635866945574, 94.58418983723604, 85.99382715728291, 0.0, 112.75335773254878, 136.34538642060053, 0.0, 93.03225010477875, 32.085600431519254, 88.77034642125724, 56.32606760819358, 136.9408103531372, 104.41546640532853, 105.80343746776937, 27.735703674465835, 0.0, 78.75335367234446, 203.59559208385315, 28.2146991254042, 167.1522613503965, 88.8156285322849, 152.6835607242328, 0.0, 63.97931334403411, 0.0, 115.37216076862751, 121.5845359941977, 43.28715742160725, 0.0, 53.10372098573565, 53.19220561176862, 0.0, 0.0, 0.0, 0.0, 0.0, 96.44579757444714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.80782780566676, 0.0, 0.0, 69.7512878425508, 124.12108489648884, 63.679274907683336, 0.0, 0.0, 92.94973182502156, 41.61776156924985, 35.62411184936818, 105.16750160561594, 129.94489908403574, 58.68403337313864, 84.8657691564491, 0.0, 98.43220219506296, 72.64267733262403, 139.015433494785, 131.22124115080598, 66.65775632713822, 64.23449704357427, 89.17887507824922, 61.134264974869225, 44.62997349340849, 112.48339836041335, 141.6775693798691, 22.737266623408793, 68.63472123850593, 154.23502969174302, 50.404125972395164, 52.618632921346816, 0.0, 64.685406014828, 0.0, 41.297476912632625, 0.0, 42.18620768587905, 0.0, 0.0, 59.899876671401216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.81164474904509, 99.40524480844729, 0.0, 0.0, 159.0101606142522, 71.96500722840818, 129.39821795321762, 58.7933844188441, 106.21265492965313, 95.7364514492786, 40.8995877993734, 76.40616800140606, 0.0, 64.01633002358021, 0.0, 57.362625865009775, 130.11907493166584, 122.94359890195842, 94.64604508067772, 87.10985077994724, 21.028217936885696, 96.52516776782635, 149.50754281405082, 38.12639538727588, 85.46530041909091, 176.31270351985444, 105.17366012736395, 160.11887052252143, 51.298863431768964, 128.50448591706393, 20.916094014620953, 59.4519018667372, 126.90434246977415, 87.10745009899763, 100.07647461335591, 74.97036213580513, 114.38846319775851, 29.78290785343491, 96.07148566746852, 36.08159288059311, 0.0, 43.52844282818297, 44.39331169679729, 52.03833726879191, 116.76010709635003, 125.29907848375267, 0.0, 0.0, 87.42458647292077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155.8282001291064, 144.98053542150282, 125.00278009130808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.25501672925883, 99.83866533472178, 0.0, 0.0, 79.68234546973652, 142.75009370896012, 33.03512067722765, 0.0, 80.20521201039912, 46.2048255320734, 114.59201152233068, 60.98074762107923, 111.19919635869869, 53.26758921511582, 68.61461961501757, 66.4603250671317, 46.0793406699626, 75.24146765331604, 15.471499277186755, 104.1161939926075, 29.7807907287141, 118.75419442383092, 28.393979291626966, 107.8417388647864, 62.51829677438094, 104.6764930214776, 74.19520060606939, 72.00417563211158, 119.9713539162593, 22.696695372506632, 70.46254063594819, 53.41399273864517, 140.54116464748225, 96.63038338795033, 69.71702716629295, 73.1172562104637, 124.77184335739588, 193.88512620081087, 101.70311621872463, 53.39796779549814, 0.0, 0.0, 84.07662820797185, 0.0, 91.31706365344655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 163.39762758554716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.49799027815374, 0.0, 0.0, 55.43877412544088, 0.0, 0.0, 71.91418574768119, 137.39343732549455, 0.0, 108.99663737446025, 120.95542077001913, 20.70726277863156, 64.54600329583195, 58.23960922620472, 99.37772723678185, 34.78526281340007, 73.96065745003702, 26.32602193523804, 50.548979609419106, 111.78453557300409, 70.27147749838196, 105.44640641279287, 93.47584642407195, 130.421170185466, 49.16918279048018, 45.95905922752406, 101.27639133469992, 119.15552677638182, 29.56032176047979, 123.85111927780173, 142.59001001574987, 50.08976763177327, 72.99809824144418, 62.71248212374534, 66.56520259115752, 49.23758110854864, 49.85727985853512, 0.0, 101.74683440365928, 114.78636114083335, 0.0, 44.42398055881819, 214.2834312475526, 0.0, 61.83518279805181, 67.32082283981421, 0.0, 92.30049676614446, 93.85465338459962, 110.62956778365023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.327425085282, 0.0, 0.0, 0.0, 58.982339103595656, 0.0, 46.50139634205521, 166.65512553167298, 77.73085540983976, 0.0, 118.11379082825961, 28.74306396808696, 90.59501842180565, 108.66228614184887, 96.87660898247876, 32.72613072526663, 93.76759614886451, 111.53346780905949, 80.11206831261617, 37.94240721719452, 65.94984302866442, 52.60592454014743, 140.888850497338, 78.38709489594865, 135.51871826014985, 56.78121947184084, 120.6005962744034, 76.63452340499593, 47.24806612854611, 79.1827263198794, 140.6925808269452, 104.55945423170866, 73.86227544109164, 50.72087114236646, 112.9594166790661, 75.93771016534257, 17.043418236777715, 57.367398369139465, 66.61242170432783, 94.09695666449805, 26.633166264380023, 62.603232584997784, 102.86006042630198, 70.95065429134496, 85.50752994919844, 45.490213075164995, 53.58734194569119, 55.48560263504428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.62735720567542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.77443258242002, 82.75391461245854, 149.75905535069012, 32.94176553358096, 59.75016413778833, 132.43227972661157, 67.95280980318154, 41.729434512229176, 128.45254468243283, 31.490887843836468, 58.842242780932494, 53.709120396063554, 82.65623394017584, 87.0995461495352, 88.27926428051704, 71.49600917552776, 26.970599592838763, 76.9834270878494, 55.26958332021109, 60.96901983711648, 59.292666166026294, 100.46771293083448, 90.64826772554898, 53.70989377569014, 41.21867191663198, 33.14974425271784, 98.42015234598321, 48.747421339598674, 43.00619902741906, 82.01609566227305, 36.05554025263148, 102.25280465280532, 99.3161523204922, 110.01578566052655, 62.04583615798126, 92.2596498013781, 79.24349754518974, 92.23045868895422, 33.77599899572211, 226.9648619800256, 0.0, 50.735671223183786, 54.24769175796975, 0.0, 199.31822082817766, 0.0, 0.0, 0.0, 0.0, 114.97811950920448, 0.0, 0.0, 0.0, 172.9378894127552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 362.74132926294567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.65651536135877, 264.0689330779427, 0.0, 0.0, 102.42353064016963, 0.0, 0.0, 0.0, 126.7966489983335, 60.31602319030501, 50.23388082141289, 47.74999490380937, 0.0, 33.330837340942274, 115.19736770703841, 104.39384579849187, 138.79634389352321, 205.01773598618453, 50.22426973331841, 123.094916405812, 98.39028673905713, 108.91842513025618, 56.38270284116252, 135.0615159778349, 68.20949355435312, 78.11631524029819, 67.13671974554819, 53.86983234187614, 56.5906571834926, 75.97211952139328, 80.12269974057563, 61.62801584191782, 87.62081805018808, 58.30089344202064, 58.77043541574457, 112.23010891227939, 92.3771730685003, 77.27392693462562, 48.670737615579796, 60.71630546072935, 84.31435691843168, 86.89521978163762, 87.45273397301085, 68.92235469244609, 92.01205532756096, 68.68265275843129, 21.439558912169378, 46.198891460562606, 52.89763762419861, 59.49179467452124, 67.7875651965373, 75.29914071440743, 130.8452017609734, 101.43064315699411, 111.48247687391915, 123.25700147480258, 0.0, 239.85094158436317, 0.0, 196.25132341257404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 577.0576158416308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.39952946854949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.78441458516486, 155.03861753518834, 89.77158147094303, 82.35849138975277, 35.41168934483266, 90.54722831583895, 78.59904719535291, 46.68320482280234, 40.29461127364081, 34.75625779122851, 169.107407554225, 39.22529635848413, 109.91437233820625, 104.6823214747146, 99.5625003499524, 73.72918914708765, 50.89304612709884, 69.87293068600079, 58.48829496963017, 75.91843523136914, 64.24880266988013, 64.81901552248317, 113.72809254746753, 70.5516623764586, 75.97306452670428, 50.20661286973154, 74.45717153444905, 47.55361628148176, 58.57767152447191, 74.82213059115146, 31.10730954153201, 78.65700357653544, 63.86159104067712, 52.679163557855944, 112.4295262890605, 24.840095491807535, 55.20424135711698, 87.74270270138439, 86.99282877082442, 161.44831346391013, 48.58016664845033, 135.4018961534745, 93.14474445187078, 34.95773744356466, 37.14626651752572, 93.21752653990798, 50.40334719355437, 59.46073104432909, 0.0, 0.0, 166.89110494996504, 0.0, 0.0, 0.0, 0.0, 152.76213470355145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80.36418707539866, 0.0, 59.115982844708945, 110.47001309849173, 48.66654468786166, 82.0402279040487, 71.97022715549559, 32.298808078438455, 28.020550755365825, 47.73372124398868, 81.49895985604228, 108.32010387680666, 124.06165719875987, 135.45424860545495, 34.644956172371174, 118.10317523237453, 153.38641412453978, 66.97104584991088, 79.14308241173926, 40.59326771923172, 47.774058324550765, 55.29930528513921, 77.9568686682653, 53.602302011703834, 41.63399051194583, 84.44644172246899, 51.29279753286911, 67.87770427001689, 50.50490967982072, 42.01027483296726, 38.47677057897876, 34.2230016582743, 35.290576507463136, 86.77584144311278, 46.79883550136131, 45.13449043250257, 45.09578534363247, 50.93339983017997, 130.4426514602074, 77.65697039130572, 53.40804014486609, 30.798266822530266, 54.83871267508411, 84.33294382106098, 71.78317802105377, 25.755201132944894, 0.0, 34.41083433736867, 251.41412714895938, 51.60834185350436, 110.24577774905612, 0.0, 210.82458741681512, 78.76912712976548, 0.0, 0.0, 118.33587858388069, 241.31555009438472, 132.67625322017088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.80980473410496, 0.0, 0.0, 83.01969278015027, 69.83416509414013, 0.0, 53.686157482914886, 101.7457837008034, 90.07698266578277, 38.99044040070461, 68.67245574668333, 172.06232098326234, 73.41207545209876, 66.02532847720903, 71.36103127995338, 80.01954135191228, 53.47830986298942, 113.5905069575592, 127.87346352542859, 84.44064925144195, 59.711109315759096, 56.26024495452275, 50.123959881760115, 44.28082162873222, 46.832861921745206, 36.64132221732507, 55.79646750533727, 43.16589688023939, 41.18590191096612, 34.40583061304242, 35.593388982513304, 28.994136979007102, 50.79327449748443, 26.685020596188938, 38.30115772117425, 63.08407984052806, 46.152698942373185, 56.90642687688841, 28.11532429563729, 61.362849847125496, 104.40981675534213, 64.45209448839175, 82.65618026941857, 78.64912561045963, 103.35415267725213, 93.59164319483028, 138.92079208117673, 18.36923905904019, 89.87959803988106, 25.915242955561318, 112.01450642659645, 69.31727688697133, 150.92183920246603, 0.0, 0.0, 173.7004826412198, 128.0221343054746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 194.7396827416469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85.48937031491751, 80.09777596841595, 0.0, 0.0, 55.20329701647426, 43.559997482047535, 122.75631612322462, 141.16072165970485, 86.16607217315489, 106.92124299434111, 178.19277340122727, 79.06235671068274, 112.52678419185511, 27.92277899940084, 80.8443270167069, 58.51691281878451, 58.239864680728175, 61.95068146926641, 72.51582161078935, 88.2074607813107, 95.85302531298385, 55.29922788144327, 58.04699411822454, 72.59120919016421, 45.63034827125365, 22.61536272994676, 25.094632269675024, 43.399350345074204, 23.57250960599127, 43.74426238639652, 22.577184134023394, 44.789802556233624, 42.71608798829925, 50.45956464610798, 48.694079418338426, 45.192853357196206, 68.87758907637537, 66.58313716219237, 53.89674114732674, 66.89119436253785, 90.44206290927593, 145.3949783236273, 100.30270542126381, 83.20717793807547, 137.51667447601602, 61.9905341924899, 79.43092960799355, 68.92887955157975, 229.57130157419675, 88.70277694382509, 0.0, 159.04469093536343, 46.87426440116997, 109.49040985642166, 60.92775724404597, 144.21757007107107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.6838664138985, 0.0, 0.0, 0.0, 0.0, 0.0, 72.93275801548862, 0.0, 229.00026585653586, 52.016316548507056, 134.51259055440602, 39.582331412079334, 70.21696073237676, 82.68818743857686, 147.48501428028194, 62.48183227464868, 122.66903634143137, 59.39262095495915, 98.57761824936071, 92.43279493055981, 54.0309611910521, 84.6439171638776, 46.1515178116212, 55.408411095494344, 54.440860029964234, 31.801419223903878, 64.36199665873568, 54.76605930046601, 34.161869533461086, 37.099527036714676, 33.00139233209618, 30.28472142574541, 26.601934992526036, 24.729337735807995, 26.06392246193631, 38.14628026209487, 23.96522891021309, 31.362452912861247, 32.217901103026975, 47.908077299536664, 69.47993474584976, 50.92831048555135, 57.22954151875376, 73.29477253794599, 48.06761629996402, 83.66803015416308, 68.2752634489674, 94.21773543403941, 103.32371187644338, 156.93632732871515, 58.47603930129575, 34.29809305873772, 80.74487113473559, 47.584230941846315, 135.2909790163402, 67.39806745028268, 76.70031527815877, 42.39412797018666, 100.78033483326631, 0.0, 198.85461789378087, 0.0, 0.0, 0.0, 0.0, 0.0, 141.77306848956775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 184.7753388279434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.54755938862762, 0.0, 106.86534480035372, 49.69161095457881, 126.17079123658885, 71.73567235866489, 87.45054358303608, 0.0, 172.05310790975187, 56.29312487197646, 48.978828379995946, 120.56214047023082, 75.26714625381558, 97.36822409702319, 80.42506853685695, 96.50744112226012, 72.96537201117921, 51.334652799278125, 80.18504572079746, 54.342923415618756, 29.204205356735716, 40.08654638876014, 44.684592226824016, 32.83825328542101, 20.12017267626417, 21.503032443311536, 18.96899104186014, 15.842237846539488, 20.88013365809346, 22.788261500060365, 28.02536275200034, 19.842989556429238, 18.676326052310344, 35.4507570946693, 27.902228269828854, 45.03022427738869, 54.19873329771316, 53.190678248836534, 35.19604579957739, 59.14549436482239, 105.91198535116044, 74.0867104657807, 88.02767404781764, 106.5392750304619, 130.04642236100804, 123.44071344680012, 131.56458807807468, 154.6526587469822, 50.860448572903394, 91.73393779839684, 0.0, 0.0, 97.12654107586211, 108.1357449814765, 254.97781248974312, 0.0, 76.5830991398771, 99.03275421671832, 0.0, 0.0, 124.61574490192085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 218.4202204932932, 102.39281487788107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 192.1492114010502, 103.5963933200712, 56.52774746927433, 25.457055059746153, 60.69137325896504, 101.15808592902378, 90.8306276119856, 45.569739221374945, 129.74051992955404, 71.97285175047705, 85.57458477821861, 61.68189629040636, 56.73227458538487, 73.8457917332454, 34.45643631582108, 31.307477995759243, 46.541097744098906, 31.926745372799992, 27.952409369670093, 23.276068198339694, 13.123163538405334, 18.811648392485683, 16.15219466447909, 10.298701209671343, 13.654393680823842, 13.191569556264074, 18.75043929235855, 21.21852025636613, 23.529088576382946, 16.74775245968398, 40.53263637901025, 39.94897013346628, 26.178052724741836, 42.97203980247357, 57.39809486605118, 37.61854993837104, 72.34623399134294, 51.303745489099484, 46.4884353515144, 56.23580178313853, 166.59342027878202, 154.68648261785196, 50.68202204010113, 60.869357480011445, 121.88016445803463, 28.530883195288066, 139.66726434251783, 82.24658644363751, 92.62697901139404, 51.46384410505798, 64.13244505164495, 136.2396014942725, 78.37189876321257, 0.0, 305.18464558833244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.52559076055223, 0.0, 0.0, 118.01417083469367, 0.0, 94.610727572766, 87.27935397187082, 143.43482926770372, 0.0, 0.0, 47.20806201282373, 176.69885132560654, 35.996706227608804, 97.37114948868248, 109.2172143424864, 116.863210886047, 95.78619784987778, 80.91508354997107, 52.71854202706877, 86.310468345841, 87.12428746410087, 48.949049238682385, 74.58834252889372, 40.11261109765839, 63.795091150380145, 36.481354479903146, 36.67344774613592, 38.108322158332236, 22.9115599382618, 18.7534411940693, 25.772197625768428, 12.66322134359813, 15.136735409740954, 14.279361408515584, 10.165845514039564, 7.570833369083759, 9.60642117744691, 11.729850499200241, 15.140738745598126, 11.601170591529113, 18.15052016121831, 15.713740719411202, 33.77216915652698, 34.12405519571115, 30.73812352806019, 59.95932860270445, 45.22211010906793, 48.516211465489974, 70.40557937749189, 95.0026844541638, 50.909328021502894, 131.74291086975725, 57.3003205595073, 128.60132641438761, 79.27276890157836, 76.83392713569427, 185.5673295233945, 104.62642354820505, 159.09711090164905, 0.0, 87.09064737254762, 0.0, 57.31412750374452, 70.06225464542894, 0.0, 0.0, 95.2164915231418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 82.78224452741232, 137.16929378932744, 0.0, 110.70756408301705, 95.25094490821009, 39.77841710615291, 136.3475661844411, 57.18511558306038, 103.093531833182, 193.7870284056478, 55.26299065034186, 45.3904450583596, 81.43045432158262, 67.9208534377207, 41.143808938472525, 50.98860237237986, 70.86199311129393, 51.98935870567064, 37.685381647618485, 37.4991308823228, 40.89790718053626, 40.3082103639045, 26.911354155307535, 16.736284860552754, 17.252290095728856, 11.033222703594058, 6.58066841870488, 7.9999971211157765, 5.418288699350806, 5.362833830118454, 8.048025270251902, 5.508666070608042, 5.940493753122858, 10.623101360308926, 9.459707369713495, 9.070465773036434, 18.409107859013996, 27.47863232372501, 28.961980464851962, 38.52191833303561, 34.74041523144559, 36.65874678032981, 47.5139171739326, 70.36472433418942, 64.00373624853816, 93.7802236415084, 39.04705417499656, 72.69187769235745, 120.42357014954128, 55.125057587958096, 46.10417049246102, 76.34974766496609, 27.676841952335064, 107.23949880577158, 0.0, 48.64222810355162, 53.5518775323989, 0.0, 75.3855805479568, 0.0, 0.0, 100.82970157406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 135.95706562951278, 0.0, 107.84606471179839, 88.46787698810436, 79.68092202186365, 71.42623329061348, 0.0, 0.0, 92.33160081437181, 39.39710565547193, 65.95304380893495, 27.719650339413512, 123.32792438822568, 58.57594300887993, 98.20492578519018, 83.58085459075123, 23.337128283142974, 190.79195832245156, 111.83349413952679, 70.22792367440219, 63.73250817244047, 60.90628579805319, 26.260582153702497, 48.120393506859244, 35.54112786676529, 18.11388095428163, 23.801454665832093, 14.466197304939332, 9.517285879013027, 8.473651754372849, 3.6334115534089393, 5.788857679803861, 3.2617603817865293, 2.141142723420467, 2.786720227709269, 5.0126706886584556, 3.977149886826007, 5.762688121638053, 8.980262570724573, 11.717762835888179, 14.81712827807744, 18.578815568346425, 28.75888753528506, 26.56215702250392, 34.90177315166071, 34.30071788941423, 73.57163766367552, 52.849097515865004, 80.93512702819586, 60.24781131495108, 90.72280481108511, 124.494685926463, 114.90820396149766, 83.21832534893032, 136.99133713217557, 51.79237288693341, 87.8118210428845, 101.81943894916282, 80.85702562713364, 0.0, 56.06809754524636, 0.0, 72.10861205479006, 0.0, 0.0, 0.0, 248.62315889819374, 127.9721698174996, 0.0, 0.0, 0.0, 199.55551456329977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.08285562348024, 0.0, 0.0, 0.0, 90.89084117254866, 82.53203481907374, 67.54103521855356, 63.92866403735849, 50.9062799395014, 44.6208949062901, 0.0, 35.23752332859621, 116.96102750076238, 73.43142970506128, 57.54975626847025, 146.14130726843726, 119.0065174078333, 29.61795973936003, 51.05568347560719, 86.64476682421224, 47.59555037634091, 66.7088001934678, 15.666112551008405, 40.1860629228165, 26.383218769644955, 41.692321582658565, 21.789754624853273, 18.668975841004574, 11.995250050032409, 11.13223858235838, 6.410934430702938, 4.54130405078594, 2.542211352484711, 1.848307604821613, 1.7955393960012074, 1.5983729684166734, 1.8163692677650762, 2.4266729657182915, 3.7437224379552947, 4.486141610523994, 6.57841387310106, 15.11813794009453, 18.623986860857773, 19.95546379754919, 33.846652399431285, 34.59090670835769, 36.11472425697137, 63.1817180677642, 57.61633472958843, 68.27101349631093, 81.39746215729663, 65.70978273154321, 85.30145958975955, 88.18033856913698, 94.24367079552981, 95.7610199517557, 94.35573214146967, 193.9991641894014, 30.7701099207667, 37.36957638921763, 42.089465938279645, 0.0, 0.0, 67.4703135230557, 151.1070655015325, 0.0, 0.0, 0.0, 0.0, 148.70067073697948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.35625778273224, 0.0, 0.0, 0.0, 81.15839925606659, 0.0, 0.0, 49.5054346170472, 89.1545096959832, 150.26262223508488, 29.865149762951617, 54.99977199096137, 129.56791308828784, 149.2802971526409, 61.229587202806385, 138.76142982789517, 50.971713970772754, 50.019101951731045, 72.74041978276092, 84.83745318361484, 57.87365096602439, 57.05710386912156, 22.784125363780014, 23.660797783657287, 31.571967252073687, 11.54731378027221, 13.774263137820547, 8.86013535918713, 5.769896600661059, 4.401277454535642, 2.235118837463988, 1.6480005534170736, 0.9515545509597647, 0.4513458184903597, 0.5990689574435293, 0.6768614133367638, 1.5527946416138696, 2.9364960850124184, 4.687744163520578, 6.43910027503344, 8.493500747742758, 14.262889782861924, 24.430044158442758, 32.34909328690139, 28.66719672626494, 40.10490528091065, 46.18536575108504, 54.93748975076831, 54.37269985626439, 88.66792298305664, 90.16500606931815, 59.62874464780559, 98.29775865953553, 77.1620294547301, 40.19451782441628, 87.22805310342025, 51.813965358170776, 92.40129455765262, 143.93909469408396, 0.0, 50.32330364840139, 120.29906235734902, 67.12460829292995, 83.3944569427634, 0.0, 208.31228946092088, 0.0, 0.0, 0.0, 330.4091600238463, 175.79744123814646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.70486308684676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5003852302134, 123.91979265796228, 38.31753757511929, 126.59809450003189, 0.0, 131.35704898180342, 33.9744195446459, 13.724493132092986, 118.59692160849704, 59.80742441399711, 114.9187459413847, 60.67308359101389, 42.94093583029363, 46.87574994106345, 33.61029885126904, 31.054124554706753, 23.11440072853358, 31.00348249034258, 13.114877149770013, 10.44663378766947, 6.123215165162253, 4.215599324349762, 2.7985639246070004, 1.5269233385256988, 0.7735345079703058, 0.30043927072822574, 0.17005033885673712, 0.2061049584860092, 0.28853741994938364, 0.4801592019494058, 1.040626697450619, 2.423093252607128, 5.083904455016013, 6.6354234449554905, 10.29634957480302, 12.282848447446055, 15.912125040117871, 24.793097325829063, 42.5711613763268, 25.59864010488372, 73.44282693821084, 77.96329150811529, 98.90998226350791, 64.63658493993363, 88.14933060543768, 46.56935847751821, 59.62220281798911, 18.7879385537689, 21.110666254438325, 53.5446640370607, 93.85813962253302, 114.00753089226156, 42.03735401214923, 47.7310064844055, 115.67748140217549, 0.0, 80.51608524663864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.2106390129483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.03566940373678, 0.0, 92.90034693337951, 78.24936837971845, 132.18494618524622, 58.218054088972735, 46.845221980193394, 40.53970883906497, 35.27421616318624, 0.0, 76.59884960340156, 0.0, 73.42442984131605, 42.45582478667888, 108.13217212188135, 35.53134263056385, 119.03038499084407, 73.33716727748173, 65.00486288277051, 50.83741204689097, 61.9491725576898, 45.20052128818956, 43.58626516838483, 17.05976875688613, 20.9735890673001, 13.337858067398342, 6.793783729585614, 3.235101274096022, 1.6805344575046595, 0.8407861318912019, 0.24836892319432854, 0.10016078306399902, 0.02512398291998388, 0.026987136494899637, 0.10880761025759056, 0.3325725434878212, 0.7085579012897424, 2.0262449312690634, 3.697805943118953, 5.502672057844092, 9.807812395357647, 17.317704603941436, 19.24984221572063, 25.4633504983856, 35.35837365290946, 40.66973655306464, 59.479379568618455, 68.14266221942735, 82.68445253938022, 52.54154338001041, 75.11790032785977, 61.0616541981082, 116.2072397852617, 72.56630759105985, 87.5062765554899, 103.56065239121833, 92.34894752141112, 36.556854044158854, 41.92038362689841, 96.53126458811775, 53.63393766361024, 61.765694824087234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.13076786195208, 128.2039008703583, 55.72889423514349, 47.526420761549964, 172.30663419366755, 33.92325853085258, 87.67044381934045, 50.76052769163083, 64.35434090132391, 135.48858158920223, 116.83316459412373, 57.39754896911401, 38.00026017709808, 59.45012380682094, 77.62938056650252, 71.91693589724834, 75.90125039228072, 37.350453805302394, 42.136328464069464, 27.998195140099526, 26.239542466512027, 13.082259616807686, 12.983571273611933, 5.573864796734041, 2.7869799355733784, 1.455417173227919, 0.518643027695543, 0.16107232609364866, 0.025842194690793553, 0.002188117341539604, 0.002044792613609386, 0.03304860853265137, 0.1848561961306062, 0.5638412006988327, 1.283959803029776, 2.8349087799071007, 6.207703130277893, 6.886570033495204, 14.693584430452322, 20.124812227729453, 20.325216615786417, 38.54024386662932, 40.22558174642854, 51.853198227274156, 39.960990138867245, 74.74352848826743, 52.220277115637174, 97.21766426791095, 117.59336670388952, 86.94617950128054, 119.9787904577981, 21.69523265546981, 100.12385503810913, 62.05066451704447, 141.54110556649727, 84.15166139721447, 48.66730554626663, 0.0, 0.0, 0.0, 88.37839569988094, 0.0, 108.65108386082237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 97.22511515047786, 0.0, 76.76201122307192, 0.0, 0.0, 48.996814326562564, 0.0, 70.65337985649758, 91.42732718356974, 54.14694031545642, 102.68708050069098, 53.59965897238124, 71.08469718371131, 72.06122835460899, 104.29925246533824, 81.93143674384976, 36.69415260991937, 43.945970748250076, 54.5823983732621, 39.44466629618073, 22.076789140783553, 35.32441968586843, 20.680329176416247, 12.1246438378513, 9.946654501302874, 6.926109074875256, 3.318194695804697, 1.980620318278768, 0.48671621655423913, 0.13317837961294796, 0.03026026645179651, 0.002709855897200594, 0.0022336281749421034, 0.016961305376532496, 0.19543216422426243, 0.6104382130358033, 1.3058532823742033, 3.532510935095334, 5.893851104878079, 7.933343090961521, 11.064958689995954, 18.770129233526625, 29.913626609016042, 25.64906326476843, 40.778738508147626, 46.1366675119582, 90.81426441498527, 80.42925136152157, 66.9344874504162, 73.79874898020002, 91.2070916401451, 101.7720347932443, 67.34141582399883, 128.8739404159066, 104.53418850194339, 92.11954798137427, 104.51945390155606, 133.06154449746828, 49.444607610769545, 57.72862277316785, 65.87864893897179, 77.31448939043382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 87.54111041638953, 0.0, 0.0, 61.105115675337636, 53.21971398000627, 0.0, 34.7585390438064, 31.927741408779177, 78.70852395327086, 154.45469753006162, 87.80282847495596, 70.52945832271978, 68.9296536442538, 109.12431570811411, 133.89207428387633, 67.12690973857529, 46.803968668841506, 43.726844609495984, 48.96403800613273, 32.067574948031, 27.611169779011842, 20.170390546657632, 14.40116525071324, 9.924276719251477, 6.032512534430186, 4.289926654863538, 1.9450169302538185, 0.9531792674620779, 0.24588386961017383, 0.09530839597437948, 0.04278715607215878, 0.03269367562717054, 0.08097278471325678, 0.3398684488040151, 0.9638410634711951, 2.164821886087108, 3.5939427422673274, 6.592202683426857, 7.762514824738063, 8.838684729582459, 22.057186649484247, 24.849977994296037, 28.61531082237224, 48.11467274911029, 34.30186649545678, 48.69915593535421, 69.8833640093118, 47.28770273324561, 56.60872337798956, 120.67234405642928, 31.016312896034833, 105.13287566820975, 85.21233930520495, 81.4002204656784, 0.0, 0.0, 83.06075106838662, 0.0, 114.91830557501828, 70.99513290473415, 78.68118708443396, 0.0, 0.0, 0.0, 126.7135065864287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 165.13090254423201, 0.0, 0.0, 0.0, 0.0, 0.0, 78.4620850770524, 0.0, 0.0, 148.45137059376304, 0.0, 150.55416620527316, 30.4141810067672, 81.0304552678308, 113.10291357313776, 74.58850461722623, 117.93969623193577, 151.58072380745713, 76.05734894503397, 100.84892706316272, 112.16763380983956, 83.41338042545576, 55.96196016985297, 46.86530415904609, 37.05219175840271, 26.274818822198704, 26.079007212236725, 18.01975552593438, 13.747887637035955, 8.846625212764133, 4.442015202590422, 2.8507221556333113, 1.1956895968032322, 0.4057643488828679, 0.32491415699376275, 0.15279851700626748, 0.20477010202628243, 0.2447095951640769, 0.6164373248308666, 1.5009867205557397, 2.2548106551459126, 4.149743064797714, 8.649045718995724, 9.747747755256274, 14.947579865918014, 24.37531518275056, 33.31759357433862, 48.09703917524668, 45.18366926811374, 69.51018816946771, 55.917224764767894, 84.4924256850878, 132.5878349216076, 59.00574646346526, 57.58238289814116, 56.94308846975442, 129.32625615718982, 65.0711482015661, 179.37456326462254, 127.13594262300367, 109.15788498424325, 83.86598932511015, 49.38919832350677, 117.35988585779711, 64.26235354435683, 79.28136295227546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 106.34664044223032, 0.0, 155.3429162557435, 66.16077901825172, 0.0, 98.57331064605077, 130.7966984024134, 112.17645930218524, 95.92437471426466, 55.36376744748354, 92.40934098810158, 20.052689077953605, 140.5004359455739, 62.770657375614434, 21.15292378331271, 71.1925803493691, 110.36376578639108, 55.6022020379057, 30.85144484666963, 30.773747904826827, 48.453750137813984, 25.66067916720845, 20.726652917059184, 16.43967284095496, 14.328353895816148, 8.083664525466833, 5.673342716147897, 3.8004846278631192, 2.3196003591622407, 1.2529514600002842, 0.7085479710878978, 0.4333477556649128, 0.4137713214616468, 0.6519927757452277, 1.4513440478897848, 2.5004342473606367, 3.6315992638886048, 5.811169727080222, 7.95744403469308, 12.543714707862245, 15.457200597541123, 26.10733499515674, 50.3537835404154, 42.249944411964506, 44.951655526280625, 47.37740271993644, 66.63247387117745, 65.37547053404353, 100.6517577329073, 63.01997070660221, 149.4403929057865, 135.40742010151348, 95.02067170083535, 86.29956703807211, 76.6819202224883, 29.073949566098644, 36.68111333995876, 130.76246080941644, 214.62184004209325, 58.884509011832, 0.0, 78.23102384645291, 0.0, 105.135871148407, 112.15312798717395, 122.48435910019798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.499738079827495, 103.3611036109795, 41.88216264372175, 36.36945459561321, 61.99998865369673, 0.0, 118.67447585136225, 95.39221675722509, 65.35879269939323, 80.60626213264104, 75.08216243921261, 113.71407778836722, 47.9461760854768, 80.66796915960221, 53.53711432205565, 42.194901316978076, 50.0325086888395, 33.6466155347263, 27.640092500687835, 16.170691901900994, 19.434009101884953, 8.854205861492742, 8.023138136499089, 6.066535597185251, 3.011108903607253, 2.513986198463983, 1.6338662045954286, 1.58112457801575, 1.2995414280380064, 2.029642708398941, 2.148467409044827, 3.29900147411493, 5.417917350185477, 5.273636111855336, 9.564104890397719, 18.131774011468902, 19.700918785583944, 19.73365452729478, 27.533482938474393, 42.96303322354737, 54.595224233967706, 81.72247824970084, 57.40135324663781, 104.68363493016176, 54.45797084324, 80.24991680511408, 96.79013904255332, 113.79188374130514, 95.62459147958228, 23.78849871433308, 84.3355856227641, 0.0, 75.27098450412673, 42.007281963395734, 48.807960853149545, 118.91959820646696, 0.0, 0.0, 0.0, 101.93380183467774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.66288916978047, 0.0, 0.0, 0.0, 0.0, 122.288316399974, 0.0, 0.0, 0.0, 0.0, 62.19744051619039, 0.0, 0.0, 74.81985489860753, 67.18488631480395, 60.57644041241005, 74.37537513504387, 39.19783979047241, 84.67018432230152, 120.54695074436998, 68.29454170915987, 75.99474137778228, 58.795455899234106, 63.52426272272516, 36.03169509523802, 51.76556378313666, 35.5638812544104, 38.50100269310522, 20.036021992062636, 35.37854963417371, 18.059010132312814, 15.142403764435233, 10.116405887750897, 9.591561590019605, 6.200127074605774, 3.906247134933527, 4.155207584358734, 4.925477665198109, 3.7627779766696303, 3.7961955302273087, 3.673425355699354, 4.138181205960234, 7.480014078942517, 10.681229376782243, 19.700072732442003, 21.965589644197802, 22.88758684868431, 33.46551683533885, 24.660753543776977, 48.070540602467105, 56.16036560094994, 78.62029925955841, 33.88274000599729, 107.84694334707574, 55.182495140577686, 76.6530112147529, 97.59773963744715, 49.972649289947796, 59.54333585229894, 146.30316631263938, 57.48582934027364, 169.83699828053693, 73.57024885501802, 49.47719256453544, 53.27896969719029, 0.0, 149.64988883125662, 82.58273681147261, 87.73891945841221, 0.0, 0.0, 0.0, 147.70889907396725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.66603617924366, 0.0, 0.0, 0.0, 0.0, 94.29965859688545, 160.94285256263584, 68.17193506897698, 61.72519205173548, 27.289045754152024, 22.746273973757322, 106.94329334840282, 136.50144044954652, 70.42420527626138, 38.972489908895966, 56.75768818209175, 50.50159599572324, 80.40016528378212, 66.84853797170534, 66.37372924246169, 45.90173287143718, 37.447521777789525, 31.336120963949643, 27.182175085822674, 14.131355197162026, 15.675397581586543, 12.86322659867392, 7.834458701094034, 6.7128604653083865, 7.268902895124291, 4.820242764206089, 6.811635309642248, 7.894436373290218, 8.038226795710333, 9.057895349938594, 6.966702147979598, 9.804340131117826, 15.200610593969863, 31.055141680155057, 46.00668455873346, 44.57876129556682, 30.85973017138248, 52.05539724545085, 43.31043316284034, 64.87946301089174, 75.93213768343205, 108.65963569255442, 96.93676738806292, 82.74261896639453, 44.41202570175, 57.22264312841502, 66.18037148037487, 104.28959718822671, 92.47244764282729, 73.02430253181467, 43.05178603132986, 44.895974180288974, 110.35280991348839, 126.89115289707831, 0.0, 253.34903988879452, 91.27342921405878, 216.95345733430682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.11702346997598, 127.38622174734297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.2031340536108, 53.03254565037918, 92.71877035120018, 114.48375727682912, 80.10509873432427, 54.33040272849464, 127.70402876120124, 71.02793200332934, 78.90091369883945, 73.52898764970337, 44.170485959409554, 69.47950622349411, 42.692766107564815, 28.13048755793238, 23.51679739444332, 29.286953325183813, 25.66657798516845, 13.547747631398682, 12.510682000239452, 13.808673031452779, 11.835859283890935, 10.509122210513901, 12.650516793577633, 10.20925346238578, 6.797751086047326, 12.142066412329363, 13.915479808970847, 18.118461597530146, 18.314924001046997, 23.166828778717182, 17.808416061715942, 43.41483899881184, 42.36812922957452, 42.55978130864874, 70.88573952907397, 54.20506396610007, 65.01690208225187, 43.814510734373584, 76.86805054676917, 96.11994861996615, 118.63092456664198, 48.08427951356589, 40.24603981732177, 0.0, 102.45650374105136, 93.62659037934654, 113.70086298197472, 82.18182705659629, 47.23650601442311, 53.91122807302066, 69.69334122057364, 0.0, 89.37548389148934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 129.56806101888438, 0.0, 0.0, 0.0, 77.80560586214766, 66.6379638070748, 56.07039575722456, 53.37599296067835, 95.65604764231175, 151.8428677859999, 31.046957598621113, 142.07877024961908, 47.12083870272552, 142.183470334814, 117.79180080721989, 55.487412110423364, 60.61077882797264, 66.0206017076123, 97.01814084428162, 26.138311110554127, 58.092037303134894, 43.40861924139172, 49.60760211574423, 56.10157539826261, 56.20375789361352, 40.455783165701526, 30.29263421114118, 25.454390402306004, 20.941883897374638, 18.908326232015803, 15.220079329644905, 12.299858694991178, 14.327338164711415, 13.407970614827182, 17.21078704522102, 19.007378266792045, 19.02414153412366, 27.630831257268543, 22.924043339552856, 19.808825271928736, 25.25241451739987, 57.520962677667825, 46.45255398947511, 69.90314097009315, 52.95451372037499, 56.51704865995707, 71.22731407259069, 77.61133142519425, 67.47154726395785, 130.12520830720285, 44.69743561695613, 156.2182982689175, 101.88279601212504, 25.537237042949908, 88.11301470118914, 71.03057782841222, 0.0, 87.10538615603696, 0.0, 112.14542588279437, 202.21504741771145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.26992119514998, 185.56988805830875, 0.0, 47.3374793224532, 80.27708399956043, 72.66782590118964, 65.16175677179172, 79.94049287302998, 110.29153003502898, 76.42275697903507, 48.79733241373634, 66.51041901753102, 162.9608251467697, 91.74463044955799, 64.44694899207187, 76.00583108391007, 72.24474282558965, 59.950989755099044, 69.19220117335792, 45.11815302395109, 45.66449796588131, 22.618072310770756, 37.237219752761895, 43.57840043887901, 23.235040710394838, 15.749019978469928, 23.988648486879832, 19.189829511160085, 29.209931373821217, 22.014004447852972, 32.86978936342206, 30.60598272147311, 31.38948250607206, 28.872926505683576, 34.89504286954417, 43.85679040162389, 30.403332529264503, 37.72755971058786, 80.78888472188, 58.896769090453915, 95.309847445546, 89.50202042513155, 44.49808093884381, 114.07083427862689, 78.43645841063523, 77.1711601705137, 73.70542100425962, 86.891001016393, 78.95337232504342, 28.542882398381835, 71.93270160135602, 43.0741945551523, 0.0, 0.0, 62.988668984134875, 76.84609035304842, 0.0, 89.97297809100571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.79846241170134, 0.0, 94.54695637093621, 174.13911794703614, 0.0, 66.75187853050369, 116.6329630495643, 0.0, 0.0, 0.0, 135.95798222698517, 56.15127371073002, 47.93464099029682, 41.95116797045827, 67.65700030885051, 114.97448905726532, 123.53302429183739, 91.18825483541059, 42.5583736120554, 103.57506703806747, 85.2349814724617, 74.23277036340453, 76.75390909295515, 33.61719670900524, 28.194983378119982, 61.75162886342327, 53.078522741466315, 39.6003895968241, 33.89003662332073, 31.16606213499074, 20.575465461476586, 21.232350994866497, 21.454783935534348, 25.944634714667885, 22.154948299695878, 26.895947251187824, 23.614093310514335, 21.769248460494317, 27.93604742272482, 33.81966829210653, 64.39539043481587, 67.28763488684022, 54.637760399104344, 93.53204849579939, 51.094859714899385, 51.51082440302425, 93.58520475031172, 99.29688363989945, 72.43175396947669, 100.32396373006412, 181.75357987671276, 49.3126887378147, 0.0, 32.75033111153121, 39.241907997292536, 41.31786193312722, 0.0, 0.0, 70.26829323336388, 0.0, 0.0, 93.30670785760336, 103.06890676993122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.29250792030453, 0.0, 245.42253112979915, 66.30419316882791, 62.10287180735781, 105.55394055698852, 94.05317398878927, 0.0, 285.2804119638823, 148.41673769421612, 103.92684152097576, 69.4607479428397, 56.13193249147003, 63.71830385096544, 55.98423967210678, 93.1996155922186, 51.570393982868026, 69.78238173688214, 101.21442660550868, 64.78842764332902, 69.04911666623244, 86.75724213070525, 51.003914589611846, 67.73893551325887, 54.838831259130515, 34.973910724547565, 18.593959517107756, 45.52416433601582, 47.756933360379705, 46.056442652476136, 38.10581474344641, 38.01377859774372, 30.54677623030568, 35.938242346493155, 38.18434152921598, 64.41568615258075, 39.673141602805515, 37.57178297393651, 41.8617891528569, 71.05831140284896, 63.66262867346999, 79.95166641409644, 67.58286538033755, 90.33303660903871, 106.46261542494362, 66.174773811352, 97.30316682423094, 134.72535486409117, 132.8298674696577, 130.9455280480311, 86.03750614677081, 70.3176474217382, 0.0, 0.0, 0.0, 60.10294358488362, 145.39743624864423, 74.50750731778828, 0.0, 0.0, 0.0, 0.0, 146.36738520102156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.11492431718884, 0.0, 0.0, 0.0, 131.0062141734794, 112.93872427935969, 0.0, 55.813498461852326, 154.66941477336, 63.86130733695624, 94.00800676294807, 111.38222032154006, 93.12988450532923, 99.98672400093989, 68.82940687418893, 101.60629316252503, 99.29396069910409, 75.69882394207161, 66.94592275086946, 67.58064869568705, 44.00643024648798, 79.76405543119569, 57.515943233117056, 60.31766752989818, 37.70422799550364, 39.568913091593274, 39.63186052683983, 38.85417804034725, 46.07497241894931, 42.47467470255333, 40.57016504917021, 38.741385064321754, 66.43268168867195, 73.93129404239662, 63.00919313443767, 90.01797851521152, 64.7830682453414, 78.8430970189495, 43.537371430061, 60.34425491059451, 56.706532716627876, 38.60057999752432, 127.84149260711375, 70.81989910278203, 64.42992842429152, 72.90459781004765, 29.712707266493435, 136.15087939795637, 115.28501602728355, 46.1322966299064, 97.66087888174943, 59.542628579354485, 62.2033798875167, 146.41871378643359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.2466212812277, 0.0, 0.0, 0.0, 0.0, 0.0, 93.17596164216152, 0.0, 82.27156922000657, 65.01466274790248, 64.7100336498754, 0.0, 46.24802485685454, 42.919977198601885, 141.99580242785325, 185.9982018311077, 29.543753379693246, 70.64007312442769, 124.39008862922012, 86.88655483800576, 151.9405588685785, 160.07622585750752, 102.48156956986276, 39.06260980361325, 49.93400900885065, 99.04899864150032, 63.99498015971435, 48.5404913509736, 56.14074711136339, 66.92742231019685, 52.04356768884514, 53.1409368119715, 75.13632331089923, 31.064271947727203, 59.0092877497943, 44.04355456070803, 74.84957914603748, 52.963723777930056, 70.94807864819076, 86.05426621516371, 46.59637702441288, 80.67961788897502, 96.00752635651179, 89.31999558622309, 83.9975097361179, 119.90183727435029, 102.21295381095499, 79.52206478252931, 105.41070255383696, 80.71438948277465, 89.03328628463495, 85.08236556963847, 73.43609155737484, 108.73026597075142, 31.061512250223945, 0.0, 0.0, 44.99225996462522, 0.0, 0.0, 71.58823412442527, 79.37181218396405, 87.07540413055804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 512.0933314306071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 78.75431338387749, 77.94508872037031, 128.67692733421234, 55.815953677251386, 0.0, 132.09692700061538, 80.2541313500393, 0.0, 123.66221892218735, 81.08307966645678, 46.26961206458868, 59.115195077592524, 49.74381693026994, 108.63719812263614, 102.95049625466488, 131.44348638568167, 81.59495550171953, 63.43646872098047, 122.13961317515287, 124.86418459812307, 72.0238812674676, 57.84906091781949, 78.48452619640982, 80.37758989234473, 64.20968217190774, 71.18764264435855, 63.73023710023513, 72.14351463077355, 78.18072104389232, 58.421912801890926, 69.22424218261833, 40.68580501842436, 88.0436312536473, 43.95254782412807, 73.23445025925797, 88.02607377291109, 71.38850606124838, 70.85775428818677, 45.39518682501545, 64.64623963542583, 75.388584667622, 35.81583714374515, 163.84842677927236, 23.287376704017305, 137.58420867770985, 0.0, 37.12822490480958, 124.13161220951045, 0.0, 0.0, 0.0, 0.0, 0.0, 160.31031789613752, 179.457126882294, 0.0, 0.0, 0.0, 0.0, 0.0, 178.76870294038906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.05879592720305, 0.0, 0.0, 0.0, 82.34742763458985, 0.0, 124.82355429905995, 111.30804524961806, 98.55083708054153, 44.27165683458167, 80.46025563400516, 33.994869394751504, 120.3409165976771, 75.65307256886219, 94.42272154844225, 85.2479586867108, 175.98934686683094, 135.80846300898332, 81.18654674717315, 62.388448993558555, 76.90387524771157, 55.879972410970765, 68.53673416018222, 45.70296951868455, 72.87774713652195, 68.5897020737445, 82.79647693305742, 42.87694758590477, 42.280679144049294, 114.99337284163276, 55.33028840961062, 73.32281226078958, 47.22657085590412, 69.97968229168922, 125.17937335033297, 22.736618181315475, 73.75492994507402, 54.08789996527999, 92.25088832068884, 130.59432453741613, 73.83896182626569, 84.00432256481744, 157.347923723631, 53.60103773165767, 41.2142362135766, 25.04832258199615, 53.46651268758005, 208.46033631464118, 36.290319887932746, 37.94019916939712, 87.8544838359634, 105.97358465676032, 0.0, 121.84070573519304, 0.0, 75.17146440703182, 0.0, 198.97114889585606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 231.1905498906006, 0.0, 0.0, 0.0, 0.0, 683.1104290005455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 158.88131214721415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.51484722112059, 58.74115983165087, 111.16778896789675, 0.0, 85.2469344643398, 113.62152018470715, 133.60284902892886, 124.7792583852409, 76.0372420610131, 138.8852278478347, 157.68368502191035, 52.87299822755848, 113.56500112979936, 14.98793940218816, 105.80868867675849, 93.47997918124751, 85.12072743423356, 81.18587251569313, 63.307264361432, 52.54660601932014, 65.81231214657296, 92.38569474990565, 97.76911416153756, 44.95990012863325, 13.755944084218244, 82.50701110224563, 99.88803122041615, 23.189621991926906, 51.51331392608493, 89.37731245084157, 87.81114223289839, 55.06812595736979, 119.48237192603445, 68.49504795550592, 73.67173329518178, 33.933358059118675, 129.21251095805056, 62.338638088866, 156.35606537759773, 105.21657509267573, 90.5420009479092, 139.540643048854, 76.99981275166769, 80.26996034619023, 96.28493035816186, 105.95733811885755, 61.08002590048862, 0.0, 0.0, 0.0, 90.75895626310066, 104.80197409978275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.58519043922298, 58.27762736444411, 0.0, 0.0, 171.0686335289834, 0.0, 98.60101134876321, 59.47137764625677, 242.33377298228757, 234.95786783552583, 86.25999853547484, 94.48391553164703, 84.5598307893743, 109.62863135978611, 41.00276516696951, 121.88324525321092, 50.007472028008614, 69.10605698211053, 88.23567206673373, 49.34361478922676, 124.44506833595894, 92.81378123291681, 90.69328854081898, 106.92243279896996, 98.33646555565824, 89.34412733662643, 82.24725604835099, 65.69336511759738, 87.90158327895628, 74.01700009493015, 67.50392587731255, 13.406699107732496, 65.42033947153348, 86.44599331398828, 77.79996021801685, 65.75918629709395, 218.3115147422123, 53.71207526909102, 88.00100714143616, 62.88047865933732, 149.18411545757039, 42.11375211732282, 0.0, 51.96590871632659, 0.0, 70.03981824078882, 73.59292565597748, 0.0, 0.0, 0.0, 0.0, 129.29625908368664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 260.9420620144606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.15384843422237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.10390043533058, 0.0, 0.0, 92.09880168637505, 45.58857743392459, 114.5981400394632, 0.0, 92.82228907655875, 56.6635752039194, 96.85280326705997, 70.48537690625781, 124.58031825136727, 134.70651525632047, 68.5465506934033, 48.02169785601148, 91.06930165428574, 69.7118500880667, 64.6514716509175, 53.34794747513037, 68.41426357428392, 80.38166206481321, 150.33107281934338, 110.70475654151684, 140.7325349762423, 108.06857369249767, 76.18928703724427, 147.36264777481523, 82.03953147636692, 131.56420535925577, 157.19735618329838, 67.27643801703448, 131.35169812681525, 80.24504974093104, 132.06406211964588, 27.240824362706977, 82.35996334216469, 90.66920745807778, 63.237407229306505, 72.21637184700755, 79.45773940829508, 137.09490634427553, 52.92687127000112, 0.0, 0.0, 0.0, 153.7527206300132, 0.0, 93.92552784993069, 0.0, 0.0, 0.0, 0.0, 170.6031228963052, 179.98059548968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.08137013959254, 0.0, 103.39075022194335, 0.0, 0.0, 80.10599482884436, 140.7244997531779, 0.0, 0.0, 102.0575411989843, 0.0, 38.73384565915955, 77.20277838149462, 34.5612800604505, 190.7282897274312, 26.785147614386283, 75.52235323641531, 95.9956505518795, 45.42527117503178, 62.58843127894498, 75.67299379287255, 36.19423419217398, 99.45839962173164, 32.17147277625163, 88.06736467756832, 45.955384972999006, 43.23741981287666, 60.411927576998714, 41.699867861355514, 90.18547031514427, 71.93728454822786, 77.42798048445547, 93.2675674955101, 35.00179390169231, 70.16606737584192, 208.39178671641992, 39.45601430516197, 90.24954195253352, 74.64636613460631, 106.37457197509997, 85.68963987707136, 92.77619848169202, 249.48012358676192, 76.35330254727698, 83.73939833818973, 232.2313388575694, 103.22817214435561, 59.55165795411456, 0.0, 0.0, 0.0, 164.7642435034516, 0.0, 0.0, 0.0, 119.82411880880163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.01463122836805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.29064978326578, 74.16008148234535, 73.7015434113958, 0.0, 0.0, 53.85910452409994, 49.84798611550507, 0.0, 83.53808111256018, 100.97371501680487, 0.0, 96.1589800869812, 108.63300457513142, 123.87291380370016, 47.29752895845898, 0.0, 84.49466462002061, 139.6812667170638, 97.12593002461011, 38.73040618894969, 54.74741110962377, 69.63030073509462, 91.08778145519751, 34.76743612008514, 36.300569449882786, 57.685807266855534, 146.0475038747914, 142.09453660451652, 125.33226203124079, 84.36404534903022, 22.104642040055733, 73.7577991325516, 126.5718006100485, 134.224937015389, 88.89451488424972, 135.05856009835006, 33.7283873307039, 38.84576856024864, 43.36419004783761, 45.05875829071597, 0.0, 56.99512699168794, 128.50881602729868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74.2877297617897, 0.0, 0.0, 0.0, 54.403843232422915, 243.2690818920171, 138.30365863863713, 38.59328412357248, 73.32909977223517, 136.74819901230904, 67.07488349473488, 93.47379712347535, 118.28319076381071, 25.720401336242134, 101.83415934160794, 48.686753836609846, 47.339297309655244, 159.35505338418625, 137.77298237865645, 106.9039172547111, 88.8034686275138, 84.96455012923492, 150.32048451666702, 110.1141674738972, 110.313591266667, 185.1449442182747, 47.85964681007849, 101.5790662661107, 237.61650267871659, 30.48175435139965, 62.01610039180875, 67.75921596742025, 72.46761552667712, 113.91718876851789, 41.12890134621962, 91.77774267719391, 105.36628165187668, 0.0, 0.0, 0.0, 0.0, 77.83708766696435, 0.0, 0.0, 0.0, 0.0, 123.04486660962016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.486301125909286, 0.0, 0.0, 93.24634146290691, 128.9535253516135, 81.26532883548172, 116.30724581995392, 0.0, 68.18077817282685, 126.90340672207775, 60.22921550572854, 109.50351675160786, 84.71553538309539, 0.0, 80.58919487053761, 127.44860204044105, 55.18322828428914, 51.065714804584644, 50.8025564280643, 83.49727795223441, 160.91095854773135, 196.45324995117653, 136.16424935196937, 87.57714495025465, 91.76113722201558, 102.1150606691518, 36.58600255695933, 37.89988133445884, 38.13565951334403, 39.90871228764865, 142.1208831387791, 46.454552297626236, 104.68693063469871, 0.0, 0.0, 0.0, 0.0, 170.61631177224984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.60324618940743, 0.0, 60.28286012654514, 51.12807196972976, 0.0, 0.0, 87.30750447139191, 83.53476073210388, 77.50755210744134, 151.32897767175032, 37.72679295632877, 174.68603108913544, 65.61849298709727, 34.261202251719524, 30.46379830188696, 157.68616540250412, 57.53503588893232, 59.60908905047099, 87.84881554436737, 93.81274360768924, 96.47174184441221, 95.70668818410887, 33.47471627076902, 0.0, 36.83709944965444, 0.0, 208.4391402212578, 0.0, 96.08038907068145, 95.84536474603429, 0.0, 56.347535987731135, 60.45787000120274, 70.98425823274607, 0.0, 166.54540263778136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.19762735551632, 0.0, 160.67064124828903, 0.0, 0.0, 128.21207616359473, 56.12684927553137, 0.0, 0.0, 0.0, 46.64036208646203, 39.69364034480131, 0.0, 80.11515071454762, 77.752095124422, 107.08976633370443, 112.42073751873652, 34.84549058217706, 0.0, 34.909954131444884, 37.43630882520503, 37.402838232190845, 151.7040467592389, 76.27594591846281, 233.40667027881295, 40.15760737845034, 43.67814424416987, 45.02004822404974, 188.9812117385274, 0.0, 111.33833173468375, 119.78091756097439, 62.6077846589605, 0.0, 0.0, 74.43647339798423, 80.81103617252404, 0.0, 0.0, 0.0, 218.9006512469074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.91709737979488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 267.0827595828322, 123.09761773619081, 54.026978100959994, 0.0, 156.35864950242456, 50.78637702834017, 47.75542979220776, 0.0, 45.60957199748818, 45.692490724417176, 0.0, 211.22654407592643, 88.40621150787058, 0.0, 0.0, 44.00434648485665, 40.87485513916764, 44.01498493719346, 49.26439551836856, 0.0, 51.093452176737884, 0.0, 0.0, 57.140199885330674, 58.541144846404364, 0.0, 69.54912506006153, 0.0, 154.9246275229101, 81.26963074243723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 98.14017904379722, 0.0, 0.0, 0.0, 0.0, 67.6075345498144, 61.736080841844, 127.93372734290352, 112.24331004369068, 170.0041465753198, 110.65881669397615, 103.15935836196724, 0.0, 103.04727671581716, 52.92694113644016, 50.28847409567516, 147.50409933791488, 140.8563313645806, 195.63870657704305, 0.0, 54.05276784469715, 0.0, 0.0, 0.0, 109.9667368316586, 124.45597328943947, 0.0, 61.934889206692205, 0.0, 148.5048778894491, 0.0, 167.7435873256984, 92.24307788789461, 0.0, 0.0, 0.0, 120.86245095783273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 397.12809538505957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05601205673338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.35429267800549, 0.0, 82.90190061418201, 81.33847239577696, 0.0, 69.43859771683876, 0.0, 129.39124779363613, 64.75109111334433, 126.42279016246556, 0.0, 0.0, 233.95407267939012, 0.0, 0.0, 0.0, 0.0, 0.0, 59.84310425505958, 59.84065841208439, 125.08567421506623, 0.0, 195.5880517429354, 71.13536130399874, 0.0, 0.0, 0.0, 0.0, 84.51593539149934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.76038617923513, 0.0, 82.71198893216418, 82.06191952585996, 81.60842868724205, 0.0, 140.3924449753012, 0.0, 67.98326720988702, 68.32980104809873, 0.0, 70.20799055325578, 62.01348391612866, 62.244525339673835, 0.0, 0.0, 68.70942166895242, 0.0, 0.0, 70.97682849349265, 0.0, 0.0, 81.10784212893785, 247.15993678519104, 87.12127320492301, 95.4479413566035, 96.35252079818447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.50348543251386, 0.0, 147.93500659055977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.74945056644269, 94.85122402019783, 0.0, 84.00798866132908, 0.0, 81.76385624578649, 0.0, 0.0, 0.0, 0.0, 0.0, 155.16186713215507, 80.33187480399664, 226.3419384830923, 0.0, 0.0, 0.0, 0.0, 0.0, 90.13003224827351, 176.79476806368672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.17047495594964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.56390603764018, 85.97334502298109, 96.88124774630373, 0.0, 89.5914840478297, 0.0, 0.0, 81.58592670784444, 82.84269248095897, 92.74027061018151, 83.4826326258558, 0.0, 96.06886574058558, 0.0, 0.0, 0.0, 0.0, 109.75495379446856, 108.52134313501466, 0.0, 0.0, 0.0, 0.0, 140.24718370963996, 148.32324844178774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 387.50512916948225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.59483207077288, 0.0, 106.20380127945195, 97.38895365414201, 0.0, 0.0, 99.09084417370245, 0.0, 100.77789530740216, 105.33433240005462, 0.0, 216.79587265365873, 0.0, 0.0, 0.0, 122.06789004342444, 121.77459864351154, 0.0, 135.5345364839824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 151.6110544713247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 119.05818037935114, 118.07350944638264, 0.0, 0.0, 0.0, 108.37126414832127, 0.0, 0.0, 0.0, 0.0, 0.0, 109.74060882763929, 0.0, 0.0, 0.0, 0.0, 134.5267467115779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05087260171794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.95676534354004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.1069686450285, 267.18950905385543, 0.0, 0.0, 138.13252010013355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 193.01115132188883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.8557517163636, 0.0, 0.0, 0.0, 0.0, 0.0, 148.98876853013948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.0393581621168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 168.2824924290136, 0.0, 0.0, 155.1789114058798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 205.17556857409946, 0.0, 0.0, 0.0, 174.66503048058067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.4077710446529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.04902464387305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 407.93320258975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg7[] elements >= 0.0
arg8 has only one value
arg8[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.151028123703474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.012759753512402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.681936821208858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.612820927058063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.64639262270028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.545979200264732, 0.0, 0.0, 12.589831714321223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.091712536511322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.56630889117372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.351343068831618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.490299185567906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.242612410653873, 0.0, 0.0, 0.0, 0.0, 12.075212610252933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.066799537576758, 0.0, 0.0, 10.280555669947859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.790391435605267, 10.423856307928476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.9369263729455, 0.0, 0.0, 23.262056086117163, 0.0, 0.0, 0.0, 10.651747659769613, 0.0, 20.39944794644649, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573084377711075, 0.0, 9.526617923534774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.232762854009238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.342527158783454, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.417249728269223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.34172074663722, 0.0, 0.0, 0.0, 0.0, 0.0, 17.29513314462019, 8.692818883274393, 8.847931243110647, 0.0, 17.65989963487231, 0.0, 0.0, 0.0, 18.03513374801036, 0.0, 0.0, 9.086299442539316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.489500223482123, 22.80641919796369, 0.0, 0.0, 0.0, 0.0, 9.680809793808322, 0.0, 0.0, 8.743195527851832, 0.0, 0.0, 8.718413863146377, 8.263676297011674, 0.0, 7.978770386728844, 7.981920417297848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.309403305206159, 0.0, 0.0, 0.0, 0.0, 9.37599990942439, 0.0, 9.889192867482771, 0.0, 10.562936174133187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.005439464085681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.927642481192024, 0.0, 0.0, 0.0, 7.989013398374343, 0.0, 7.681575182328425, 15.20002885872729, 15.196938512091329, 0.0, 15.180228018078765, 15.47683888668726, 7.767125058422698, 0.0, 7.89788359010507, 8.053871683093993, 0.0, 0.0, 0.0, 8.913805074646667, 9.078008180920396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.026470625743194, 8.612757536038869, 0.0, 0.0, 8.321707217595863, 8.06853749073534, 7.985489482872646, 15.520561199689848, 22.701264579578947, 14.537262903755082, 6.997578773864635, 7.311134412142829, 7.122121349340881, 0.0, 7.231603311219376, 14.330610525428481, 7.017943611888129, 0.0, 0.0, 7.186141093412695, 0.0, 0.0, 14.852955840868253, 7.491375692692493, 7.851652255501328, 16.48498783083202, 0.0, 8.564327082297401, 0.0, 9.03182434532951, 0.0, 9.60867095425293, 0.0, 10.563927958953386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.773928149149192, 0.0, 8.704927607512353, 8.545403949789323, 15.833327609320783, 0.0, 7.4297441266494655, 0.0, 7.050723388072662, 7.202658284097668, 27.55861328208682, 20.29122150262875, 26.280590096476004, 19.647500908890116, 19.252313951345045, 6.579459901997518, 13.09502607652561, 19.614139142763843, 6.56849454273755, 0.0, 6.622623263914875, 6.804673958688036, 7.016148816073956, 0.0, 6.76748917715574, 7.169280242572633, 7.370544387561287, 0.0, 0.0, 7.770271992129442, 0.0, 8.798449267847896, 17.358240702534808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.47331098050136, 0.0, 0.0, 8.219076611433781, 0.0, 7.822550123520514, 7.2932602660559205, 0.0, 13.923649511184376, 21.002395196323924, 0.0, 6.51025461116749, 13.072693346340152, 12.26503463546263, 6.051221905994785, 5.988157148461539, 12.201550594514062, 11.847069768698876, 5.79976351461581, 12.168684375205473, 6.2812130416583765, 17.91770671504996, 5.930927742299192, 12.602755826852302, 12.571000737409406, 19.512334976541556, 26.56958710185711, 6.447810026054565, 13.89130619259359, 0.0, 7.420049456399666, 7.457783034095535, 0.0, 16.18115799633466, 0.0, 0.0, 9.184948161180024, 0.0, 9.820947376905872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.601751490580206, 0.0, 8.619835442883831, 0.0, 0.0, 7.704277911761815, 0.0, 0.0, 6.7745169941140055, 19.91044964460032, 19.22900324364384, 37.462197050260755, 12.37736876374272, 0.0, 11.828484548912478, 17.050476551088888, 5.697977482262445, 5.529902718918871, 11.020828191951388, 5.634199719455201, 22.151650486266906, 16.623235622428822, 16.899632090604968, 0.0, 5.64845792819083, 11.438157845293786, 30.20024509276573, 5.951843570163286, 18.799282411924256, 12.831204317227094, 13.398468577448355, 6.673855858028027, 0.0, 14.689130644792343, 15.120495123073047, 7.865546792420641, 8.172600747290437, 0.0, 0.0, 9.304580643818516, 19.492258165703284, 9.71232809638491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.116186552816862, 8.0668941439689, 7.415842162134676, 7.13993248336044, 13.75367137973485, 13.114396701767353, 0.0, 18.389579019598617, 23.34795401294593, 0.0, 16.7045141514584, 5.664415277106654, 16.313773047560353, 10.612662529219657, 26.156812699001225, 20.432887345313837, 20.568507268136713, 5.2664697544432775, 0.0, 15.366468374101885, 40.34386650685221, 5.311751041361426, 31.659086332169004, 16.32115660929363, 27.61547254350318, 0.0, 11.31053585392776, 0.0, 18.600683725478305, 19.092240843282106, 6.5792976389282805, 0.0, 7.287229994019377, 7.2932986783600615, 0.0, 0.0, 0.0, 0.0, 0.0, 9.820682133866626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.990386769573377, 0.0, 0.0, 8.35172364500591, 15.752868351376708, 7.97992950518257, 0.0, 0.0, 13.63344876484517, 6.451182958903727, 5.9685937916202825, 17.76098713231086, 22.79510577987169, 10.831621910295997, 15.954808687585725, 0.0, 19.837441410948365, 14.756181429722123, 28.8724108034041, 28.05760936105202, 14.134009791790266, 13.87528498734131, 18.883945093500042, 13.541587097726795, 9.447574285405619, 23.709024479519712, 29.154288948995113, 4.768360999694632, 14.348613133681338, 30.413123962492225, 10.039956233221796, 10.258492201459584, 0.0, 11.37241044329036, 0.0, 6.426311299076059, 0.0, 6.495091045234012, 0.0, 0.0, 7.739501060882492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.991435063222868, 9.970217891723696, 0.0, 0.0, 17.833113318611737, 8.483219154802509, 16.08564355943179, 7.667684423529968, 14.574594796276003, 13.834492908767043, 6.395278555260388, 12.361583027633058, 0.0, 11.311986973737882, 0.0, 10.710862004335212, 25.501696692545035, 24.78897969721473, 19.454895789129935, 18.656742015892647, 4.585653490712714, 21.961028069953436, 34.57138169388268, 8.730939871897338, 20.66708756081994, 41.97163206868673, 25.111468892134507, 37.94404067187976, 12.404542322927824, 29.98454665287755, 4.573411638440274, 13.351125029366912, 27.586458577818043, 18.661364636577424, 20.00599579108919, 14.995793694469539, 21.381263810936197, 5.457371881541051, 16.970461431241652, 6.006795558414911, 0.0, 6.597608872021967, 6.662830606941564, 7.213760272478696, 15.278434387724184, 15.83025304054901, 0.0, 0.0, 9.350111575426293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.483116603200756, 12.040786329036107, 11.180464216270632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.506149909701286, 14.130325557704492, 0.0, 0.0, 12.623119605517639, 23.886373380474176, 5.747618696227826, 0.0, 15.50830756853781, 9.612962719552229, 23.929825109039715, 13.520949867106209, 25.821557013371866, 12.639887341795681, 16.563405216858182, 16.298122945238525, 11.753023207548939, 19.38937086781055, 3.9333826761690447, 26.988096257248746, 7.716919602010264, 30.817045157613855, 7.535017439448509, 27.464277618996306, 15.808518281110441, 25.056882073783278, 17.22491855486352, 16.970692098435876, 26.827882331915667, 4.76410488680787, 14.537627816414478, 10.334933164742775, 26.50281145207024, 17.023969990761408, 11.808218794191085, 12.092746265483623, 19.346562027019974, 27.84491836483643, 14.26082762846275, 7.307391312602476, 0.0, 0.0, 9.1693308484301, 0.0, 9.555996214599844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.782708147554146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.940472912778905, 0.0, 0.0, 7.4457218673168875, 0.0, 0.0, 11.990509811158486, 23.43182824011405, 0.0, 20.87267062762542, 24.591473625290277, 4.550523352168579, 13.915039728466333, 13.217303279083508, 24.413447804181914, 8.340536289406142, 19.221064030294166, 7.253501011150695, 14.215221126140513, 31.71442570300443, 20.532608867748287, 30.800437970029524, 27.329199314441112, 37.85178098795286, 14.016492908641515, 13.555016065391673, 28.44228918149635, 32.730353444229706, 7.686515358845656, 31.47193006798544, 35.80450427239423, 12.254926459496753, 17.084765977485436, 13.715362532289042, 14.126876605329882, 9.920911771141526, 9.985467171260527, 0.0, 17.46434470441563, 18.55536800485455, 0.0, 6.66513169853516, 29.272651915996725, 0.0, 7.863535006474621, 8.204926741891985, 0.0, 9.607314753152645, 9.687861135699645, 10.518059126267081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04139318108135, 0.0, 0.0, 0.0, 7.679996035389319, 0.0, 6.819193232491305, 25.812146088825095, 12.46688411541945, 0.0, 21.73230376349418, 5.361255820056245, 19.035682010343322, 23.30322715808078, 21.995210901879148, 8.089831790067658, 23.714719035305762, 29.85495288654129, 21.915837983586705, 10.665438083482204, 19.886638204906603, 16.21508517738812, 44.380827064079156, 25.03140846724543, 43.53670995917351, 18.451798041356806, 39.571604800178775, 24.750327367434714, 15.359342242424153, 25.16021714652994, 42.740647635596005, 30.66614846252848, 21.046606992033567, 14.237220878677746, 30.04956024977756, 19.48088417164439, 4.128367502630757, 13.118012954167735, 14.135978913437642, 19.396277152801385, 5.160733113074151, 11.187033317852066, 17.563589209697344, 11.911975271429062, 13.072091067908229, 6.744643287466357, 7.320337556813292, 7.448865862333962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.476919425657906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.90771325974671, 12.862989157165712, 24.47417865148239, 5.7394917487161665, 10.931620425620885, 25.724936213853972, 14.27746424771829, 9.128981034106243, 29.970825617290505, 7.928801542270209, 15.335208137581958, 14.656045381118332, 24.048630407973675, 26.383198612970645, 28.17169428557682, 23.907528921527174, 8.99311061561986, 26.318692222833885, 19.661390867916232, 22.07101495822213, 21.76750288940249, 37.48054692826017, 32.958848990834184, 19.380176474654384, 14.349552287296135, 11.50097503076284, 32.87788415624407, 15.602023569131584, 13.115287220208733, 23.950071857753215, 10.39987304376072, 26.742655998562693, 24.401689119595854, 25.677369856330316, 13.641902126744895, 19.205445018658374, 15.414304059357187, 16.632151210635516, 5.811712225817974, 36.894094151248915, 0.0, 7.122897670413621, 7.365303235982192, 0.0, 24.448560340553463, 0.0, 0.0, 0.0, 0.0, 10.722785063088995, 0.0, 0.0, 0.0, 13.150585135755565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04576932714837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.556134570852558, 22.97736618305438, 0.0, 0.0, 10.120451108531162, 0.0, 0.0, 0.0, 15.922195209245732, 7.76633911120967, 7.08758638899117, 6.910137111795205, 0.0, 5.773286528567786, 21.45970864421321, 20.42937365831101, 28.84725082983361, 45.270779793573496, 12.273628557523594, 31.37739643338275, 26.239116573567053, 31.292306776885468, 16.780273411807137, 43.4669007102765, 23.346199283847504, 27.933237775700196, 24.571631859350322, 20.74731848837061, 22.547077028625715, 31.401823525394583, 33.47755922371345, 26.027541488894002, 36.23384988661514, 24.131499455464642, 24.231593658222533, 43.66031235997703, 35.95547900792143, 29.139754897695283, 17.0799632762686, 20.613886746830104, 27.53310970611963, 26.362722665469708, 24.724582101113402, 18.55862707634531, 23.48144003527003, 16.570995906067505, 4.630287130639889, 9.608837088918744, 10.285345083055995, 10.906572067274187, 11.643662019290627, 12.271344917431167, 19.810925225668672, 14.241663316390051, 14.929759690676327, 15.695042471728087, 0.0, 26.820411551537397, 0.0, 19.811518614885955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.022023558427186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.15345370136755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.796436018153734, 21.551582221884694, 13.398034666260086, 12.834207357327664, 5.950772163747547, 16.47952801106808, 15.355527738329924, 9.662380259953462, 8.976689136802005, 8.336311490155321, 43.111238779465175, 10.846510796044814, 31.443554923393396, 32.32951346449266, 33.08905632440246, 25.73690590502669, 18.855982321670336, 27.717733384154528, 24.16929555817104, 32.5773765661032, 28.875864402885934, 30.109104676807757, 53.278984395609264, 33.57482383387074, 35.911543088040325, 23.479736815072826, 34.49558552403765, 21.790999029279252, 25.367013566059992, 31.15862106950175, 12.4655636072286, 29.401588726526803, 22.595988317861472, 17.76320434261981, 35.147602342897564, 7.047663629974897, 14.851308731178436, 22.93874773002458, 20.846927603410798, 35.92413543146813, 9.856992750796834, 26.014774396997435, 16.708200622578445, 5.91250686625941, 6.094773705194124, 13.65034808799021, 7.0995314770451134, 7.711078461819014, 0.0, 0.0, 18.26579678701703, 0.0, 0.0, 0.0, 0.0, 12.359698002117668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.964607469119809, 0.0, 7.6886918812441, 14.860254539868356, 6.976141102920844, 12.809381729086812, 11.99363081089334, 5.683204032800376, 5.293444129804888, 9.766316246613965, 18.0540722179363, 25.48881842962269, 31.492467007142423, 36.781804465178006, 10.192793725062742, 37.63592469734482, 52.51845414574255, 24.53188250031553, 30.80555497984603, 16.849000131686815, 20.724665206650165, 25.73529748784714, 38.45288670030334, 28.334910937104333, 22.340004059894977, 45.91259430806845, 27.720904889787015, 37.72586365451012, 27.512800076114186, 22.438005457199388, 20.56945826956743, 16.516631363170575, 16.788579492849966, 38.374224557050944, 19.33635789797816, 17.768220109035358, 16.445989253141278, 17.46079076651872, 41.15383429648058, 23.305221356835848, 14.615548722438756, 7.844331933201617, 12.824777798776122, 18.363218107192505, 14.665825942474022, 5.074958239527188, 0.0, 5.866074866328307, 38.83120551129576, 7.183894615979856, 14.84508794641026, 0.0, 25.14758294659083, 8.875197300892273, 0.0, 0.0, 10.878229570287653, 21.964473114016513, 11.518517839556045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.574015544442185, 0.0, 0.0, 9.11151429676485, 8.356683857496353, 0.0, 7.3270838321200396, 14.261808814172884, 13.421308132469473, 6.244232570997385, 11.714424035884733, 32.125209327278185, 14.83892125798872, 14.06874203873872, 16.888778836997684, 19.99232639067638, 14.620830475612411, 33.69558173290923, 40.73165829428086, 29.050048517421573, 23.165056807524696, 23.71211523321662, 22.37688670562641, 21.03142649361996, 23.689173722357683, 20.063032741816322, 31.666729454891883, 25.420353773460835, 25.65169917253989, 21.929561143419402, 22.30029019152261, 18.623563216101722, 31.843425378163687, 16.316089453413237, 22.291786733688895, 35.47514324446663, 24.473620206848004, 28.195112600483174, 12.985256358808796, 27.125414175199253, 42.11214153792393, 24.068947960789096, 28.733764533688472, 25.06667561046921, 30.475170007768504, 25.587114733311644, 35.35597928492604, 4.285935027393695, 18.95462592629335, 5.0907016172195085, 21.164117204942812, 11.774172422504183, 24.56478749447784, 0.0, 0.0, 22.821147710717206, 15.99639378783933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.954916077914868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.246046199047326, 8.94973608372984, 0.0, 0.0, 7.42989212683968, 6.599999809246023, 19.180720346691984, 23.752837821785107, 16.076538022934674, 20.673309354361145, 37.74737023100879, 17.771009091942325, 28.059977734548458, 7.4728345709363175, 23.772638828792445, 18.734339509116424, 20.18013875910607, 23.597244080308887, 29.477771900171682, 39.80824220649606, 46.91671344950455, 28.775357544630623, 33.18960136826902, 44.21887204355408, 29.412825335156707, 15.750468297975614, 18.042621342213682, 32.230842541485316, 18.148540268537317, 33.02792326714657, 17.114814366727323, 32.072166428204746, 29.182048172028818, 33.28375778085775, 30.399377018593658, 26.01173673572661, 36.13955567126747, 32.62081090797904, 24.313403602106057, 27.11236882793153, 34.26377707489031, 49.695698562605024, 31.645729249364834, 24.127026671275853, 37.05470761037043, 15.746148844964974, 17.819834952333252, 14.372499920014992, 45.43824826849321, 16.312505449731297, 0.0, 25.220948521624607, 6.846478248060821, 14.79749740024302, 7.80562343724356, 16.982793702834115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.52228746592777, 0.0, 0.0, 0.0, 0.0, 0.0, 8.540067799232546, 0.0, 30.257948157261456, 7.212233811275606, 20.08396088169154, 6.291449070927884, 11.849876469825134, 15.74421928079018, 29.741011224212773, 13.689950640342111, 29.289786654259295, 15.40918492245064, 28.07336489192981, 28.827708166768872, 18.00177134527761, 31.855474376769287, 19.205208771284763, 24.67101297824654, 26.57557714848147, 17.81999432798259, 38.43591880235796, 35.4368531533444, 24.075909731127787, 27.88566924616586, 26.901812703028412, 25.788582121037045, 23.037205010570233, 22.74691837048768, 23.920974801905533, 33.77037759576947, 20.731294666013937, 25.62946352312456, 24.727090379168995, 33.869342097722246, 45.58365101244769, 31.07312213299972, 31.16149587052966, 36.29877277484718, 21.896090980162963, 34.202141725993215, 26.112962772640078, 32.18315286763007, 32.1247435940665, 45.15760554627489, 15.29227275993207, 8.281952493167022, 17.968647833239267, 9.754980424324675, 25.99925346982152, 11.60552487920081, 12.385500818750945, 6.51107732792252, 14.194338617617412, 0.0, 24.42399377487142, 0.0, 0.0, 0.0, 0.0, 0.0, 11.906849645878953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.593209290963756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.339517935026437, 0.0, 14.619520859973282, 7.04922768497222, 19.449318588379285, 11.975784396485196, 16.197158154786358, 0.0, 37.09352788870528, 12.990628071246677, 12.115914005806316, 32.93232952007431, 22.948874730785843, 32.704500504562894, 29.717825083863694, 39.2668372771025, 33.06769499274013, 25.806969311584805, 43.82427514127488, 32.935339613196646, 20.198405747655013, 30.319704694685132, 37.1811074436142, 29.730245967569452, 20.038208827967892, 22.21160253968355, 20.392035527793993, 17.781727887508612, 23.252025163853304, 24.76786720107023, 28.95736400620029, 19.386934385089827, 16.71676433056758, 29.12760123901485, 21.106250139854037, 30.72630471104298, 32.891269520958396, 30.048770262144895, 17.78253292985094, 27.72075057535836, 42.41787726623684, 27.19806341078344, 29.654779281936463, 32.62793262360806, 36.03642872893782, 31.416217084552585, 30.329389830545537, 32.887156553912256, 10.08477358241899, 16.58223445375397, 0.0, 0.0, 13.935872148504071, 14.704284885177822, 31.92649460817625, 0.0, 8.75117701454365, 9.951520196267419, 0.0, 0.0, 11.163142250366644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.900428282335636, 10.118933485198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30.989143556206994, 17.62598030011264, 10.629733841984182, 5.045498494672866, 13.48908112081962, 24.630928456606725, 23.341676043323147, 13.498507742296136, 41.05270491631667, 25.4438308374419, 33.34006660880466, 27.186772892939747, 28.15801642323244, 40.268265087105945, 21.147046915635435, 21.64619226320122, 36.05927500316296, 27.64550897048044, 26.916119479841402, 25.02228079748444, 15.325888697384766, 23.70874865331386, 21.592668495179726, 14.671778797823212, 19.16065030543864, 17.742594463363588, 24.050839333433913, 25.17043063493164, 25.632836239365517, 16.344288404526694, 34.79666540815366, 30.919400647181803, 17.694199094735996, 26.205286506954774, 32.118936532224595, 18.375444280048995, 31.797669630038804, 20.24542740023844, 16.698123929929295, 18.35781774951042, 48.268657081237016, 41.2375759942298, 12.329196457471713, 13.511242974371472, 24.677654416605115, 5.341430819105314, 23.634951475049306, 12.825443914144143, 13.610177002537656, 7.173830504344104, 8.008273537513872, 16.497570751931878, 8.852790450655238, 0.0, 30.245505709400117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.1729112484884, 0.0, 0.0, 10.863432737155124, 0.0, 9.726804592093233, 9.34234199608807, 16.93717960042091, 0.0, 0.0, 6.870812325542281, 26.579872427710754, 5.999725512688793, 17.085241387506883, 20.897592048600163, 24.162049901246267, 21.876706109904568, 20.10903932845201, 14.519427115975239, 26.264225802863102, 29.49607103783366, 18.500699569316808, 31.11712761718693, 18.99253531235623, 33.85882016215605, 21.748072381317776, 24.932309386896108, 29.56568683093075, 20.297313970535992, 18.84613813597381, 29.54366968194033, 16.265026698037463, 21.270112419652637, 22.594468698656737, 17.421783659122127, 13.429579392624017, 17.20445194433063, 20.203170089065303, 24.234834920897423, 16.97724800417629, 23.287274710506257, 18.137157295741527, 34.30550279093998, 30.30825321209848, 24.14720425144345, 41.64814659611398, 27.695405451111743, 25.087623206112724, 33.55076972578813, 40.16904305385777, 18.864181879237897, 44.40498649225306, 16.92285251478536, 35.841746968272886, 19.89778029687176, 17.51791800185739, 38.52391469222232, 20.456222046711265, 28.19398168879031, 0.0, 13.196355889819785, 0.0, 7.570609453917466, 8.37031986518012, 0.0, 0.0, 9.75789380569095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.09847484622628, 16.56286122542545, 0.0, 14.87795652143199, 13.80223626733621, 6.307013326936365, 23.3520964979759, 10.694398461785992, 20.301999042674822, 41.749155543890225, 12.874577097648523, 11.66822681226225, 23.868336616005113, 21.794913375487027, 14.335921014281999, 20.189126232113267, 31.477757843592588, 25.978943799896147, 21.24821921543203, 24.45603603611372, 29.96486154118728, 35.307616781234366, 26.9118852545783, 19.594140922902408, 23.454712201946116, 17.499408620572837, 11.445261383942771, 16.447589985346177, 12.502207247779626, 12.643602337589265, 18.313281952071073, 11.935191906527022, 11.891782196965547, 19.51434742842991, 15.041333405353047, 12.394541017171129, 21.827834734643936, 27.674876958406028, 25.215905475911814, 29.068671831912567, 22.80733843096617, 20.953465076838448, 23.856823151499707, 31.361202069998054, 25.276303981884308, 33.52771248718702, 12.491719267755393, 20.8752584724292, 31.02279806710608, 12.858451044368685, 9.602504520459696, 15.130873495431477, 5.260878439228097, 17.933437612586644, 0.0, 6.97439804596437, 7.317914835005864, 0.0, 8.682487002464029, 0.0, 0.0, 10.04139938325669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.660062848437516, 0.0, 10.384895989454993, 9.405736387338546, 8.926417087603719, 8.451404220046127, 0.0, 0.0, 13.588253647570662, 6.276711372643475, 11.484078861180178, 5.264945426062222, 24.8288998262306, 13.256175252432161, 24.271691038850275, 22.38838747507508, 6.8309727458550595, 63.26699362221367, 40.93186949662144, 29.015967733053564, 29.83891964015259, 32.15348034004717, 16.177421258348854, 33.94655415362633, 29.164376317045317, 17.521157591257108, 27.534631930441854, 20.08259939172489, 15.37613828409366, 16.667154691807898, 8.494349109073115, 15.517015231128028, 9.834948071680413, 7.135722991084876, 9.099423788309204, 14.773084806437177, 10.337221783467085, 13.3075380735109, 17.662416289870755, 18.993715852201642, 20.331092094669607, 21.50732491044815, 27.826676278751425, 22.416717840645177, 25.037689737083692, 21.098340742064643, 39.28305704229571, 25.165166925534574, 33.63610625352512, 21.945932767176295, 30.10478445547885, 36.981154891558205, 30.308243674741952, 20.385717333614444, 30.962832277600686, 10.177646036414643, 16.22638407126172, 17.471850409167104, 12.70942466019914, 0.0, 7.487863349797882, 0.0, 8.491678989151088, 0.0, 0.0, 0.0, 22.29897465687943, 11.312478500200546, 0.0, 0.0, 0.0, 14.126411949369867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.209949042624226, 0.0, 0.0, 0.0, 9.533668820163026, 9.084714349888705, 8.218335307016474, 7.995540259254436, 7.134863694528537, 6.679887342335205, 0.0, 5.9361202252478185, 21.626235362861397, 14.841360244705657, 13.133029276410108, 36.2628278145881, 32.71706944051127, 9.425301028739263, 17.48955863658477, 32.22694808778863, 20.684410391625544, 32.64331019447755, 8.843922318184914, 26.117829572862163, 20.53158368385214, 37.60348800254891, 23.293973248134836, 24.386190613327567, 18.919769290266082, 21.81540962762764, 15.356185853897838, 13.386702846462073, 9.512492591443054, 7.863576728375129, 9.020607950213325, 7.529490006997773, 7.808285170587875, 9.167136900039186, 11.57742795168149, 10.973480947344488, 13.0186419113996, 23.90663198490636, 24.358819181512104, 21.858818263197517, 30.187873058405582, 26.266083042151088, 23.999296600432988, 35.50874669815096, 28.369756564845225, 29.777226470112225, 31.23989430569485, 22.910138349448662, 26.10478666825387, 24.841143791799297, 23.77044143840864, 21.87525625403014, 19.42074503302156, 36.8331041715542, 5.547081207334782, 6.113066038349138, 6.487639473512662, 0.0, 0.0, 8.21403150243872, 17.384291628849958, 0.0, 0.0, 0.0, 0.0, 12.194288447342037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.240829941900742, 0.0, 0.0, 0.0, 9.008795660689978, 0.0, 0.0, 7.036009850550751, 13.352664274491948, 24.5142285937528, 5.46490162427025, 10.486215499936959, 27.87921178570216, 34.547459160587835, 15.642785590767186, 39.04487652341257, 15.953104969037929, 17.314263036309278, 28.272714258295697, 37.9465992648494, 29.448586689375524, 33.74830706248044, 15.814851422515694, 19.412036160087247, 30.73279972398328, 13.562448795187104, 19.956239980555818, 16.252149307333468, 13.309350269195354, 13.361819468711863, 8.802206888123395, 8.528870216408956, 6.330075599341857, 3.5035969759905057, 4.782820912579143, 4.672907474666917, 7.984633363376749, 11.651762653911804, 14.295360093688394, 14.758953724114933, 15.665978931372747, 20.97544780216645, 28.331681912768662, 31.620400526862234, 23.304010392121548, 27.56918350990958, 27.159582209442384, 27.716635104802837, 24.44205713326356, 35.2184047247206, 31.473085596370368, 18.90761493719862, 28.034064439377918, 19.628585243186052, 8.965942769598179, 18.67653595629754, 10.178145409221711, 16.649348189560317, 23.99408316677318, 0.0, 7.093891995822983, 15.51095731989691, 8.192960899023621, 9.132056556042752, 0.0, 20.41138287520834, 0.0, 0.0, 0.0, 25.706229751392144, 13.258862743016328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.153388954807903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.176376887414247, 19.28077513226412, 6.190116119679766, 22.495950899932556, 0.0, 28.067534473739144, 8.242902636820515, 3.704658301664674, 34.42903013985756, 18.931032567718646, 41.499885574270046, 24.61843488908081, 19.644766202945018, 24.661929557467616, 20.876112728740452, 22.27156103502256, 19.786343518965587, 31.94271543131465, 16.555342637544868, 16.74949136754696, 12.569840203835044, 11.554769782438143, 10.245582892013868, 8.114634734866021, 5.6915159705524605, 3.238383169892228, 2.3961351046541775, 2.9616152709024433, 3.419553373207075, 3.7562625213041767, 5.544227288307424, 9.0302290635342, 13.65549197608733, 13.348570450325505, 16.645822464458128, 15.647017055613782, 16.40861396377346, 21.113155261792574, 30.558314098174954, 15.988128686432553, 39.242702281731546, 36.38863769118388, 39.75817127026018, 22.729017341011648, 28.157450875664605, 13.64532738351466, 15.436020033300487, 4.334505572008058, 4.5946345071657575, 10.34385004575449, 16.77140625282386, 18.493602448405774, 6.483621982514807, 6.908763021294441, 15.20911157037958, 0.0, 8.973075573438498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.336047529741744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.537346411869393, 0.0, 9.63848260533677, 8.8458673051159, 16.258218263743018, 7.63007562799824, 6.844356944241978, 6.367080087376393, 5.939210062220921, 0.0, 15.156958663182998, 0.0, 17.131012158720853, 11.281711194096442, 31.175011535809478, 11.92039221351031, 43.619104219750234, 29.654318795729214, 30.146144768606298, 27.589294632958115, 39.30235513346173, 34.24808410677397, 38.44190133516287, 18.452486149528365, 27.42550741847295, 21.864971991804218, 14.924038845582016, 9.650230295078927, 7.280483599160583, 5.644615962538039, 2.8706101832672073, 2.124680767188776, 0.8525381817301357, 0.9785113320242633, 2.27502375300581, 3.6563097254041805, 4.631194448625679, 8.70234300636644, 11.332305125625066, 12.362251977025645, 17.10588741740762, 23.123651492334563, 20.081394280595152, 22.528065801328584, 25.891958047442568, 25.477385326338183, 31.76905621342602, 30.870294733524894, 33.996751255657216, 19.16446494484049, 24.50381307919716, 17.468214778303057, 30.485791202773516, 17.028182346814802, 18.70141782832851, 20.347807868573433, 16.6436820557395, 6.046226430109846, 6.474595248113848, 13.894465139299468, 7.323519486122109, 7.85911539704611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.492983448821272, 16.01133363319159, 7.465178781190943, 6.893940873081953, 26.248618033670745, 5.824367650728496, 16.217603785378703, 10.075421314133731, 13.889499365629959, 32.91622559195817, 30.561608073216682, 16.938400262244077, 12.325165382963824, 21.799711825804224, 31.747091316269067, 33.88696682861894, 41.74267161009685, 23.63246194206969, 31.761594705485198, 25.335644122125014, 28.926288305398877, 18.039970133700027, 23.00720290642688, 13.098634377903416, 8.64324134118583, 7.079080617806863, 4.146033544858598, 2.455632084368443, 0.8775414676689082, 0.27111880630645147, 0.2270178759129509, 1.1283359984949235, 2.4648869172573793, 4.3695851742479475, 6.3694617794292885, 9.024269958213674, 14.894265252395577, 12.276973285985738, 20.252716973148615, 21.91927476532546, 18.568143434278635, 29.085498895289202, 26.13036250564898, 28.78521991430198, 18.9550999281865, 31.144294791847386, 19.11152760158352, 31.16870833719921, 34.28052234660303, 22.83648900753683, 28.973340267145197, 4.657814149949503, 20.00826786396504, 11.137885956570342, 23.793174255325425, 12.972175669605113, 6.976195635607321, 0.0, 0.0, 0.0, 9.40097844375153, 0.0, 10.423583062499304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.86027966897886, 0.0, 8.761393223858402, 0.0, 0.0, 6.999772448198767, 0.0, 11.88576958265906, 16.56100595993291, 10.40605059631434, 22.654040328110383, 12.6803678627507, 18.842993279971267, 20.780885593107715, 33.85549941049086, 30.00560344995658, 14.82988322406395, 20.947133520099648, 29.512406146889735, 25.103672097982027, 16.92701652243825, 31.40191148069845, 22.68827046271425, 16.296362917474713, 16.94485473960153, 15.740462029968528, 10.570069354700165, 9.36166332611491, 3.777308163454032, 1.9242786602944573, 1.0684334065796057, 0.26879136591862207, 0.23504614706565974, 0.659384864495866, 2.6615050100702122, 4.642128622635772, 6.313828219575138, 11.382196880532529, 13.467190053334106, 14.045778353013684, 14.848804095876304, 20.29549733908259, 26.75001536085803, 19.5940375050494, 25.51786812229348, 25.38747149276785, 42.57977448878097, 33.53725478046563, 24.53633821996451, 24.29148208273382, 27.002228462439028, 26.685356572770285, 16.41111003188101, 27.794296550567687, 20.447224309343824, 16.621537694376283, 17.705282234540707, 19.97664870161478, 7.031685972138513, 7.597935428336296, 8.116566326900298, 8.792865823520442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.3563406530753, 0.0, 0.0, 7.816976120939454, 7.295184300619572, 0.0, 5.895637289030457, 5.650463822446718, 15.361861487811316, 32.873576330484084, 20.950061301512346, 18.77570035367393, 20.32844235395195, 36.16666713329317, 49.06303422934991, 27.16346878462753, 21.617158686902815, 23.82155804317407, 31.272513677341184, 23.318179518523586, 24.615669176479656, 21.499489248333276, 19.690312497776223, 17.225876367709212, 13.618249671047327, 12.86433212849131, 8.522358382686422, 6.418756964367325, 2.741095825688941, 1.9597947823539537, 1.3060521291998406, 1.1595373306273944, 1.6466615756287364, 3.6283318690813564, 6.51994284406365, 9.356132168029003, 10.835131747900345, 14.698538880747885, 13.606830740275326, 11.867439825786887, 23.907156661507788, 22.255316355426576, 21.36979401466501, 30.18917491270766, 18.508458588585313, 23.125553047725198, 28.936226810412336, 16.835850687676604, 18.42009217138871, 34.715509065271156, 7.874333796303372, 25.11407301044611, 18.45958508700773, 15.623274139388425, 0.0, 0.0, 12.888804806385178, 0.0, 15.159634394736074, 8.42586095925717, 8.87024165873929, 0.0, 0.0, 0.0, 11.25670940312615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.850326943087168, 0.0, 0.0, 0.0, 0.0, 0.0, 8.857882652025392, 0.0, 0.0, 21.095074394489437, 0.0, 24.534258667063465, 5.514905348849353, 15.5913826304011, 23.767442813082226, 17.269468484039436, 30.710492846339815, 42.638853208455714, 24.66054958651595, 36.19152362867733, 44.89384681757604, 38.72188734063161, 29.90062570055147, 29.014811870206202, 27.19430769598603, 22.891472684497035, 26.972170808832846, 22.803805259047042, 21.88395045458569, 17.80422701785064, 11.875802372120644, 10.73440970982848, 6.299700310288096, 3.1597040241320036, 3.715124239161183, 2.3284801339374166, 2.837614867238177, 2.707161016349053, 4.784774195162909, 7.764527154265211, 8.716140003111263, 11.130033296310128, 17.592076112810105, 15.563971427969415, 18.901470731222545, 25.13879654730288, 28.23993408557932, 34.63466264467156, 27.68475542691432, 37.26302073435266, 25.8874294661112, 34.37878123656214, 47.45220441156605, 18.810076949729083, 16.963996561988814, 15.085630642240632, 30.074515009291495, 13.966337473528384, 35.42453974176587, 22.547971291196387, 18.08865271588132, 12.949565426982703, 7.02774489601798, 15.314454523825416, 8.016380326828115, 8.904008252033208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.312450748596588, 0.0, 17.626155087365028, 8.133927650173176, 0.0, 14.040757972052127, 19.805767163152876, 18.341407273296117, 16.962140779061773, 10.522137706058238, 19.22472501017813, 4.478022898328414, 35.54221425636326, 17.702508741196716, 6.503962054134689, 25.29717959363515, 43.28950727792264, 24.71980251438288, 15.69693562081703, 18.38445822798371, 32.617177364394394, 20.8535832545152, 20.33309051392222, 19.421688553535102, 21.026541467268377, 14.711569640223658, 13.402392763246342, 11.488155851097828, 9.093087472689897, 6.847205063829936, 4.643598826133427, 3.619526294397999, 3.0632300290293673, 4.293340098144949, 7.554677571948431, 9.793891983275753, 10.906160333021813, 13.598696180641303, 14.36063575356164, 18.369615482971128, 18.404132539081623, 25.502567799758225, 40.099236201533834, 29.03830156686558, 26.808384407264498, 24.79188254517361, 29.40989154703646, 25.551832705467962, 34.74495282362888, 19.4385769447408, 42.32912915583295, 34.89438679354069, 21.787094738896997, 18.578974307436674, 15.165385149237878, 5.39202648047083, 6.056493485504526, 19.805782714374658, 29.298410408419503, 7.673624242288125, 0.0, 8.844830345826477, 0.0, 10.253578455759092, 10.590237390501402, 11.067265204204604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.778157756167427, 14.37368628045255, 6.471642963245249, 6.030709294570019, 11.135481459804701, 0.0, 24.349753831955958, 21.829714525933305, 16.158934202824238, 21.97974854711757, 22.919477245936342, 38.42752446413638, 18.314640021074027, 34.757986001784104, 26.34880293991505, 24.28732855484585, 32.38833210808129, 25.920674708254012, 25.177521133218402, 17.50967514446126, 25.28159574682756, 13.938411328869956, 15.973022282511858, 14.53629047149693, 8.954537660856133, 9.469712075263981, 7.077233345852675, 7.783267184502883, 6.191370310336775, 8.487821000981997, 7.978946116964099, 10.078360512849969, 13.315175036620442, 10.242036723396419, 15.130646662103874, 24.037073357170577, 21.244394301911335, 17.74753113234468, 20.96121655836467, 28.543786141818522, 30.43492741510174, 40.39637897958084, 25.106180814440577, 40.907442329061155, 18.072011948658883, 25.333809711944642, 26.02302537821904, 28.217088858988937, 21.85698046064872, 4.8773454577601, 15.903722414299075, 0.0, 12.268597364640293, 6.481302489731191, 6.98626945179969, 15.421923295410146, 0.0, 0.0, 0.0, 10.096227108909433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.98795514611698, 0.0, 0.0, 0.0, 0.0, 11.058404785500212, 0.0, 0.0, 0.0, 0.0, 7.88653539370682, 0.0, 0.0, 12.231967921339706, 11.590978876676914, 11.006943384037054, 14.934522052715216, 8.850360822751433, 20.567666325340316, 32.92795172575271, 20.229748646771235, 24.65283844990028, 21.6773235275343, 26.41329978064966, 16.969303486692624, 27.845380582503598, 21.47570497367842, 27.720020923192394, 16.729515665974198, 34.623476894873306, 21.212795681545238, 20.907107260850275, 16.48598374730345, 18.52437579830131, 14.255011207290288, 10.592452737703159, 12.673585429541573, 15.449281833466179, 12.053009279281632, 11.29365982565434, 9.91954693793523, 9.932163817699916, 14.423140354251142, 17.57389608487392, 26.93175173662816, 24.73173049613697, 22.408088530457746, 27.703471140938834, 17.88850128279352, 29.39272035651677, 29.95581822600392, 36.531920938796006, 14.24782223773807, 40.19873446580964, 18.18881107813314, 23.156741697246343, 26.127437637019035, 12.24090219221253, 13.365004417697374, 29.616031303853955, 10.722159732253427, 29.131719801250625, 12.129853284816647, 7.034002599127715, 7.29924446070895, 0.0, 17.30002208319835, 9.087504432542117, 9.366905543369818, 0.0, 0.0, 0.0, 12.15355499736465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.780901603596861, 0.0, 0.0, 0.0, 0.0, 13.730470562657263, 25.366767494521937, 11.672293497772843, 11.109814296151635, 5.223891820678528, 4.769305397409283, 25.32711682951114, 35.03320061612837, 20.549882363367914, 12.48215895651656, 19.9190546189108, 20.093867762145134, 35.83539971573089, 33.69502152358236, 38.1824226605999, 29.504929330223014, 28.015974143740703, 27.378430630065097, 27.544877762700285, 16.784214518478624, 21.62851438511937, 20.223870897839358, 14.217969957561118, 13.676820027322186, 16.339994427195375, 11.351463051694184, 16.042933355514876, 17.696275782110696, 16.48064039212042, 16.69105644236642, 11.1563708042358, 13.611148101687728, 18.24491307987067, 31.47764210777403, 40.64008167019766, 32.65035194385344, 20.022873463431743, 29.72509875742904, 21.81251532413119, 29.02287235895215, 30.166545561673964, 38.98451832793384, 31.122305855056098, 24.051927979540093, 11.534740809869602, 13.101729800821175, 14.0853641698803, 20.421428284139356, 16.649418266531754, 12.083279189310026, 6.561385984022725, 6.700445819517458, 14.85562153546676, 15.930057070988521, 0.0, 27.559135256736585, 9.55371284967571, 20.83001690341152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.53763508999899, 11.28655048043214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.550588286883507, 10.29712213132466, 19.25529715752782, 26.20231732063011, 20.00874340356974, 14.732459727068047, 39.132970172018204, 23.827412228810765, 29.443963377006884, 30.89187173829533, 20.99809171454389, 37.239216140519495, 25.29192894532905, 19.109227809545285, 18.12366925155998, 25.913402414631754, 26.2827217892999, 15.147628952738144, 16.56477877521323, 19.957591994907922, 18.806142535098513, 17.692180835946928, 22.154293547757227, 17.73843206338555, 11.626595084800286, 19.039215255420366, 20.036919602861555, 23.64526429687833, 20.920038313181927, 23.55810517930833, 15.19726163985119, 33.55794652970399, 29.065620255255208, 26.07343400305946, 37.62213602349414, 25.482595514855035, 27.917296559888197, 16.20337603240285, 26.29731395499547, 29.40171302505625, 32.660255563916664, 12.002794283778975, 8.971453598745445, 0.0, 20.24233052978384, 16.759377807475005, 18.467701068907733, 12.819811571798, 6.872881929323616, 7.3424265793415096, 8.348253782712504, 0.0, 9.453860792897753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.382796713412938, 0.0, 0.0, 0.0, 8.820748599872216, 8.163207936042962, 7.48801681069324, 7.305887554615, 13.831449731298317, 24.643670875282314, 5.57197968397419, 26.65036834578649, 9.706289154205779, 31.522677332891575, 28.699070114314527, 14.89405382635749, 17.40293063790135, 21.488973340969753, 34.10106276846127, 10.223490654618416, 25.252998578097277, 20.81665657567128, 27.266146931451217, 34.28168537105896, 38.16680603411008, 31.7540969964087, 26.358195555038954, 25.190948227250843, 22.374948015967725, 22.539664071685493, 19.469362162173173, 16.4112989226799, 19.64173801756526, 18.629357198168464, 23.04856172615214, 24.229826536451554, 22.630323834969417, 29.683245518965506, 22.414025242374056, 17.204810686321906, 19.43899845228422, 40.102043433245264, 28.886025377825298, 38.28597087801775, 26.22019295116018, 24.9148005643358, 27.967322464016917, 27.850454681155004, 21.72344694403003, 37.81510150297426, 11.577766911302641, 37.48794663386318, 22.562743585892246, 5.053438140805714, 16.255455959074087, 11.918369662919185, 0.0, 13.198633337545953, 0.0, 14.976304536555169, 24.62812597514977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.201824260196629, 23.590356906051706, 0.0, 6.880223784329489, 12.669456031412142, 12.053808653090844, 11.414774551696283, 15.4820905327026, 23.480848270764746, 17.476385008366996, 12.098303472579857, 18.233171795207905, 49.42077124496205, 30.270553801149717, 24.070443535498033, 31.42568395450727, 31.786081757913717, 29.952038442438134, 38.09205130892771, 27.68252233052423, 30.913397709633365, 17.120600465991597, 30.474959985364286, 38.97758003232178, 23.083856504225974, 16.339186087232196, 25.872368091486717, 20.969777096561927, 31.927582729804122, 23.885815822744707, 33.864476699034, 30.25213953066553, 29.065174006505863, 23.98976064132909, 26.3777391850271, 30.320305885155154, 19.083358631589054, 21.25334262204314, 41.16420280159801, 26.5663656875276, 39.036401630030504, 32.75934695585864, 14.911472505760761, 35.41181196754873, 21.68584837066905, 19.63402530025771, 17.16749369901125, 18.63639519069642, 15.380936270217346, 5.342553920961569, 11.992086290966071, 6.563093367852716, 0.0, 0.0, 7.936540114189235, 8.766190184626867, 0.0, 9.485408693936478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.304798203050833, 0.0, 9.723525922778023, 18.659197037997956, 0.0, 8.170182282575077, 15.273034426130149, 0.0, 0.0, 0.0, 23.31380764774745, 10.597225653854832, 9.790614606015748, 9.159781631536406, 16.449974400080592, 30.31742821138548, 35.135179193137056, 28.63043315900901, 14.575621360810505, 39.39017908202693, 35.74108250950654, 33.34646886685934, 38.159703940793776, 18.317272670061268, 16.789072752862953, 40.01544291471445, 37.80537474952754, 30.126310435802733, 27.87372471221549, 26.745047639235633, 18.11020787580801, 19.526217661985225, 19.629687459704368, 22.757307494226303, 18.806938557001608, 21.96951624352896, 18.1604579426351, 15.467250044652296, 18.290245695248572, 20.125552078223787, 34.94233384792959, 33.7911941051226, 24.49543865759108, 38.66542883802393, 18.903944594682844, 17.56249143527034, 29.00564929033998, 28.165408870865722, 19.028252749825683, 24.53191332164668, 40.427535343854835, 9.930923453885477, 0.0, 5.72279050040548, 6.264336197658339, 6.427897162612919, 0.0, 0.0, 8.382618518897534, 0.0, 0.0, 9.65953973321728, 10.152285790398693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.113975871056077, 0.0, 27.134082640378715, 8.142738677424685, 7.8805375328944285, 14.528225863996946, 13.713077983132026, 0.0, 47.75607854224146, 27.236311987935554, 20.382334280679174, 14.43304649368271, 12.971101158377945, 15.964419539903016, 14.95613115780397, 27.29533001448095, 16.055186082258206, 23.61401568037425, 37.62195367799231, 26.677922930493374, 31.06699506066213, 42.66426290950601, 26.691434343970492, 38.57555575317747, 33.86924228836612, 22.88152202391662, 12.918648073977725, 32.32791679215794, 35.18819484162065, 35.211846351561455, 28.92983921008836, 28.224109367637027, 22.07947130426659, 24.694836726770127, 24.693226152708185, 39.28323963548675, 22.69905087205667, 20.318848019641674, 20.44488362251159, 31.51596285277252, 26.449846246808637, 30.955758693801513, 23.242986265896835, 28.503799801080792, 30.944142286412358, 18.18661315257046, 24.15471072358973, 30.701611326530653, 28.22956990564699, 25.583884443787596, 16.063990047056812, 11.852653744001087, 0.0, 0.0, 0.0, 7.752608824446363, 17.05265760945564, 8.631773127103624, 0.0, 0.0, 0.0, 0.0, 12.09823892973773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.917173230005833, 0.0, 0.0, 0.0, 19.822535442930217, 18.397488398136243, 0.0, 10.565327544168115, 30.460442601539505, 13.837014574166469, 21.675804903108922, 27.91503732600368, 25.524533410270074, 29.98657592371766, 21.938497147929887, 34.90081087373445, 37.264616728675314, 30.12201158261036, 29.474403380713827, 31.810954664469893, 21.979835256890446, 42.80394674740159, 32.14810392190277, 35.557867346761725, 22.94959918662679, 25.128773704602555, 25.151685322899215, 24.90275592610006, 28.764090142705605, 26.055914710855127, 23.812931361532087, 21.545341978311864, 35.49714537917413, 36.447386037629684, 29.68620532954052, 39.10036332267141, 26.68003445663147, 29.437168808221873, 14.751214789650488, 19.023703854587406, 16.835271580244033, 10.759584681604514, 31.964536911503, 16.82916650148408, 13.898745619089283, 14.786744121481759, 5.450936366028633, 23.335860900474714, 18.59358307580824, 6.792076017677246, 13.975730308408458, 7.716387015913243, 7.886911936082252, 17.108503687717544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.973067711895899, 0.0, 0.0, 0.0, 0.0, 0.0, 9.652769635817563, 0.0, 9.070367645250471, 8.063167042043869, 8.04425469822254, 0.0, 6.800590037405176, 6.551334001453588, 23.82701728606959, 33.39753649802911, 5.435416578303198, 14.554062862850296, 27.31156822449772, 20.836692662223804, 38.95670157315083, 43.80978537645765, 30.365454431152575, 12.498085988481481, 17.30215830364218, 35.869900939026664, 25.28931697180892, 20.894603674999814, 24.845629742185565, 30.59687226493743, 25.994669505261445, 27.250578290082657, 39.69193302300567, 16.707363755648093, 32.56392672466718, 24.811171888259995, 40.5559815763933, 28.153720248356784, 36.68524344880984, 42.483452977060644, 21.572163322257015, 35.90759561528603, 40.37101986276435, 35.34406410963815, 30.37905332907918, 40.95326400277211, 31.954222401082898, 23.5854617800875, 29.024849837598556, 20.08555634469009, 21.08840747174422, 18.438792226879187, 14.833182202742499, 20.848948017538085, 5.573285588432011, 0.0, 0.0, 6.707626999515195, 0.0, 0.0, 8.460983047165694, 8.909085934256334, 9.331420263312442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.00055703205669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.874362702970704, 8.828651579962271, 16.042239678675973, 7.4710075409713905, 0.0, 19.904721606242767, 12.667465300631937, 0.0, 22.231094959726114, 15.590910632348796, 9.619076834945615, 13.311952409421549, 12.21023828256803, 27.55980978980121, 28.691933503109233, 38.00271756949226, 25.54451397287676, 21.063303448850608, 42.77768825291667, 47.369291484846926, 28.123267073780085, 24.035995224041834, 34.279326410072635, 35.83999764077679, 29.963540327299157, 33.726920154383194, 29.847866396774787, 33.950925720249074, 36.42959045834825, 27.54373811525784, 31.10778180576534, 18.023323620097237, 36.31806466658632, 17.53237456730791, 27.033138643535906, 31.09879036758993, 23.882650136801875, 22.26064691706533, 13.474082610834028, 17.972636054186957, 19.40954184084364, 8.460572875895359, 36.176001226343956, 4.825699607727081, 26.220574788700524, 0.0, 6.093293436624366, 19.293656863728046, 0.0, 0.0, 0.0, 0.0, 0.0, 17.90348522288516, 18.944950470670996, 0.0, 0.0, 0.0, 0.0, 0.0, 13.370441389138545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.182969012172173, 0.0, 0.0, 0.0, 9.07454834328353, 0.0, 15.799214935869887, 14.91971773089602, 14.039033244434838, 6.653694976070189, 12.685158884452722, 5.830511932476556, 21.929503527976323, 15.062334831069117, 19.428756733242253, 18.465882126220077, 41.93686598750816, 34.95361380989073, 22.05701407050235, 17.649484044629897, 23.19651230156447, 18.30129821654128, 23.403882274277212, 16.555809958092148, 26.986013369728482, 26.18338510214134, 32.78085414648565, 17.315137107659375, 17.191856464116874, 47.918227599142234, 23.508952555222447, 29.64490227722537, 19.432909533465004, 27.722202455650777, 47.43226254201416, 8.257322744942861, 25.750242355082232, 18.000622844083914, 28.809291677461648, 39.55806489390858, 21.037014958740766, 22.43966833550317, 39.65886247809114, 12.6788697942231, 9.079012576798599, 5.004829925381696, 10.336397753755396, 38.18920884554815, 6.024144743275409, 6.159561605292792, 13.253917374095472, 14.557872176795925, 0.0, 15.609123277483809, 0.0, 8.67014788841758, 0.0, 19.938785767597494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.204951492543493, 0.0, 0.0, 0.0, 0.0, 36.961178348253114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.604813054830053, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.216741885998402, 7.664278167684865, 14.906226306337789, 0.0, 13.057329428702454, 18.460972550845657, 23.10666661971928, 22.339847699615028, 15.102923509853278, 28.853849636631463, 35.51045848448257, 12.59211660938489, 28.180382464152366, 3.8714260166233525, 29.08436182634553, 27.341313631103734, 26.082996783347934, 25.470493480504977, 21.045947571017333, 17.74738937015989, 22.92960680552427, 33.270030464833475, 35.62236118525044, 16.417389311205504, 5.2447943912641986, 30.11228244691712, 36.013999160553794, 8.331367575904713, 17.576219168716555, 29.874663209004336, 28.095218241378607, 16.590541603319217, 34.55617484960017, 18.499464139732, 19.180973612609925, 8.237656353367633, 30.06859123129381, 13.674935662118513, 33.07608417997457, 20.513482682212604, 16.477238892381983, 23.623743366492988, 12.409052659172506, 12.670429630119521, 13.875360712132505, 14.554310072011031, 7.815371130054453, 0.0, 0.0, 0.0, 9.526749511932213, 10.237283531278342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.098468400828825, 7.633978475503065, 0.0, 0.0, 26.155188140786034, 0.0, 17.19842144512884, 10.905588675778572, 46.69035866643151, 48.466996207417836, 18.573852723693836, 21.734136949200305, 20.547718422621156, 27.691650272964075, 11.088833784903159, 33.10559443749139, 14.14155805858119, 20.35209752207108, 26.551891114719602, 15.700656034383194, 40.21459176767403, 30.44441136196486, 30.093314234975892, 34.28697490610085, 31.349768701668708, 28.349501878934984, 25.643021009512836, 19.844397383263072, 26.504422416446708, 21.065548254905597, 18.36950480121878, 3.66151595759632, 16.174597842350483, 20.787976297689347, 17.63757666358275, 14.040014259711347, 44.307219075779585, 10.364452713971342, 16.24743241374981, 11.213540560079492, 24.422369170204227, 6.4895109305187875, 0.0, 7.2087383581544, 0.0, 8.368979522067718, 8.578631922164366, 0.0, 0.0, 0.0, 0.0, 11.370851291072565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.153701186243993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.922828877167632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.943796349059471, 0.0, 0.0, 13.563668531312928, 6.751931385457393, 18.53642846491303, 0.0, 16.686586148554916, 10.64416040012491, 19.67988618126337, 14.538985658254685, 27.331151527945977, 30.69447990161096, 16.553922070479302, 11.993067442729533, 23.369659710344877, 18.6604568522378, 17.973799592821425, 14.605110327545475, 20.25833908144049, 23.70940501235754, 44.17740282460485, 31.560516465923783, 41.08521662333338, 31.182573066936815, 21.37273888814693, 40.24547632469189, 22.176538888364128, 34.400401845374425, 39.638659830106214, 16.403075454273964, 30.30974352212354, 17.90551851391208, 28.143797122431007, 5.219274313801391, 15.7107597562353, 16.49242962476253, 11.245979307445637, 12.017139404173106, 12.605688011576826, 20.27417772330785, 7.275085653791378, 0.0, 0.0, 0.0, 17.53556072925668, 0.0, 9.691518345952336, 0.0, 0.0, 0.0, 0.0, 13.061513040084797, 13.415684682105526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.31730401374782, 0.0, 10.16812422337293, 0.0, 0.0, 8.950195239705353, 16.776147281018922, 0.0, 0.0, 14.285285264890778, 0.0, 6.2236521158528415, 12.425312738704639, 5.87888425302374, 33.8218532127089, 5.1754369491267385, 15.050159361108266, 19.59046067006394, 9.531408391789196, 13.702327254160135, 17.39546923016982, 8.507999312712514, 24.41863908801964, 8.016685593140735, 22.98148493053175, 11.73617902439732, 11.386905531548937, 15.540296650078671, 11.180606246091077, 23.258107838249657, 18.9606595208978, 19.67547521309259, 23.648860267380968, 8.363276632984434, 16.73932242691169, 47.869028380852015, 8.882491707573216, 18.98740800570456, 14.957155542561262, 20.62532802032315, 16.03059727820615, 16.68167755764802, 41.78136143745098, 12.357421142777795, 12.939124625497081, 34.065339803284516, 14.368076262876357, 7.716972071616857, 0.0, 0.0, 0.0, 18.1528819101079, 0.0, 0.0, 0.0, 10.946420365069196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.884666515993654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.016132750978425, 8.611624787596435, 8.584960303425742, 0.0, 0.0, 7.338876243955879, 7.0603106245763065, 0.0, 12.92579253684484, 17.40399003961933, 0.0, 16.97871041930009, 20.841149365570732, 24.884951147534206, 9.725347467859208, 0.0, 18.381441984393682, 31.252828273283626, 22.02534798196855, 8.798239301617404, 12.812884286293706, 16.684212851390342, 21.332295841091828, 8.333085204186904, 8.518301868570196, 13.153239884330157, 34.16335072308928, 31.532433759060858, 27.41835073332246, 18.36310152172738, 4.701557405802436, 14.867105105703942, 25.152131183815193, 25.901652036912374, 16.3297259390123, 23.239281533504027, 5.807614599016011, 6.232637367940528, 6.585149204675442, 6.712582088191993, 0.0, 7.549511705513671, 16.030901415322443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.6190329945876, 0.0, 0.0, 0.0, 7.375896096910728, 34.86739088201665, 20.363623796653847, 6.21234932401362, 12.109095976190234, 23.387375442715204, 11.580075906021676, 16.738157297330442, 21.74891593763582, 5.0715285009789834, 20.180078367687813, 9.860534348885924, 9.729083204723942, 33.37991434684933, 28.742967089614005, 23.111632900949306, 18.841257201417584, 18.431282539083583, 32.4349481537933, 23.45924086684627, 23.474669070036846, 38.476587156925426, 9.779986098072538, 20.152547441694914, 46.23819831846233, 5.521028378065055, 11.136722636893593, 11.641231686207533, 12.038842548373013, 18.481795779913725, 6.413181842597294, 13.545947848768476, 14.516621519439775, 0.0, 0.0, 0.0, 0.0, 8.82253295074404, 0.0, 0.0, 0.0, 0.0, 11.092559064959724, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.777293946219937, 0.0, 0.0, 13.653556670404457, 19.66874053678471, 12.741435813288296, 18.667501840669168, 0.0, 11.67318123266151, 22.52423719992859, 10.974066950986579, 20.926224187860477, 15.9379402423314, 0.0, 15.545113609416678, 25.23671457960668, 10.505446316360317, 10.103726146320845, 10.074692980395913, 15.826386913468571, 31.065987623244016, 37.072758226410095, 26.09189489833289, 16.205619891890652, 16.583355194807346, 17.49792353708918, 6.048636421290284, 6.156287950905061, 6.175407639447297, 6.3173342706911315, 20.643537144639488, 6.815757646632268, 14.469014687287904, 0.0, 0.0, 0.0, 0.0, 18.471244149155538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.912221318277657, 0.0, 7.764203766423518, 7.150389637616244, 0.0, 0.0, 13.212267146309244, 12.922637340015065, 12.450305356011725, 24.600658326506192, 6.142214010951489, 29.54958292647288, 11.455185455288298, 5.853306950068442, 5.519401987705458, 28.071594417487464, 10.72640678314325, 10.916476362338834, 16.233611104837255, 16.770297062236903, 17.008907220006606, 16.94207029437508, 5.785733857581856, 0.0, 6.069357416535497, 0.0, 32.277449054499534, 0.0, 13.862137311801007, 13.844574568577128, 0.0, 7.506499582876904, 7.775465902516887, 8.425215619362277, 0.0, 18.250712233771047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.65389182431191, 0.0, 17.92480492355255, 0.0, 0.0, 16.012821796674988, 7.491785453116725, 0.0, 0.0, 0.0, 6.829374941124702, 6.3002889096295664, 0.0, 12.652493472047052, 12.469894645545697, 17.923664648307692, 18.356061220617896, 5.903006910226098, 0.0, 5.908464617093419, 6.118521784320542, 6.115785986460844, 24.627062023821118, 12.351062148955279, 37.42058659724951, 6.33700302812381, 6.6089442609368305, 6.7096980724954935, 27.49024813235417, 0.0, 14.921140336737666, 15.477671231029085, 7.9125081143061395, 0.0, 0.0, 8.627657468744586, 8.989495879776799, 0.0, 0.0, 0.0, 20.92370088831934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.291603246326341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.68108248870819, 15.686897627254535, 7.350304626405629, 0.0, 21.650270508559153, 7.126456133895736, 6.910530355349563, 0.0, 6.753485914510238, 6.759622084437648, 0.0, 32.493050398808656, 13.296161551539663, 0.0, 0.0, 6.633577201243432, 6.393344597248583, 6.634379016697302, 7.018859987089681, 0.0, 7.14796839505729, 0.0, 0.0, 7.559113697076574, 7.651218520366829, 0.0, 8.339611805117881, 0.0, 17.597512110557638, 9.014967040563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.906572517465221, 0.0, 0.0, 0.0, 0.0, 8.22238010248945, 7.85723111801123, 15.995848458793596, 14.982860315657067, 22.580808362797526, 14.872644932137607, 14.363698396429324, 0.0, 14.353672862980854, 7.275090455550375, 7.091436673599727, 21.033787775530453, 20.55602336496904, 27.96777629931556, 0.0, 7.352058748724547, 0.0, 0.0, 0.0, 14.830047259122678, 15.776864336307016, 0.0, 7.869872248435308, 0.0, 17.22827108354261, 0.0, 18.315202823746414, 9.604325998626589, 0.0, 0.0, 0.0, 10.993745992964943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.92807304746396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.381181265371655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.662002519043632, 0.0, 9.105048084122457, 9.018784418965616, 0.0, 8.33298252229289, 0.0, 16.08230814826978, 8.046806267914267, 15.899313749124385, 0.0, 0.0, 30.589545659383873, 0.0, 0.0, 0.0, 0.0, 0.0, 7.735832486233113, 7.735674399306397, 15.815957320660463, 0.0, 24.218119714955364, 8.434178164112893, 0.0, 0.0, 0.0, 0.0, 9.193254885594076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.73449465453832, 0.0, 9.094613182107537, 9.058803426825198, 9.033738356142603, 0.0, 16.755988499323326, 0.0, 8.245196614386282, 8.2661841890983, 0.0, 8.379020858862674, 7.874864056993534, 7.889519968900125, 0.0, 0.0, 8.289114649282661, 0.0, 0.0, 8.424774685028238, 0.0, 0.0, 9.00598923655463, 27.229989775686555, 9.333877715340126, 9.769746227850726, 9.815931988261964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.903622957623718, 0.0, 12.162853554596461, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.136540364761672, 9.739159307671162, 0.0, 9.16558719675554, 0.0, 9.042336879689149, 0.0, 0.0, 0.0, 0.0, 0.0, 17.61514390017978, 8.962805074528656, 26.052087037923116, 0.0, 0.0, 0.0, 0.0, 0.0, 9.493683808104919, 18.794685851247962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.232563151656421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.826693545523854, 9.272181244075263, 9.842827223227264, 0.0, 9.465277811444823, 0.0, 0.0, 9.03249282910562, 9.101796112908648, 9.630175004130585, 9.136883091396967, 0.0, 9.801472631221575, 0.0, 0.0, 0.0, 0.0, 10.476399848920838, 10.417357780887372, 0.0, 0.0, 0.0, 0.0, 11.842600377857895, 12.178803243413851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.685149965633542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.27593460814017, 0.0, 10.305522853278816, 9.868584176777437, 0.0, 0.0, 9.954438415787324, 0.0, 10.038819418009378, 10.263251551046316, 0.0, 20.82260248709028, 0.0, 0.0, 0.0, 11.048433827625725, 11.035152859997524, 0.0, 11.641930101318355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.31304407818492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.911378482086997, 10.86616351093534, 0.0, 0.0, 0.0, 10.410151975274966, 0.0, 0.0, 0.0, 0.0, 0.0, 10.475715194087671, 0.0, 0.0, 0.0, 0.0, 11.598566580038153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.380989223585749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.163747997370713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.537199341479218, 23.116620080230803, 0.0, 0.0, 11.752979201042328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.892845328509521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.761494885645789, 0.0, 0.0, 0.0, 0.0, 0.0, 12.206095548132478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.411259330225793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.972374201703156, 0.0, 0.0, 12.457082780726786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.323950871672922, 0.0, 0.0, 0.0, 13.216089833251765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.014555684881804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.78582694813311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.197356326751034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg8[] elements >= 0.0
arg9 has only one value
arg9[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg9[] elements >= 0.0
arg10 has only one value
arg10[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg10[] elements >= 0.0
size(arg7[]) == 10404
size(arg8[]) == 10404
size(arg9[]) == 10404
size(arg10[]) == 10404
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.TProfile2D(java.lang.String, int, double, double, int, double, double, double[], double[], double[], double[]):::EXIT
arg0.toString == orig(arg0.toString)
arg7[] == orig(arg7[])
arg8[] == orig(arg8[])
arg9[] == orig(arg9[])
arg10[] == orig(arg10[])
this.fTsumwz == 0.0
this.fTsumwz2 == 0.0
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title has only one value
this.title.toString == ""
arg0.toString == "test5"
arg7[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 229.55365320525362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.35743590965694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 278.2870161068039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 275.98581915449836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 159.93124636748806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.40159409347527, 0.0, 0.0, 158.50386259492845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 123.02608699260242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 379.9512514614612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.8529894663116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 110.04637700272667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.39633381618849, 0.0, 0.0, 0.0, 0.0, 145.81075958281144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.47405200490914, 0.0, 0.0, 105.68982488289707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.85176446237296, 108.65678032834029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.3640639790128, 0.0, 0.0, 270.644012116525, 0.0, 0.0, 0.0, 113.45972820740744, 0.0, 208.20006007377322, 0.0, 0.0, 0.0, 0.0, 0.0, 91.64394450277584, 0.0, 90.75644906101401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.64048704242822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.4483025707086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 207.85708972727898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 187.07098957996038, 0.0, 0.0, 0.0, 0.0, 0.0, 149.58048532825316, 75.56510013741186, 78.28588728281352, 0.0, 155.97401517376358, 0.0, 0.0, 0.0, 162.63512946738751, 0.0, 0.0, 82.56083755949028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.00861538539576, 260.06646661993227, 0.0, 0.0, 0.0, 0.0, 93.71807826389512, 0.0, 0.0, 76.44346803824827, 0.0, 0.0, 76.01074028910294, 68.28834594179257, 0.0, 63.66077688414116, 63.71105354807626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.04618328857103, 0.0, 0.0, 0.0, 0.0, 87.90937430152617, 0.0, 97.79613557027211, 0.0, 111.57562061881144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.10881886948316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.85866518537023, 0.0, 0.0, 0.0, 63.824335079404776, 0.0, 59.00659728176397, 115.53402979440975, 115.55517185176194, 0.0, 115.23884099682374, 119.77667754706664, 60.3282316731778, 0.0, 62.37656520285095, 64.86484908774327, 0.0, 0.0, 0.0, 79.45592090879668, 82.41023253285763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.47705045808848, 74.17959237459432, 0.0, 0.0, 69.25081101538709, 65.10129723940173, 63.76804228106964, 120.4490199928676, 171.80705201293097, 105.71858655582817, 48.96610869644089, 53.452686392419075, 50.72461251473717, 0.0, 52.29608645083905, 102.69323313095512, 49.2515325396414, 0.0, 0.0, 51.6406238144346, 0.0, 0.0, 110.33691259456103, 56.120709769063936, 61.64844314131909, 135.87817200723055, 0.0, 73.34769837257272, 0.0, 81.57385100488682, 0.0, 92.3265575071039, 0.0, 111.59657392195705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 176.2306185222046, 0.0, 75.77576465203073, 73.02392866507496, 125.34753540539907, 0.0, 55.201097787482226, 0.0, 49.712700295114836, 51.87828635748076, 189.9188299387942, 137.29967933865916, 172.68959924000762, 128.7105370335912, 123.57497549527332, 43.289292601993196, 85.74863101214106, 128.2884649760985, 43.14512055797298, 0.0, 43.85913889574651, 46.3035876840471, 49.22634420929598, 0.0, 45.798909762920076, 51.39857919654231, 54.32492456901119, 0.0, 0.0, 60.37712683167125, 0.0, 77.41270951889318, 150.69582940219595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.74362093328763, 0.0, 0.0, 67.55322034461781, 0.0, 61.19229043499082, 53.191645308430076, 0.0, 96.98427110923504, 147.03782618453803, 0.0, 42.38341510222756, 85.4477382483048, 75.21553969308582, 36.61728655559116, 35.858026034671035, 74.45852553250445, 70.21190963756641, 33.63725682546873, 74.04502528238974, 39.453637274699275, 107.04652418225399, 35.17590388437419, 79.41872262872698, 79.02667690923093, 127.00124780634732, 176.51031822846772, 41.57425413208977, 96.52842669913667, 0.0, 55.057133935416985, 55.61852778364321, 0.0, 130.9154406692775, 0.0, 0.0, 84.36327272356431, 0.0, 96.45100737995433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.0126056013084, 0.0, 74.3015630623963, 0.0, 0.0, 59.35589814166099, 0.0, 0.0, 45.89408050353946, 132.18317493141595, 123.28945932825562, 234.01372285225375, 76.62397503258039, 0.0, 69.96663024923015, 96.92140756515711, 32.466947388369874, 30.57982408070632, 60.74457292352491, 31.744206478709064, 122.75628696414273, 92.17734442313854, 95.28616775186262, 0.0, 31.905076966541838, 65.43436410214917, 182.46342212544266, 35.424441883694044, 117.90101609862276, 82.32898086297504, 89.88628610132244, 44.54035201373501, 0.0, 108.03446299180003, 114.32000640021437, 61.86682634375864, 66.79140297461221, 0.0, 0.0, 86.5752209573222, 190.12325528539316, 94.32931705182773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.87248416012525, 65.07478112999974, 54.99471497369431, 50.978635866945574, 94.58418983723604, 85.99382715728291, 0.0, 112.75335773254878, 136.34538642060053, 0.0, 93.03225010477875, 32.085600431519254, 88.77034642125724, 56.32606760819358, 136.9408103531372, 104.41546640532853, 105.80343746776937, 27.735703674465835, 0.0, 78.75335367234446, 203.59559208385315, 28.2146991254042, 167.1522613503965, 88.8156285322849, 152.6835607242328, 0.0, 63.97931334403411, 0.0, 115.37216076862751, 121.5845359941977, 43.28715742160725, 0.0, 53.10372098573565, 53.19220561176862, 0.0, 0.0, 0.0, 0.0, 0.0, 96.44579757444714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.80782780566676, 0.0, 0.0, 69.7512878425508, 124.12108489648884, 63.679274907683336, 0.0, 0.0, 92.94973182502156, 41.61776156924985, 35.62411184936818, 105.16750160561594, 129.94489908403574, 58.68403337313864, 84.8657691564491, 0.0, 98.43220219506296, 72.64267733262403, 139.015433494785, 131.22124115080598, 66.65775632713822, 64.23449704357427, 89.17887507824922, 61.134264974869225, 44.62997349340849, 112.48339836041335, 141.6775693798691, 22.737266623408793, 68.63472123850593, 154.23502969174302, 50.404125972395164, 52.618632921346816, 0.0, 64.685406014828, 0.0, 41.297476912632625, 0.0, 42.18620768587905, 0.0, 0.0, 59.899876671401216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.81164474904509, 99.40524480844729, 0.0, 0.0, 159.0101606142522, 71.96500722840818, 129.39821795321762, 58.7933844188441, 106.21265492965313, 95.7364514492786, 40.8995877993734, 76.40616800140606, 0.0, 64.01633002358021, 0.0, 57.362625865009775, 130.11907493166584, 122.94359890195842, 94.64604508067772, 87.10985077994724, 21.028217936885696, 96.52516776782635, 149.50754281405082, 38.12639538727588, 85.46530041909091, 176.31270351985444, 105.17366012736395, 160.11887052252143, 51.298863431768964, 128.50448591706393, 20.916094014620953, 59.4519018667372, 126.90434246977415, 87.10745009899763, 100.07647461335591, 74.97036213580513, 114.38846319775851, 29.78290785343491, 96.07148566746852, 36.08159288059311, 0.0, 43.52844282818297, 44.39331169679729, 52.03833726879191, 116.76010709635003, 125.29907848375267, 0.0, 0.0, 87.42458647292077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155.8282001291064, 144.98053542150282, 125.00278009130808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.25501672925883, 99.83866533472178, 0.0, 0.0, 79.68234546973652, 142.75009370896012, 33.03512067722765, 0.0, 80.20521201039912, 46.2048255320734, 114.59201152233068, 60.98074762107923, 111.19919635869869, 53.26758921511582, 68.61461961501757, 66.4603250671317, 46.0793406699626, 75.24146765331604, 15.471499277186755, 104.1161939926075, 29.7807907287141, 118.75419442383092, 28.393979291626966, 107.8417388647864, 62.51829677438094, 104.6764930214776, 74.19520060606939, 72.00417563211158, 119.9713539162593, 22.696695372506632, 70.46254063594819, 53.41399273864517, 140.54116464748225, 96.63038338795033, 69.71702716629295, 73.1172562104637, 124.77184335739588, 193.88512620081087, 101.70311621872463, 53.39796779549814, 0.0, 0.0, 84.07662820797185, 0.0, 91.31706365344655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 163.39762758554716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.49799027815374, 0.0, 0.0, 55.43877412544088, 0.0, 0.0, 71.91418574768119, 137.39343732549455, 0.0, 108.99663737446025, 120.95542077001913, 20.70726277863156, 64.54600329583195, 58.23960922620472, 99.37772723678185, 34.78526281340007, 73.96065745003702, 26.32602193523804, 50.548979609419106, 111.78453557300409, 70.27147749838196, 105.44640641279287, 93.47584642407195, 130.421170185466, 49.16918279048018, 45.95905922752406, 101.27639133469992, 119.15552677638182, 29.56032176047979, 123.85111927780173, 142.59001001574987, 50.08976763177327, 72.99809824144418, 62.71248212374534, 66.56520259115752, 49.23758110854864, 49.85727985853512, 0.0, 101.74683440365928, 114.78636114083335, 0.0, 44.42398055881819, 214.2834312475526, 0.0, 61.83518279805181, 67.32082283981421, 0.0, 92.30049676614446, 93.85465338459962, 110.62956778365023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.327425085282, 0.0, 0.0, 0.0, 58.982339103595656, 0.0, 46.50139634205521, 166.65512553167298, 77.73085540983976, 0.0, 118.11379082825961, 28.74306396808696, 90.59501842180565, 108.66228614184887, 96.87660898247876, 32.72613072526663, 93.76759614886451, 111.53346780905949, 80.11206831261617, 37.94240721719452, 65.94984302866442, 52.60592454014743, 140.888850497338, 78.38709489594865, 135.51871826014985, 56.78121947184084, 120.6005962744034, 76.63452340499593, 47.24806612854611, 79.1827263198794, 140.6925808269452, 104.55945423170866, 73.86227544109164, 50.72087114236646, 112.9594166790661, 75.93771016534257, 17.043418236777715, 57.367398369139465, 66.61242170432783, 94.09695666449805, 26.633166264380023, 62.603232584997784, 102.86006042630198, 70.95065429134496, 85.50752994919844, 45.490213075164995, 53.58734194569119, 55.48560263504428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.62735720567542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.77443258242002, 82.75391461245854, 149.75905535069012, 32.94176553358096, 59.75016413778833, 132.43227972661157, 67.95280980318154, 41.729434512229176, 128.45254468243283, 31.490887843836468, 58.842242780932494, 53.709120396063554, 82.65623394017584, 87.0995461495352, 88.27926428051704, 71.49600917552776, 26.970599592838763, 76.9834270878494, 55.26958332021109, 60.96901983711648, 59.292666166026294, 100.46771293083448, 90.64826772554898, 53.70989377569014, 41.21867191663198, 33.14974425271784, 98.42015234598321, 48.747421339598674, 43.00619902741906, 82.01609566227305, 36.05554025263148, 102.25280465280532, 99.3161523204922, 110.01578566052655, 62.04583615798126, 92.2596498013781, 79.24349754518974, 92.23045868895422, 33.77599899572211, 226.9648619800256, 0.0, 50.735671223183786, 54.24769175796975, 0.0, 199.31822082817766, 0.0, 0.0, 0.0, 0.0, 114.97811950920448, 0.0, 0.0, 0.0, 172.9378894127552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 362.74132926294567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.65651536135877, 264.0689330779427, 0.0, 0.0, 102.42353064016963, 0.0, 0.0, 0.0, 126.7966489983335, 60.31602319030501, 50.23388082141289, 47.74999490380937, 0.0, 33.330837340942274, 115.19736770703841, 104.39384579849187, 138.79634389352321, 205.01773598618453, 50.22426973331841, 123.094916405812, 98.39028673905713, 108.91842513025618, 56.38270284116252, 135.0615159778349, 68.20949355435312, 78.11631524029819, 67.13671974554819, 53.86983234187614, 56.5906571834926, 75.97211952139328, 80.12269974057563, 61.62801584191782, 87.62081805018808, 58.30089344202064, 58.77043541574457, 112.23010891227939, 92.3771730685003, 77.27392693462562, 48.670737615579796, 60.71630546072935, 84.31435691843168, 86.89521978163762, 87.45273397301085, 68.92235469244609, 92.01205532756096, 68.68265275843129, 21.439558912169378, 46.198891460562606, 52.89763762419861, 59.49179467452124, 67.7875651965373, 75.29914071440743, 130.8452017609734, 101.43064315699411, 111.48247687391915, 123.25700147480258, 0.0, 239.85094158436317, 0.0, 196.25132341257404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 577.0576158416308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.39952946854949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.78441458516486, 155.03861753518834, 89.77158147094303, 82.35849138975277, 35.41168934483266, 90.54722831583895, 78.59904719535291, 46.68320482280234, 40.29461127364081, 34.75625779122851, 169.107407554225, 39.22529635848413, 109.91437233820625, 104.6823214747146, 99.5625003499524, 73.72918914708765, 50.89304612709884, 69.87293068600079, 58.48829496963017, 75.91843523136914, 64.24880266988013, 64.81901552248317, 113.72809254746753, 70.5516623764586, 75.97306452670428, 50.20661286973154, 74.45717153444905, 47.55361628148176, 58.57767152447191, 74.82213059115146, 31.10730954153201, 78.65700357653544, 63.86159104067712, 52.679163557855944, 112.4295262890605, 24.840095491807535, 55.20424135711698, 87.74270270138439, 86.99282877082442, 161.44831346391013, 48.58016664845033, 135.4018961534745, 93.14474445187078, 34.95773744356466, 37.14626651752572, 93.21752653990798, 50.40334719355437, 59.46073104432909, 0.0, 0.0, 166.89110494996504, 0.0, 0.0, 0.0, 0.0, 152.76213470355145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80.36418707539866, 0.0, 59.115982844708945, 110.47001309849173, 48.66654468786166, 82.0402279040487, 71.97022715549559, 32.298808078438455, 28.020550755365825, 47.73372124398868, 81.49895985604228, 108.32010387680666, 124.06165719875987, 135.45424860545495, 34.644956172371174, 118.10317523237453, 153.38641412453978, 66.97104584991088, 79.14308241173926, 40.59326771923172, 47.774058324550765, 55.29930528513921, 77.9568686682653, 53.602302011703834, 41.63399051194583, 84.44644172246899, 51.29279753286911, 67.87770427001689, 50.50490967982072, 42.01027483296726, 38.47677057897876, 34.2230016582743, 35.290576507463136, 86.77584144311278, 46.79883550136131, 45.13449043250257, 45.09578534363247, 50.93339983017997, 130.4426514602074, 77.65697039130572, 53.40804014486609, 30.798266822530266, 54.83871267508411, 84.33294382106098, 71.78317802105377, 25.755201132944894, 0.0, 34.41083433736867, 251.41412714895938, 51.60834185350436, 110.24577774905612, 0.0, 210.82458741681512, 78.76912712976548, 0.0, 0.0, 118.33587858388069, 241.31555009438472, 132.67625322017088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.80980473410496, 0.0, 0.0, 83.01969278015027, 69.83416509414013, 0.0, 53.686157482914886, 101.7457837008034, 90.07698266578277, 38.99044040070461, 68.67245574668333, 172.06232098326234, 73.41207545209876, 66.02532847720903, 71.36103127995338, 80.01954135191228, 53.47830986298942, 113.5905069575592, 127.87346352542859, 84.44064925144195, 59.711109315759096, 56.26024495452275, 50.123959881760115, 44.28082162873222, 46.832861921745206, 36.64132221732507, 55.79646750533727, 43.16589688023939, 41.18590191096612, 34.40583061304242, 35.593388982513304, 28.994136979007102, 50.79327449748443, 26.685020596188938, 38.30115772117425, 63.08407984052806, 46.152698942373185, 56.90642687688841, 28.11532429563729, 61.362849847125496, 104.40981675534213, 64.45209448839175, 82.65618026941857, 78.64912561045963, 103.35415267725213, 93.59164319483028, 138.92079208117673, 18.36923905904019, 89.87959803988106, 25.915242955561318, 112.01450642659645, 69.31727688697133, 150.92183920246603, 0.0, 0.0, 173.7004826412198, 128.0221343054746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 194.7396827416469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85.48937031491751, 80.09777596841595, 0.0, 0.0, 55.20329701647426, 43.559997482047535, 122.75631612322462, 141.16072165970485, 86.16607217315489, 106.92124299434111, 178.19277340122727, 79.06235671068274, 112.52678419185511, 27.92277899940084, 80.8443270167069, 58.51691281878451, 58.239864680728175, 61.95068146926641, 72.51582161078935, 88.2074607813107, 95.85302531298385, 55.29922788144327, 58.04699411822454, 72.59120919016421, 45.63034827125365, 22.61536272994676, 25.094632269675024, 43.399350345074204, 23.57250960599127, 43.74426238639652, 22.577184134023394, 44.789802556233624, 42.71608798829925, 50.45956464610798, 48.694079418338426, 45.192853357196206, 68.87758907637537, 66.58313716219237, 53.89674114732674, 66.89119436253785, 90.44206290927593, 145.3949783236273, 100.30270542126381, 83.20717793807547, 137.51667447601602, 61.9905341924899, 79.43092960799355, 68.92887955157975, 229.57130157419675, 88.70277694382509, 0.0, 159.04469093536343, 46.87426440116997, 109.49040985642166, 60.92775724404597, 144.21757007107107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.6838664138985, 0.0, 0.0, 0.0, 0.0, 0.0, 72.93275801548862, 0.0, 229.00026585653586, 52.016316548507056, 134.51259055440602, 39.582331412079334, 70.21696073237676, 82.68818743857686, 147.48501428028194, 62.48183227464868, 122.66903634143137, 59.39262095495915, 98.57761824936071, 92.43279493055981, 54.0309611910521, 84.6439171638776, 46.1515178116212, 55.408411095494344, 54.440860029964234, 31.801419223903878, 64.36199665873568, 54.76605930046601, 34.161869533461086, 37.099527036714676, 33.00139233209618, 30.28472142574541, 26.601934992526036, 24.729337735807995, 26.06392246193631, 38.14628026209487, 23.96522891021309, 31.362452912861247, 32.217901103026975, 47.908077299536664, 69.47993474584976, 50.92831048555135, 57.22954151875376, 73.29477253794599, 48.06761629996402, 83.66803015416308, 68.2752634489674, 94.21773543403941, 103.32371187644338, 156.93632732871515, 58.47603930129575, 34.29809305873772, 80.74487113473559, 47.584230941846315, 135.2909790163402, 67.39806745028268, 76.70031527815877, 42.39412797018666, 100.78033483326631, 0.0, 198.85461789378087, 0.0, 0.0, 0.0, 0.0, 0.0, 141.77306848956775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 184.7753388279434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.54755938862762, 0.0, 106.86534480035372, 49.69161095457881, 126.17079123658885, 71.73567235866489, 87.45054358303608, 0.0, 172.05310790975187, 56.29312487197646, 48.978828379995946, 120.56214047023082, 75.26714625381558, 97.36822409702319, 80.42506853685695, 96.50744112226012, 72.96537201117921, 51.334652799278125, 80.18504572079746, 54.342923415618756, 29.204205356735716, 40.08654638876014, 44.684592226824016, 32.83825328542101, 20.12017267626417, 21.503032443311536, 18.96899104186014, 15.842237846539488, 20.88013365809346, 22.788261500060365, 28.02536275200034, 19.842989556429238, 18.676326052310344, 35.4507570946693, 27.902228269828854, 45.03022427738869, 54.19873329771316, 53.190678248836534, 35.19604579957739, 59.14549436482239, 105.91198535116044, 74.0867104657807, 88.02767404781764, 106.5392750304619, 130.04642236100804, 123.44071344680012, 131.56458807807468, 154.6526587469822, 50.860448572903394, 91.73393779839684, 0.0, 0.0, 97.12654107586211, 108.1357449814765, 254.97781248974312, 0.0, 76.5830991398771, 99.03275421671832, 0.0, 0.0, 124.61574490192085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 218.4202204932932, 102.39281487788107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 192.1492114010502, 103.5963933200712, 56.52774746927433, 25.457055059746153, 60.69137325896504, 101.15808592902378, 90.8306276119856, 45.569739221374945, 129.74051992955404, 71.97285175047705, 85.57458477821861, 61.68189629040636, 56.73227458538487, 73.8457917332454, 34.45643631582108, 31.307477995759243, 46.541097744098906, 31.926745372799992, 27.952409369670093, 23.276068198339694, 13.123163538405334, 18.811648392485683, 16.15219466447909, 10.298701209671343, 13.654393680823842, 13.191569556264074, 18.75043929235855, 21.21852025636613, 23.529088576382946, 16.74775245968398, 40.53263637901025, 39.94897013346628, 26.178052724741836, 42.97203980247357, 57.39809486605118, 37.61854993837104, 72.34623399134294, 51.303745489099484, 46.4884353515144, 56.23580178313853, 166.59342027878202, 154.68648261785196, 50.68202204010113, 60.869357480011445, 121.88016445803463, 28.530883195288066, 139.66726434251783, 82.24658644363751, 92.62697901139404, 51.46384410505798, 64.13244505164495, 136.2396014942725, 78.37189876321257, 0.0, 305.18464558833244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.52559076055223, 0.0, 0.0, 118.01417083469367, 0.0, 94.610727572766, 87.27935397187082, 143.43482926770372, 0.0, 0.0, 47.20806201282373, 176.69885132560654, 35.996706227608804, 97.37114948868248, 109.2172143424864, 116.863210886047, 95.78619784987778, 80.91508354997107, 52.71854202706877, 86.310468345841, 87.12428746410087, 48.949049238682385, 74.58834252889372, 40.11261109765839, 63.795091150380145, 36.481354479903146, 36.67344774613592, 38.108322158332236, 22.9115599382618, 18.7534411940693, 25.772197625768428, 12.66322134359813, 15.136735409740954, 14.279361408515584, 10.165845514039564, 7.570833369083759, 9.60642117744691, 11.729850499200241, 15.140738745598126, 11.601170591529113, 18.15052016121831, 15.713740719411202, 33.77216915652698, 34.12405519571115, 30.73812352806019, 59.95932860270445, 45.22211010906793, 48.516211465489974, 70.40557937749189, 95.0026844541638, 50.909328021502894, 131.74291086975725, 57.3003205595073, 128.60132641438761, 79.27276890157836, 76.83392713569427, 185.5673295233945, 104.62642354820505, 159.09711090164905, 0.0, 87.09064737254762, 0.0, 57.31412750374452, 70.06225464542894, 0.0, 0.0, 95.2164915231418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 82.78224452741232, 137.16929378932744, 0.0, 110.70756408301705, 95.25094490821009, 39.77841710615291, 136.3475661844411, 57.18511558306038, 103.093531833182, 193.7870284056478, 55.26299065034186, 45.3904450583596, 81.43045432158262, 67.9208534377207, 41.143808938472525, 50.98860237237986, 70.86199311129393, 51.98935870567064, 37.685381647618485, 37.4991308823228, 40.89790718053626, 40.3082103639045, 26.911354155307535, 16.736284860552754, 17.252290095728856, 11.033222703594058, 6.58066841870488, 7.9999971211157765, 5.418288699350806, 5.362833830118454, 8.048025270251902, 5.508666070608042, 5.940493753122858, 10.623101360308926, 9.459707369713495, 9.070465773036434, 18.409107859013996, 27.47863232372501, 28.961980464851962, 38.52191833303561, 34.74041523144559, 36.65874678032981, 47.5139171739326, 70.36472433418942, 64.00373624853816, 93.7802236415084, 39.04705417499656, 72.69187769235745, 120.42357014954128, 55.125057587958096, 46.10417049246102, 76.34974766496609, 27.676841952335064, 107.23949880577158, 0.0, 48.64222810355162, 53.5518775323989, 0.0, 75.3855805479568, 0.0, 0.0, 100.82970157406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 135.95706562951278, 0.0, 107.84606471179839, 88.46787698810436, 79.68092202186365, 71.42623329061348, 0.0, 0.0, 92.33160081437181, 39.39710565547193, 65.95304380893495, 27.719650339413512, 123.32792438822568, 58.57594300887993, 98.20492578519018, 83.58085459075123, 23.337128283142974, 190.79195832245156, 111.83349413952679, 70.22792367440219, 63.73250817244047, 60.90628579805319, 26.260582153702497, 48.120393506859244, 35.54112786676529, 18.11388095428163, 23.801454665832093, 14.466197304939332, 9.517285879013027, 8.473651754372849, 3.6334115534089393, 5.788857679803861, 3.2617603817865293, 2.141142723420467, 2.786720227709269, 5.0126706886584556, 3.977149886826007, 5.762688121638053, 8.980262570724573, 11.717762835888179, 14.81712827807744, 18.578815568346425, 28.75888753528506, 26.56215702250392, 34.90177315166071, 34.30071788941423, 73.57163766367552, 52.849097515865004, 80.93512702819586, 60.24781131495108, 90.72280481108511, 124.494685926463, 114.90820396149766, 83.21832534893032, 136.99133713217557, 51.79237288693341, 87.8118210428845, 101.81943894916282, 80.85702562713364, 0.0, 56.06809754524636, 0.0, 72.10861205479006, 0.0, 0.0, 0.0, 248.62315889819374, 127.9721698174996, 0.0, 0.0, 0.0, 199.55551456329977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.08285562348024, 0.0, 0.0, 0.0, 90.89084117254866, 82.53203481907374, 67.54103521855356, 63.92866403735849, 50.9062799395014, 44.6208949062901, 0.0, 35.23752332859621, 116.96102750076238, 73.43142970506128, 57.54975626847025, 146.14130726843726, 119.0065174078333, 29.61795973936003, 51.05568347560719, 86.64476682421224, 47.59555037634091, 66.7088001934678, 15.666112551008405, 40.1860629228165, 26.383218769644955, 41.692321582658565, 21.789754624853273, 18.668975841004574, 11.995250050032409, 11.13223858235838, 6.410934430702938, 4.54130405078594, 2.542211352484711, 1.848307604821613, 1.7955393960012074, 1.5983729684166734, 1.8163692677650762, 2.4266729657182915, 3.7437224379552947, 4.486141610523994, 6.57841387310106, 15.11813794009453, 18.623986860857773, 19.95546379754919, 33.846652399431285, 34.59090670835769, 36.11472425697137, 63.1817180677642, 57.61633472958843, 68.27101349631093, 81.39746215729663, 65.70978273154321, 85.30145958975955, 88.18033856913698, 94.24367079552981, 95.7610199517557, 94.35573214146967, 193.9991641894014, 30.7701099207667, 37.36957638921763, 42.089465938279645, 0.0, 0.0, 67.4703135230557, 151.1070655015325, 0.0, 0.0, 0.0, 0.0, 148.70067073697948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.35625778273224, 0.0, 0.0, 0.0, 81.15839925606659, 0.0, 0.0, 49.5054346170472, 89.1545096959832, 150.26262223508488, 29.865149762951617, 54.99977199096137, 129.56791308828784, 149.2802971526409, 61.229587202806385, 138.76142982789517, 50.971713970772754, 50.019101951731045, 72.74041978276092, 84.83745318361484, 57.87365096602439, 57.05710386912156, 22.784125363780014, 23.660797783657287, 31.571967252073687, 11.54731378027221, 13.774263137820547, 8.86013535918713, 5.769896600661059, 4.401277454535642, 2.235118837463988, 1.6480005534170736, 0.9515545509597647, 0.4513458184903597, 0.5990689574435293, 0.6768614133367638, 1.5527946416138696, 2.9364960850124184, 4.687744163520578, 6.43910027503344, 8.493500747742758, 14.262889782861924, 24.430044158442758, 32.34909328690139, 28.66719672626494, 40.10490528091065, 46.18536575108504, 54.93748975076831, 54.37269985626439, 88.66792298305664, 90.16500606931815, 59.62874464780559, 98.29775865953553, 77.1620294547301, 40.19451782441628, 87.22805310342025, 51.813965358170776, 92.40129455765262, 143.93909469408396, 0.0, 50.32330364840139, 120.29906235734902, 67.12460829292995, 83.3944569427634, 0.0, 208.31228946092088, 0.0, 0.0, 0.0, 330.4091600238463, 175.79744123814646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.70486308684676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5003852302134, 123.91979265796228, 38.31753757511929, 126.59809450003189, 0.0, 131.35704898180342, 33.9744195446459, 13.724493132092986, 118.59692160849704, 59.80742441399711, 114.9187459413847, 60.67308359101389, 42.94093583029363, 46.87574994106345, 33.61029885126904, 31.054124554706753, 23.11440072853358, 31.00348249034258, 13.114877149770013, 10.44663378766947, 6.123215165162253, 4.215599324349762, 2.7985639246070004, 1.5269233385256988, 0.7735345079703058, 0.30043927072822574, 0.17005033885673712, 0.2061049584860092, 0.28853741994938364, 0.4801592019494058, 1.040626697450619, 2.423093252607128, 5.083904455016013, 6.6354234449554905, 10.29634957480302, 12.282848447446055, 15.912125040117871, 24.793097325829063, 42.5711613763268, 25.59864010488372, 73.44282693821084, 77.96329150811529, 98.90998226350791, 64.63658493993363, 88.14933060543768, 46.56935847751821, 59.62220281798911, 18.7879385537689, 21.110666254438325, 53.5446640370607, 93.85813962253302, 114.00753089226156, 42.03735401214923, 47.7310064844055, 115.67748140217549, 0.0, 80.51608524663864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.2106390129483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.03566940373678, 0.0, 92.90034693337951, 78.24936837971845, 132.18494618524622, 58.218054088972735, 46.845221980193394, 40.53970883906497, 35.27421616318624, 0.0, 76.59884960340156, 0.0, 73.42442984131605, 42.45582478667888, 108.13217212188135, 35.53134263056385, 119.03038499084407, 73.33716727748173, 65.00486288277051, 50.83741204689097, 61.9491725576898, 45.20052128818956, 43.58626516838483, 17.05976875688613, 20.9735890673001, 13.337858067398342, 6.793783729585614, 3.235101274096022, 1.6805344575046595, 0.8407861318912019, 0.24836892319432854, 0.10016078306399902, 0.02512398291998388, 0.026987136494899637, 0.10880761025759056, 0.3325725434878212, 0.7085579012897424, 2.0262449312690634, 3.697805943118953, 5.502672057844092, 9.807812395357647, 17.317704603941436, 19.24984221572063, 25.4633504983856, 35.35837365290946, 40.66973655306464, 59.479379568618455, 68.14266221942735, 82.68445253938022, 52.54154338001041, 75.11790032785977, 61.0616541981082, 116.2072397852617, 72.56630759105985, 87.5062765554899, 103.56065239121833, 92.34894752141112, 36.556854044158854, 41.92038362689841, 96.53126458811775, 53.63393766361024, 61.765694824087234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.13076786195208, 128.2039008703583, 55.72889423514349, 47.526420761549964, 172.30663419366755, 33.92325853085258, 87.67044381934045, 50.76052769163083, 64.35434090132391, 135.48858158920223, 116.83316459412373, 57.39754896911401, 38.00026017709808, 59.45012380682094, 77.62938056650252, 71.91693589724834, 75.90125039228072, 37.350453805302394, 42.136328464069464, 27.998195140099526, 26.239542466512027, 13.082259616807686, 12.983571273611933, 5.573864796734041, 2.7869799355733784, 1.455417173227919, 0.518643027695543, 0.16107232609364866, 0.025842194690793553, 0.002188117341539604, 0.002044792613609386, 0.03304860853265137, 0.1848561961306062, 0.5638412006988327, 1.283959803029776, 2.8349087799071007, 6.207703130277893, 6.886570033495204, 14.693584430452322, 20.124812227729453, 20.325216615786417, 38.54024386662932, 40.22558174642854, 51.853198227274156, 39.960990138867245, 74.74352848826743, 52.220277115637174, 97.21766426791095, 117.59336670388952, 86.94617950128054, 119.9787904577981, 21.69523265546981, 100.12385503810913, 62.05066451704447, 141.54110556649727, 84.15166139721447, 48.66730554626663, 0.0, 0.0, 0.0, 88.37839569988094, 0.0, 108.65108386082237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 97.22511515047786, 0.0, 76.76201122307192, 0.0, 0.0, 48.996814326562564, 0.0, 70.65337985649758, 91.42732718356974, 54.14694031545642, 102.68708050069098, 53.59965897238124, 71.08469718371131, 72.06122835460899, 104.29925246533824, 81.93143674384976, 36.69415260991937, 43.945970748250076, 54.5823983732621, 39.44466629618073, 22.076789140783553, 35.32441968586843, 20.680329176416247, 12.1246438378513, 9.946654501302874, 6.926109074875256, 3.318194695804697, 1.980620318278768, 0.48671621655423913, 0.13317837961294796, 0.03026026645179651, 0.002709855897200594, 0.0022336281749421034, 0.016961305376532496, 0.19543216422426243, 0.6104382130358033, 1.3058532823742033, 3.532510935095334, 5.893851104878079, 7.933343090961521, 11.064958689995954, 18.770129233526625, 29.913626609016042, 25.64906326476843, 40.778738508147626, 46.1366675119582, 90.81426441498527, 80.42925136152157, 66.9344874504162, 73.79874898020002, 91.2070916401451, 101.7720347932443, 67.34141582399883, 128.8739404159066, 104.53418850194339, 92.11954798137427, 104.51945390155606, 133.06154449746828, 49.444607610769545, 57.72862277316785, 65.87864893897179, 77.31448939043382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 87.54111041638953, 0.0, 0.0, 61.105115675337636, 53.21971398000627, 0.0, 34.7585390438064, 31.927741408779177, 78.70852395327086, 154.45469753006162, 87.80282847495596, 70.52945832271978, 68.9296536442538, 109.12431570811411, 133.89207428387633, 67.12690973857529, 46.803968668841506, 43.726844609495984, 48.96403800613273, 32.067574948031, 27.611169779011842, 20.170390546657632, 14.40116525071324, 9.924276719251477, 6.032512534430186, 4.289926654863538, 1.9450169302538185, 0.9531792674620779, 0.24588386961017383, 0.09530839597437948, 0.04278715607215878, 0.03269367562717054, 0.08097278471325678, 0.3398684488040151, 0.9638410634711951, 2.164821886087108, 3.5939427422673274, 6.592202683426857, 7.762514824738063, 8.838684729582459, 22.057186649484247, 24.849977994296037, 28.61531082237224, 48.11467274911029, 34.30186649545678, 48.69915593535421, 69.8833640093118, 47.28770273324561, 56.60872337798956, 120.67234405642928, 31.016312896034833, 105.13287566820975, 85.21233930520495, 81.4002204656784, 0.0, 0.0, 83.06075106838662, 0.0, 114.91830557501828, 70.99513290473415, 78.68118708443396, 0.0, 0.0, 0.0, 126.7135065864287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 165.13090254423201, 0.0, 0.0, 0.0, 0.0, 0.0, 78.4620850770524, 0.0, 0.0, 148.45137059376304, 0.0, 150.55416620527316, 30.4141810067672, 81.0304552678308, 113.10291357313776, 74.58850461722623, 117.93969623193577, 151.58072380745713, 76.05734894503397, 100.84892706316272, 112.16763380983956, 83.41338042545576, 55.96196016985297, 46.86530415904609, 37.05219175840271, 26.274818822198704, 26.079007212236725, 18.01975552593438, 13.747887637035955, 8.846625212764133, 4.442015202590422, 2.8507221556333113, 1.1956895968032322, 0.4057643488828679, 0.32491415699376275, 0.15279851700626748, 0.20477010202628243, 0.2447095951640769, 0.6164373248308666, 1.5009867205557397, 2.2548106551459126, 4.149743064797714, 8.649045718995724, 9.747747755256274, 14.947579865918014, 24.37531518275056, 33.31759357433862, 48.09703917524668, 45.18366926811374, 69.51018816946771, 55.917224764767894, 84.4924256850878, 132.5878349216076, 59.00574646346526, 57.58238289814116, 56.94308846975442, 129.32625615718982, 65.0711482015661, 179.37456326462254, 127.13594262300367, 109.15788498424325, 83.86598932511015, 49.38919832350677, 117.35988585779711, 64.26235354435683, 79.28136295227546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 106.34664044223032, 0.0, 155.3429162557435, 66.16077901825172, 0.0, 98.57331064605077, 130.7966984024134, 112.17645930218524, 95.92437471426466, 55.36376744748354, 92.40934098810158, 20.052689077953605, 140.5004359455739, 62.770657375614434, 21.15292378331271, 71.1925803493691, 110.36376578639108, 55.6022020379057, 30.85144484666963, 30.773747904826827, 48.453750137813984, 25.66067916720845, 20.726652917059184, 16.43967284095496, 14.328353895816148, 8.083664525466833, 5.673342716147897, 3.8004846278631192, 2.3196003591622407, 1.2529514600002842, 0.7085479710878978, 0.4333477556649128, 0.4137713214616468, 0.6519927757452277, 1.4513440478897848, 2.5004342473606367, 3.6315992638886048, 5.811169727080222, 7.95744403469308, 12.543714707862245, 15.457200597541123, 26.10733499515674, 50.3537835404154, 42.249944411964506, 44.951655526280625, 47.37740271993644, 66.63247387117745, 65.37547053404353, 100.6517577329073, 63.01997070660221, 149.4403929057865, 135.40742010151348, 95.02067170083535, 86.29956703807211, 76.6819202224883, 29.073949566098644, 36.68111333995876, 130.76246080941644, 214.62184004209325, 58.884509011832, 0.0, 78.23102384645291, 0.0, 105.135871148407, 112.15312798717395, 122.48435910019798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.499738079827495, 103.3611036109795, 41.88216264372175, 36.36945459561321, 61.99998865369673, 0.0, 118.67447585136225, 95.39221675722509, 65.35879269939323, 80.60626213264104, 75.08216243921261, 113.71407778836722, 47.9461760854768, 80.66796915960221, 53.53711432205565, 42.194901316978076, 50.0325086888395, 33.6466155347263, 27.640092500687835, 16.170691901900994, 19.434009101884953, 8.854205861492742, 8.023138136499089, 6.066535597185251, 3.011108903607253, 2.513986198463983, 1.6338662045954286, 1.58112457801575, 1.2995414280380064, 2.029642708398941, 2.148467409044827, 3.29900147411493, 5.417917350185477, 5.273636111855336, 9.564104890397719, 18.131774011468902, 19.700918785583944, 19.73365452729478, 27.533482938474393, 42.96303322354737, 54.595224233967706, 81.72247824970084, 57.40135324663781, 104.68363493016176, 54.45797084324, 80.24991680511408, 96.79013904255332, 113.79188374130514, 95.62459147958228, 23.78849871433308, 84.3355856227641, 0.0, 75.27098450412673, 42.007281963395734, 48.807960853149545, 118.91959820646696, 0.0, 0.0, 0.0, 101.93380183467774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.66288916978047, 0.0, 0.0, 0.0, 0.0, 122.288316399974, 0.0, 0.0, 0.0, 0.0, 62.19744051619039, 0.0, 0.0, 74.81985489860753, 67.18488631480395, 60.57644041241005, 74.37537513504387, 39.19783979047241, 84.67018432230152, 120.54695074436998, 68.29454170915987, 75.99474137778228, 58.795455899234106, 63.52426272272516, 36.03169509523802, 51.76556378313666, 35.5638812544104, 38.50100269310522, 20.036021992062636, 35.37854963417371, 18.059010132312814, 15.142403764435233, 10.116405887750897, 9.591561590019605, 6.200127074605774, 3.906247134933527, 4.155207584358734, 4.925477665198109, 3.7627779766696303, 3.7961955302273087, 3.673425355699354, 4.138181205960234, 7.480014078942517, 10.681229376782243, 19.700072732442003, 21.965589644197802, 22.88758684868431, 33.46551683533885, 24.660753543776977, 48.070540602467105, 56.16036560094994, 78.62029925955841, 33.88274000599729, 107.84694334707574, 55.182495140577686, 76.6530112147529, 97.59773963744715, 49.972649289947796, 59.54333585229894, 146.30316631263938, 57.48582934027364, 169.83699828053693, 73.57024885501802, 49.47719256453544, 53.27896969719029, 0.0, 149.64988883125662, 82.58273681147261, 87.73891945841221, 0.0, 0.0, 0.0, 147.70889907396725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.66603617924366, 0.0, 0.0, 0.0, 0.0, 94.29965859688545, 160.94285256263584, 68.17193506897698, 61.72519205173548, 27.289045754152024, 22.746273973757322, 106.94329334840282, 136.50144044954652, 70.42420527626138, 38.972489908895966, 56.75768818209175, 50.50159599572324, 80.40016528378212, 66.84853797170534, 66.37372924246169, 45.90173287143718, 37.447521777789525, 31.336120963949643, 27.182175085822674, 14.131355197162026, 15.675397581586543, 12.86322659867392, 7.834458701094034, 6.7128604653083865, 7.268902895124291, 4.820242764206089, 6.811635309642248, 7.894436373290218, 8.038226795710333, 9.057895349938594, 6.966702147979598, 9.804340131117826, 15.200610593969863, 31.055141680155057, 46.00668455873346, 44.57876129556682, 30.85973017138248, 52.05539724545085, 43.31043316284034, 64.87946301089174, 75.93213768343205, 108.65963569255442, 96.93676738806292, 82.74261896639453, 44.41202570175, 57.22264312841502, 66.18037148037487, 104.28959718822671, 92.47244764282729, 73.02430253181467, 43.05178603132986, 44.895974180288974, 110.35280991348839, 126.89115289707831, 0.0, 253.34903988879452, 91.27342921405878, 216.95345733430682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.11702346997598, 127.38622174734297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.2031340536108, 53.03254565037918, 92.71877035120018, 114.48375727682912, 80.10509873432427, 54.33040272849464, 127.70402876120124, 71.02793200332934, 78.90091369883945, 73.52898764970337, 44.170485959409554, 69.47950622349411, 42.692766107564815, 28.13048755793238, 23.51679739444332, 29.286953325183813, 25.66657798516845, 13.547747631398682, 12.510682000239452, 13.808673031452779, 11.835859283890935, 10.509122210513901, 12.650516793577633, 10.20925346238578, 6.797751086047326, 12.142066412329363, 13.915479808970847, 18.118461597530146, 18.314924001046997, 23.166828778717182, 17.808416061715942, 43.41483899881184, 42.36812922957452, 42.55978130864874, 70.88573952907397, 54.20506396610007, 65.01690208225187, 43.814510734373584, 76.86805054676917, 96.11994861996615, 118.63092456664198, 48.08427951356589, 40.24603981732177, 0.0, 102.45650374105136, 93.62659037934654, 113.70086298197472, 82.18182705659629, 47.23650601442311, 53.91122807302066, 69.69334122057364, 0.0, 89.37548389148934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 129.56806101888438, 0.0, 0.0, 0.0, 77.80560586214766, 66.6379638070748, 56.07039575722456, 53.37599296067835, 95.65604764231175, 151.8428677859999, 31.046957598621113, 142.07877024961908, 47.12083870272552, 142.183470334814, 117.79180080721989, 55.487412110423364, 60.61077882797264, 66.0206017076123, 97.01814084428162, 26.138311110554127, 58.092037303134894, 43.40861924139172, 49.60760211574423, 56.10157539826261, 56.20375789361352, 40.455783165701526, 30.29263421114118, 25.454390402306004, 20.941883897374638, 18.908326232015803, 15.220079329644905, 12.299858694991178, 14.327338164711415, 13.407970614827182, 17.21078704522102, 19.007378266792045, 19.02414153412366, 27.630831257268543, 22.924043339552856, 19.808825271928736, 25.25241451739987, 57.520962677667825, 46.45255398947511, 69.90314097009315, 52.95451372037499, 56.51704865995707, 71.22731407259069, 77.61133142519425, 67.47154726395785, 130.12520830720285, 44.69743561695613, 156.2182982689175, 101.88279601212504, 25.537237042949908, 88.11301470118914, 71.03057782841222, 0.0, 87.10538615603696, 0.0, 112.14542588279437, 202.21504741771145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.26992119514998, 185.56988805830875, 0.0, 47.3374793224532, 80.27708399956043, 72.66782590118964, 65.16175677179172, 79.94049287302998, 110.29153003502898, 76.42275697903507, 48.79733241373634, 66.51041901753102, 162.9608251467697, 91.74463044955799, 64.44694899207187, 76.00583108391007, 72.24474282558965, 59.950989755099044, 69.19220117335792, 45.11815302395109, 45.66449796588131, 22.618072310770756, 37.237219752761895, 43.57840043887901, 23.235040710394838, 15.749019978469928, 23.988648486879832, 19.189829511160085, 29.209931373821217, 22.014004447852972, 32.86978936342206, 30.60598272147311, 31.38948250607206, 28.872926505683576, 34.89504286954417, 43.85679040162389, 30.403332529264503, 37.72755971058786, 80.78888472188, 58.896769090453915, 95.309847445546, 89.50202042513155, 44.49808093884381, 114.07083427862689, 78.43645841063523, 77.1711601705137, 73.70542100425962, 86.891001016393, 78.95337232504342, 28.542882398381835, 71.93270160135602, 43.0741945551523, 0.0, 0.0, 62.988668984134875, 76.84609035304842, 0.0, 89.97297809100571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.79846241170134, 0.0, 94.54695637093621, 174.13911794703614, 0.0, 66.75187853050369, 116.6329630495643, 0.0, 0.0, 0.0, 135.95798222698517, 56.15127371073002, 47.93464099029682, 41.95116797045827, 67.65700030885051, 114.97448905726532, 123.53302429183739, 91.18825483541059, 42.5583736120554, 103.57506703806747, 85.2349814724617, 74.23277036340453, 76.75390909295515, 33.61719670900524, 28.194983378119982, 61.75162886342327, 53.078522741466315, 39.6003895968241, 33.89003662332073, 31.16606213499074, 20.575465461476586, 21.232350994866497, 21.454783935534348, 25.944634714667885, 22.154948299695878, 26.895947251187824, 23.614093310514335, 21.769248460494317, 27.93604742272482, 33.81966829210653, 64.39539043481587, 67.28763488684022, 54.637760399104344, 93.53204849579939, 51.094859714899385, 51.51082440302425, 93.58520475031172, 99.29688363989945, 72.43175396947669, 100.32396373006412, 181.75357987671276, 49.3126887378147, 0.0, 32.75033111153121, 39.241907997292536, 41.31786193312722, 0.0, 0.0, 70.26829323336388, 0.0, 0.0, 93.30670785760336, 103.06890676993122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.29250792030453, 0.0, 245.42253112979915, 66.30419316882791, 62.10287180735781, 105.55394055698852, 94.05317398878927, 0.0, 285.2804119638823, 148.41673769421612, 103.92684152097576, 69.4607479428397, 56.13193249147003, 63.71830385096544, 55.98423967210678, 93.1996155922186, 51.570393982868026, 69.78238173688214, 101.21442660550868, 64.78842764332902, 69.04911666623244, 86.75724213070525, 51.003914589611846, 67.73893551325887, 54.838831259130515, 34.973910724547565, 18.593959517107756, 45.52416433601582, 47.756933360379705, 46.056442652476136, 38.10581474344641, 38.01377859774372, 30.54677623030568, 35.938242346493155, 38.18434152921598, 64.41568615258075, 39.673141602805515, 37.57178297393651, 41.8617891528569, 71.05831140284896, 63.66262867346999, 79.95166641409644, 67.58286538033755, 90.33303660903871, 106.46261542494362, 66.174773811352, 97.30316682423094, 134.72535486409117, 132.8298674696577, 130.9455280480311, 86.03750614677081, 70.3176474217382, 0.0, 0.0, 0.0, 60.10294358488362, 145.39743624864423, 74.50750731778828, 0.0, 0.0, 0.0, 0.0, 146.36738520102156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.11492431718884, 0.0, 0.0, 0.0, 131.0062141734794, 112.93872427935969, 0.0, 55.813498461852326, 154.66941477336, 63.86130733695624, 94.00800676294807, 111.38222032154006, 93.12988450532923, 99.98672400093989, 68.82940687418893, 101.60629316252503, 99.29396069910409, 75.69882394207161, 66.94592275086946, 67.58064869568705, 44.00643024648798, 79.76405543119569, 57.515943233117056, 60.31766752989818, 37.70422799550364, 39.568913091593274, 39.63186052683983, 38.85417804034725, 46.07497241894931, 42.47467470255333, 40.57016504917021, 38.741385064321754, 66.43268168867195, 73.93129404239662, 63.00919313443767, 90.01797851521152, 64.7830682453414, 78.8430970189495, 43.537371430061, 60.34425491059451, 56.706532716627876, 38.60057999752432, 127.84149260711375, 70.81989910278203, 64.42992842429152, 72.90459781004765, 29.712707266493435, 136.15087939795637, 115.28501602728355, 46.1322966299064, 97.66087888174943, 59.542628579354485, 62.2033798875167, 146.41871378643359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.2466212812277, 0.0, 0.0, 0.0, 0.0, 0.0, 93.17596164216152, 0.0, 82.27156922000657, 65.01466274790248, 64.7100336498754, 0.0, 46.24802485685454, 42.919977198601885, 141.99580242785325, 185.9982018311077, 29.543753379693246, 70.64007312442769, 124.39008862922012, 86.88655483800576, 151.9405588685785, 160.07622585750752, 102.48156956986276, 39.06260980361325, 49.93400900885065, 99.04899864150032, 63.99498015971435, 48.5404913509736, 56.14074711136339, 66.92742231019685, 52.04356768884514, 53.1409368119715, 75.13632331089923, 31.064271947727203, 59.0092877497943, 44.04355456070803, 74.84957914603748, 52.963723777930056, 70.94807864819076, 86.05426621516371, 46.59637702441288, 80.67961788897502, 96.00752635651179, 89.31999558622309, 83.9975097361179, 119.90183727435029, 102.21295381095499, 79.52206478252931, 105.41070255383696, 80.71438948277465, 89.03328628463495, 85.08236556963847, 73.43609155737484, 108.73026597075142, 31.061512250223945, 0.0, 0.0, 44.99225996462522, 0.0, 0.0, 71.58823412442527, 79.37181218396405, 87.07540413055804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 512.0933314306071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 78.75431338387749, 77.94508872037031, 128.67692733421234, 55.815953677251386, 0.0, 132.09692700061538, 80.2541313500393, 0.0, 123.66221892218735, 81.08307966645678, 46.26961206458868, 59.115195077592524, 49.74381693026994, 108.63719812263614, 102.95049625466488, 131.44348638568167, 81.59495550171953, 63.43646872098047, 122.13961317515287, 124.86418459812307, 72.0238812674676, 57.84906091781949, 78.48452619640982, 80.37758989234473, 64.20968217190774, 71.18764264435855, 63.73023710023513, 72.14351463077355, 78.18072104389232, 58.421912801890926, 69.22424218261833, 40.68580501842436, 88.0436312536473, 43.95254782412807, 73.23445025925797, 88.02607377291109, 71.38850606124838, 70.85775428818677, 45.39518682501545, 64.64623963542583, 75.388584667622, 35.81583714374515, 163.84842677927236, 23.287376704017305, 137.58420867770985, 0.0, 37.12822490480958, 124.13161220951045, 0.0, 0.0, 0.0, 0.0, 0.0, 160.31031789613752, 179.457126882294, 0.0, 0.0, 0.0, 0.0, 0.0, 178.76870294038906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.05879592720305, 0.0, 0.0, 0.0, 82.34742763458985, 0.0, 124.82355429905995, 111.30804524961806, 98.55083708054153, 44.27165683458167, 80.46025563400516, 33.994869394751504, 120.3409165976771, 75.65307256886219, 94.42272154844225, 85.2479586867108, 175.98934686683094, 135.80846300898332, 81.18654674717315, 62.388448993558555, 76.90387524771157, 55.879972410970765, 68.53673416018222, 45.70296951868455, 72.87774713652195, 68.5897020737445, 82.79647693305742, 42.87694758590477, 42.280679144049294, 114.99337284163276, 55.33028840961062, 73.32281226078958, 47.22657085590412, 69.97968229168922, 125.17937335033297, 22.736618181315475, 73.75492994507402, 54.08789996527999, 92.25088832068884, 130.59432453741613, 73.83896182626569, 84.00432256481744, 157.347923723631, 53.60103773165767, 41.2142362135766, 25.04832258199615, 53.46651268758005, 208.46033631464118, 36.290319887932746, 37.94019916939712, 87.8544838359634, 105.97358465676032, 0.0, 121.84070573519304, 0.0, 75.17146440703182, 0.0, 198.97114889585606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 231.1905498906006, 0.0, 0.0, 0.0, 0.0, 683.1104290005455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 158.88131214721415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.51484722112059, 58.74115983165087, 111.16778896789675, 0.0, 85.2469344643398, 113.62152018470715, 133.60284902892886, 124.7792583852409, 76.0372420610131, 138.8852278478347, 157.68368502191035, 52.87299822755848, 113.56500112979936, 14.98793940218816, 105.80868867675849, 93.47997918124751, 85.12072743423356, 81.18587251569313, 63.307264361432, 52.54660601932014, 65.81231214657296, 92.38569474990565, 97.76911416153756, 44.95990012863325, 13.755944084218244, 82.50701110224563, 99.88803122041615, 23.189621991926906, 51.51331392608493, 89.37731245084157, 87.81114223289839, 55.06812595736979, 119.48237192603445, 68.49504795550592, 73.67173329518178, 33.933358059118675, 129.21251095805056, 62.338638088866, 156.35606537759773, 105.21657509267573, 90.5420009479092, 139.540643048854, 76.99981275166769, 80.26996034619023, 96.28493035816186, 105.95733811885755, 61.08002590048862, 0.0, 0.0, 0.0, 90.75895626310066, 104.80197409978275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.58519043922298, 58.27762736444411, 0.0, 0.0, 171.0686335289834, 0.0, 98.60101134876321, 59.47137764625677, 242.33377298228757, 234.95786783552583, 86.25999853547484, 94.48391553164703, 84.5598307893743, 109.62863135978611, 41.00276516696951, 121.88324525321092, 50.007472028008614, 69.10605698211053, 88.23567206673373, 49.34361478922676, 124.44506833595894, 92.81378123291681, 90.69328854081898, 106.92243279896996, 98.33646555565824, 89.34412733662643, 82.24725604835099, 65.69336511759738, 87.90158327895628, 74.01700009493015, 67.50392587731255, 13.406699107732496, 65.42033947153348, 86.44599331398828, 77.79996021801685, 65.75918629709395, 218.3115147422123, 53.71207526909102, 88.00100714143616, 62.88047865933732, 149.18411545757039, 42.11375211732282, 0.0, 51.96590871632659, 0.0, 70.03981824078882, 73.59292565597748, 0.0, 0.0, 0.0, 0.0, 129.29625908368664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 260.9420620144606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.15384843422237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.10390043533058, 0.0, 0.0, 92.09880168637505, 45.58857743392459, 114.5981400394632, 0.0, 92.82228907655875, 56.6635752039194, 96.85280326705997, 70.48537690625781, 124.58031825136727, 134.70651525632047, 68.5465506934033, 48.02169785601148, 91.06930165428574, 69.7118500880667, 64.6514716509175, 53.34794747513037, 68.41426357428392, 80.38166206481321, 150.33107281934338, 110.70475654151684, 140.7325349762423, 108.06857369249767, 76.18928703724427, 147.36264777481523, 82.03953147636692, 131.56420535925577, 157.19735618329838, 67.27643801703448, 131.35169812681525, 80.24504974093104, 132.06406211964588, 27.240824362706977, 82.35996334216469, 90.66920745807778, 63.237407229306505, 72.21637184700755, 79.45773940829508, 137.09490634427553, 52.92687127000112, 0.0, 0.0, 0.0, 153.7527206300132, 0.0, 93.92552784993069, 0.0, 0.0, 0.0, 0.0, 170.6031228963052, 179.98059548968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.08137013959254, 0.0, 103.39075022194335, 0.0, 0.0, 80.10599482884436, 140.7244997531779, 0.0, 0.0, 102.0575411989843, 0.0, 38.73384565915955, 77.20277838149462, 34.5612800604505, 190.7282897274312, 26.785147614386283, 75.52235323641531, 95.9956505518795, 45.42527117503178, 62.58843127894498, 75.67299379287255, 36.19423419217398, 99.45839962173164, 32.17147277625163, 88.06736467756832, 45.955384972999006, 43.23741981287666, 60.411927576998714, 41.699867861355514, 90.18547031514427, 71.93728454822786, 77.42798048445547, 93.2675674955101, 35.00179390169231, 70.16606737584192, 208.39178671641992, 39.45601430516197, 90.24954195253352, 74.64636613460631, 106.37457197509997, 85.68963987707136, 92.77619848169202, 249.48012358676192, 76.35330254727698, 83.73939833818973, 232.2313388575694, 103.22817214435561, 59.55165795411456, 0.0, 0.0, 0.0, 164.7642435034516, 0.0, 0.0, 0.0, 119.82411880880163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.01463122836805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.29064978326578, 74.16008148234535, 73.7015434113958, 0.0, 0.0, 53.85910452409994, 49.84798611550507, 0.0, 83.53808111256018, 100.97371501680487, 0.0, 96.1589800869812, 108.63300457513142, 123.87291380370016, 47.29752895845898, 0.0, 84.49466462002061, 139.6812667170638, 97.12593002461011, 38.73040618894969, 54.74741110962377, 69.63030073509462, 91.08778145519751, 34.76743612008514, 36.300569449882786, 57.685807266855534, 146.0475038747914, 142.09453660451652, 125.33226203124079, 84.36404534903022, 22.104642040055733, 73.7577991325516, 126.5718006100485, 134.224937015389, 88.89451488424972, 135.05856009835006, 33.7283873307039, 38.84576856024864, 43.36419004783761, 45.05875829071597, 0.0, 56.99512699168794, 128.50881602729868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74.2877297617897, 0.0, 0.0, 0.0, 54.403843232422915, 243.2690818920171, 138.30365863863713, 38.59328412357248, 73.32909977223517, 136.74819901230904, 67.07488349473488, 93.47379712347535, 118.28319076381071, 25.720401336242134, 101.83415934160794, 48.686753836609846, 47.339297309655244, 159.35505338418625, 137.77298237865645, 106.9039172547111, 88.8034686275138, 84.96455012923492, 150.32048451666702, 110.1141674738972, 110.313591266667, 185.1449442182747, 47.85964681007849, 101.5790662661107, 237.61650267871659, 30.48175435139965, 62.01610039180875, 67.75921596742025, 72.46761552667712, 113.91718876851789, 41.12890134621962, 91.77774267719391, 105.36628165187668, 0.0, 0.0, 0.0, 0.0, 77.83708766696435, 0.0, 0.0, 0.0, 0.0, 123.04486660962016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.486301125909286, 0.0, 0.0, 93.24634146290691, 128.9535253516135, 81.26532883548172, 116.30724581995392, 0.0, 68.18077817282685, 126.90340672207775, 60.22921550572854, 109.50351675160786, 84.71553538309539, 0.0, 80.58919487053761, 127.44860204044105, 55.18322828428914, 51.065714804584644, 50.8025564280643, 83.49727795223441, 160.91095854773135, 196.45324995117653, 136.16424935196937, 87.57714495025465, 91.76113722201558, 102.1150606691518, 36.58600255695933, 37.89988133445884, 38.13565951334403, 39.90871228764865, 142.1208831387791, 46.454552297626236, 104.68693063469871, 0.0, 0.0, 0.0, 0.0, 170.61631177224984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.60324618940743, 0.0, 60.28286012654514, 51.12807196972976, 0.0, 0.0, 87.30750447139191, 83.53476073210388, 77.50755210744134, 151.32897767175032, 37.72679295632877, 174.68603108913544, 65.61849298709727, 34.261202251719524, 30.46379830188696, 157.68616540250412, 57.53503588893232, 59.60908905047099, 87.84881554436737, 93.81274360768924, 96.47174184441221, 95.70668818410887, 33.47471627076902, 0.0, 36.83709944965444, 0.0, 208.4391402212578, 0.0, 96.08038907068145, 95.84536474603429, 0.0, 56.347535987731135, 60.45787000120274, 70.98425823274607, 0.0, 166.54540263778136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.19762735551632, 0.0, 160.67064124828903, 0.0, 0.0, 128.21207616359473, 56.12684927553137, 0.0, 0.0, 0.0, 46.64036208646203, 39.69364034480131, 0.0, 80.11515071454762, 77.752095124422, 107.08976633370443, 112.42073751873652, 34.84549058217706, 0.0, 34.909954131444884, 37.43630882520503, 37.402838232190845, 151.7040467592389, 76.27594591846281, 233.40667027881295, 40.15760737845034, 43.67814424416987, 45.02004822404974, 188.9812117385274, 0.0, 111.33833173468375, 119.78091756097439, 62.6077846589605, 0.0, 0.0, 74.43647339798423, 80.81103617252404, 0.0, 0.0, 0.0, 218.9006512469074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.91709737979488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 267.0827595828322, 123.09761773619081, 54.026978100959994, 0.0, 156.35864950242456, 50.78637702834017, 47.75542979220776, 0.0, 45.60957199748818, 45.692490724417176, 0.0, 211.22654407592643, 88.40621150787058, 0.0, 0.0, 44.00434648485665, 40.87485513916764, 44.01498493719346, 49.26439551836856, 0.0, 51.093452176737884, 0.0, 0.0, 57.140199885330674, 58.541144846404364, 0.0, 69.54912506006153, 0.0, 154.9246275229101, 81.26963074243723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 98.14017904379722, 0.0, 0.0, 0.0, 0.0, 67.6075345498144, 61.736080841844, 127.93372734290352, 112.24331004369068, 170.0041465753198, 110.65881669397615, 103.15935836196724, 0.0, 103.04727671581716, 52.92694113644016, 50.28847409567516, 147.50409933791488, 140.8563313645806, 195.63870657704305, 0.0, 54.05276784469715, 0.0, 0.0, 0.0, 109.9667368316586, 124.45597328943947, 0.0, 61.934889206692205, 0.0, 148.5048778894491, 0.0, 167.7435873256984, 92.24307788789461, 0.0, 0.0, 0.0, 120.86245095783273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 397.12809538505957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05601205673338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.35429267800549, 0.0, 82.90190061418201, 81.33847239577696, 0.0, 69.43859771683876, 0.0, 129.39124779363613, 64.75109111334433, 126.42279016246556, 0.0, 0.0, 233.95407267939012, 0.0, 0.0, 0.0, 0.0, 0.0, 59.84310425505958, 59.84065841208439, 125.08567421506623, 0.0, 195.5880517429354, 71.13536130399874, 0.0, 0.0, 0.0, 0.0, 84.51593539149934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.76038617923513, 0.0, 82.71198893216418, 82.06191952585996, 81.60842868724205, 0.0, 140.3924449753012, 0.0, 67.98326720988702, 68.32980104809873, 0.0, 70.20799055325578, 62.01348391612866, 62.244525339673835, 0.0, 0.0, 68.70942166895242, 0.0, 0.0, 70.97682849349265, 0.0, 0.0, 81.10784212893785, 247.15993678519104, 87.12127320492301, 95.4479413566035, 96.35252079818447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.50348543251386, 0.0, 147.93500659055977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.74945056644269, 94.85122402019783, 0.0, 84.00798866132908, 0.0, 81.76385624578649, 0.0, 0.0, 0.0, 0.0, 0.0, 155.16186713215507, 80.33187480399664, 226.3419384830923, 0.0, 0.0, 0.0, 0.0, 0.0, 90.13003224827351, 176.79476806368672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.17047495594964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.56390603764018, 85.97334502298109, 96.88124774630373, 0.0, 89.5914840478297, 0.0, 0.0, 81.58592670784444, 82.84269248095897, 92.74027061018151, 83.4826326258558, 0.0, 96.06886574058558, 0.0, 0.0, 0.0, 0.0, 109.75495379446856, 108.52134313501466, 0.0, 0.0, 0.0, 0.0, 140.24718370963996, 148.32324844178774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 387.50512916948225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.59483207077288, 0.0, 106.20380127945195, 97.38895365414201, 0.0, 0.0, 99.09084417370245, 0.0, 100.77789530740216, 105.33433240005462, 0.0, 216.79587265365873, 0.0, 0.0, 0.0, 122.06789004342444, 121.77459864351154, 0.0, 135.5345364839824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 151.6110544713247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 119.05818037935114, 118.07350944638264, 0.0, 0.0, 0.0, 108.37126414832127, 0.0, 0.0, 0.0, 0.0, 0.0, 109.74060882763929, 0.0, 0.0, 0.0, 0.0, 134.5267467115779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05087260171794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.95676534354004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.1069686450285, 267.18950905385543, 0.0, 0.0, 138.13252010013355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 193.01115132188883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.8557517163636, 0.0, 0.0, 0.0, 0.0, 0.0, 148.98876853013948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.0393581621168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 168.2824924290136, 0.0, 0.0, 155.1789114058798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 205.17556857409946, 0.0, 0.0, 0.0, 174.66503048058067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.4077710446529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.04902464387305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 407.93320258975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg7[] elements >= 0.0
arg8[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.151028123703474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.012759753512402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.681936821208858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.612820927058063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.64639262270028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.545979200264732, 0.0, 0.0, 12.589831714321223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.091712536511322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.56630889117372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.351343068831618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.490299185567906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.242612410653873, 0.0, 0.0, 0.0, 0.0, 12.075212610252933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.066799537576758, 0.0, 0.0, 10.280555669947859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.790391435605267, 10.423856307928476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.9369263729455, 0.0, 0.0, 23.262056086117163, 0.0, 0.0, 0.0, 10.651747659769613, 0.0, 20.39944794644649, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573084377711075, 0.0, 9.526617923534774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.232762854009238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.342527158783454, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.417249728269223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.34172074663722, 0.0, 0.0, 0.0, 0.0, 0.0, 17.29513314462019, 8.692818883274393, 8.847931243110647, 0.0, 17.65989963487231, 0.0, 0.0, 0.0, 18.03513374801036, 0.0, 0.0, 9.086299442539316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.489500223482123, 22.80641919796369, 0.0, 0.0, 0.0, 0.0, 9.680809793808322, 0.0, 0.0, 8.743195527851832, 0.0, 0.0, 8.718413863146377, 8.263676297011674, 0.0, 7.978770386728844, 7.981920417297848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.309403305206159, 0.0, 0.0, 0.0, 0.0, 9.37599990942439, 0.0, 9.889192867482771, 0.0, 10.562936174133187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.005439464085681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.927642481192024, 0.0, 0.0, 0.0, 7.989013398374343, 0.0, 7.681575182328425, 15.20002885872729, 15.196938512091329, 0.0, 15.180228018078765, 15.47683888668726, 7.767125058422698, 0.0, 7.89788359010507, 8.053871683093993, 0.0, 0.0, 0.0, 8.913805074646667, 9.078008180920396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.026470625743194, 8.612757536038869, 0.0, 0.0, 8.321707217595863, 8.06853749073534, 7.985489482872646, 15.520561199689848, 22.701264579578947, 14.537262903755082, 6.997578773864635, 7.311134412142829, 7.122121349340881, 0.0, 7.231603311219376, 14.330610525428481, 7.017943611888129, 0.0, 0.0, 7.186141093412695, 0.0, 0.0, 14.852955840868253, 7.491375692692493, 7.851652255501328, 16.48498783083202, 0.0, 8.564327082297401, 0.0, 9.03182434532951, 0.0, 9.60867095425293, 0.0, 10.563927958953386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.773928149149192, 0.0, 8.704927607512353, 8.545403949789323, 15.833327609320783, 0.0, 7.4297441266494655, 0.0, 7.050723388072662, 7.202658284097668, 27.55861328208682, 20.29122150262875, 26.280590096476004, 19.647500908890116, 19.252313951345045, 6.579459901997518, 13.09502607652561, 19.614139142763843, 6.56849454273755, 0.0, 6.622623263914875, 6.804673958688036, 7.016148816073956, 0.0, 6.76748917715574, 7.169280242572633, 7.370544387561287, 0.0, 0.0, 7.770271992129442, 0.0, 8.798449267847896, 17.358240702534808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.47331098050136, 0.0, 0.0, 8.219076611433781, 0.0, 7.822550123520514, 7.2932602660559205, 0.0, 13.923649511184376, 21.002395196323924, 0.0, 6.51025461116749, 13.072693346340152, 12.26503463546263, 6.051221905994785, 5.988157148461539, 12.201550594514062, 11.847069768698876, 5.79976351461581, 12.168684375205473, 6.2812130416583765, 17.91770671504996, 5.930927742299192, 12.602755826852302, 12.571000737409406, 19.512334976541556, 26.56958710185711, 6.447810026054565, 13.89130619259359, 0.0, 7.420049456399666, 7.457783034095535, 0.0, 16.18115799633466, 0.0, 0.0, 9.184948161180024, 0.0, 9.820947376905872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.601751490580206, 0.0, 8.619835442883831, 0.0, 0.0, 7.704277911761815, 0.0, 0.0, 6.7745169941140055, 19.91044964460032, 19.22900324364384, 37.462197050260755, 12.37736876374272, 0.0, 11.828484548912478, 17.050476551088888, 5.697977482262445, 5.529902718918871, 11.020828191951388, 5.634199719455201, 22.151650486266906, 16.623235622428822, 16.899632090604968, 0.0, 5.64845792819083, 11.438157845293786, 30.20024509276573, 5.951843570163286, 18.799282411924256, 12.831204317227094, 13.398468577448355, 6.673855858028027, 0.0, 14.689130644792343, 15.120495123073047, 7.865546792420641, 8.172600747290437, 0.0, 0.0, 9.304580643818516, 19.492258165703284, 9.71232809638491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.116186552816862, 8.0668941439689, 7.415842162134676, 7.13993248336044, 13.75367137973485, 13.114396701767353, 0.0, 18.389579019598617, 23.34795401294593, 0.0, 16.7045141514584, 5.664415277106654, 16.313773047560353, 10.612662529219657, 26.156812699001225, 20.432887345313837, 20.568507268136713, 5.2664697544432775, 0.0, 15.366468374101885, 40.34386650685221, 5.311751041361426, 31.659086332169004, 16.32115660929363, 27.61547254350318, 0.0, 11.31053585392776, 0.0, 18.600683725478305, 19.092240843282106, 6.5792976389282805, 0.0, 7.287229994019377, 7.2932986783600615, 0.0, 0.0, 0.0, 0.0, 0.0, 9.820682133866626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.990386769573377, 0.0, 0.0, 8.35172364500591, 15.752868351376708, 7.97992950518257, 0.0, 0.0, 13.63344876484517, 6.451182958903727, 5.9685937916202825, 17.76098713231086, 22.79510577987169, 10.831621910295997, 15.954808687585725, 0.0, 19.837441410948365, 14.756181429722123, 28.8724108034041, 28.05760936105202, 14.134009791790266, 13.87528498734131, 18.883945093500042, 13.541587097726795, 9.447574285405619, 23.709024479519712, 29.154288948995113, 4.768360999694632, 14.348613133681338, 30.413123962492225, 10.039956233221796, 10.258492201459584, 0.0, 11.37241044329036, 0.0, 6.426311299076059, 0.0, 6.495091045234012, 0.0, 0.0, 7.739501060882492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.991435063222868, 9.970217891723696, 0.0, 0.0, 17.833113318611737, 8.483219154802509, 16.08564355943179, 7.667684423529968, 14.574594796276003, 13.834492908767043, 6.395278555260388, 12.361583027633058, 0.0, 11.311986973737882, 0.0, 10.710862004335212, 25.501696692545035, 24.78897969721473, 19.454895789129935, 18.656742015892647, 4.585653490712714, 21.961028069953436, 34.57138169388268, 8.730939871897338, 20.66708756081994, 41.97163206868673, 25.111468892134507, 37.94404067187976, 12.404542322927824, 29.98454665287755, 4.573411638440274, 13.351125029366912, 27.586458577818043, 18.661364636577424, 20.00599579108919, 14.995793694469539, 21.381263810936197, 5.457371881541051, 16.970461431241652, 6.006795558414911, 0.0, 6.597608872021967, 6.662830606941564, 7.213760272478696, 15.278434387724184, 15.83025304054901, 0.0, 0.0, 9.350111575426293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.483116603200756, 12.040786329036107, 11.180464216270632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.506149909701286, 14.130325557704492, 0.0, 0.0, 12.623119605517639, 23.886373380474176, 5.747618696227826, 0.0, 15.50830756853781, 9.612962719552229, 23.929825109039715, 13.520949867106209, 25.821557013371866, 12.639887341795681, 16.563405216858182, 16.298122945238525, 11.753023207548939, 19.38937086781055, 3.9333826761690447, 26.988096257248746, 7.716919602010264, 30.817045157613855, 7.535017439448509, 27.464277618996306, 15.808518281110441, 25.056882073783278, 17.22491855486352, 16.970692098435876, 26.827882331915667, 4.76410488680787, 14.537627816414478, 10.334933164742775, 26.50281145207024, 17.023969990761408, 11.808218794191085, 12.092746265483623, 19.346562027019974, 27.84491836483643, 14.26082762846275, 7.307391312602476, 0.0, 0.0, 9.1693308484301, 0.0, 9.555996214599844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.782708147554146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.940472912778905, 0.0, 0.0, 7.4457218673168875, 0.0, 0.0, 11.990509811158486, 23.43182824011405, 0.0, 20.87267062762542, 24.591473625290277, 4.550523352168579, 13.915039728466333, 13.217303279083508, 24.413447804181914, 8.340536289406142, 19.221064030294166, 7.253501011150695, 14.215221126140513, 31.71442570300443, 20.532608867748287, 30.800437970029524, 27.329199314441112, 37.85178098795286, 14.016492908641515, 13.555016065391673, 28.44228918149635, 32.730353444229706, 7.686515358845656, 31.47193006798544, 35.80450427239423, 12.254926459496753, 17.084765977485436, 13.715362532289042, 14.126876605329882, 9.920911771141526, 9.985467171260527, 0.0, 17.46434470441563, 18.55536800485455, 0.0, 6.66513169853516, 29.272651915996725, 0.0, 7.863535006474621, 8.204926741891985, 0.0, 9.607314753152645, 9.687861135699645, 10.518059126267081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04139318108135, 0.0, 0.0, 0.0, 7.679996035389319, 0.0, 6.819193232491305, 25.812146088825095, 12.46688411541945, 0.0, 21.73230376349418, 5.361255820056245, 19.035682010343322, 23.30322715808078, 21.995210901879148, 8.089831790067658, 23.714719035305762, 29.85495288654129, 21.915837983586705, 10.665438083482204, 19.886638204906603, 16.21508517738812, 44.380827064079156, 25.03140846724543, 43.53670995917351, 18.451798041356806, 39.571604800178775, 24.750327367434714, 15.359342242424153, 25.16021714652994, 42.740647635596005, 30.66614846252848, 21.046606992033567, 14.237220878677746, 30.04956024977756, 19.48088417164439, 4.128367502630757, 13.118012954167735, 14.135978913437642, 19.396277152801385, 5.160733113074151, 11.187033317852066, 17.563589209697344, 11.911975271429062, 13.072091067908229, 6.744643287466357, 7.320337556813292, 7.448865862333962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.476919425657906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.90771325974671, 12.862989157165712, 24.47417865148239, 5.7394917487161665, 10.931620425620885, 25.724936213853972, 14.27746424771829, 9.128981034106243, 29.970825617290505, 7.928801542270209, 15.335208137581958, 14.656045381118332, 24.048630407973675, 26.383198612970645, 28.17169428557682, 23.907528921527174, 8.99311061561986, 26.318692222833885, 19.661390867916232, 22.07101495822213, 21.76750288940249, 37.48054692826017, 32.958848990834184, 19.380176474654384, 14.349552287296135, 11.50097503076284, 32.87788415624407, 15.602023569131584, 13.115287220208733, 23.950071857753215, 10.39987304376072, 26.742655998562693, 24.401689119595854, 25.677369856330316, 13.641902126744895, 19.205445018658374, 15.414304059357187, 16.632151210635516, 5.811712225817974, 36.894094151248915, 0.0, 7.122897670413621, 7.365303235982192, 0.0, 24.448560340553463, 0.0, 0.0, 0.0, 0.0, 10.722785063088995, 0.0, 0.0, 0.0, 13.150585135755565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04576932714837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.556134570852558, 22.97736618305438, 0.0, 0.0, 10.120451108531162, 0.0, 0.0, 0.0, 15.922195209245732, 7.76633911120967, 7.08758638899117, 6.910137111795205, 0.0, 5.773286528567786, 21.45970864421321, 20.42937365831101, 28.84725082983361, 45.270779793573496, 12.273628557523594, 31.37739643338275, 26.239116573567053, 31.292306776885468, 16.780273411807137, 43.4669007102765, 23.346199283847504, 27.933237775700196, 24.571631859350322, 20.74731848837061, 22.547077028625715, 31.401823525394583, 33.47755922371345, 26.027541488894002, 36.23384988661514, 24.131499455464642, 24.231593658222533, 43.66031235997703, 35.95547900792143, 29.139754897695283, 17.0799632762686, 20.613886746830104, 27.53310970611963, 26.362722665469708, 24.724582101113402, 18.55862707634531, 23.48144003527003, 16.570995906067505, 4.630287130639889, 9.608837088918744, 10.285345083055995, 10.906572067274187, 11.643662019290627, 12.271344917431167, 19.810925225668672, 14.241663316390051, 14.929759690676327, 15.695042471728087, 0.0, 26.820411551537397, 0.0, 19.811518614885955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.022023558427186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.15345370136755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.796436018153734, 21.551582221884694, 13.398034666260086, 12.834207357327664, 5.950772163747547, 16.47952801106808, 15.355527738329924, 9.662380259953462, 8.976689136802005, 8.336311490155321, 43.111238779465175, 10.846510796044814, 31.443554923393396, 32.32951346449266, 33.08905632440246, 25.73690590502669, 18.855982321670336, 27.717733384154528, 24.16929555817104, 32.5773765661032, 28.875864402885934, 30.109104676807757, 53.278984395609264, 33.57482383387074, 35.911543088040325, 23.479736815072826, 34.49558552403765, 21.790999029279252, 25.367013566059992, 31.15862106950175, 12.4655636072286, 29.401588726526803, 22.595988317861472, 17.76320434261981, 35.147602342897564, 7.047663629974897, 14.851308731178436, 22.93874773002458, 20.846927603410798, 35.92413543146813, 9.856992750796834, 26.014774396997435, 16.708200622578445, 5.91250686625941, 6.094773705194124, 13.65034808799021, 7.0995314770451134, 7.711078461819014, 0.0, 0.0, 18.26579678701703, 0.0, 0.0, 0.0, 0.0, 12.359698002117668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.964607469119809, 0.0, 7.6886918812441, 14.860254539868356, 6.976141102920844, 12.809381729086812, 11.99363081089334, 5.683204032800376, 5.293444129804888, 9.766316246613965, 18.0540722179363, 25.48881842962269, 31.492467007142423, 36.781804465178006, 10.192793725062742, 37.63592469734482, 52.51845414574255, 24.53188250031553, 30.80555497984603, 16.849000131686815, 20.724665206650165, 25.73529748784714, 38.45288670030334, 28.334910937104333, 22.340004059894977, 45.91259430806845, 27.720904889787015, 37.72586365451012, 27.512800076114186, 22.438005457199388, 20.56945826956743, 16.516631363170575, 16.788579492849966, 38.374224557050944, 19.33635789797816, 17.768220109035358, 16.445989253141278, 17.46079076651872, 41.15383429648058, 23.305221356835848, 14.615548722438756, 7.844331933201617, 12.824777798776122, 18.363218107192505, 14.665825942474022, 5.074958239527188, 0.0, 5.866074866328307, 38.83120551129576, 7.183894615979856, 14.84508794641026, 0.0, 25.14758294659083, 8.875197300892273, 0.0, 0.0, 10.878229570287653, 21.964473114016513, 11.518517839556045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.574015544442185, 0.0, 0.0, 9.11151429676485, 8.356683857496353, 0.0, 7.3270838321200396, 14.261808814172884, 13.421308132469473, 6.244232570997385, 11.714424035884733, 32.125209327278185, 14.83892125798872, 14.06874203873872, 16.888778836997684, 19.99232639067638, 14.620830475612411, 33.69558173290923, 40.73165829428086, 29.050048517421573, 23.165056807524696, 23.71211523321662, 22.37688670562641, 21.03142649361996, 23.689173722357683, 20.063032741816322, 31.666729454891883, 25.420353773460835, 25.65169917253989, 21.929561143419402, 22.30029019152261, 18.623563216101722, 31.843425378163687, 16.316089453413237, 22.291786733688895, 35.47514324446663, 24.473620206848004, 28.195112600483174, 12.985256358808796, 27.125414175199253, 42.11214153792393, 24.068947960789096, 28.733764533688472, 25.06667561046921, 30.475170007768504, 25.587114733311644, 35.35597928492604, 4.285935027393695, 18.95462592629335, 5.0907016172195085, 21.164117204942812, 11.774172422504183, 24.56478749447784, 0.0, 0.0, 22.821147710717206, 15.99639378783933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.954916077914868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.246046199047326, 8.94973608372984, 0.0, 0.0, 7.42989212683968, 6.599999809246023, 19.180720346691984, 23.752837821785107, 16.076538022934674, 20.673309354361145, 37.74737023100879, 17.771009091942325, 28.059977734548458, 7.4728345709363175, 23.772638828792445, 18.734339509116424, 20.18013875910607, 23.597244080308887, 29.477771900171682, 39.80824220649606, 46.91671344950455, 28.775357544630623, 33.18960136826902, 44.21887204355408, 29.412825335156707, 15.750468297975614, 18.042621342213682, 32.230842541485316, 18.148540268537317, 33.02792326714657, 17.114814366727323, 32.072166428204746, 29.182048172028818, 33.28375778085775, 30.399377018593658, 26.01173673572661, 36.13955567126747, 32.62081090797904, 24.313403602106057, 27.11236882793153, 34.26377707489031, 49.695698562605024, 31.645729249364834, 24.127026671275853, 37.05470761037043, 15.746148844964974, 17.819834952333252, 14.372499920014992, 45.43824826849321, 16.312505449731297, 0.0, 25.220948521624607, 6.846478248060821, 14.79749740024302, 7.80562343724356, 16.982793702834115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.52228746592777, 0.0, 0.0, 0.0, 0.0, 0.0, 8.540067799232546, 0.0, 30.257948157261456, 7.212233811275606, 20.08396088169154, 6.291449070927884, 11.849876469825134, 15.74421928079018, 29.741011224212773, 13.689950640342111, 29.289786654259295, 15.40918492245064, 28.07336489192981, 28.827708166768872, 18.00177134527761, 31.855474376769287, 19.205208771284763, 24.67101297824654, 26.57557714848147, 17.81999432798259, 38.43591880235796, 35.4368531533444, 24.075909731127787, 27.88566924616586, 26.901812703028412, 25.788582121037045, 23.037205010570233, 22.74691837048768, 23.920974801905533, 33.77037759576947, 20.731294666013937, 25.62946352312456, 24.727090379168995, 33.869342097722246, 45.58365101244769, 31.07312213299972, 31.16149587052966, 36.29877277484718, 21.896090980162963, 34.202141725993215, 26.112962772640078, 32.18315286763007, 32.1247435940665, 45.15760554627489, 15.29227275993207, 8.281952493167022, 17.968647833239267, 9.754980424324675, 25.99925346982152, 11.60552487920081, 12.385500818750945, 6.51107732792252, 14.194338617617412, 0.0, 24.42399377487142, 0.0, 0.0, 0.0, 0.0, 0.0, 11.906849645878953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.593209290963756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.339517935026437, 0.0, 14.619520859973282, 7.04922768497222, 19.449318588379285, 11.975784396485196, 16.197158154786358, 0.0, 37.09352788870528, 12.990628071246677, 12.115914005806316, 32.93232952007431, 22.948874730785843, 32.704500504562894, 29.717825083863694, 39.2668372771025, 33.06769499274013, 25.806969311584805, 43.82427514127488, 32.935339613196646, 20.198405747655013, 30.319704694685132, 37.1811074436142, 29.730245967569452, 20.038208827967892, 22.21160253968355, 20.392035527793993, 17.781727887508612, 23.252025163853304, 24.76786720107023, 28.95736400620029, 19.386934385089827, 16.71676433056758, 29.12760123901485, 21.106250139854037, 30.72630471104298, 32.891269520958396, 30.048770262144895, 17.78253292985094, 27.72075057535836, 42.41787726623684, 27.19806341078344, 29.654779281936463, 32.62793262360806, 36.03642872893782, 31.416217084552585, 30.329389830545537, 32.887156553912256, 10.08477358241899, 16.58223445375397, 0.0, 0.0, 13.935872148504071, 14.704284885177822, 31.92649460817625, 0.0, 8.75117701454365, 9.951520196267419, 0.0, 0.0, 11.163142250366644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.900428282335636, 10.118933485198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30.989143556206994, 17.62598030011264, 10.629733841984182, 5.045498494672866, 13.48908112081962, 24.630928456606725, 23.341676043323147, 13.498507742296136, 41.05270491631667, 25.4438308374419, 33.34006660880466, 27.186772892939747, 28.15801642323244, 40.268265087105945, 21.147046915635435, 21.64619226320122, 36.05927500316296, 27.64550897048044, 26.916119479841402, 25.02228079748444, 15.325888697384766, 23.70874865331386, 21.592668495179726, 14.671778797823212, 19.16065030543864, 17.742594463363588, 24.050839333433913, 25.17043063493164, 25.632836239365517, 16.344288404526694, 34.79666540815366, 30.919400647181803, 17.694199094735996, 26.205286506954774, 32.118936532224595, 18.375444280048995, 31.797669630038804, 20.24542740023844, 16.698123929929295, 18.35781774951042, 48.268657081237016, 41.2375759942298, 12.329196457471713, 13.511242974371472, 24.677654416605115, 5.341430819105314, 23.634951475049306, 12.825443914144143, 13.610177002537656, 7.173830504344104, 8.008273537513872, 16.497570751931878, 8.852790450655238, 0.0, 30.245505709400117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.1729112484884, 0.0, 0.0, 10.863432737155124, 0.0, 9.726804592093233, 9.34234199608807, 16.93717960042091, 0.0, 0.0, 6.870812325542281, 26.579872427710754, 5.999725512688793, 17.085241387506883, 20.897592048600163, 24.162049901246267, 21.876706109904568, 20.10903932845201, 14.519427115975239, 26.264225802863102, 29.49607103783366, 18.500699569316808, 31.11712761718693, 18.99253531235623, 33.85882016215605, 21.748072381317776, 24.932309386896108, 29.56568683093075, 20.297313970535992, 18.84613813597381, 29.54366968194033, 16.265026698037463, 21.270112419652637, 22.594468698656737, 17.421783659122127, 13.429579392624017, 17.20445194433063, 20.203170089065303, 24.234834920897423, 16.97724800417629, 23.287274710506257, 18.137157295741527, 34.30550279093998, 30.30825321209848, 24.14720425144345, 41.64814659611398, 27.695405451111743, 25.087623206112724, 33.55076972578813, 40.16904305385777, 18.864181879237897, 44.40498649225306, 16.92285251478536, 35.841746968272886, 19.89778029687176, 17.51791800185739, 38.52391469222232, 20.456222046711265, 28.19398168879031, 0.0, 13.196355889819785, 0.0, 7.570609453917466, 8.37031986518012, 0.0, 0.0, 9.75789380569095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.09847484622628, 16.56286122542545, 0.0, 14.87795652143199, 13.80223626733621, 6.307013326936365, 23.3520964979759, 10.694398461785992, 20.301999042674822, 41.749155543890225, 12.874577097648523, 11.66822681226225, 23.868336616005113, 21.794913375487027, 14.335921014281999, 20.189126232113267, 31.477757843592588, 25.978943799896147, 21.24821921543203, 24.45603603611372, 29.96486154118728, 35.307616781234366, 26.9118852545783, 19.594140922902408, 23.454712201946116, 17.499408620572837, 11.445261383942771, 16.447589985346177, 12.502207247779626, 12.643602337589265, 18.313281952071073, 11.935191906527022, 11.891782196965547, 19.51434742842991, 15.041333405353047, 12.394541017171129, 21.827834734643936, 27.674876958406028, 25.215905475911814, 29.068671831912567, 22.80733843096617, 20.953465076838448, 23.856823151499707, 31.361202069998054, 25.276303981884308, 33.52771248718702, 12.491719267755393, 20.8752584724292, 31.02279806710608, 12.858451044368685, 9.602504520459696, 15.130873495431477, 5.260878439228097, 17.933437612586644, 0.0, 6.97439804596437, 7.317914835005864, 0.0, 8.682487002464029, 0.0, 0.0, 10.04139938325669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.660062848437516, 0.0, 10.384895989454993, 9.405736387338546, 8.926417087603719, 8.451404220046127, 0.0, 0.0, 13.588253647570662, 6.276711372643475, 11.484078861180178, 5.264945426062222, 24.8288998262306, 13.256175252432161, 24.271691038850275, 22.38838747507508, 6.8309727458550595, 63.26699362221367, 40.93186949662144, 29.015967733053564, 29.83891964015259, 32.15348034004717, 16.177421258348854, 33.94655415362633, 29.164376317045317, 17.521157591257108, 27.534631930441854, 20.08259939172489, 15.37613828409366, 16.667154691807898, 8.494349109073115, 15.517015231128028, 9.834948071680413, 7.135722991084876, 9.099423788309204, 14.773084806437177, 10.337221783467085, 13.3075380735109, 17.662416289870755, 18.993715852201642, 20.331092094669607, 21.50732491044815, 27.826676278751425, 22.416717840645177, 25.037689737083692, 21.098340742064643, 39.28305704229571, 25.165166925534574, 33.63610625352512, 21.945932767176295, 30.10478445547885, 36.981154891558205, 30.308243674741952, 20.385717333614444, 30.962832277600686, 10.177646036414643, 16.22638407126172, 17.471850409167104, 12.70942466019914, 0.0, 7.487863349797882, 0.0, 8.491678989151088, 0.0, 0.0, 0.0, 22.29897465687943, 11.312478500200546, 0.0, 0.0, 0.0, 14.126411949369867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.209949042624226, 0.0, 0.0, 0.0, 9.533668820163026, 9.084714349888705, 8.218335307016474, 7.995540259254436, 7.134863694528537, 6.679887342335205, 0.0, 5.9361202252478185, 21.626235362861397, 14.841360244705657, 13.133029276410108, 36.2628278145881, 32.71706944051127, 9.425301028739263, 17.48955863658477, 32.22694808778863, 20.684410391625544, 32.64331019447755, 8.843922318184914, 26.117829572862163, 20.53158368385214, 37.60348800254891, 23.293973248134836, 24.386190613327567, 18.919769290266082, 21.81540962762764, 15.356185853897838, 13.386702846462073, 9.512492591443054, 7.863576728375129, 9.020607950213325, 7.529490006997773, 7.808285170587875, 9.167136900039186, 11.57742795168149, 10.973480947344488, 13.0186419113996, 23.90663198490636, 24.358819181512104, 21.858818263197517, 30.187873058405582, 26.266083042151088, 23.999296600432988, 35.50874669815096, 28.369756564845225, 29.777226470112225, 31.23989430569485, 22.910138349448662, 26.10478666825387, 24.841143791799297, 23.77044143840864, 21.87525625403014, 19.42074503302156, 36.8331041715542, 5.547081207334782, 6.113066038349138, 6.487639473512662, 0.0, 0.0, 8.21403150243872, 17.384291628849958, 0.0, 0.0, 0.0, 0.0, 12.194288447342037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.240829941900742, 0.0, 0.0, 0.0, 9.008795660689978, 0.0, 0.0, 7.036009850550751, 13.352664274491948, 24.5142285937528, 5.46490162427025, 10.486215499936959, 27.87921178570216, 34.547459160587835, 15.642785590767186, 39.04487652341257, 15.953104969037929, 17.314263036309278, 28.272714258295697, 37.9465992648494, 29.448586689375524, 33.74830706248044, 15.814851422515694, 19.412036160087247, 30.73279972398328, 13.562448795187104, 19.956239980555818, 16.252149307333468, 13.309350269195354, 13.361819468711863, 8.802206888123395, 8.528870216408956, 6.330075599341857, 3.5035969759905057, 4.782820912579143, 4.672907474666917, 7.984633363376749, 11.651762653911804, 14.295360093688394, 14.758953724114933, 15.665978931372747, 20.97544780216645, 28.331681912768662, 31.620400526862234, 23.304010392121548, 27.56918350990958, 27.159582209442384, 27.716635104802837, 24.44205713326356, 35.2184047247206, 31.473085596370368, 18.90761493719862, 28.034064439377918, 19.628585243186052, 8.965942769598179, 18.67653595629754, 10.178145409221711, 16.649348189560317, 23.99408316677318, 0.0, 7.093891995822983, 15.51095731989691, 8.192960899023621, 9.132056556042752, 0.0, 20.41138287520834, 0.0, 0.0, 0.0, 25.706229751392144, 13.258862743016328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.153388954807903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.176376887414247, 19.28077513226412, 6.190116119679766, 22.495950899932556, 0.0, 28.067534473739144, 8.242902636820515, 3.704658301664674, 34.42903013985756, 18.931032567718646, 41.499885574270046, 24.61843488908081, 19.644766202945018, 24.661929557467616, 20.876112728740452, 22.27156103502256, 19.786343518965587, 31.94271543131465, 16.555342637544868, 16.74949136754696, 12.569840203835044, 11.554769782438143, 10.245582892013868, 8.114634734866021, 5.6915159705524605, 3.238383169892228, 2.3961351046541775, 2.9616152709024433, 3.419553373207075, 3.7562625213041767, 5.544227288307424, 9.0302290635342, 13.65549197608733, 13.348570450325505, 16.645822464458128, 15.647017055613782, 16.40861396377346, 21.113155261792574, 30.558314098174954, 15.988128686432553, 39.242702281731546, 36.38863769118388, 39.75817127026018, 22.729017341011648, 28.157450875664605, 13.64532738351466, 15.436020033300487, 4.334505572008058, 4.5946345071657575, 10.34385004575449, 16.77140625282386, 18.493602448405774, 6.483621982514807, 6.908763021294441, 15.20911157037958, 0.0, 8.973075573438498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.336047529741744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.537346411869393, 0.0, 9.63848260533677, 8.8458673051159, 16.258218263743018, 7.63007562799824, 6.844356944241978, 6.367080087376393, 5.939210062220921, 0.0, 15.156958663182998, 0.0, 17.131012158720853, 11.281711194096442, 31.175011535809478, 11.92039221351031, 43.619104219750234, 29.654318795729214, 30.146144768606298, 27.589294632958115, 39.30235513346173, 34.24808410677397, 38.44190133516287, 18.452486149528365, 27.42550741847295, 21.864971991804218, 14.924038845582016, 9.650230295078927, 7.280483599160583, 5.644615962538039, 2.8706101832672073, 2.124680767188776, 0.8525381817301357, 0.9785113320242633, 2.27502375300581, 3.6563097254041805, 4.631194448625679, 8.70234300636644, 11.332305125625066, 12.362251977025645, 17.10588741740762, 23.123651492334563, 20.081394280595152, 22.528065801328584, 25.891958047442568, 25.477385326338183, 31.76905621342602, 30.870294733524894, 33.996751255657216, 19.16446494484049, 24.50381307919716, 17.468214778303057, 30.485791202773516, 17.028182346814802, 18.70141782832851, 20.347807868573433, 16.6436820557395, 6.046226430109846, 6.474595248113848, 13.894465139299468, 7.323519486122109, 7.85911539704611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.492983448821272, 16.01133363319159, 7.465178781190943, 6.893940873081953, 26.248618033670745, 5.824367650728496, 16.217603785378703, 10.075421314133731, 13.889499365629959, 32.91622559195817, 30.561608073216682, 16.938400262244077, 12.325165382963824, 21.799711825804224, 31.747091316269067, 33.88696682861894, 41.74267161009685, 23.63246194206969, 31.761594705485198, 25.335644122125014, 28.926288305398877, 18.039970133700027, 23.00720290642688, 13.098634377903416, 8.64324134118583, 7.079080617806863, 4.146033544858598, 2.455632084368443, 0.8775414676689082, 0.27111880630645147, 0.2270178759129509, 1.1283359984949235, 2.4648869172573793, 4.3695851742479475, 6.3694617794292885, 9.024269958213674, 14.894265252395577, 12.276973285985738, 20.252716973148615, 21.91927476532546, 18.568143434278635, 29.085498895289202, 26.13036250564898, 28.78521991430198, 18.9550999281865, 31.144294791847386, 19.11152760158352, 31.16870833719921, 34.28052234660303, 22.83648900753683, 28.973340267145197, 4.657814149949503, 20.00826786396504, 11.137885956570342, 23.793174255325425, 12.972175669605113, 6.976195635607321, 0.0, 0.0, 0.0, 9.40097844375153, 0.0, 10.423583062499304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.86027966897886, 0.0, 8.761393223858402, 0.0, 0.0, 6.999772448198767, 0.0, 11.88576958265906, 16.56100595993291, 10.40605059631434, 22.654040328110383, 12.6803678627507, 18.842993279971267, 20.780885593107715, 33.85549941049086, 30.00560344995658, 14.82988322406395, 20.947133520099648, 29.512406146889735, 25.103672097982027, 16.92701652243825, 31.40191148069845, 22.68827046271425, 16.296362917474713, 16.94485473960153, 15.740462029968528, 10.570069354700165, 9.36166332611491, 3.777308163454032, 1.9242786602944573, 1.0684334065796057, 0.26879136591862207, 0.23504614706565974, 0.659384864495866, 2.6615050100702122, 4.642128622635772, 6.313828219575138, 11.382196880532529, 13.467190053334106, 14.045778353013684, 14.848804095876304, 20.29549733908259, 26.75001536085803, 19.5940375050494, 25.51786812229348, 25.38747149276785, 42.57977448878097, 33.53725478046563, 24.53633821996451, 24.29148208273382, 27.002228462439028, 26.685356572770285, 16.41111003188101, 27.794296550567687, 20.447224309343824, 16.621537694376283, 17.705282234540707, 19.97664870161478, 7.031685972138513, 7.597935428336296, 8.116566326900298, 8.792865823520442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.3563406530753, 0.0, 0.0, 7.816976120939454, 7.295184300619572, 0.0, 5.895637289030457, 5.650463822446718, 15.361861487811316, 32.873576330484084, 20.950061301512346, 18.77570035367393, 20.32844235395195, 36.16666713329317, 49.06303422934991, 27.16346878462753, 21.617158686902815, 23.82155804317407, 31.272513677341184, 23.318179518523586, 24.615669176479656, 21.499489248333276, 19.690312497776223, 17.225876367709212, 13.618249671047327, 12.86433212849131, 8.522358382686422, 6.418756964367325, 2.741095825688941, 1.9597947823539537, 1.3060521291998406, 1.1595373306273944, 1.6466615756287364, 3.6283318690813564, 6.51994284406365, 9.356132168029003, 10.835131747900345, 14.698538880747885, 13.606830740275326, 11.867439825786887, 23.907156661507788, 22.255316355426576, 21.36979401466501, 30.18917491270766, 18.508458588585313, 23.125553047725198, 28.936226810412336, 16.835850687676604, 18.42009217138871, 34.715509065271156, 7.874333796303372, 25.11407301044611, 18.45958508700773, 15.623274139388425, 0.0, 0.0, 12.888804806385178, 0.0, 15.159634394736074, 8.42586095925717, 8.87024165873929, 0.0, 0.0, 0.0, 11.25670940312615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.850326943087168, 0.0, 0.0, 0.0, 0.0, 0.0, 8.857882652025392, 0.0, 0.0, 21.095074394489437, 0.0, 24.534258667063465, 5.514905348849353, 15.5913826304011, 23.767442813082226, 17.269468484039436, 30.710492846339815, 42.638853208455714, 24.66054958651595, 36.19152362867733, 44.89384681757604, 38.72188734063161, 29.90062570055147, 29.014811870206202, 27.19430769598603, 22.891472684497035, 26.972170808832846, 22.803805259047042, 21.88395045458569, 17.80422701785064, 11.875802372120644, 10.73440970982848, 6.299700310288096, 3.1597040241320036, 3.715124239161183, 2.3284801339374166, 2.837614867238177, 2.707161016349053, 4.784774195162909, 7.764527154265211, 8.716140003111263, 11.130033296310128, 17.592076112810105, 15.563971427969415, 18.901470731222545, 25.13879654730288, 28.23993408557932, 34.63466264467156, 27.68475542691432, 37.26302073435266, 25.8874294661112, 34.37878123656214, 47.45220441156605, 18.810076949729083, 16.963996561988814, 15.085630642240632, 30.074515009291495, 13.966337473528384, 35.42453974176587, 22.547971291196387, 18.08865271588132, 12.949565426982703, 7.02774489601798, 15.314454523825416, 8.016380326828115, 8.904008252033208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.312450748596588, 0.0, 17.626155087365028, 8.133927650173176, 0.0, 14.040757972052127, 19.805767163152876, 18.341407273296117, 16.962140779061773, 10.522137706058238, 19.22472501017813, 4.478022898328414, 35.54221425636326, 17.702508741196716, 6.503962054134689, 25.29717959363515, 43.28950727792264, 24.71980251438288, 15.69693562081703, 18.38445822798371, 32.617177364394394, 20.8535832545152, 20.33309051392222, 19.421688553535102, 21.026541467268377, 14.711569640223658, 13.402392763246342, 11.488155851097828, 9.093087472689897, 6.847205063829936, 4.643598826133427, 3.619526294397999, 3.0632300290293673, 4.293340098144949, 7.554677571948431, 9.793891983275753, 10.906160333021813, 13.598696180641303, 14.36063575356164, 18.369615482971128, 18.404132539081623, 25.502567799758225, 40.099236201533834, 29.03830156686558, 26.808384407264498, 24.79188254517361, 29.40989154703646, 25.551832705467962, 34.74495282362888, 19.4385769447408, 42.32912915583295, 34.89438679354069, 21.787094738896997, 18.578974307436674, 15.165385149237878, 5.39202648047083, 6.056493485504526, 19.805782714374658, 29.298410408419503, 7.673624242288125, 0.0, 8.844830345826477, 0.0, 10.253578455759092, 10.590237390501402, 11.067265204204604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.778157756167427, 14.37368628045255, 6.471642963245249, 6.030709294570019, 11.135481459804701, 0.0, 24.349753831955958, 21.829714525933305, 16.158934202824238, 21.97974854711757, 22.919477245936342, 38.42752446413638, 18.314640021074027, 34.757986001784104, 26.34880293991505, 24.28732855484585, 32.38833210808129, 25.920674708254012, 25.177521133218402, 17.50967514446126, 25.28159574682756, 13.938411328869956, 15.973022282511858, 14.53629047149693, 8.954537660856133, 9.469712075263981, 7.077233345852675, 7.783267184502883, 6.191370310336775, 8.487821000981997, 7.978946116964099, 10.078360512849969, 13.315175036620442, 10.242036723396419, 15.130646662103874, 24.037073357170577, 21.244394301911335, 17.74753113234468, 20.96121655836467, 28.543786141818522, 30.43492741510174, 40.39637897958084, 25.106180814440577, 40.907442329061155, 18.072011948658883, 25.333809711944642, 26.02302537821904, 28.217088858988937, 21.85698046064872, 4.8773454577601, 15.903722414299075, 0.0, 12.268597364640293, 6.481302489731191, 6.98626945179969, 15.421923295410146, 0.0, 0.0, 0.0, 10.096227108909433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.98795514611698, 0.0, 0.0, 0.0, 0.0, 11.058404785500212, 0.0, 0.0, 0.0, 0.0, 7.88653539370682, 0.0, 0.0, 12.231967921339706, 11.590978876676914, 11.006943384037054, 14.934522052715216, 8.850360822751433, 20.567666325340316, 32.92795172575271, 20.229748646771235, 24.65283844990028, 21.6773235275343, 26.41329978064966, 16.969303486692624, 27.845380582503598, 21.47570497367842, 27.720020923192394, 16.729515665974198, 34.623476894873306, 21.212795681545238, 20.907107260850275, 16.48598374730345, 18.52437579830131, 14.255011207290288, 10.592452737703159, 12.673585429541573, 15.449281833466179, 12.053009279281632, 11.29365982565434, 9.91954693793523, 9.932163817699916, 14.423140354251142, 17.57389608487392, 26.93175173662816, 24.73173049613697, 22.408088530457746, 27.703471140938834, 17.88850128279352, 29.39272035651677, 29.95581822600392, 36.531920938796006, 14.24782223773807, 40.19873446580964, 18.18881107813314, 23.156741697246343, 26.127437637019035, 12.24090219221253, 13.365004417697374, 29.616031303853955, 10.722159732253427, 29.131719801250625, 12.129853284816647, 7.034002599127715, 7.29924446070895, 0.0, 17.30002208319835, 9.087504432542117, 9.366905543369818, 0.0, 0.0, 0.0, 12.15355499736465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.780901603596861, 0.0, 0.0, 0.0, 0.0, 13.730470562657263, 25.366767494521937, 11.672293497772843, 11.109814296151635, 5.223891820678528, 4.769305397409283, 25.32711682951114, 35.03320061612837, 20.549882363367914, 12.48215895651656, 19.9190546189108, 20.093867762145134, 35.83539971573089, 33.69502152358236, 38.1824226605999, 29.504929330223014, 28.015974143740703, 27.378430630065097, 27.544877762700285, 16.784214518478624, 21.62851438511937, 20.223870897839358, 14.217969957561118, 13.676820027322186, 16.339994427195375, 11.351463051694184, 16.042933355514876, 17.696275782110696, 16.48064039212042, 16.69105644236642, 11.1563708042358, 13.611148101687728, 18.24491307987067, 31.47764210777403, 40.64008167019766, 32.65035194385344, 20.022873463431743, 29.72509875742904, 21.81251532413119, 29.02287235895215, 30.166545561673964, 38.98451832793384, 31.122305855056098, 24.051927979540093, 11.534740809869602, 13.101729800821175, 14.0853641698803, 20.421428284139356, 16.649418266531754, 12.083279189310026, 6.561385984022725, 6.700445819517458, 14.85562153546676, 15.930057070988521, 0.0, 27.559135256736585, 9.55371284967571, 20.83001690341152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.53763508999899, 11.28655048043214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.550588286883507, 10.29712213132466, 19.25529715752782, 26.20231732063011, 20.00874340356974, 14.732459727068047, 39.132970172018204, 23.827412228810765, 29.443963377006884, 30.89187173829533, 20.99809171454389, 37.239216140519495, 25.29192894532905, 19.109227809545285, 18.12366925155998, 25.913402414631754, 26.2827217892999, 15.147628952738144, 16.56477877521323, 19.957591994907922, 18.806142535098513, 17.692180835946928, 22.154293547757227, 17.73843206338555, 11.626595084800286, 19.039215255420366, 20.036919602861555, 23.64526429687833, 20.920038313181927, 23.55810517930833, 15.19726163985119, 33.55794652970399, 29.065620255255208, 26.07343400305946, 37.62213602349414, 25.482595514855035, 27.917296559888197, 16.20337603240285, 26.29731395499547, 29.40171302505625, 32.660255563916664, 12.002794283778975, 8.971453598745445, 0.0, 20.24233052978384, 16.759377807475005, 18.467701068907733, 12.819811571798, 6.872881929323616, 7.3424265793415096, 8.348253782712504, 0.0, 9.453860792897753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.382796713412938, 0.0, 0.0, 0.0, 8.820748599872216, 8.163207936042962, 7.48801681069324, 7.305887554615, 13.831449731298317, 24.643670875282314, 5.57197968397419, 26.65036834578649, 9.706289154205779, 31.522677332891575, 28.699070114314527, 14.89405382635749, 17.40293063790135, 21.488973340969753, 34.10106276846127, 10.223490654618416, 25.252998578097277, 20.81665657567128, 27.266146931451217, 34.28168537105896, 38.16680603411008, 31.7540969964087, 26.358195555038954, 25.190948227250843, 22.374948015967725, 22.539664071685493, 19.469362162173173, 16.4112989226799, 19.64173801756526, 18.629357198168464, 23.04856172615214, 24.229826536451554, 22.630323834969417, 29.683245518965506, 22.414025242374056, 17.204810686321906, 19.43899845228422, 40.102043433245264, 28.886025377825298, 38.28597087801775, 26.22019295116018, 24.9148005643358, 27.967322464016917, 27.850454681155004, 21.72344694403003, 37.81510150297426, 11.577766911302641, 37.48794663386318, 22.562743585892246, 5.053438140805714, 16.255455959074087, 11.918369662919185, 0.0, 13.198633337545953, 0.0, 14.976304536555169, 24.62812597514977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.201824260196629, 23.590356906051706, 0.0, 6.880223784329489, 12.669456031412142, 12.053808653090844, 11.414774551696283, 15.4820905327026, 23.480848270764746, 17.476385008366996, 12.098303472579857, 18.233171795207905, 49.42077124496205, 30.270553801149717, 24.070443535498033, 31.42568395450727, 31.786081757913717, 29.952038442438134, 38.09205130892771, 27.68252233052423, 30.913397709633365, 17.120600465991597, 30.474959985364286, 38.97758003232178, 23.083856504225974, 16.339186087232196, 25.872368091486717, 20.969777096561927, 31.927582729804122, 23.885815822744707, 33.864476699034, 30.25213953066553, 29.065174006505863, 23.98976064132909, 26.3777391850271, 30.320305885155154, 19.083358631589054, 21.25334262204314, 41.16420280159801, 26.5663656875276, 39.036401630030504, 32.75934695585864, 14.911472505760761, 35.41181196754873, 21.68584837066905, 19.63402530025771, 17.16749369901125, 18.63639519069642, 15.380936270217346, 5.342553920961569, 11.992086290966071, 6.563093367852716, 0.0, 0.0, 7.936540114189235, 8.766190184626867, 0.0, 9.485408693936478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.304798203050833, 0.0, 9.723525922778023, 18.659197037997956, 0.0, 8.170182282575077, 15.273034426130149, 0.0, 0.0, 0.0, 23.31380764774745, 10.597225653854832, 9.790614606015748, 9.159781631536406, 16.449974400080592, 30.31742821138548, 35.135179193137056, 28.63043315900901, 14.575621360810505, 39.39017908202693, 35.74108250950654, 33.34646886685934, 38.159703940793776, 18.317272670061268, 16.789072752862953, 40.01544291471445, 37.80537474952754, 30.126310435802733, 27.87372471221549, 26.745047639235633, 18.11020787580801, 19.526217661985225, 19.629687459704368, 22.757307494226303, 18.806938557001608, 21.96951624352896, 18.1604579426351, 15.467250044652296, 18.290245695248572, 20.125552078223787, 34.94233384792959, 33.7911941051226, 24.49543865759108, 38.66542883802393, 18.903944594682844, 17.56249143527034, 29.00564929033998, 28.165408870865722, 19.028252749825683, 24.53191332164668, 40.427535343854835, 9.930923453885477, 0.0, 5.72279050040548, 6.264336197658339, 6.427897162612919, 0.0, 0.0, 8.382618518897534, 0.0, 0.0, 9.65953973321728, 10.152285790398693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.113975871056077, 0.0, 27.134082640378715, 8.142738677424685, 7.8805375328944285, 14.528225863996946, 13.713077983132026, 0.0, 47.75607854224146, 27.236311987935554, 20.382334280679174, 14.43304649368271, 12.971101158377945, 15.964419539903016, 14.95613115780397, 27.29533001448095, 16.055186082258206, 23.61401568037425, 37.62195367799231, 26.677922930493374, 31.06699506066213, 42.66426290950601, 26.691434343970492, 38.57555575317747, 33.86924228836612, 22.88152202391662, 12.918648073977725, 32.32791679215794, 35.18819484162065, 35.211846351561455, 28.92983921008836, 28.224109367637027, 22.07947130426659, 24.694836726770127, 24.693226152708185, 39.28323963548675, 22.69905087205667, 20.318848019641674, 20.44488362251159, 31.51596285277252, 26.449846246808637, 30.955758693801513, 23.242986265896835, 28.503799801080792, 30.944142286412358, 18.18661315257046, 24.15471072358973, 30.701611326530653, 28.22956990564699, 25.583884443787596, 16.063990047056812, 11.852653744001087, 0.0, 0.0, 0.0, 7.752608824446363, 17.05265760945564, 8.631773127103624, 0.0, 0.0, 0.0, 0.0, 12.09823892973773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.917173230005833, 0.0, 0.0, 0.0, 19.822535442930217, 18.397488398136243, 0.0, 10.565327544168115, 30.460442601539505, 13.837014574166469, 21.675804903108922, 27.91503732600368, 25.524533410270074, 29.98657592371766, 21.938497147929887, 34.90081087373445, 37.264616728675314, 30.12201158261036, 29.474403380713827, 31.810954664469893, 21.979835256890446, 42.80394674740159, 32.14810392190277, 35.557867346761725, 22.94959918662679, 25.128773704602555, 25.151685322899215, 24.90275592610006, 28.764090142705605, 26.055914710855127, 23.812931361532087, 21.545341978311864, 35.49714537917413, 36.447386037629684, 29.68620532954052, 39.10036332267141, 26.68003445663147, 29.437168808221873, 14.751214789650488, 19.023703854587406, 16.835271580244033, 10.759584681604514, 31.964536911503, 16.82916650148408, 13.898745619089283, 14.786744121481759, 5.450936366028633, 23.335860900474714, 18.59358307580824, 6.792076017677246, 13.975730308408458, 7.716387015913243, 7.886911936082252, 17.108503687717544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.973067711895899, 0.0, 0.0, 0.0, 0.0, 0.0, 9.652769635817563, 0.0, 9.070367645250471, 8.063167042043869, 8.04425469822254, 0.0, 6.800590037405176, 6.551334001453588, 23.82701728606959, 33.39753649802911, 5.435416578303198, 14.554062862850296, 27.31156822449772, 20.836692662223804, 38.95670157315083, 43.80978537645765, 30.365454431152575, 12.498085988481481, 17.30215830364218, 35.869900939026664, 25.28931697180892, 20.894603674999814, 24.845629742185565, 30.59687226493743, 25.994669505261445, 27.250578290082657, 39.69193302300567, 16.707363755648093, 32.56392672466718, 24.811171888259995, 40.5559815763933, 28.153720248356784, 36.68524344880984, 42.483452977060644, 21.572163322257015, 35.90759561528603, 40.37101986276435, 35.34406410963815, 30.37905332907918, 40.95326400277211, 31.954222401082898, 23.5854617800875, 29.024849837598556, 20.08555634469009, 21.08840747174422, 18.438792226879187, 14.833182202742499, 20.848948017538085, 5.573285588432011, 0.0, 0.0, 6.707626999515195, 0.0, 0.0, 8.460983047165694, 8.909085934256334, 9.331420263312442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.00055703205669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.874362702970704, 8.828651579962271, 16.042239678675973, 7.4710075409713905, 0.0, 19.904721606242767, 12.667465300631937, 0.0, 22.231094959726114, 15.590910632348796, 9.619076834945615, 13.311952409421549, 12.21023828256803, 27.55980978980121, 28.691933503109233, 38.00271756949226, 25.54451397287676, 21.063303448850608, 42.77768825291667, 47.369291484846926, 28.123267073780085, 24.035995224041834, 34.279326410072635, 35.83999764077679, 29.963540327299157, 33.726920154383194, 29.847866396774787, 33.950925720249074, 36.42959045834825, 27.54373811525784, 31.10778180576534, 18.023323620097237, 36.31806466658632, 17.53237456730791, 27.033138643535906, 31.09879036758993, 23.882650136801875, 22.26064691706533, 13.474082610834028, 17.972636054186957, 19.40954184084364, 8.460572875895359, 36.176001226343956, 4.825699607727081, 26.220574788700524, 0.0, 6.093293436624366, 19.293656863728046, 0.0, 0.0, 0.0, 0.0, 0.0, 17.90348522288516, 18.944950470670996, 0.0, 0.0, 0.0, 0.0, 0.0, 13.370441389138545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.182969012172173, 0.0, 0.0, 0.0, 9.07454834328353, 0.0, 15.799214935869887, 14.91971773089602, 14.039033244434838, 6.653694976070189, 12.685158884452722, 5.830511932476556, 21.929503527976323, 15.062334831069117, 19.428756733242253, 18.465882126220077, 41.93686598750816, 34.95361380989073, 22.05701407050235, 17.649484044629897, 23.19651230156447, 18.30129821654128, 23.403882274277212, 16.555809958092148, 26.986013369728482, 26.18338510214134, 32.78085414648565, 17.315137107659375, 17.191856464116874, 47.918227599142234, 23.508952555222447, 29.64490227722537, 19.432909533465004, 27.722202455650777, 47.43226254201416, 8.257322744942861, 25.750242355082232, 18.000622844083914, 28.809291677461648, 39.55806489390858, 21.037014958740766, 22.43966833550317, 39.65886247809114, 12.6788697942231, 9.079012576798599, 5.004829925381696, 10.336397753755396, 38.18920884554815, 6.024144743275409, 6.159561605292792, 13.253917374095472, 14.557872176795925, 0.0, 15.609123277483809, 0.0, 8.67014788841758, 0.0, 19.938785767597494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.204951492543493, 0.0, 0.0, 0.0, 0.0, 36.961178348253114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.604813054830053, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.216741885998402, 7.664278167684865, 14.906226306337789, 0.0, 13.057329428702454, 18.460972550845657, 23.10666661971928, 22.339847699615028, 15.102923509853278, 28.853849636631463, 35.51045848448257, 12.59211660938489, 28.180382464152366, 3.8714260166233525, 29.08436182634553, 27.341313631103734, 26.082996783347934, 25.470493480504977, 21.045947571017333, 17.74738937015989, 22.92960680552427, 33.270030464833475, 35.62236118525044, 16.417389311205504, 5.2447943912641986, 30.11228244691712, 36.013999160553794, 8.331367575904713, 17.576219168716555, 29.874663209004336, 28.095218241378607, 16.590541603319217, 34.55617484960017, 18.499464139732, 19.180973612609925, 8.237656353367633, 30.06859123129381, 13.674935662118513, 33.07608417997457, 20.513482682212604, 16.477238892381983, 23.623743366492988, 12.409052659172506, 12.670429630119521, 13.875360712132505, 14.554310072011031, 7.815371130054453, 0.0, 0.0, 0.0, 9.526749511932213, 10.237283531278342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.098468400828825, 7.633978475503065, 0.0, 0.0, 26.155188140786034, 0.0, 17.19842144512884, 10.905588675778572, 46.69035866643151, 48.466996207417836, 18.573852723693836, 21.734136949200305, 20.547718422621156, 27.691650272964075, 11.088833784903159, 33.10559443749139, 14.14155805858119, 20.35209752207108, 26.551891114719602, 15.700656034383194, 40.21459176767403, 30.44441136196486, 30.093314234975892, 34.28697490610085, 31.349768701668708, 28.349501878934984, 25.643021009512836, 19.844397383263072, 26.504422416446708, 21.065548254905597, 18.36950480121878, 3.66151595759632, 16.174597842350483, 20.787976297689347, 17.63757666358275, 14.040014259711347, 44.307219075779585, 10.364452713971342, 16.24743241374981, 11.213540560079492, 24.422369170204227, 6.4895109305187875, 0.0, 7.2087383581544, 0.0, 8.368979522067718, 8.578631922164366, 0.0, 0.0, 0.0, 0.0, 11.370851291072565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.153701186243993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.922828877167632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.943796349059471, 0.0, 0.0, 13.563668531312928, 6.751931385457393, 18.53642846491303, 0.0, 16.686586148554916, 10.64416040012491, 19.67988618126337, 14.538985658254685, 27.331151527945977, 30.69447990161096, 16.553922070479302, 11.993067442729533, 23.369659710344877, 18.6604568522378, 17.973799592821425, 14.605110327545475, 20.25833908144049, 23.70940501235754, 44.17740282460485, 31.560516465923783, 41.08521662333338, 31.182573066936815, 21.37273888814693, 40.24547632469189, 22.176538888364128, 34.400401845374425, 39.638659830106214, 16.403075454273964, 30.30974352212354, 17.90551851391208, 28.143797122431007, 5.219274313801391, 15.7107597562353, 16.49242962476253, 11.245979307445637, 12.017139404173106, 12.605688011576826, 20.27417772330785, 7.275085653791378, 0.0, 0.0, 0.0, 17.53556072925668, 0.0, 9.691518345952336, 0.0, 0.0, 0.0, 0.0, 13.061513040084797, 13.415684682105526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.31730401374782, 0.0, 10.16812422337293, 0.0, 0.0, 8.950195239705353, 16.776147281018922, 0.0, 0.0, 14.285285264890778, 0.0, 6.2236521158528415, 12.425312738704639, 5.87888425302374, 33.8218532127089, 5.1754369491267385, 15.050159361108266, 19.59046067006394, 9.531408391789196, 13.702327254160135, 17.39546923016982, 8.507999312712514, 24.41863908801964, 8.016685593140735, 22.98148493053175, 11.73617902439732, 11.386905531548937, 15.540296650078671, 11.180606246091077, 23.258107838249657, 18.9606595208978, 19.67547521309259, 23.648860267380968, 8.363276632984434, 16.73932242691169, 47.869028380852015, 8.882491707573216, 18.98740800570456, 14.957155542561262, 20.62532802032315, 16.03059727820615, 16.68167755764802, 41.78136143745098, 12.357421142777795, 12.939124625497081, 34.065339803284516, 14.368076262876357, 7.716972071616857, 0.0, 0.0, 0.0, 18.1528819101079, 0.0, 0.0, 0.0, 10.946420365069196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.884666515993654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.016132750978425, 8.611624787596435, 8.584960303425742, 0.0, 0.0, 7.338876243955879, 7.0603106245763065, 0.0, 12.92579253684484, 17.40399003961933, 0.0, 16.97871041930009, 20.841149365570732, 24.884951147534206, 9.725347467859208, 0.0, 18.381441984393682, 31.252828273283626, 22.02534798196855, 8.798239301617404, 12.812884286293706, 16.684212851390342, 21.332295841091828, 8.333085204186904, 8.518301868570196, 13.153239884330157, 34.16335072308928, 31.532433759060858, 27.41835073332246, 18.36310152172738, 4.701557405802436, 14.867105105703942, 25.152131183815193, 25.901652036912374, 16.3297259390123, 23.239281533504027, 5.807614599016011, 6.232637367940528, 6.585149204675442, 6.712582088191993, 0.0, 7.549511705513671, 16.030901415322443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.6190329945876, 0.0, 0.0, 0.0, 7.375896096910728, 34.86739088201665, 20.363623796653847, 6.21234932401362, 12.109095976190234, 23.387375442715204, 11.580075906021676, 16.738157297330442, 21.74891593763582, 5.0715285009789834, 20.180078367687813, 9.860534348885924, 9.729083204723942, 33.37991434684933, 28.742967089614005, 23.111632900949306, 18.841257201417584, 18.431282539083583, 32.4349481537933, 23.45924086684627, 23.474669070036846, 38.476587156925426, 9.779986098072538, 20.152547441694914, 46.23819831846233, 5.521028378065055, 11.136722636893593, 11.641231686207533, 12.038842548373013, 18.481795779913725, 6.413181842597294, 13.545947848768476, 14.516621519439775, 0.0, 0.0, 0.0, 0.0, 8.82253295074404, 0.0, 0.0, 0.0, 0.0, 11.092559064959724, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.777293946219937, 0.0, 0.0, 13.653556670404457, 19.66874053678471, 12.741435813288296, 18.667501840669168, 0.0, 11.67318123266151, 22.52423719992859, 10.974066950986579, 20.926224187860477, 15.9379402423314, 0.0, 15.545113609416678, 25.23671457960668, 10.505446316360317, 10.103726146320845, 10.074692980395913, 15.826386913468571, 31.065987623244016, 37.072758226410095, 26.09189489833289, 16.205619891890652, 16.583355194807346, 17.49792353708918, 6.048636421290284, 6.156287950905061, 6.175407639447297, 6.3173342706911315, 20.643537144639488, 6.815757646632268, 14.469014687287904, 0.0, 0.0, 0.0, 0.0, 18.471244149155538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.912221318277657, 0.0, 7.764203766423518, 7.150389637616244, 0.0, 0.0, 13.212267146309244, 12.922637340015065, 12.450305356011725, 24.600658326506192, 6.142214010951489, 29.54958292647288, 11.455185455288298, 5.853306950068442, 5.519401987705458, 28.071594417487464, 10.72640678314325, 10.916476362338834, 16.233611104837255, 16.770297062236903, 17.008907220006606, 16.94207029437508, 5.785733857581856, 0.0, 6.069357416535497, 0.0, 32.277449054499534, 0.0, 13.862137311801007, 13.844574568577128, 0.0, 7.506499582876904, 7.775465902516887, 8.425215619362277, 0.0, 18.250712233771047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.65389182431191, 0.0, 17.92480492355255, 0.0, 0.0, 16.012821796674988, 7.491785453116725, 0.0, 0.0, 0.0, 6.829374941124702, 6.3002889096295664, 0.0, 12.652493472047052, 12.469894645545697, 17.923664648307692, 18.356061220617896, 5.903006910226098, 0.0, 5.908464617093419, 6.118521784320542, 6.115785986460844, 24.627062023821118, 12.351062148955279, 37.42058659724951, 6.33700302812381, 6.6089442609368305, 6.7096980724954935, 27.49024813235417, 0.0, 14.921140336737666, 15.477671231029085, 7.9125081143061395, 0.0, 0.0, 8.627657468744586, 8.989495879776799, 0.0, 0.0, 0.0, 20.92370088831934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.291603246326341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.68108248870819, 15.686897627254535, 7.350304626405629, 0.0, 21.650270508559153, 7.126456133895736, 6.910530355349563, 0.0, 6.753485914510238, 6.759622084437648, 0.0, 32.493050398808656, 13.296161551539663, 0.0, 0.0, 6.633577201243432, 6.393344597248583, 6.634379016697302, 7.018859987089681, 0.0, 7.14796839505729, 0.0, 0.0, 7.559113697076574, 7.651218520366829, 0.0, 8.339611805117881, 0.0, 17.597512110557638, 9.014967040563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.906572517465221, 0.0, 0.0, 0.0, 0.0, 8.22238010248945, 7.85723111801123, 15.995848458793596, 14.982860315657067, 22.580808362797526, 14.872644932137607, 14.363698396429324, 0.0, 14.353672862980854, 7.275090455550375, 7.091436673599727, 21.033787775530453, 20.55602336496904, 27.96777629931556, 0.0, 7.352058748724547, 0.0, 0.0, 0.0, 14.830047259122678, 15.776864336307016, 0.0, 7.869872248435308, 0.0, 17.22827108354261, 0.0, 18.315202823746414, 9.604325998626589, 0.0, 0.0, 0.0, 10.993745992964943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.92807304746396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.381181265371655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.662002519043632, 0.0, 9.105048084122457, 9.018784418965616, 0.0, 8.33298252229289, 0.0, 16.08230814826978, 8.046806267914267, 15.899313749124385, 0.0, 0.0, 30.589545659383873, 0.0, 0.0, 0.0, 0.0, 0.0, 7.735832486233113, 7.735674399306397, 15.815957320660463, 0.0, 24.218119714955364, 8.434178164112893, 0.0, 0.0, 0.0, 0.0, 9.193254885594076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.73449465453832, 0.0, 9.094613182107537, 9.058803426825198, 9.033738356142603, 0.0, 16.755988499323326, 0.0, 8.245196614386282, 8.2661841890983, 0.0, 8.379020858862674, 7.874864056993534, 7.889519968900125, 0.0, 0.0, 8.289114649282661, 0.0, 0.0, 8.424774685028238, 0.0, 0.0, 9.00598923655463, 27.229989775686555, 9.333877715340126, 9.769746227850726, 9.815931988261964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.903622957623718, 0.0, 12.162853554596461, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.136540364761672, 9.739159307671162, 0.0, 9.16558719675554, 0.0, 9.042336879689149, 0.0, 0.0, 0.0, 0.0, 0.0, 17.61514390017978, 8.962805074528656, 26.052087037923116, 0.0, 0.0, 0.0, 0.0, 0.0, 9.493683808104919, 18.794685851247962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.232563151656421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.826693545523854, 9.272181244075263, 9.842827223227264, 0.0, 9.465277811444823, 0.0, 0.0, 9.03249282910562, 9.101796112908648, 9.630175004130585, 9.136883091396967, 0.0, 9.801472631221575, 0.0, 0.0, 0.0, 0.0, 10.476399848920838, 10.417357780887372, 0.0, 0.0, 0.0, 0.0, 11.842600377857895, 12.178803243413851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.685149965633542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.27593460814017, 0.0, 10.305522853278816, 9.868584176777437, 0.0, 0.0, 9.954438415787324, 0.0, 10.038819418009378, 10.263251551046316, 0.0, 20.82260248709028, 0.0, 0.0, 0.0, 11.048433827625725, 11.035152859997524, 0.0, 11.641930101318355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.31304407818492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.911378482086997, 10.86616351093534, 0.0, 0.0, 0.0, 10.410151975274966, 0.0, 0.0, 0.0, 0.0, 0.0, 10.475715194087671, 0.0, 0.0, 0.0, 0.0, 11.598566580038153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.380989223585749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.163747997370713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.537199341479218, 23.116620080230803, 0.0, 0.0, 11.752979201042328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.892845328509521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.761494885645789, 0.0, 0.0, 0.0, 0.0, 0.0, 12.206095548132478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.411259330225793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.972374201703156, 0.0, 0.0, 12.457082780726786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.323950871672922, 0.0, 0.0, 0.0, 13.216089833251765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.014555684881804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.78582694813311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.197356326751034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg8[] elements >= 0.0
arg9[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg9[] elements >= 0.0
arg10[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg10[] elements >= 0.0
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.setfTsumwz(double):::ENTER
this.fTsumwz == 0.0
this.fTsumwz2 == 0.0
this.fTsumwy == 281.0846390360272
this.fTsumwy2 == 25124.041480849166
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 31.88254774666985
this.fTsumwx2 == 25440.254425694213
this.title has only one value
this.title.toString == "Profile created from Java"
arg0 == 50564.295906543724
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.setfTsumwz(double):::EXIT
this.fBinEntries == orig(this.fBinEntries)
this.fBinEntries.fArray == orig(this.fBinEntries.fArray)
this.fBinEntries.fArray[] == orig(this.fBinEntries.fArray[])
this.fErrorMode == orig(this.fErrorMode)
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN == orig(hep.io.root.output.classes.hist.EErrorType.kERRORMEAN)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG)
hep.io.root.output.classes.hist.EErrorType.$VALUES == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES)
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.EErrorType.$VALUES[] == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES[])
this.fZmin == orig(this.fZmin)
this.fZmax == orig(this.fZmax)
this.fTsumwz2 == orig(this.fTsumwz2)
this.fBinSumw2 == orig(this.fBinSumw2)
this.fBinSumw2.fArray == orig(this.fBinSumw2.fArray)
this.fBinSumw2.fArray[] == orig(this.fBinSumw2.fArray[])
this.array == orig(this.array)
this.array.fArray == orig(this.array.fArray)
this.array.fArray[] == orig(this.array.fArray[])
this.fScalefactor == orig(this.fScalefactor)
this.fTsumwy == orig(this.fTsumwy)
this.fTsumwy2 == orig(this.fTsumwy2)
this.fTsumwxy == orig(this.fTsumwxy)
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwz == 50564.295906543724
this.fTsumwz2 == 0.0
this.fTsumwy == 281.0846390360272
this.fTsumwy2 == 25124.041480849166
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 31.88254774666985
this.fTsumwx2 == 25440.254425694213
this.title has only one value
this.title.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.setfTsumwz2(double):::ENTER
this.fTsumwz == 50564.295906543724
this.fTsumwz2 == 0.0
this.fTsumwy == 281.0846390360272
this.fTsumwy2 == 25124.041480849166
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 31.88254774666985
this.fTsumwx2 == 25440.254425694213
this.title has only one value
this.title.toString == "Profile created from Java"
arg0 == 205814.97216125613
===========================================================================
hep.io.root.output.classes.hist.TProfile2D.setfTsumwz2(double):::EXIT
this.fBinEntries == orig(this.fBinEntries)
this.fBinEntries.fArray == orig(this.fBinEntries.fArray)
this.fBinEntries.fArray[] == orig(this.fBinEntries.fArray[])
this.fErrorMode == orig(this.fErrorMode)
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN == orig(hep.io.root.output.classes.hist.EErrorType.kERRORMEAN)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG)
hep.io.root.output.classes.hist.EErrorType.$VALUES == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES)
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.EErrorType.$VALUES[] == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES[])
this.fZmin == orig(this.fZmin)
this.fZmax == orig(this.fZmax)
this.fTsumwz == orig(this.fTsumwz)
this.fBinSumw2 == orig(this.fBinSumw2)
this.fBinSumw2.fArray == orig(this.fBinSumw2.fArray)
this.fBinSumw2.fArray[] == orig(this.fBinSumw2.fArray[])
this.array == orig(this.array)
this.array.fArray == orig(this.array.fArray)
this.array.fArray[] == orig(this.array.fArray[])
this.fScalefactor == orig(this.fScalefactor)
this.fTsumwy == orig(this.fTsumwy)
this.fTsumwy2 == orig(this.fTsumwy2)
this.fTsumwxy == orig(this.fTsumwxy)
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwz == 50564.295906543724
this.fTsumwz2 == 205814.97216125613
this.fTsumwy == 281.0846390360272
this.fTsumwy2 == 25124.041480849166
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 31.88254774666985
this.fTsumwx2 == 25440.254425694213
this.title has only one value
this.title.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.classes.hist.TProfile.TProfile(java.lang.String, int, double, double, double[], double[], double[], double[]):::ENTER
arg0 has only one value
arg0.toString == "test4"
arg1 == 100
arg2 == -5.0
arg3 == 5.0
arg4 has only one value
arg4[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 359.8698404092188, 0.0, 0.0, 0.0, 0.0, 216.70495401515893, 0.0, 169.0725363427862, 366.82517841876427, 782.9574590874524, 882.296415971126, 534.8169924333753, 659.2658367170086, 891.6456449832834, 958.4573665993378, 1069.1918092876158, 1948.0731751553867, 2220.116683123788, 1860.9079986328843, 3093.781237904801, 2286.7852109104756, 3823.885925912681, 3078.982969081898, 4581.8109415910085, 3719.9585532301708, 3894.313476273699, 3803.395743731895, 4072.5234166769924, 4602.588098047616, 3977.282315736033, 3985.632818724484, 3872.3505548248086, 3709.129794279721, 3422.6090296005377, 4088.2601821954486, 3507.8789990294185, 3169.1867574774074, 3486.130629057977, 3252.9491735606657, 3165.2589450270507, 2539.0266705547815, 3163.1591869538147, 3097.510970179204, 3032.900319985419, 2682.4587635107678, 2597.906426119974, 3855.203274994983, 3513.0835997821678, 2549.0183957788563, 3123.2760098585286, 3601.408897084873, 3637.062061397905, 3793.8087989781116, 3668.7870871299456, 3786.139009753603, 4071.4072754579242, 3850.1982566261922, 3855.140042409932, 3617.4630616619042, 3908.070730939738, 3707.405603030554, 4082.0548689318994, 4375.19900698208, 3820.815963359348, 3588.1894429277263, 3546.4448256218366, 2996.348015617748, 3426.9780452261257, 2883.5014655038012, 2078.075149971109, 2176.4007096583805, 1425.8992725613286, 2287.179479539038, 1218.5833758203992, 1171.4151291377664, 1278.4480467600235, 1080.9576273132504, 121.87950389345428, 600.7018688150821, 367.11225603534876, 0.0, 537.7646089243046, 225.66984828671315, 0.0, 0.0, 0.0, 344.62258088578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4[] elements >= 0.0
arg5 has only one value
arg5[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg5[] elements >= 0.0
arg6 has only one value
arg6[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg6[] elements >= 0.0
arg7 has only one value
arg7[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg7[] elements >= 0.0
size(arg4[]) == 102
size(arg5[]) == 102
size(arg6[]) == 102
size(arg7[]) == 102
===========================================================================
hep.io.root.output.classes.hist.TProfile.TProfile(java.lang.String, int, double, double, double[], double[], double[], double[]):::EXIT
arg0.toString == orig(arg0.toString)
arg4[] == orig(arg4[])
arg5[] == orig(arg5[])
arg6[] == orig(arg6[])
arg7[] == orig(arg7[])
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fEntries == 0.0
this.fTsumw == 0.0
this.fTsumw2 == 0.0
this.fTsumwx == 0.0
this.fTsumwx2 == 0.0
this.title has only one value
this.title.toString == ""
arg0.toString == "test4"
arg4[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 359.8698404092188, 0.0, 0.0, 0.0, 0.0, 216.70495401515893, 0.0, 169.0725363427862, 366.82517841876427, 782.9574590874524, 882.296415971126, 534.8169924333753, 659.2658367170086, 891.6456449832834, 958.4573665993378, 1069.1918092876158, 1948.0731751553867, 2220.116683123788, 1860.9079986328843, 3093.781237904801, 2286.7852109104756, 3823.885925912681, 3078.982969081898, 4581.8109415910085, 3719.9585532301708, 3894.313476273699, 3803.395743731895, 4072.5234166769924, 4602.588098047616, 3977.282315736033, 3985.632818724484, 3872.3505548248086, 3709.129794279721, 3422.6090296005377, 4088.2601821954486, 3507.8789990294185, 3169.1867574774074, 3486.130629057977, 3252.9491735606657, 3165.2589450270507, 2539.0266705547815, 3163.1591869538147, 3097.510970179204, 3032.900319985419, 2682.4587635107678, 2597.906426119974, 3855.203274994983, 3513.0835997821678, 2549.0183957788563, 3123.2760098585286, 3601.408897084873, 3637.062061397905, 3793.8087989781116, 3668.7870871299456, 3786.139009753603, 4071.4072754579242, 3850.1982566261922, 3855.140042409932, 3617.4630616619042, 3908.070730939738, 3707.405603030554, 4082.0548689318994, 4375.19900698208, 3820.815963359348, 3588.1894429277263, 3546.4448256218366, 2996.348015617748, 3426.9780452261257, 2883.5014655038012, 2078.075149971109, 2176.4007096583805, 1425.8992725613286, 2287.179479539038, 1218.5833758203992, 1171.4151291377664, 1278.4480467600235, 1080.9576273132504, 121.87950389345428, 600.7018688150821, 367.11225603534876, 0.0, 537.7646089243046, 225.66984828671315, 0.0, 0.0, 0.0, 344.62258088578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg4[] elements >= 0.0
arg5[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg5[] elements >= 0.0
arg6[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg6[] elements >= 0.0
arg7[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
arg7[] elements >= 0.0
===========================================================================
hep.io.root.output.classes.hist.TProfile.setfTsumwy(double):::ENTER
this.fTsumwy == 0.0
this.fTsumwy2 == 0.0
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 29.864086313789908
this.fTsumwx2 == 25347.729783886123
this.title has only one value
this.title.toString == "Profile created from Java"
arg0 == 50427.84456005312
===========================================================================
hep.io.root.output.classes.hist.TProfile.setfTsumwy(double):::EXIT
this.fBinEntries == orig(this.fBinEntries)
this.fBinEntries.fArray == orig(this.fBinEntries.fArray)
this.fBinEntries.fArray[] == orig(this.fBinEntries.fArray[])
this.fErrorMode == orig(this.fErrorMode)
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN == orig(hep.io.root.output.classes.hist.EErrorType.kERRORMEAN)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG)
hep.io.root.output.classes.hist.EErrorType.$VALUES == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES)
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.EErrorType.$VALUES[] == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES[])
this.fYmin == orig(this.fYmin)
this.fYmax == orig(this.fYmax)
this.fTsumwy2 == orig(this.fTsumwy2)
this.fBinSumw2 == orig(this.fBinSumw2)
this.fBinSumw2.fArray == orig(this.fBinSumw2.fArray)
this.fBinSumw2.fArray[] == orig(this.fBinSumw2.fArray[])
this.array == orig(this.array)
this.array.fArray == orig(this.array.fArray)
this.array.fArray[] == orig(this.array.fArray[])
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwy == 50427.84456005312
this.fTsumwy2 == 0.0
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 29.864086313789908
this.fTsumwx2 == 25347.729783886123
this.title has only one value
this.title.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.classes.hist.TProfile.setfTsumwy2(double):::ENTER
this.fTsumwy == 50427.84456005312
this.fTsumwy2 == 0.0
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 29.864086313789908
this.fTsumwx2 == 25347.729783886123
this.title has only one value
this.title.toString == "Profile created from Java"
arg0 == 204799.5721980136
===========================================================================
hep.io.root.output.classes.hist.TProfile.setfTsumwy2(double):::EXIT
this.fBinEntries == orig(this.fBinEntries)
this.fBinEntries.fArray == orig(this.fBinEntries.fArray)
this.fBinEntries.fArray[] == orig(this.fBinEntries.fArray[])
this.fErrorMode == orig(this.fErrorMode)
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN == orig(hep.io.root.output.classes.hist.EErrorType.kERRORMEAN)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI)
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG == orig(hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG)
hep.io.root.output.classes.hist.EErrorType.$VALUES == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES)
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.EErrorType.$VALUES[] == orig(hep.io.root.output.classes.hist.EErrorType.$VALUES[])
this.fYmin == orig(this.fYmin)
this.fYmax == orig(this.fYmax)
this.fTsumwy == orig(this.fTsumwy)
this.fBinSumw2 == orig(this.fBinSumw2)
this.fBinSumw2.fArray == orig(this.fBinSumw2.fArray)
this.fBinSumw2.fArray[] == orig(this.fBinSumw2.fArray[])
this.array == orig(this.array)
this.array.fArray == orig(this.array.fArray)
this.array.fArray[] == orig(this.array.fArray[])
this.tAttLine == orig(this.tAttLine)
this.tAttLine.fLineColor == orig(this.tAttLine.fLineColor)
this.tAttLine.fLineStyle == orig(this.tAttLine.fLineStyle)
this.tAttLine.fLineWidth == orig(this.tAttLine.fLineWidth)
this.tAttFill == orig(this.tAttFill)
this.tAttFill.fFillColor == orig(this.tAttFill.fFillColor)
this.tAttFill.fFillStyle == orig(this.tAttFill.fFillStyle)
this.tAttMarker == orig(this.tAttMarker)
this.tAttMarker.fMarkerColor == orig(this.tAttMarker.fMarkerColor)
this.tAttMarker.fMarkerStyle == orig(this.tAttMarker.fMarkerStyle)
this.tAttMarker.fMarkerSize == orig(this.tAttMarker.fMarkerSize)
this.fNcells == orig(this.fNcells)
this.fXaxis == orig(this.fXaxis)
this.fXaxis.tAttAxis == orig(this.fXaxis.tAttAxis)
this.fXaxis.tAttAxis.fNdivisions == orig(this.fXaxis.tAttAxis.fNdivisions)
this.fXaxis.tAttAxis.fAxisColor == orig(this.fXaxis.tAttAxis.fAxisColor)
this.fXaxis.tAttAxis.fLabelColor == orig(this.fXaxis.tAttAxis.fLabelColor)
this.fXaxis.tAttAxis.fLabelFont == orig(this.fXaxis.tAttAxis.fLabelFont)
this.fXaxis.tAttAxis.fLabelOffset == orig(this.fXaxis.tAttAxis.fLabelOffset)
this.fXaxis.tAttAxis.fLabelSize == orig(this.fXaxis.tAttAxis.fLabelSize)
this.fXaxis.tAttAxis.fTickLength == orig(this.fXaxis.tAttAxis.fTickLength)
this.fXaxis.tAttAxis.fTitleOffset == orig(this.fXaxis.tAttAxis.fTitleOffset)
this.fXaxis.tAttAxis.fTitleSize == orig(this.fXaxis.tAttAxis.fTitleSize)
this.fXaxis.tAttAxis.fTitleColor == orig(this.fXaxis.tAttAxis.fTitleColor)
this.fXaxis.tAttAxis.fTitleFont == orig(this.fXaxis.tAttAxis.fTitleFont)
this.fXaxis.fNbins == orig(this.fXaxis.fNbins)
this.fXaxis.fXmin == orig(this.fXaxis.fXmin)
this.fXaxis.fXmax == orig(this.fXaxis.fXmax)
this.fXaxis.fXbins == orig(this.fXaxis.fXbins)
this.fXaxis.fFirst == orig(this.fXaxis.fFirst)
this.fXaxis.fLast == orig(this.fXaxis.fLast)
this.fXaxis.fBits2 == orig(this.fXaxis.fBits2)
this.fXaxis.fTimeDisplay == orig(this.fXaxis.fTimeDisplay)
this.fXaxis.fTimeFormat == orig(this.fXaxis.fTimeFormat)
this.fXaxis.fLabels == orig(this.fXaxis.fLabels)
this.fXaxis.name == orig(this.fXaxis.name)
this.fXaxis.name.toString == orig(this.fXaxis.name.toString)
this.fXaxis.title == orig(this.fXaxis.title)
this.fXaxis.title.toString == orig(this.fXaxis.title.toString)
this.fXaxis.fUniqueID == orig(this.fXaxis.fUniqueID)
this.fXaxis.fBits == orig(this.fXaxis.fBits)
this.fYaxis == orig(this.fYaxis)
this.fYaxis.tAttAxis == orig(this.fYaxis.tAttAxis)
this.fYaxis.tAttAxis.fNdivisions == orig(this.fYaxis.tAttAxis.fNdivisions)
this.fYaxis.tAttAxis.fAxisColor == orig(this.fYaxis.tAttAxis.fAxisColor)
this.fYaxis.tAttAxis.fLabelColor == orig(this.fYaxis.tAttAxis.fLabelColor)
this.fYaxis.tAttAxis.fLabelFont == orig(this.fYaxis.tAttAxis.fLabelFont)
this.fYaxis.tAttAxis.fLabelOffset == orig(this.fYaxis.tAttAxis.fLabelOffset)
this.fYaxis.tAttAxis.fLabelSize == orig(this.fYaxis.tAttAxis.fLabelSize)
this.fYaxis.tAttAxis.fTickLength == orig(this.fYaxis.tAttAxis.fTickLength)
this.fYaxis.tAttAxis.fTitleOffset == orig(this.fYaxis.tAttAxis.fTitleOffset)
this.fYaxis.tAttAxis.fTitleSize == orig(this.fYaxis.tAttAxis.fTitleSize)
this.fYaxis.tAttAxis.fTitleColor == orig(this.fYaxis.tAttAxis.fTitleColor)
this.fYaxis.tAttAxis.fTitleFont == orig(this.fYaxis.tAttAxis.fTitleFont)
this.fYaxis.fNbins == orig(this.fYaxis.fNbins)
this.fYaxis.fXmin == orig(this.fYaxis.fXmin)
this.fYaxis.fXmax == orig(this.fYaxis.fXmax)
this.fYaxis.fXbins == orig(this.fYaxis.fXbins)
this.fYaxis.fFirst == orig(this.fYaxis.fFirst)
this.fYaxis.fLast == orig(this.fYaxis.fLast)
this.fYaxis.fBits2 == orig(this.fYaxis.fBits2)
this.fYaxis.fTimeDisplay == orig(this.fYaxis.fTimeDisplay)
this.fYaxis.fTimeFormat == orig(this.fYaxis.fTimeFormat)
this.fYaxis.fLabels == orig(this.fYaxis.fLabels)
this.fYaxis.name == orig(this.fYaxis.name)
this.fYaxis.name.toString == orig(this.fYaxis.name.toString)
this.fYaxis.title == orig(this.fYaxis.title)
this.fYaxis.title.toString == orig(this.fYaxis.title.toString)
this.fYaxis.fUniqueID == orig(this.fYaxis.fUniqueID)
this.fYaxis.fBits == orig(this.fYaxis.fBits)
this.fZaxis == orig(this.fZaxis)
this.fZaxis.tAttAxis == orig(this.fZaxis.tAttAxis)
this.fZaxis.tAttAxis.fNdivisions == orig(this.fZaxis.tAttAxis.fNdivisions)
this.fZaxis.tAttAxis.fAxisColor == orig(this.fZaxis.tAttAxis.fAxisColor)
this.fZaxis.tAttAxis.fLabelColor == orig(this.fZaxis.tAttAxis.fLabelColor)
this.fZaxis.tAttAxis.fLabelFont == orig(this.fZaxis.tAttAxis.fLabelFont)
this.fZaxis.tAttAxis.fLabelOffset == orig(this.fZaxis.tAttAxis.fLabelOffset)
this.fZaxis.tAttAxis.fLabelSize == orig(this.fZaxis.tAttAxis.fLabelSize)
this.fZaxis.tAttAxis.fTickLength == orig(this.fZaxis.tAttAxis.fTickLength)
this.fZaxis.tAttAxis.fTitleOffset == orig(this.fZaxis.tAttAxis.fTitleOffset)
this.fZaxis.tAttAxis.fTitleSize == orig(this.fZaxis.tAttAxis.fTitleSize)
this.fZaxis.tAttAxis.fTitleColor == orig(this.fZaxis.tAttAxis.fTitleColor)
this.fZaxis.tAttAxis.fTitleFont == orig(this.fZaxis.tAttAxis.fTitleFont)
this.fZaxis.fNbins == orig(this.fZaxis.fNbins)
this.fZaxis.fXmin == orig(this.fZaxis.fXmin)
this.fZaxis.fXmax == orig(this.fZaxis.fXmax)
this.fZaxis.fXbins == orig(this.fZaxis.fXbins)
this.fZaxis.fFirst == orig(this.fZaxis.fFirst)
this.fZaxis.fLast == orig(this.fZaxis.fLast)
this.fZaxis.fBits2 == orig(this.fZaxis.fBits2)
this.fZaxis.fTimeDisplay == orig(this.fZaxis.fTimeDisplay)
this.fZaxis.fTimeFormat == orig(this.fZaxis.fTimeFormat)
this.fZaxis.fLabels == orig(this.fZaxis.fLabels)
this.fZaxis.name == orig(this.fZaxis.name)
this.fZaxis.name.toString == orig(this.fZaxis.name.toString)
this.fZaxis.title == orig(this.fZaxis.title)
this.fZaxis.title.toString == orig(this.fZaxis.title.toString)
this.fZaxis.fUniqueID == orig(this.fZaxis.fUniqueID)
this.fZaxis.fBits == orig(this.fZaxis.fBits)
this.fBarOffset == orig(this.fBarOffset)
this.fBarWidth == orig(this.fBarWidth)
this.fEntries == orig(this.fEntries)
this.fTsumw == orig(this.fTsumw)
this.fTsumw2 == orig(this.fTsumw2)
this.fTsumwx == orig(this.fTsumwx)
this.fTsumwx2 == orig(this.fTsumwx2)
this.fMaximum == orig(this.fMaximum)
this.fMinimum == orig(this.fMinimum)
this.fNormFactor == orig(this.fNormFactor)
this.fContour == orig(this.fContour)
this.fSumw2 == orig(this.fSumw2)
this.fSumw2.fArray == orig(this.fSumw2.fArray)
this.fSumw2.fArray[] == orig(this.fSumw2.fArray[])
this.fOption == orig(this.fOption)
this.fOption.toString == orig(this.fOption.toString)
this.fFunctions == orig(this.fFunctions)
this.fFunctions.name == orig(this.fFunctions.name)
this.fFunctions.name.toString == orig(this.fFunctions.name.toString)
this.fFunctions.fSize == orig(this.fFunctions.fSize)
this.fFunctions.list == orig(this.fFunctions.list)
this.fFunctions.list.getClass().getName() == orig(this.fFunctions.list.getClass().getName())
this.fFunctions.fUniqueID == orig(this.fFunctions.fUniqueID)
this.fFunctions.fBits == orig(this.fFunctions.fBits)
this.fBufferSize == orig(this.fBufferSize)
this.fBuffer == orig(this.fBuffer)
this.fBinStatErrOpt == orig(this.fBinStatErrOpt)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES)
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName())
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] == orig(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[])
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.title == orig(this.title)
this.title.toString == orig(this.title.toString)
this.fUniqueID == orig(this.fUniqueID)
this.fBits == orig(this.fBits)
this.fTsumwy == 50427.84456005312
this.fTsumwy2 == 204799.5721980136
this.fEntries == 25000.0
this.fTsumw == 25000.0
this.fTsumw2 == 25000.0
this.fTsumwx == 29.864086313789908
this.fTsumwx2 == 25347.729783886123
this.title has only one value
this.title.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.demo.HistogramDemo.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
hep.io.root.output.demo.HistogramDemo.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller:::OBJECT
this has only one value
this.random has only one value
this.random != null
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.SimpleHistogramFiller():::EXIT
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.SimpleHistogramFiller(java.util.Random):::ENTER
arg0 has only one value
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.SimpleHistogramFiller(java.util.Random):::EXIT
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.create1DHistogram(java.lang.String, java.lang.String):::ENTER
arg0.toString one of { "test1", "test2" }
arg1 has only one value
arg1.toString == "Histogram created from Java"
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.create1DHistogram(java.lang.String, java.lang.String):::EXIT
this.random == orig(this.random)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString one of { "test1", "test2" }
arg1.toString == "Histogram created from Java"
return.array.fArray[] one of { [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 7.0, 7.0, 15.0, 16.0, 26.0, 30.0, 35.0, 46.0, 49.0, 79.0, 76.0, 90.0, 108.0, 114.0, 140.0, 136.0, 194.0, 181.0, 229.0, 282.0, 266.0, 325.0, 315.0, 321.0, 368.0, 369.0, 385.0, 373.0, 418.0, 360.0, 415.0, 390.0, 363.0, 365.0, 348.0, 338.0, 316.0, 301.0, 264.0, 229.0, 196.0, 172.0, 123.0, 127.0, 119.0, 110.0, 71.0, 74.0, 56.0, 44.0, 56.0, 32.0, 30.0, 18.0, 19.0, 13.0, 9.0, 11.0, 5.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 4.0, 3.0, 4.0, 4.0, 8.0, 10.0, 10.0, 16.0, 17.0, 23.0, 26.0, 41.0, 46.0, 67.0, 62.0, 74.0, 83.0, 135.0, 150.0, 163.0, 167.0, 198.0, 216.0, 262.0, 287.0, 284.0, 326.0, 361.0, 381.0, 355.0, 393.0, 372.0, 379.0, 402.0, 363.0, 417.0, 376.0, 366.0, 330.0, 346.0, 283.0, 254.0, 252.0, 267.0, 214.0, 212.0, 161.0, 140.0, 112.0, 116.0, 96.0, 76.0, 41.0, 50.0, 36.0, 38.0, 27.0, 23.0, 24.0, 12.0, 7.0, 11.0, 8.0, 5.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] }
return.array.fArray[] elements >= 0.0
return.tAttLine.fLineColor == 1
return.tAttLine.fLineStyle == 1
return.tAttLine.fLineWidth == 1
return.tAttFill.fFillColor == 0
return.tAttFill.fFillStyle == 1001
return.tAttMarker.fMarkerColor == 1
return.tAttMarker.fMarkerStyle == 1
return.tAttMarker.fMarkerSize == 1.0
return.fNcells == 102
return.fXaxis.fNbins == 100
return.fXaxis.fXmin == -5.0
return.fXaxis.fXmax == 5.0
return.fXaxis.fXbins == null
return.fXaxis.fFirst == 0
return.fXaxis.fLast == 0
return.fXaxis.fBits2 == 0
return.fXaxis.fTimeDisplay == false
return.fXaxis.fTimeFormat == null
return.fXaxis.fLabels == null
return.fXaxis.name has only one value
return.fXaxis.name.toString == "xaxis"
return.fXaxis.title has only one value
return.fXaxis.title.toString == ""
return.fXaxis.fUniqueID == 0
return.fXaxis.fBits == 50331648
return.fYaxis.fNbins == 1
return.fYaxis.fXmin == 0.0
return.fYaxis.fXmax == 1.0
return.fYaxis.fXbins == null
return.fYaxis.fFirst == 0
return.fYaxis.fLast == 0
return.fYaxis.fBits2 == 0
return.fYaxis.fTimeDisplay == false
return.fYaxis.fTimeFormat == null
return.fYaxis.fLabels == null
return.fYaxis.name has only one value
return.fYaxis.name.toString == "yaxis"
return.fYaxis.title has only one value
return.fYaxis.title.toString == ""
return.fYaxis.fUniqueID == 0
return.fYaxis.fBits == 50331648
return.fZaxis.fNbins == 1
return.fZaxis.fXmin == 0.0
return.fZaxis.fXmax == 1.0
return.fZaxis.fXbins == null
return.fZaxis.fFirst == 0
return.fZaxis.fLast == 0
return.fZaxis.fBits2 == 0
return.fZaxis.fTimeDisplay == false
return.fZaxis.fTimeFormat == null
return.fZaxis.fLabels == null
return.fZaxis.name has only one value
return.fZaxis.name.toString == "zAxis"
return.fZaxis.title has only one value
return.fZaxis.title.toString == ""
return.fZaxis.fUniqueID == 0
return.fZaxis.fBits == 50331648
return.fBarOffset == 0
return.fBarWidth == 1000
return.fEntries == 10000.0
return.fTsumw == 10000.0
return.fTsumw2 == 10000.0
return.fTsumwx one of { -65.5084732852265, 187.37569065417875 }
return.fTsumwx2 one of { 10043.472742828568, 10134.008512174374 }
return.fMaximum == -1111.0
return.fMinimum == -1111.0
return.fNormFactor == 0.0
return.fContour == null
return.fSumw2 == null
return.fOption has only one value
return.fOption.toString == ""
return.fFunctions.name has only one value
return.fFunctions.name.toString == ""
return.fFunctions.fSize == 0
return.fFunctions.list.getClass().getName() == java.util.ArrayList.class
return.fFunctions.fUniqueID == 0
return.fFunctions.fBits == 50331648
return.fBufferSize == 0
return.fBuffer == null
return.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
return.name.toString one of { "test1", "test2" }
return.title has only one value
return.title.toString == "Histogram created from Java"
return.fUniqueID == 0
return.fBits == 50331648
size(return.array.fArray[]) == 102
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.create2DHistogram(java.lang.String, java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "test3"
arg1 has only one value
arg1.toString == "Histogram created from Java"
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.create2DHistogram(java.lang.String, java.lang.String):::EXIT
this.random == orig(this.random)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString == "test3"
arg1.toString == "Histogram created from Java"
return has only one value
return.array has only one value
return.array.fArray has only one value
return.array.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 3.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 2.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 0.0, 3.0, 0.0, 2.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 3.0, 1.0, 6.0, 1.0, 0.0, 1.0, 2.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 4.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 4.0, 4.0, 2.0, 4.0, 6.0, 2.0, 4.0, 2.0, 1.0, 2.0, 2.0, 7.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 4.0, 2.0, 2.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 2.0, 1.0, 4.0, 3.0, 1.0, 1.0, 6.0, 3.0, 4.0, 2.0, 5.0, 3.0, 6.0, 5.0, 2.0, 1.0, 4.0, 6.0, 2.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 3.0, 6.0, 1.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 2.0, 4.0, 10.0, 7.0, 2.0, 2.0, 4.0, 5.0, 2.0, 4.0, 4.0, 2.0, 4.0, 4.0, 3.0, 5.0, 1.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 2.0, 4.0, 5.0, 5.0, 1.0, 5.0, 3.0, 7.0, 8.0, 4.0, 6.0, 5.0, 6.0, 8.0, 9.0, 1.0, 11.0, 2.0, 4.0, 7.0, 8.0, 8.0, 2.0, 2.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 3.0, 0.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 2.0, 5.0, 5.0, 3.0, 3.0, 3.0, 8.0, 7.0, 9.0, 7.0, 4.0, 9.0, 6.0, 7.0, 9.0, 14.0, 10.0, 4.0, 8.0, 7.0, 9.0, 4.0, 5.0, 6.0, 3.0, 5.0, 6.0, 2.0, 4.0, 1.0, 3.0, 0.0, 3.0, 2.0, 0.0, 2.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 0.0, 3.0, 3.0, 5.0, 5.0, 3.0, 11.0, 5.0, 3.0, 14.0, 9.0, 14.0, 7.0, 10.0, 7.0, 14.0, 8.0, 9.0, 7.0, 10.0, 8.0, 7.0, 6.0, 2.0, 8.0, 5.0, 7.0, 3.0, 4.0, 1.0, 1.0, 1.0, 2.0, 0.0, 3.0, 2.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 0.0, 2.0, 1.0, 3.0, 9.0, 2.0, 8.0, 3.0, 8.0, 4.0, 6.0, 9.0, 9.0, 14.0, 8.0, 9.0, 18.0, 9.0, 13.0, 13.0, 14.0, 14.0, 16.0, 14.0, 13.0, 11.0, 10.0, 7.0, 8.0, 7.0, 6.0, 8.0, 2.0, 4.0, 4.0, 3.0, 4.0, 5.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 2.0, 2.0, 1.0, 2.0, 2.0, 5.0, 4.0, 3.0, 5.0, 6.0, 8.0, 7.0, 4.0, 8.0, 8.0, 10.0, 10.0, 21.0, 7.0, 8.0, 16.0, 15.0, 22.0, 15.0, 17.0, 14.0, 16.0, 16.0, 15.0, 8.0, 10.0, 19.0, 13.0, 8.0, 2.0, 12.0, 9.0, 5.0, 9.0, 1.0, 3.0, 2.0, 5.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 3.0, 2.0, 3.0, 2.0, 2.0, 4.0, 6.0, 5.0, 6.0, 10.0, 6.0, 6.0, 6.0, 9.0, 11.0, 10.0, 7.0, 14.0, 18.0, 24.0, 18.0, 18.0, 18.0, 19.0, 13.0, 20.0, 22.0, 26.0, 22.0, 12.0, 18.0, 23.0, 21.0, 19.0, 17.0, 14.0, 9.0, 9.0, 6.0, 4.0, 9.0, 9.0, 2.0, 1.0, 4.0, 5.0, 0.0, 3.0, 1.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 4.0, 0.0, 3.0, 2.0, 4.0, 3.0, 2.0, 8.0, 12.0, 11.0, 9.0, 16.0, 17.0, 17.0, 21.0, 13.0, 17.0, 22.0, 25.0, 31.0, 19.0, 22.0, 21.0, 27.0, 31.0, 23.0, 33.0, 23.0, 23.0, 20.0, 26.0, 10.0, 17.0, 14.0, 16.0, 13.0, 5.0, 6.0, 11.0, 3.0, 5.0, 6.0, 4.0, 1.0, 1.0, 3.0, 5.0, 4.0, 4.0, 2.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 4.0, 2.0, 3.0, 6.0, 4.0, 8.0, 5.0, 8.0, 15.0, 7.0, 18.0, 18.0, 17.0, 15.0, 24.0, 22.0, 19.0, 19.0, 20.0, 30.0, 23.0, 28.0, 40.0, 22.0, 30.0, 30.0, 28.0, 28.0, 24.0, 27.0, 19.0, 18.0, 20.0, 10.0, 22.0, 14.0, 10.0, 15.0, 7.0, 9.0, 9.0, 3.0, 4.0, 6.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 5.0, 3.0, 4.0, 6.0, 6.0, 5.0, 9.0, 13.0, 11.0, 20.0, 23.0, 13.0, 14.0, 16.0, 19.0, 27.0, 26.0, 27.0, 42.0, 31.0, 31.0, 46.0, 45.0, 36.0, 41.0, 44.0, 32.0, 41.0, 33.0, 31.0, 30.0, 20.0, 20.0, 24.0, 22.0, 19.0, 11.0, 11.0, 14.0, 4.0, 5.0, 3.0, 7.0, 2.0, 2.0, 4.0, 2.0, 2.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 5.0, 6.0, 1.0, 8.0, 12.0, 14.0, 16.0, 10.0, 16.0, 10.0, 16.0, 23.0, 29.0, 25.0, 27.0, 25.0, 42.0, 31.0, 41.0, 40.0, 35.0, 39.0, 47.0, 46.0, 38.0, 43.0, 33.0, 44.0, 32.0, 33.0, 36.0, 30.0, 25.0, 31.0, 20.0, 16.0, 12.0, 20.0, 12.0, 10.0, 11.0, 5.0, 4.0, 3.0, 5.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 3.0, 2.0, 2.0, 5.0, 5.0, 7.0, 5.0, 8.0, 7.0, 9.0, 11.0, 17.0, 19.0, 20.0, 17.0, 22.0, 28.0, 46.0, 37.0, 39.0, 34.0, 42.0, 46.0, 36.0, 46.0, 49.0, 42.0, 49.0, 39.0, 50.0, 49.0, 56.0, 42.0, 49.0, 50.0, 28.0, 36.0, 35.0, 27.0, 18.0, 13.0, 11.0, 15.0, 12.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 4.0, 3.0, 3.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 5.0, 1.0, 4.0, 5.0, 5.0, 6.0, 4.0, 9.0, 7.0, 18.0, 14.0, 18.0, 28.0, 29.0, 28.0, 33.0, 22.0, 44.0, 52.0, 35.0, 52.0, 37.0, 53.0, 49.0, 56.0, 59.0, 40.0, 54.0, 39.0, 51.0, 60.0, 47.0, 46.0, 45.0, 31.0, 27.0, 25.0, 24.0, 29.0, 24.0, 24.0, 18.0, 15.0, 14.0, 9.0, 9.0, 9.0, 7.0, 3.0, 4.0, 1.0, 3.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 6.0, 6.0, 6.0, 2.0, 3.0, 7.0, 12.0, 11.0, 18.0, 11.0, 17.0, 23.0, 22.0, 24.0, 32.0, 27.0, 36.0, 40.0, 56.0, 53.0, 64.0, 70.0, 42.0, 65.0, 57.0, 77.0, 67.0, 58.0, 61.0, 64.0, 48.0, 64.0, 51.0, 45.0, 42.0, 38.0, 36.0, 21.0, 31.0, 27.0, 23.0, 24.0, 22.0, 18.0, 8.0, 9.0, 7.0, 10.0, 3.0, 5.0, 3.0, 2.0, 6.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 5.0, 1.0, 5.0, 8.0, 2.0, 4.0, 9.0, 7.0, 14.0, 19.0, 17.0, 19.0, 27.0, 27.0, 35.0, 48.0, 41.0, 49.0, 56.0, 57.0, 67.0, 64.0, 62.0, 50.0, 72.0, 58.0, 62.0, 60.0, 63.0, 64.0, 80.0, 70.0, 59.0, 57.0, 50.0, 46.0, 45.0, 35.0, 32.0, 48.0, 37.0, 23.0, 23.0, 19.0, 10.0, 12.0, 11.0, 9.0, 9.0, 6.0, 3.0, 5.0, 2.0, 1.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 3.0, 1.0, 3.0, 8.0, 9.0, 10.0, 16.0, 17.0, 25.0, 26.0, 16.0, 25.0, 30.0, 37.0, 34.0, 47.0, 58.0, 55.0, 62.0, 66.0, 76.0, 72.0, 64.0, 92.0, 64.0, 87.0, 83.0, 82.0, 83.0, 85.0, 81.0, 68.0, 68.0, 63.0, 47.0, 46.0, 56.0, 48.0, 37.0, 25.0, 29.0, 24.0, 28.0, 24.0, 10.0, 11.0, 9.0, 5.0, 9.0, 6.0, 3.0, 3.0, 5.0, 1.0, 1.0, 4.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 6.0, 3.0, 7.0, 8.0, 11.0, 14.0, 12.0, 27.0, 22.0, 25.0, 23.0, 33.0, 38.0, 40.0, 58.0, 63.0, 85.0, 54.0, 84.0, 69.0, 86.0, 82.0, 82.0, 101.0, 96.0, 88.0, 77.0, 96.0, 99.0, 76.0, 86.0, 74.0, 65.0, 66.0, 53.0, 61.0, 43.0, 38.0, 29.0, 29.0, 29.0, 26.0, 30.0, 27.0, 15.0, 13.0, 6.0, 10.0, 4.0, 8.0, 3.0, 5.0, 4.0, 5.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 4.0, 3.0, 0.0, 2.0, 5.0, 5.0, 6.0, 6.0, 20.0, 5.0, 18.0, 17.0, 27.0, 39.0, 24.0, 31.0, 45.0, 47.0, 42.0, 65.0, 81.0, 74.0, 88.0, 74.0, 88.0, 90.0, 111.0, 92.0, 104.0, 109.0, 93.0, 88.0, 92.0, 110.0, 84.0, 86.0, 97.0, 94.0, 66.0, 59.0, 60.0, 44.0, 45.0, 49.0, 43.0, 36.0, 30.0, 26.0, 19.0, 16.0, 16.0, 11.0, 2.0, 6.0, 8.0, 4.0, 3.0, 2.0, 1.0, 1.0, 4.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 3.0, 7.0, 10.0, 9.0, 17.0, 18.0, 19.0, 26.0, 26.0, 44.0, 36.0, 42.0, 56.0, 68.0, 61.0, 69.0, 71.0, 81.0, 103.0, 109.0, 93.0, 111.0, 114.0, 118.0, 123.0, 121.0, 105.0, 105.0, 105.0, 109.0, 102.0, 90.0, 76.0, 64.0, 70.0, 69.0, 54.0, 58.0, 34.0, 52.0, 25.0, 18.0, 17.0, 18.0, 11.0, 17.0, 13.0, 9.0, 7.0, 5.0, 4.0, 5.0, 7.0, 1.0, 3.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 3.0, 2.0, 1.0, 4.0, 4.0, 6.0, 3.0, 15.0, 13.0, 20.0, 16.0, 22.0, 33.0, 27.0, 35.0, 42.0, 46.0, 68.0, 76.0, 63.0, 72.0, 92.0, 90.0, 73.0, 110.0, 128.0, 102.0, 129.0, 109.0, 97.0, 121.0, 123.0, 114.0, 138.0, 121.0, 101.0, 101.0, 111.0, 68.0, 86.0, 68.0, 57.0, 64.0, 50.0, 30.0, 39.0, 29.0, 27.0, 17.0, 16.0, 27.0, 14.0, 9.0, 9.0, 8.0, 2.0, 5.0, 5.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 4.0, 1.0, 4.0, 7.0, 3.0, 8.0, 11.0, 11.0, 13.0, 20.0, 17.0, 21.0, 34.0, 26.0, 36.0, 45.0, 50.0, 45.0, 71.0, 78.0, 83.0, 90.0, 97.0, 102.0, 114.0, 107.0, 112.0, 121.0, 140.0, 136.0, 110.0, 130.0, 134.0, 111.0, 122.0, 122.0, 109.0, 109.0, 90.0, 93.0, 63.0, 71.0, 50.0, 59.0, 39.0, 40.0, 34.0, 26.0, 29.0, 24.0, 13.0, 11.0, 10.0, 7.0, 5.0, 7.0, 6.0, 3.0, 3.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.0, 6.0, 10.0, 10.0, 8.0, 11.0, 10.0, 20.0, 23.0, 15.0, 38.0, 37.0, 41.0, 54.0, 73.0, 98.0, 89.0, 92.0, 85.0, 103.0, 94.0, 136.0, 139.0, 133.0, 137.0, 126.0, 143.0, 147.0, 132.0, 119.0, 117.0, 118.0, 114.0, 101.0, 100.0, 87.0, 100.0, 92.0, 92.0, 69.0, 68.0, 46.0, 37.0, 26.0, 16.0, 20.0, 24.0, 18.0, 11.0, 8.0, 5.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 3.0, 2.0, 3.0, 3.0, 4.0, 7.0, 8.0, 8.0, 12.0, 18.0, 23.0, 36.0, 37.0, 37.0, 43.0, 61.0, 60.0, 61.0, 86.0, 87.0, 116.0, 114.0, 104.0, 90.0, 114.0, 122.0, 145.0, 136.0, 135.0, 141.0, 147.0, 151.0, 123.0, 123.0, 131.0, 127.0, 145.0, 107.0, 96.0, 104.0, 84.0, 69.0, 68.0, 46.0, 51.0, 42.0, 40.0, 31.0, 19.0, 19.0, 21.0, 17.0, 14.0, 9.0, 5.0, 6.0, 6.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 3.0, 4.0, 3.0, 2.0, 3.0, 4.0, 8.0, 6.0, 10.0, 19.0, 22.0, 20.0, 23.0, 26.0, 40.0, 45.0, 43.0, 52.0, 58.0, 68.0, 97.0, 80.0, 109.0, 106.0, 103.0, 131.0, 132.0, 153.0, 139.0, 161.0, 151.0, 131.0, 154.0, 151.0, 131.0, 117.0, 136.0, 105.0, 112.0, 96.0, 91.0, 77.0, 68.0, 71.0, 64.0, 32.0, 39.0, 28.0, 27.0, 31.0, 23.0, 13.0, 12.0, 15.0, 8.0, 4.0, 5.0, 5.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 3.0, 4.0, 2.0, 6.0, 5.0, 3.0, 9.0, 13.0, 6.0, 11.0, 15.0, 26.0, 26.0, 33.0, 42.0, 49.0, 59.0, 58.0, 67.0, 94.0, 86.0, 92.0, 124.0, 123.0, 116.0, 117.0, 131.0, 141.0, 147.0, 145.0, 176.0, 154.0, 149.0, 149.0, 142.0, 133.0, 131.0, 115.0, 112.0, 111.0, 119.0, 93.0, 81.0, 89.0, 70.0, 45.0, 48.0, 35.0, 31.0, 30.0, 25.0, 25.0, 18.0, 13.0, 10.0, 11.0, 3.0, 7.0, 2.0, 5.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0, 2.0, 4.0, 8.0, 7.0, 10.0, 11.0, 5.0, 23.0, 25.0, 26.0, 33.0, 27.0, 36.0, 49.0, 48.0, 61.0, 72.0, 70.0, 89.0, 97.0, 117.0, 127.0, 117.0, 128.0, 115.0, 145.0, 146.0, 148.0, 141.0, 150.0, 169.0, 160.0, 155.0, 134.0, 115.0, 121.0, 100.0, 121.0, 100.0, 91.0, 77.0, 72.0, 67.0, 60.0, 43.0, 42.0, 35.0, 33.0, 16.0, 21.0, 9.0, 12.0, 6.0, 5.0, 8.0, 7.0, 3.0, 5.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 2.0, 2.0, 4.0, 10.0, 6.0, 7.0, 8.0, 12.0, 15.0, 13.0, 26.0, 32.0, 31.0, 38.0, 56.0, 54.0, 83.0, 68.0, 88.0, 83.0, 94.0, 88.0, 110.0, 112.0, 125.0, 167.0, 129.0, 171.0, 174.0, 149.0, 152.0, 160.0, 166.0, 158.0, 139.0, 133.0, 141.0, 133.0, 106.0, 102.0, 98.0, 75.0, 89.0, 63.0, 44.0, 46.0, 35.0, 23.0, 33.0, 14.0, 23.0, 13.0, 19.0, 5.0, 6.0, 8.0, 6.0, 1.0, 3.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 3.0, 3.0, 1.0, 3.0, 1.0, 8.0, 7.0, 19.0, 8.0, 13.0, 15.0, 23.0, 26.0, 31.0, 28.0, 46.0, 46.0, 58.0, 72.0, 90.0, 74.0, 112.0, 90.0, 111.0, 115.0, 138.0, 140.0, 140.0, 158.0, 146.0, 175.0, 152.0, 146.0, 145.0, 160.0, 131.0, 153.0, 129.0, 115.0, 118.0, 104.0, 97.0, 105.0, 72.0, 78.0, 61.0, 58.0, 39.0, 39.0, 33.0, 40.0, 17.0, 22.0, 15.0, 11.0, 10.0, 11.0, 3.0, 3.0, 3.0, 2.0, 3.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 5.0, 8.0, 12.0, 11.0, 14.0, 9.0, 17.0, 19.0, 37.0, 36.0, 42.0, 48.0, 61.0, 63.0, 66.0, 81.0, 72.0, 100.0, 95.0, 101.0, 126.0, 149.0, 128.0, 140.0, 146.0, 154.0, 144.0, 135.0, 160.0, 144.0, 140.0, 141.0, 135.0, 116.0, 111.0, 95.0, 105.0, 89.0, 81.0, 75.0, 74.0, 36.0, 46.0, 35.0, 32.0, 34.0, 24.0, 24.0, 23.0, 19.0, 10.0, 9.0, 11.0, 3.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 5.0, 7.0, 3.0, 3.0, 8.0, 14.0, 9.0, 12.0, 18.0, 24.0, 28.0, 23.0, 33.0, 35.0, 47.0, 45.0, 64.0, 81.0, 89.0, 107.0, 113.0, 112.0, 119.0, 133.0, 114.0, 152.0, 136.0, 151.0, 145.0, 156.0, 166.0, 138.0, 122.0, 134.0, 160.0, 126.0, 117.0, 116.0, 100.0, 93.0, 68.0, 73.0, 47.0, 42.0, 35.0, 39.0, 40.0, 30.0, 28.0, 26.0, 15.0, 9.0, 8.0, 5.0, 6.0, 7.0, 1.0, 1.0, 1.0, 0.0, 3.0, 3.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 0.0, 1.0, 3.0, 2.0, 7.0, 7.0, 10.0, 9.0, 12.0, 15.0, 12.0, 26.0, 31.0, 31.0, 36.0, 37.0, 68.0, 55.0, 69.0, 78.0, 83.0, 89.0, 106.0, 113.0, 126.0, 123.0, 147.0, 166.0, 163.0, 156.0, 159.0, 133.0, 142.0, 152.0, 147.0, 144.0, 118.0, 123.0, 109.0, 101.0, 87.0, 81.0, 74.0, 46.0, 54.0, 44.0, 53.0, 38.0, 35.0, 30.0, 22.0, 17.0, 16.0, 13.0, 10.0, 12.0, 5.0, 3.0, 5.0, 3.0, 4.0, 0.0, 1.0, 5.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 4.0, 2.0, 4.0, 2.0, 3.0, 6.0, 7.0, 20.0, 10.0, 13.0, 13.0, 29.0, 36.0, 26.0, 46.0, 45.0, 39.0, 61.0, 76.0, 55.0, 88.0, 90.0, 88.0, 124.0, 98.0, 140.0, 118.0, 122.0, 137.0, 152.0, 161.0, 154.0, 132.0, 139.0, 145.0, 119.0, 125.0, 98.0, 114.0, 87.0, 89.0, 73.0, 64.0, 67.0, 49.0, 38.0, 56.0, 45.0, 28.0, 30.0, 20.0, 13.0, 11.0, 14.0, 7.0, 8.0, 7.0, 4.0, 4.0, 4.0, 4.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 3.0, 2.0, 2.0, 6.0, 10.0, 6.0, 7.0, 14.0, 8.0, 15.0, 21.0, 31.0, 29.0, 33.0, 39.0, 57.0, 59.0, 69.0, 71.0, 81.0, 82.0, 99.0, 105.0, 109.0, 105.0, 133.0, 131.0, 134.0, 145.0, 138.0, 153.0, 140.0, 146.0, 140.0, 117.0, 134.0, 114.0, 95.0, 94.0, 94.0, 79.0, 58.0, 73.0, 49.0, 45.0, 39.0, 29.0, 22.0, 28.0, 15.0, 13.0, 14.0, 16.0, 9.0, 5.0, 2.0, 2.0, 3.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 8.0, 19.0, 9.0, 19.0, 26.0, 35.0, 32.0, 35.0, 54.0, 55.0, 54.0, 60.0, 78.0, 70.0, 99.0, 86.0, 100.0, 137.0, 119.0, 107.0, 145.0, 110.0, 138.0, 147.0, 111.0, 121.0, 132.0, 114.0, 87.0, 89.0, 102.0, 80.0, 89.0, 71.0, 72.0, 65.0, 53.0, 55.0, 38.0, 36.0, 30.0, 37.0, 23.0, 12.0, 16.0, 11.0, 4.0, 11.0, 5.0, 4.0, 4.0, 1.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 2.0, 2.0, 1.0, 8.0, 7.0, 5.0, 7.0, 16.0, 15.0, 22.0, 13.0, 30.0, 30.0, 32.0, 39.0, 51.0, 53.0, 63.0, 86.0, 73.0, 76.0, 95.0, 92.0, 88.0, 106.0, 122.0, 115.0, 129.0, 130.0, 111.0, 132.0, 137.0, 135.0, 117.0, 112.0, 107.0, 78.0, 71.0, 88.0, 72.0, 67.0, 59.0, 41.0, 50.0, 42.0, 36.0, 26.0, 20.0, 21.0, 7.0, 8.0, 6.0, 6.0, 4.0, 3.0, 5.0, 1.0, 5.0, 3.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 3.0, 2.0, 5.0, 5.0, 6.0, 10.0, 10.0, 11.0, 23.0, 18.0, 22.0, 29.0, 40.0, 28.0, 37.0, 62.0, 56.0, 72.0, 67.0, 72.0, 76.0, 93.0, 88.0, 114.0, 106.0, 111.0, 110.0, 106.0, 105.0, 92.0, 116.0, 109.0, 93.0, 94.0, 97.0, 75.0, 81.0, 81.0, 72.0, 54.0, 54.0, 44.0, 37.0, 32.0, 22.0, 27.0, 19.0, 19.0, 12.0, 15.0, 7.0, 5.0, 4.0, 6.0, 5.0, 4.0, 2.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 2.0, 6.0, 2.0, 6.0, 7.0, 11.0, 10.0, 9.0, 15.0, 19.0, 25.0, 23.0, 34.0, 35.0, 46.0, 51.0, 54.0, 64.0, 76.0, 88.0, 79.0, 91.0, 98.0, 93.0, 93.0, 83.0, 119.0, 84.0, 113.0, 86.0, 101.0, 97.0, 90.0, 82.0, 84.0, 90.0, 78.0, 55.0, 51.0, 52.0, 53.0, 36.0, 36.0, 23.0, 15.0, 23.0, 19.0, 16.0, 6.0, 4.0, 5.0, 9.0, 4.0, 4.0, 5.0, 4.0, 3.0, 0.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 8.0, 8.0, 9.0, 17.0, 14.0, 21.0, 18.0, 28.0, 28.0, 34.0, 44.0, 51.0, 47.0, 44.0, 54.0, 72.0, 87.0, 76.0, 73.0, 83.0, 105.0, 75.0, 86.0, 80.0, 78.0, 93.0, 79.0, 72.0, 83.0, 88.0, 63.0, 70.0, 77.0, 56.0, 61.0, 52.0, 48.0, 45.0, 37.0, 22.0, 20.0, 17.0, 13.0, 13.0, 17.0, 9.0, 7.0, 4.0, 4.0, 7.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 3.0, 6.0, 6.0, 6.0, 15.0, 10.0, 18.0, 24.0, 21.0, 30.0, 27.0, 34.0, 31.0, 47.0, 45.0, 47.0, 49.0, 65.0, 64.0, 83.0, 70.0, 79.0, 82.0, 78.0, 80.0, 68.0, 95.0, 69.0, 74.0, 70.0, 79.0, 65.0, 76.0, 58.0, 61.0, 42.0, 41.0, 38.0, 29.0, 23.0, 20.0, 25.0, 16.0, 10.0, 5.0, 10.0, 5.0, 8.0, 2.0, 3.0, 1.0, 4.0, 2.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 6.0, 1.0, 3.0, 4.0, 9.0, 7.0, 7.0, 10.0, 16.0, 7.0, 19.0, 18.0, 27.0, 30.0, 34.0, 39.0, 36.0, 41.0, 40.0, 50.0, 53.0, 53.0, 63.0, 61.0, 67.0, 66.0, 89.0, 74.0, 81.0, 75.0, 79.0, 65.0, 79.0, 76.0, 53.0, 49.0, 63.0, 41.0, 39.0, 29.0, 28.0, 32.0, 19.0, 22.0, 19.0, 16.0, 14.0, 13.0, 9.0, 5.0, 6.0, 6.0, 5.0, 3.0, 1.0, 2.0, 0.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 3.0, 2.0, 4.0, 5.0, 5.0, 5.0, 7.0, 13.0, 8.0, 12.0, 17.0, 17.0, 16.0, 28.0, 31.0, 32.0, 44.0, 39.0, 42.0, 40.0, 38.0, 58.0, 60.0, 56.0, 66.0, 60.0, 66.0, 66.0, 79.0, 73.0, 59.0, 69.0, 51.0, 49.0, 58.0, 46.0, 46.0, 35.0, 38.0, 28.0, 25.0, 25.0, 16.0, 20.0, 16.0, 11.0, 9.0, 7.0, 4.0, 5.0, 3.0, 3.0, 2.0, 3.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 4.0, 2.0, 3.0, 3.0, 3.0, 4.0, 9.0, 11.0, 12.0, 22.0, 17.0, 21.0, 26.0, 28.0, 25.0, 38.0, 38.0, 45.0, 38.0, 41.0, 53.0, 61.0, 58.0, 72.0, 47.0, 47.0, 50.0, 50.0, 41.0, 47.0, 52.0, 49.0, 44.0, 48.0, 32.0, 23.0, 25.0, 21.0, 27.0, 10.0, 23.0, 16.0, 10.0, 8.0, 4.0, 5.0, 5.0, 6.0, 2.0, 1.0, 3.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 0.0, 0.0, 1.0, 3.0, 1.0, 2.0, 1.0, 3.0, 5.0, 6.0, 9.0, 10.0, 15.0, 11.0, 17.0, 16.0, 25.0, 25.0, 34.0, 28.0, 35.0, 44.0, 40.0, 40.0, 28.0, 52.0, 53.0, 45.0, 43.0, 58.0, 33.0, 29.0, 48.0, 39.0, 38.0, 32.0, 29.0, 31.0, 16.0, 29.0, 15.0, 30.0, 23.0, 21.0, 19.0, 11.0, 7.0, 7.0, 7.0, 2.0, 5.0, 5.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 4.0, 1.0, 6.0, 1.0, 10.0, 14.0, 7.0, 10.0, 12.0, 18.0, 21.0, 18.0, 20.0, 18.0, 26.0, 38.0, 42.0, 31.0, 37.0, 47.0, 43.0, 48.0, 41.0, 36.0, 60.0, 42.0, 40.0, 32.0, 39.0, 40.0, 38.0, 30.0, 23.0, 28.0, 23.0, 15.0, 20.0, 13.0, 21.0, 11.0, 8.0, 6.0, 10.0, 1.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 3.0, 1.0, 3.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 2.0, 4.0, 7.0, 2.0, 4.0, 11.0, 8.0, 11.0, 14.0, 14.0, 14.0, 17.0, 20.0, 23.0, 31.0, 29.0, 38.0, 29.0, 26.0, 28.0, 33.0, 33.0, 35.0, 29.0, 36.0, 29.0, 28.0, 22.0, 36.0, 31.0, 34.0, 27.0, 25.0, 17.0, 15.0, 12.0, 13.0, 12.0, 9.0, 6.0, 6.0, 2.0, 7.0, 5.0, 6.0, 3.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 4.0, 2.0, 1.0, 10.0, 4.0, 3.0, 11.0, 12.0, 9.0, 20.0, 19.0, 10.0, 17.0, 12.0, 14.0, 25.0, 23.0, 20.0, 16.0, 30.0, 30.0, 23.0, 22.0, 27.0, 29.0, 26.0, 23.0, 34.0, 30.0, 24.0, 14.0, 15.0, 23.0, 12.0, 13.0, 12.0, 15.0, 12.0, 10.0, 6.0, 7.0, 5.0, 4.0, 5.0, 4.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 4.0, 4.0, 5.0, 5.0, 9.0, 13.0, 9.0, 4.0, 10.0, 11.0, 13.0, 21.0, 17.0, 26.0, 24.0, 28.0, 22.0, 30.0, 25.0, 23.0, 19.0, 11.0, 19.0, 26.0, 23.0, 19.0, 11.0, 11.0, 9.0, 14.0, 15.0, 9.0, 7.0, 5.0, 5.0, 12.0, 5.0, 6.0, 9.0, 3.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 7.0, 4.0, 5.0, 12.0, 10.0, 14.0, 16.0, 13.0, 16.0, 14.0, 21.0, 19.0, 23.0, 22.0, 20.0, 18.0, 28.0, 20.0, 29.0, 18.0, 23.0, 19.0, 17.0, 7.0, 22.0, 13.0, 8.0, 13.0, 10.0, 11.0, 5.0, 8.0, 9.0, 1.0, 3.0, 3.0, 2.0, 1.0, 4.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 3.0, 2.0, 10.0, 3.0, 5.0, 6.0, 4.0, 6.0, 6.0, 8.0, 6.0, 18.0, 9.0, 11.0, 12.0, 8.0, 10.0, 13.0, 8.0, 11.0, 30.0, 15.0, 18.0, 18.0, 14.0, 10.0, 11.0, 23.0, 8.0, 18.0, 8.0, 3.0, 11.0, 3.0, 13.0, 3.0, 6.0, 9.0, 3.0, 5.0, 1.0, 2.0, 3.0, 1.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 2.0, 3.0, 2.0, 3.0, 4.0, 7.0, 1.0, 3.0, 7.0, 8.0, 5.0, 12.0, 7.0, 12.0, 9.0, 15.0, 12.0, 16.0, 12.0, 16.0, 8.0, 13.0, 14.0, 12.0, 12.0, 8.0, 11.0, 7.0, 13.0, 7.0, 4.0, 6.0, 6.0, 1.0, 11.0, 4.0, 6.0, 6.0, 3.0, 1.0, 3.0, 0.0, 1.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 4.0, 3.0, 2.0, 3.0, 4.0, 5.0, 5.0, 7.0, 9.0, 5.0, 7.0, 7.0, 7.0, 8.0, 9.0, 13.0, 9.0, 12.0, 9.0, 10.0, 7.0, 16.0, 8.0, 7.0, 11.0, 13.0, 9.0, 12.0, 8.0, 3.0, 1.0, 4.0, 7.0, 5.0, 4.0, 2.0, 4.0, 1.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 4.0, 3.0, 5.0, 3.0, 12.0, 4.0, 3.0, 4.0, 2.0, 7.0, 3.0, 4.0, 6.0, 9.0, 9.0, 13.0, 13.0, 18.0, 9.0, 8.0, 8.0, 7.0, 7.0, 10.0, 8.0, 8.0, 5.0, 6.0, 5.0, 2.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 5.0, 1.0, 5.0, 2.0, 5.0, 5.0, 6.0, 7.0, 3.0, 5.0, 8.0, 6.0, 6.0, 5.0, 5.0, 4.0, 5.0, 3.0, 7.0, 4.0, 2.0, 1.0, 6.0, 3.0, 3.0, 5.0, 3.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 3.0, 1.0, 1.0, 1.0, 2.0, 3.0, 1.0, 2.0, 5.0, 2.0, 5.0, 5.0, 5.0, 2.0, 3.0, 2.0, 5.0, 4.0, 6.0, 5.0, 5.0, 2.0, 3.0, 4.0, 1.0, 3.0, 3.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 2.0, 2.0, 4.0, 1.0, 3.0, 4.0, 1.0, 4.0, 3.0, 5.0, 2.0, 4.0, 4.0, 3.0, 6.0, 5.0, 4.0, 2.0, 3.0, 5.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 1.0, 5.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 1.0, 3.0, 0.0, 3.0, 2.0, 3.0, 2.0, 1.0, 1.0, 3.0, 4.0, 0.0, 3.0, 4.0, 0.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 4.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 3.0, 3.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 4.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 2.0, 2.0, 0.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 3.0, 1.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.array.fArray[] elements >= 0.0
return.fScalefactor == 1.0
return.fTsumwy == -89.90044995049783
return.fTsumwy2 == 100614.0499710697
return.fTsumwxy == -149.6464999933312
return.tAttLine has only one value
return.tAttLine.fLineColor == 1
return.tAttLine.fLineStyle == 1
return.tAttLine.fLineWidth == 1
return.tAttFill has only one value
return.tAttFill.fFillColor == 0
return.tAttFill.fFillStyle == 1001
return.tAttMarker has only one value
return.tAttMarker.fMarkerColor == 1
return.tAttMarker.fMarkerStyle == 1
return.tAttMarker.fMarkerSize == 1.0
return.fNcells == 10404
return.fXaxis has only one value
return.fXaxis.tAttAxis has only one value
return.fXaxis.fNbins == 100
return.fXaxis.fXmin == -5.0
return.fXaxis.fXmax == 5.0
return.fXaxis.fXbins == null
return.fXaxis.fFirst == 0
return.fXaxis.fLast == 0
return.fXaxis.fBits2 == 0
return.fXaxis.fTimeDisplay == false
return.fXaxis.fTimeFormat == null
return.fXaxis.fLabels == null
return.fXaxis.name has only one value
return.fXaxis.name.toString == "xaxis"
return.fXaxis.title has only one value
return.fXaxis.title.toString == ""
return.fXaxis.fUniqueID == 0
return.fXaxis.fBits == 50331648
return.fYaxis has only one value
return.fYaxis.tAttAxis has only one value
return.fYaxis.fNbins == 100
return.fYaxis.fXmin == -5.0
return.fYaxis.fXmax == 5.0
return.fYaxis.fXbins == null
return.fYaxis.fFirst == 0
return.fYaxis.fLast == 0
return.fYaxis.fBits2 == 0
return.fYaxis.fTimeDisplay == false
return.fYaxis.fTimeFormat == null
return.fYaxis.fLabels == null
return.fYaxis.name has only one value
return.fYaxis.name.toString == "yaxis"
return.fYaxis.title has only one value
return.fYaxis.title.toString == ""
return.fYaxis.fUniqueID == 0
return.fYaxis.fBits == 50331648
return.fZaxis has only one value
return.fZaxis.tAttAxis has only one value
return.fZaxis.fNbins == 1
return.fZaxis.fXmin == 0.0
return.fZaxis.fXmax == 1.0
return.fZaxis.fXbins == null
return.fZaxis.fFirst == 0
return.fZaxis.fLast == 0
return.fZaxis.fBits2 == 0
return.fZaxis.fTimeDisplay == false
return.fZaxis.fTimeFormat == null
return.fZaxis.fLabels == null
return.fZaxis.name has only one value
return.fZaxis.name.toString == "zAxis"
return.fZaxis.title has only one value
return.fZaxis.title.toString == ""
return.fZaxis.fUniqueID == 0
return.fZaxis.fBits == 50331648
return.fBarOffset == 0
return.fBarWidth == 1000
return.fEntries == 100000.0
return.fTsumw == 100000.0
return.fTsumw2 == 100000.0
return.fTsumwx == -171.43424466256175
return.fTsumwx2 == 100132.80644921324
return.fMaximum == -1111.0
return.fMinimum == -1111.0
return.fNormFactor == 0.0
return.fContour == null
return.fSumw2 == null
return.fOption has only one value
return.fOption.toString == ""
return.fFunctions has only one value
return.fFunctions.name has only one value
return.fFunctions.name.toString == ""
return.fFunctions.fSize == 0
return.fFunctions.list has only one value
return.fFunctions.list.getClass().getName() == java.util.ArrayList.class
return.fFunctions.fUniqueID == 0
return.fFunctions.fBits == 50331648
return.fBufferSize == 0
return.fBuffer == null
return.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
return.name has only one value
return.name.toString == "test3"
return.title has only one value
return.title.toString == "Histogram created from Java"
return.fUniqueID == 0
return.fBits == 50331648
size(return.array.fArray[]) == 10404
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.createProfile(java.lang.String, java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "test4"
arg1 has only one value
arg1.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.createProfile(java.lang.String, java.lang.String):::EXIT
this.random == orig(this.random)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString == "test4"
arg1.toString == "Profile created from Java"
return has only one value
return.fBinEntries has only one value
return.fBinEntries.fArray has only one value
return.fBinEntries.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fBinEntries.fArray[] elements >= 0.0
return.fErrorMode has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.EErrorType[].class
hep.io.root.output.classes.hist.EErrorType.$VALUES[] contains no nulls and has only one value, of length 4
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType]
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.EErrorType.class
return.fYmin == 0.0
return.fYmax == 0.0
return.fTsumwy == 50427.84456005312
return.fTsumwy2 == 204799.5721980136
return.fBinSumw2 has only one value
return.fBinSumw2.fArray has only one value
return.fBinSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 5.0, 6.0, 4.0, 5.0, 9.0, 11.0, 15.0, 27.0, 36.0, 36.0, 59.0, 51.0, 95.0, 92.0, 141.0, 147.0, 186.0, 214.0, 267.0, 313.0, 337.0, 385.0, 430.0, 530.0, 541.0, 703.0, 636.0, 760.0, 815.0, 828.0, 913.0, 929.0, 957.0, 1013.0, 980.0, 997.0, 1014.0, 980.0, 987.0, 853.0, 791.0, 835.0, 760.0, 671.0, 639.0, 570.0, 529.0, 433.0, 394.0, 340.0, 299.0, 252.0, 225.0, 198.0, 149.0, 125.0, 104.0, 80.0, 69.0, 61.0, 35.0, 30.0, 21.0, 25.0, 14.0, 8.0, 12.0, 8.0, 1.0, 4.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fBinSumw2.fArray[] elements >= 0.0
return.array has only one value
return.array.fArray has only one value
return.array.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.970235644535858, 0.0, 0.0, 0.0, 0.0, 14.720901942991093, 0.0, 13.002789560043883, 27.08565090808058, 62.463079831986704, 72.50983808098297, 46.11943494048849, 57.25920471241992, 89.25905133125686, 102.50213487518022, 126.52769082486482, 226.723131192017, 280.1750883891237, 257.7840101235832, 415.0429519535921, 334.5762700840897, 587.5858547259031, 519.7757654432656, 770.1908173987221, 710.4638614828599, 809.8436686510178, 850.5804089443162, 975.0270576069503, 1088.1423127097448, 1047.4004827530086, 1105.5488026221788, 1126.6583116425581, 1212.8494134322361, 1117.0795100728574, 1328.6344955058892, 1149.2600720132564, 1131.8879771412608, 1181.6402278114335, 1067.744200683173, 1068.2589825141802, 966.9588823472022, 999.0073577938409, 1050.7374799559548, 997.4255859476023, 977.1047831489702, 994.3399729635406, 1155.0142819571677, 1149.6635138949616, 974.2000659044912, 1076.037886575907, 1203.8218380110327, 1244.5472295563118, 1188.4359960663148, 1237.512151401574, 1203.411605361815, 1255.1136146456154, 1111.1409763731, 1108.2024032169518, 1014.5322245458362, 989.7477453659806, 921.8639733763537, 907.6531012407834, 869.1431821570039, 719.9223625028562, 646.5669406214565, 590.8354537760492, 478.8537470422476, 474.4743478209002, 414.8415747628987, 262.95125112111043, 249.7856904098414, 172.4172512896371, 235.16644741041472, 130.39938881893838, 93.55467245315047, 123.56508459500002, 92.17215597283271, 11.039905067230166, 49.00483870179785, 27.04403234277759, 0.0, 32.75355124315406, 15.022311682517879, 0.0, 0.0, 0.0, 18.56401305983653, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.array.fArray[] elements >= 0.0
return.tAttLine has only one value
return.tAttLine.fLineColor == 1
return.tAttLine.fLineStyle == 1
return.tAttLine.fLineWidth == 1
return.tAttFill has only one value
return.tAttFill.fFillColor == 0
return.tAttFill.fFillStyle == 1001
return.tAttMarker has only one value
return.tAttMarker.fMarkerColor == 1
return.tAttMarker.fMarkerStyle == 1
return.tAttMarker.fMarkerSize == 1.0
return.fNcells == 102
return.fXaxis has only one value
return.fXaxis.tAttAxis has only one value
return.fXaxis.fNbins == 100
return.fXaxis.fXmin == -5.0
return.fXaxis.fXmax == 5.0
return.fXaxis.fXbins == null
return.fXaxis.fFirst == 0
return.fXaxis.fLast == 0
return.fXaxis.fBits2 == 0
return.fXaxis.fTimeDisplay == false
return.fXaxis.fTimeFormat == null
return.fXaxis.fLabels == null
return.fXaxis.name has only one value
return.fXaxis.name.toString == "xaxis"
return.fXaxis.title has only one value
return.fXaxis.title.toString == ""
return.fXaxis.fUniqueID == 0
return.fXaxis.fBits == 50331648
return.fYaxis has only one value
return.fYaxis.tAttAxis has only one value
return.fYaxis.fNbins == 1
return.fYaxis.fXmin == 0.0
return.fYaxis.fXmax == 1.0
return.fYaxis.fXbins == null
return.fYaxis.fFirst == 0
return.fYaxis.fLast == 0
return.fYaxis.fBits2 == 0
return.fYaxis.fTimeDisplay == false
return.fYaxis.fTimeFormat == null
return.fYaxis.fLabels == null
return.fYaxis.name has only one value
return.fYaxis.name.toString == "yaxis"
return.fYaxis.title has only one value
return.fYaxis.title.toString == ""
return.fYaxis.fUniqueID == 0
return.fYaxis.fBits == 50331648
return.fZaxis has only one value
return.fZaxis.tAttAxis has only one value
return.fZaxis.fNbins == 1
return.fZaxis.fXmin == 0.0
return.fZaxis.fXmax == 1.0
return.fZaxis.fXbins == null
return.fZaxis.fFirst == 0
return.fZaxis.fLast == 0
return.fZaxis.fBits2 == 0
return.fZaxis.fTimeDisplay == false
return.fZaxis.fTimeFormat == null
return.fZaxis.fLabels == null
return.fZaxis.name has only one value
return.fZaxis.name.toString == "zAxis"
return.fZaxis.title has only one value
return.fZaxis.title.toString == ""
return.fZaxis.fUniqueID == 0
return.fZaxis.fBits == 50331648
return.fBarOffset == 0
return.fBarWidth == 1000
return.fEntries == 25000.0
return.fTsumw == 25000.0
return.fTsumw2 == 25000.0
return.fTsumwx == 29.864086313789908
return.fTsumwx2 == 25347.729783886123
return.fMaximum == -1111.0
return.fMinimum == -1111.0
return.fNormFactor == 0.0
return.fContour == null
return.fSumw2 has only one value
return.fSumw2.fArray has only one value
return.fSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 359.8698404092188, 0.0, 0.0, 0.0, 0.0, 216.70495401515893, 0.0, 169.0725363427862, 366.82517841876427, 782.9574590874524, 882.296415971126, 534.8169924333753, 659.2658367170086, 891.6456449832834, 958.4573665993378, 1069.1918092876158, 1948.0731751553867, 2220.116683123788, 1860.9079986328843, 3093.781237904801, 2286.7852109104756, 3823.885925912681, 3078.982969081898, 4581.8109415910085, 3719.9585532301708, 3894.313476273699, 3803.395743731895, 4072.5234166769924, 4602.588098047616, 3977.282315736033, 3985.632818724484, 3872.3505548248086, 3709.129794279721, 3422.6090296005377, 4088.2601821954486, 3507.8789990294185, 3169.1867574774074, 3486.130629057977, 3252.9491735606657, 3165.2589450270507, 2539.0266705547815, 3163.1591869538147, 3097.510970179204, 3032.900319985419, 2682.4587635107678, 2597.906426119974, 3855.203274994983, 3513.0835997821678, 2549.0183957788563, 3123.2760098585286, 3601.408897084873, 3637.062061397905, 3793.8087989781116, 3668.7870871299456, 3786.139009753603, 4071.4072754579242, 3850.1982566261922, 3855.140042409932, 3617.4630616619042, 3908.070730939738, 3707.405603030554, 4082.0548689318994, 4375.19900698208, 3820.815963359348, 3588.1894429277263, 3546.4448256218366, 2996.348015617748, 3426.9780452261257, 2883.5014655038012, 2078.075149971109, 2176.4007096583805, 1425.8992725613286, 2287.179479539038, 1218.5833758203992, 1171.4151291377664, 1278.4480467600235, 1080.9576273132504, 121.87950389345428, 600.7018688150821, 367.11225603534876, 0.0, 537.7646089243046, 225.66984828671315, 0.0, 0.0, 0.0, 344.62258088578125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fSumw2.fArray[] elements >= 0.0
return.fOption has only one value
return.fOption.toString == ""
return.fFunctions has only one value
return.fFunctions.name has only one value
return.fFunctions.name.toString == ""
return.fFunctions.fSize == 0
return.fFunctions.list has only one value
return.fFunctions.list.getClass().getName() == java.util.ArrayList.class
return.fFunctions.fUniqueID == 0
return.fFunctions.fBits == 50331648
return.fBufferSize == 0
return.fBuffer == null
return.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
return.name has only one value
return.name.toString == "test4"
return.title has only one value
return.title.toString == "Profile created from Java"
return.fUniqueID == 0
return.fBits == 50331648
size(return.fBinEntries.fArray[]) == 102
size(hep.io.root.output.classes.hist.EErrorType.$VALUES[]) == 4
size(return.fBinSumw2.fArray[]) == 102
size(return.array.fArray[]) == 102
size(return.fSumw2.fArray[]) == 102
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.createProfile2D(java.lang.String, java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "test5"
arg1 has only one value
arg1.toString == "Profile created from Java"
===========================================================================
hep.io.root.output.demo.SimpleHistogramFiller.createProfile2D(java.lang.String, java.lang.String):::EXIT
this.random == orig(this.random)
arg0.toString == orig(arg0.toString)
arg1.toString == orig(arg1.toString)
arg0.toString == "test5"
arg1.toString == "Profile created from Java"
return has only one value
return.fBinEntries has only one value
return.fBinEntries.fArray has only one value
return.fBinEntries.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fBinEntries.fArray[] elements >= 0.0
return.fErrorMode has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORMEAN has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREAD has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADI has only one value
hep.io.root.output.classes.hist.EErrorType.kERRORSPREADG has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES has only one value
hep.io.root.output.classes.hist.EErrorType.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.EErrorType[].class
hep.io.root.output.classes.hist.EErrorType.$VALUES[] contains no nulls and has only one value, of length 4
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType, hep.io.root.output.classes.hist.EErrorType]
hep.io.root.output.classes.hist.EErrorType.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.EErrorType.class
return.fZmin == 0.0
return.fZmax == 0.0
return.fTsumwz == 50564.295906543724
return.fTsumwz2 == 205814.97216125613
return.fBinSumw2 has only one value
return.fBinSumw2.fArray has only one value
return.fBinSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 2.0, 0.0, 2.0, 2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 3.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 1.0, 2.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 6.0, 2.0, 0.0, 2.0, 3.0, 1.0, 1.0, 2.0, 1.0, 4.0, 3.0, 3.0, 0.0, 1.0, 2.0, 5.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 4.0, 0.0, 3.0, 1.0, 3.0, 2.0, 5.0, 4.0, 4.0, 1.0, 0.0, 3.0, 8.0, 1.0, 6.0, 3.0, 5.0, 0.0, 2.0, 0.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 2.0, 1.0, 1.0, 3.0, 4.0, 2.0, 3.0, 0.0, 4.0, 3.0, 6.0, 6.0, 3.0, 3.0, 4.0, 3.0, 2.0, 5.0, 6.0, 1.0, 3.0, 6.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 5.0, 5.0, 4.0, 4.0, 1.0, 5.0, 8.0, 2.0, 5.0, 10.0, 6.0, 9.0, 3.0, 7.0, 1.0, 3.0, 6.0, 4.0, 4.0, 3.0, 4.0, 1.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 2.0, 4.0, 1.0, 0.0, 3.0, 2.0, 5.0, 3.0, 6.0, 3.0, 4.0, 4.0, 3.0, 5.0, 1.0, 7.0, 2.0, 8.0, 2.0, 7.0, 4.0, 6.0, 4.0, 4.0, 6.0, 1.0, 3.0, 2.0, 5.0, 3.0, 2.0, 2.0, 3.0, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 4.0, 5.0, 1.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 4.0, 9.0, 6.0, 9.0, 8.0, 11.0, 4.0, 4.0, 8.0, 9.0, 2.0, 8.0, 9.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 0.0, 3.0, 3.0, 0.0, 1.0, 4.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 2.0, 0.0, 4.0, 1.0, 4.0, 5.0, 5.0, 2.0, 6.0, 8.0, 6.0, 3.0, 6.0, 5.0, 14.0, 8.0, 14.0, 6.0, 13.0, 8.0, 5.0, 8.0, 13.0, 9.0, 6.0, 4.0, 8.0, 5.0, 1.0, 3.0, 3.0, 4.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 4.0, 1.0, 2.0, 5.0, 3.0, 2.0, 7.0, 2.0, 4.0, 4.0, 7.0, 8.0, 9.0, 8.0, 3.0, 9.0, 7.0, 8.0, 8.0, 14.0, 12.0, 7.0, 5.0, 4.0, 11.0, 5.0, 4.0, 7.0, 3.0, 7.0, 6.0, 6.0, 3.0, 4.0, 3.0, 3.0, 1.0, 6.0, 0.0, 1.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 4.0, 6.0, 10.0, 3.0, 8.0, 7.0, 9.0, 5.0, 14.0, 8.0, 10.0, 9.0, 8.0, 9.0, 13.0, 14.0, 11.0, 15.0, 10.0, 10.0, 17.0, 14.0, 11.0, 6.0, 7.0, 9.0, 8.0, 7.0, 5.0, 6.0, 4.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 0.0, 3.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 2.0, 2.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 11.0, 3.0, 9.0, 10.0, 11.0, 9.0, 7.0, 11.0, 10.0, 14.0, 13.0, 14.0, 25.0, 16.0, 17.0, 11.0, 16.0, 10.0, 11.0, 13.0, 5.0, 11.0, 8.0, 6.0, 11.0, 2.0, 4.0, 6.0, 5.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0, 3.0, 12.0, 18.0, 9.0, 12.0, 7.0, 9.0, 12.0, 19.0, 15.0, 12.0, 25.0, 15.0, 21.0, 15.0, 12.0, 11.0, 8.0, 8.0, 17.0, 8.0, 7.0, 6.0, 6.0, 13.0, 7.0, 4.0, 2.0, 3.0, 4.0, 3.0, 1.0, 0.0, 1.0, 6.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 2.0, 2.0, 1.0, 2.0, 6.0, 3.0, 3.0, 4.0, 5.0, 4.0, 10.0, 13.0, 10.0, 9.0, 10.0, 10.0, 10.0, 12.0, 11.0, 18.0, 15.0, 16.0, 14.0, 14.0, 12.0, 20.0, 10.0, 13.0, 20.0, 13.0, 14.0, 6.0, 12.0, 17.0, 9.0, 10.0, 8.0, 9.0, 7.0, 9.0, 1.0, 4.0, 1.0, 4.0, 2.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 7.0, 2.0, 7.0, 6.0, 7.0, 9.0, 12.0, 18.0, 23.0, 15.0, 19.0, 27.0, 19.0, 11.0, 13.0, 24.0, 14.0, 25.0, 13.0, 23.0, 20.0, 22.0, 19.0, 15.0, 19.0, 16.0, 11.0, 11.0, 13.0, 17.0, 10.0, 7.0, 10.0, 4.0, 4.0, 3.0, 9.0, 3.0, 0.0, 4.0, 1.0, 2.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 3.0, 6.0, 3.0, 7.0, 4.0, 8.0, 9.0, 6.0, 12.0, 8.0, 11.0, 13.0, 10.0, 23.0, 23.0, 17.0, 21.0, 22.0, 22.0, 20.0, 21.0, 22.0, 30.0, 18.0, 21.0, 19.0, 24.0, 30.0, 19.0, 17.0, 18.0, 10.0, 14.0, 10.0, 11.0, 10.0, 13.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 1.0, 2.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 3.0, 2.0, 3.0, 0.0, 8.0, 3.0, 3.0, 9.0, 7.0, 11.0, 11.0, 16.0, 15.0, 13.0, 24.0, 20.0, 14.0, 23.0, 31.0, 27.0, 20.0, 23.0, 22.0, 20.0, 26.0, 27.0, 30.0, 19.0, 15.0, 24.0, 16.0, 21.0, 20.0, 17.0, 9.0, 13.0, 17.0, 10.0, 10.0, 10.0, 10.0, 8.0, 7.0, 7.0, 2.0, 3.0, 0.0, 0.0, 2.0, 2.0, 4.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 2.0, 1.0, 3.0, 6.0, 6.0, 4.0, 13.0, 9.0, 13.0, 12.0, 14.0, 22.0, 13.0, 15.0, 28.0, 24.0, 26.0, 27.0, 18.0, 30.0, 29.0, 21.0, 27.0, 24.0, 31.0, 30.0, 28.0, 16.0, 30.0, 24.0, 12.0, 16.0, 18.0, 9.0, 14.0, 8.0, 6.0, 6.0, 14.0, 11.0, 3.0, 3.0, 5.0, 1.0, 4.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 1.0, 4.0, 1.0, 3.0, 4.0, 5.0, 5.0, 5.0, 4.0, 8.0, 10.0, 7.0, 13.0, 9.0, 18.0, 13.0, 17.0, 23.0, 18.0, 19.0, 34.0, 21.0, 30.0, 36.0, 30.0, 24.0, 31.0, 35.0, 39.0, 25.0, 30.0, 21.0, 35.0, 27.0, 19.0, 29.0, 17.0, 13.0, 16.0, 17.0, 7.0, 15.0, 5.0, 10.0, 5.0, 4.0, 8.0, 4.0, 5.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0, 1.0, 4.0, 2.0, 4.0, 9.0, 3.0, 3.0, 7.0, 7.0, 5.0, 8.0, 14.0, 13.0, 12.0, 16.0, 22.0, 31.0, 27.0, 23.0, 32.0, 28.0, 20.0, 34.0, 29.0, 30.0, 42.0, 26.0, 24.0, 36.0, 24.0, 17.0, 26.0, 28.0, 22.0, 22.0, 15.0, 12.0, 12.0, 14.0, 10.0, 12.0, 4.0, 6.0, 8.0, 3.0, 2.0, 3.0, 1.0, 3.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 2.0, 1.0, 2.0, 1.0, 5.0, 3.0, 6.0, 6.0, 2.0, 21.0, 15.0, 12.0, 14.0, 17.0, 10.0, 24.0, 24.0, 17.0, 32.0, 28.0, 25.0, 33.0, 20.0, 42.0, 30.0, 24.0, 30.0, 44.0, 27.0, 31.0, 35.0, 31.0, 28.0, 25.0, 27.0, 19.0, 18.0, 13.0, 21.0, 12.0, 14.0, 8.0, 10.0, 11.0, 8.0, 5.0, 7.0, 2.0, 3.0, 3.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 4.0, 3.0, 3.0, 9.0, 9.0, 3.0, 6.0, 12.0, 9.0, 16.0, 5.0, 17.0, 16.0, 34.0, 25.0, 32.0, 30.0, 43.0, 37.0, 40.0, 36.0, 34.0, 46.0, 36.0, 34.0, 35.0, 36.0, 27.0, 26.0, 38.0, 32.0, 24.0, 27.0, 20.0, 16.0, 20.0, 14.0, 13.0, 12.0, 8.0, 8.0, 7.0, 6.0, 5.0, 4.0, 7.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 4.0, 1.0, 2.0, 6.0, 8.0, 4.0, 11.0, 5.0, 6.0, 11.0, 17.0, 15.0, 20.0, 11.0, 16.0, 30.0, 16.0, 29.0, 30.0, 31.0, 41.0, 35.0, 45.0, 43.0, 28.0, 39.0, 33.0, 42.0, 47.0, 44.0, 34.0, 29.0, 31.0, 33.0, 31.0, 19.0, 19.0, 16.0, 14.0, 11.0, 14.0, 11.0, 6.0, 8.0, 5.0, 2.0, 4.0, 2.0, 3.0, 4.0, 0.0, 1.0, 2.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 4.0, 0.0, 6.0, 2.0, 1.0, 10.0, 6.0, 15.0, 10.0, 9.0, 13.0, 13.0, 16.0, 17.0, 33.0, 21.0, 27.0, 26.0, 32.0, 38.0, 44.0, 43.0, 36.0, 35.0, 45.0, 42.0, 30.0, 30.0, 34.0, 37.0, 27.0, 27.0, 20.0, 17.0, 18.0, 22.0, 10.0, 21.0, 17.0, 16.0, 8.0, 9.0, 4.0, 4.0, 1.0, 1.0, 2.0, 3.0, 3.0, 1.0, 1.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 3.0, 0.0, 4.0, 3.0, 9.0, 4.0, 16.0, 12.0, 14.0, 15.0, 25.0, 26.0, 34.0, 20.0, 36.0, 36.0, 33.0, 29.0, 32.0, 39.0, 34.0, 48.0, 33.0, 40.0, 51.0, 42.0, 31.0, 38.0, 35.0, 28.0, 30.0, 31.0, 21.0, 20.0, 19.0, 16.0, 17.0, 14.0, 14.0, 7.0, 8.0, 5.0, 8.0, 4.0, 4.0, 4.0, 3.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 4.0, 1.0, 3.0, 2.0, 3.0, 8.0, 8.0, 5.0, 4.0, 8.0, 13.0, 16.0, 23.0, 15.0, 24.0, 23.0, 32.0, 25.0, 41.0, 31.0, 27.0, 35.0, 34.0, 39.0, 35.0, 47.0, 35.0, 43.0, 34.0, 35.0, 32.0, 29.0, 36.0, 22.0, 28.0, 24.0, 17.0, 22.0, 17.0, 16.0, 9.0, 13.0, 7.0, 10.0, 10.0, 6.0, 7.0, 1.0, 4.0, 2.0, 4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 2.0, 3.0, 2.0, 5.0, 3.0, 5.0, 6.0, 11.0, 11.0, 6.0, 10.0, 16.0, 16.0, 13.0, 28.0, 25.0, 22.0, 29.0, 36.0, 34.0, 45.0, 30.0, 29.0, 41.0, 38.0, 36.0, 28.0, 38.0, 36.0, 31.0, 37.0, 31.0, 25.0, 20.0, 22.0, 24.0, 15.0, 16.0, 14.0, 20.0, 14.0, 9.0, 8.0, 8.0, 7.0, 4.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 3.0, 7.0, 5.0, 5.0, 6.0, 12.0, 18.0, 11.0, 10.0, 13.0, 20.0, 17.0, 22.0, 23.0, 27.0, 30.0, 31.0, 39.0, 38.0, 44.0, 32.0, 43.0, 43.0, 46.0, 36.0, 40.0, 45.0, 41.0, 33.0, 33.0, 24.0, 16.0, 26.0, 20.0, 16.0, 19.0, 10.0, 11.0, 12.0, 6.0, 6.0, 10.0, 2.0, 6.0, 4.0, 3.0, 0.0, 0.0, 2.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 3.0, 0.0, 4.0, 1.0, 3.0, 5.0, 4.0, 8.0, 12.0, 8.0, 13.0, 18.0, 18.0, 16.0, 18.0, 20.0, 20.0, 28.0, 29.0, 35.0, 36.0, 32.0, 41.0, 34.0, 25.0, 44.0, 37.0, 41.0, 31.0, 38.0, 41.0, 34.0, 30.0, 36.0, 25.0, 24.0, 26.0, 24.0, 25.0, 17.0, 20.0, 12.0, 14.0, 17.0, 6.0, 5.0, 4.0, 7.0, 3.0, 7.0, 4.0, 3.0, 2.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 1.0, 9.0, 5.0, 2.0, 9.0, 17.0, 11.0, 8.0, 11.0, 22.0, 17.0, 20.0, 23.0, 31.0, 27.0, 32.0, 35.0, 36.0, 38.0, 31.0, 31.0, 23.0, 29.0, 40.0, 39.0, 33.0, 32.0, 26.0, 27.0, 22.0, 25.0, 32.0, 20.0, 16.0, 13.0, 13.0, 10.0, 12.0, 6.0, 12.0, 9.0, 5.0, 4.0, 3.0, 1.0, 1.0, 3.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 7.0, 15.0, 13.0, 14.0, 21.0, 20.0, 23.0, 19.0, 33.0, 22.0, 32.0, 35.0, 27.0, 36.0, 31.0, 39.0, 30.0, 36.0, 30.0, 31.0, 33.0, 20.0, 24.0, 32.0, 23.0, 16.0, 16.0, 19.0, 17.0, 20.0, 11.0, 16.0, 6.0, 8.0, 7.0, 7.0, 5.0, 1.0, 3.0, 0.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 9.0, 6.0, 8.0, 8.0, 11.0, 8.0, 15.0, 13.0, 20.0, 14.0, 34.0, 25.0, 29.0, 27.0, 36.0, 33.0, 29.0, 39.0, 49.0, 39.0, 34.0, 27.0, 24.0, 28.0, 29.0, 37.0, 28.0, 22.0, 23.0, 13.0, 18.0, 16.0, 17.0, 6.0, 15.0, 6.0, 7.0, 7.0, 3.0, 3.0, 6.0, 2.0, 5.0, 2.0, 1.0, 1.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0, 2.0, 1.0, 1.0, 6.0, 9.0, 6.0, 4.0, 7.0, 8.0, 16.0, 17.0, 22.0, 19.0, 21.0, 24.0, 28.0, 20.0, 30.0, 32.0, 26.0, 28.0, 37.0, 27.0, 38.0, 40.0, 34.0, 31.0, 18.0, 19.0, 22.0, 32.0, 36.0, 24.0, 13.0, 17.0, 11.0, 13.0, 12.0, 14.0, 10.0, 7.0, 3.0, 3.0, 3.0, 4.0, 3.0, 2.0, 1.0, 1.0, 2.0, 2.0, 0.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 4.0, 6.0, 5.0, 4.0, 12.0, 8.0, 11.0, 13.0, 10.0, 20.0, 15.0, 13.0, 14.0, 23.0, 27.0, 17.0, 22.0, 29.0, 30.0, 30.0, 39.0, 31.0, 20.0, 30.0, 29.0, 31.0, 24.0, 24.0, 13.0, 26.0, 20.0, 16.0, 20.0, 12.0, 12.0, 6.0, 9.0, 9.0, 9.0, 3.0, 2.0, 0.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 4.0, 1.0, 5.0, 2.0, 7.0, 7.0, 4.0, 5.0, 7.0, 12.0, 4.0, 11.0, 10.0, 15.0, 21.0, 26.0, 25.0, 23.0, 25.0, 24.0, 27.0, 25.0, 22.0, 27.0, 26.0, 31.0, 31.0, 27.0, 32.0, 22.0, 15.0, 15.0, 28.0, 18.0, 21.0, 13.0, 11.0, 11.0, 10.0, 7.0, 11.0, 3.0, 9.0, 5.0, 1.0, 3.0, 2.0, 0.0, 2.0, 0.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 5.0, 4.0, 3.0, 5.0, 15.0, 10.0, 9.0, 13.0, 14.0, 15.0, 21.0, 17.0, 21.0, 13.0, 25.0, 35.0, 23.0, 17.0, 28.0, 23.0, 35.0, 26.0, 35.0, 30.0, 27.0, 20.0, 20.0, 21.0, 12.0, 12.0, 21.0, 12.0, 16.0, 12.0, 5.0, 11.0, 6.0, 5.0, 4.0, 4.0, 3.0, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 2.0, 2.0, 4.0, 8.0, 10.0, 9.0, 5.0, 15.0, 15.0, 15.0, 19.0, 10.0, 10.0, 26.0, 27.0, 23.0, 23.0, 23.0, 16.0, 18.0, 18.0, 20.0, 16.0, 18.0, 14.0, 11.0, 12.0, 12.0, 19.0, 17.0, 11.0, 16.0, 7.0, 6.0, 9.0, 8.0, 5.0, 6.0, 9.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 1.0, 2.0, 2.0, 0.0, 8.0, 5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 8.0, 5.0, 8.0, 14.0, 11.0, 14.0, 21.0, 14.0, 22.0, 21.0, 15.0, 9.0, 23.0, 26.0, 27.0, 22.0, 21.0, 16.0, 17.0, 16.0, 24.0, 13.0, 11.0, 10.0, 14.0, 11.0, 12.0, 8.0, 9.0, 9.0, 5.0, 6.0, 7.0, 6.0, 5.0, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 2.0, 6.0, 3.0, 5.0, 7.0, 7.0, 9.0, 7.0, 12.0, 14.0, 12.0, 13.0, 15.0, 11.0, 23.0, 18.0, 21.0, 14.0, 16.0, 16.0, 16.0, 18.0, 16.0, 14.0, 12.0, 19.0, 18.0, 14.0, 17.0, 11.0, 11.0, 5.0, 6.0, 5.0, 3.0, 8.0, 4.0, 3.0, 3.0, 1.0, 4.0, 3.0, 1.0, 2.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 4.0, 6.0, 1.0, 3.0, 6.0, 5.0, 10.0, 12.0, 9.0, 4.0, 6.0, 13.0, 10.0, 9.0, 11.0, 14.0, 13.0, 14.0, 21.0, 9.0, 18.0, 14.0, 22.0, 15.0, 19.0, 21.0, 10.0, 16.0, 17.0, 14.0, 11.0, 14.0, 10.0, 7.0, 8.0, 5.0, 5.0, 4.0, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 0.0, 3.0, 2.0, 0.0, 4.0, 3.0, 2.0, 3.0, 3.0, 7.0, 8.0, 11.0, 8.0, 7.0, 15.0, 18.0, 11.0, 10.0, 15.0, 16.0, 14.0, 16.0, 14.0, 16.0, 17.0, 13.0, 14.0, 8.0, 15.0, 7.0, 10.0, 11.0, 8.0, 7.0, 4.0, 5.0, 5.0, 2.0, 8.0, 1.0, 5.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 4.0, 3.0, 4.0, 4.0, 10.0, 9.0, 6.0, 5.0, 7.0, 6.0, 8.0, 6.0, 10.0, 10.0, 13.0, 7.0, 7.0, 20.0, 10.0, 12.0, 8.0, 11.0, 18.0, 3.0, 9.0, 6.0, 9.0, 12.0, 6.0, 6.0, 10.0, 3.0, 2.0, 1.0, 2.0, 7.0, 1.0, 1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 2.0, 3.0, 4.0, 4.0, 3.0, 6.0, 8.0, 3.0, 7.0, 1.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 12.0, 13.0, 6.0, 2.0, 11.0, 13.0, 3.0, 6.0, 10.0, 9.0, 5.0, 10.0, 5.0, 5.0, 2.0, 7.0, 3.0, 7.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 4.0, 0.0, 3.0, 2.0, 9.0, 10.0, 4.0, 5.0, 5.0, 7.0, 3.0, 9.0, 4.0, 6.0, 8.0, 5.0, 13.0, 10.0, 10.0, 11.0, 10.0, 9.0, 8.0, 6.0, 8.0, 6.0, 5.0, 1.0, 4.0, 5.0, 4.0, 3.0, 9.0, 2.0, 3.0, 2.0, 4.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 3.0, 2.0, 4.0, 3.0, 6.0, 7.0, 4.0, 3.0, 6.0, 5.0, 5.0, 4.0, 6.0, 7.0, 13.0, 9.0, 12.0, 9.0, 6.0, 11.0, 6.0, 9.0, 10.0, 4.0, 7.0, 4.0, 6.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 6.0, 1.0, 3.0, 4.0, 2.0, 3.0, 4.0, 2.0, 6.0, 2.0, 6.0, 3.0, 3.0, 4.0, 3.0, 6.0, 5.0, 5.0, 6.0, 2.0, 4.0, 11.0, 2.0, 4.0, 3.0, 4.0, 3.0, 3.0, 7.0, 2.0, 2.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 3.0, 0.0, 3.0, 4.0, 5.0, 2.0, 0.0, 4.0, 7.0, 5.0, 2.0, 3.0, 4.0, 5.0, 2.0, 2.0, 3.0, 8.0, 7.0, 6.0, 4.0, 1.0, 3.0, 5.0, 5.0, 3.0, 4.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 5.0, 3.0, 1.0, 2.0, 4.0, 2.0, 3.0, 4.0, 1.0, 4.0, 2.0, 2.0, 7.0, 6.0, 5.0, 4.0, 4.0, 7.0, 5.0, 5.0, 8.0, 2.0, 4.0, 9.0, 1.0, 2.0, 2.0, 2.0, 3.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 0.0, 2.0, 4.0, 2.0, 4.0, 3.0, 0.0, 3.0, 5.0, 2.0, 2.0, 2.0, 3.0, 6.0, 7.0, 5.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 3.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 4.0, 1.0, 5.0, 2.0, 1.0, 1.0, 5.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 5.0, 0.0, 2.0, 2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 2.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 2.0, 2.0, 3.0, 3.0, 1.0, 0.0, 1.0, 1.0, 1.0, 4.0, 2.0, 6.0, 1.0, 1.0, 1.0, 4.0, 0.0, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.0, 1.0, 0.0, 3.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 5.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 2.0, 2.0, 0.0, 2.0, 1.0, 1.0, 3.0, 3.0, 4.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 3.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fBinSumw2.fArray[] elements >= 0.0
return.array has only one value
return.array.fArray has only one value
return.array.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.151028123703474, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.012759753512402, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.681936821208858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.612820927058063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.64639262270028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.545979200264732, 0.0, 0.0, 12.589831714321223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.091712536511322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 27.56630889117372, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.351343068831618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.490299185567906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.242612410653873, 0.0, 0.0, 0.0, 0.0, 12.075212610252933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.066799537576758, 0.0, 0.0, 10.280555669947859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.790391435605267, 10.423856307928476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.9369263729455, 0.0, 0.0, 23.262056086117163, 0.0, 0.0, 0.0, 10.651747659769613, 0.0, 20.39944794644649, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573084377711075, 0.0, 9.526617923534774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.232762854009238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.342527158783454, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.417249728269223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.34172074663722, 0.0, 0.0, 0.0, 0.0, 0.0, 17.29513314462019, 8.692818883274393, 8.847931243110647, 0.0, 17.65989963487231, 0.0, 0.0, 0.0, 18.03513374801036, 0.0, 0.0, 9.086299442539316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.489500223482123, 22.80641919796369, 0.0, 0.0, 0.0, 0.0, 9.680809793808322, 0.0, 0.0, 8.743195527851832, 0.0, 0.0, 8.718413863146377, 8.263676297011674, 0.0, 7.978770386728844, 7.981920417297848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.309403305206159, 0.0, 0.0, 0.0, 0.0, 9.37599990942439, 0.0, 9.889192867482771, 0.0, 10.562936174133187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.005439464085681, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.927642481192024, 0.0, 0.0, 0.0, 7.989013398374343, 0.0, 7.681575182328425, 15.20002885872729, 15.196938512091329, 0.0, 15.180228018078765, 15.47683888668726, 7.767125058422698, 0.0, 7.89788359010507, 8.053871683093993, 0.0, 0.0, 0.0, 8.913805074646667, 9.078008180920396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.026470625743194, 8.612757536038869, 0.0, 0.0, 8.321707217595863, 8.06853749073534, 7.985489482872646, 15.520561199689848, 22.701264579578947, 14.537262903755082, 6.997578773864635, 7.311134412142829, 7.122121349340881, 0.0, 7.231603311219376, 14.330610525428481, 7.017943611888129, 0.0, 0.0, 7.186141093412695, 0.0, 0.0, 14.852955840868253, 7.491375692692493, 7.851652255501328, 16.48498783083202, 0.0, 8.564327082297401, 0.0, 9.03182434532951, 0.0, 9.60867095425293, 0.0, 10.563927958953386, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.773928149149192, 0.0, 8.704927607512353, 8.545403949789323, 15.833327609320783, 0.0, 7.4297441266494655, 0.0, 7.050723388072662, 7.202658284097668, 27.55861328208682, 20.29122150262875, 26.280590096476004, 19.647500908890116, 19.252313951345045, 6.579459901997518, 13.09502607652561, 19.614139142763843, 6.56849454273755, 0.0, 6.622623263914875, 6.804673958688036, 7.016148816073956, 0.0, 6.76748917715574, 7.169280242572633, 7.370544387561287, 0.0, 0.0, 7.770271992129442, 0.0, 8.798449267847896, 17.358240702534808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.47331098050136, 0.0, 0.0, 8.219076611433781, 0.0, 7.822550123520514, 7.2932602660559205, 0.0, 13.923649511184376, 21.002395196323924, 0.0, 6.51025461116749, 13.072693346340152, 12.26503463546263, 6.051221905994785, 5.988157148461539, 12.201550594514062, 11.847069768698876, 5.79976351461581, 12.168684375205473, 6.2812130416583765, 17.91770671504996, 5.930927742299192, 12.602755826852302, 12.571000737409406, 19.512334976541556, 26.56958710185711, 6.447810026054565, 13.89130619259359, 0.0, 7.420049456399666, 7.457783034095535, 0.0, 16.18115799633466, 0.0, 0.0, 9.184948161180024, 0.0, 9.820947376905872, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.601751490580206, 0.0, 8.619835442883831, 0.0, 0.0, 7.704277911761815, 0.0, 0.0, 6.7745169941140055, 19.91044964460032, 19.22900324364384, 37.462197050260755, 12.37736876374272, 0.0, 11.828484548912478, 17.050476551088888, 5.697977482262445, 5.529902718918871, 11.020828191951388, 5.634199719455201, 22.151650486266906, 16.623235622428822, 16.899632090604968, 0.0, 5.64845792819083, 11.438157845293786, 30.20024509276573, 5.951843570163286, 18.799282411924256, 12.831204317227094, 13.398468577448355, 6.673855858028027, 0.0, 14.689130644792343, 15.120495123073047, 7.865546792420641, 8.172600747290437, 0.0, 0.0, 9.304580643818516, 19.492258165703284, 9.71232809638491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.116186552816862, 8.0668941439689, 7.415842162134676, 7.13993248336044, 13.75367137973485, 13.114396701767353, 0.0, 18.389579019598617, 23.34795401294593, 0.0, 16.7045141514584, 5.664415277106654, 16.313773047560353, 10.612662529219657, 26.156812699001225, 20.432887345313837, 20.568507268136713, 5.2664697544432775, 0.0, 15.366468374101885, 40.34386650685221, 5.311751041361426, 31.659086332169004, 16.32115660929363, 27.61547254350318, 0.0, 11.31053585392776, 0.0, 18.600683725478305, 19.092240843282106, 6.5792976389282805, 0.0, 7.287229994019377, 7.2932986783600615, 0.0, 0.0, 0.0, 0.0, 0.0, 9.820682133866626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.990386769573377, 0.0, 0.0, 8.35172364500591, 15.752868351376708, 7.97992950518257, 0.0, 0.0, 13.63344876484517, 6.451182958903727, 5.9685937916202825, 17.76098713231086, 22.79510577987169, 10.831621910295997, 15.954808687585725, 0.0, 19.837441410948365, 14.756181429722123, 28.8724108034041, 28.05760936105202, 14.134009791790266, 13.87528498734131, 18.883945093500042, 13.541587097726795, 9.447574285405619, 23.709024479519712, 29.154288948995113, 4.768360999694632, 14.348613133681338, 30.413123962492225, 10.039956233221796, 10.258492201459584, 0.0, 11.37241044329036, 0.0, 6.426311299076059, 0.0, 6.495091045234012, 0.0, 0.0, 7.739501060882492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.991435063222868, 9.970217891723696, 0.0, 0.0, 17.833113318611737, 8.483219154802509, 16.08564355943179, 7.667684423529968, 14.574594796276003, 13.834492908767043, 6.395278555260388, 12.361583027633058, 0.0, 11.311986973737882, 0.0, 10.710862004335212, 25.501696692545035, 24.78897969721473, 19.454895789129935, 18.656742015892647, 4.585653490712714, 21.961028069953436, 34.57138169388268, 8.730939871897338, 20.66708756081994, 41.97163206868673, 25.111468892134507, 37.94404067187976, 12.404542322927824, 29.98454665287755, 4.573411638440274, 13.351125029366912, 27.586458577818043, 18.661364636577424, 20.00599579108919, 14.995793694469539, 21.381263810936197, 5.457371881541051, 16.970461431241652, 6.006795558414911, 0.0, 6.597608872021967, 6.662830606941564, 7.213760272478696, 15.278434387724184, 15.83025304054901, 0.0, 0.0, 9.350111575426293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.483116603200756, 12.040786329036107, 11.180464216270632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.506149909701286, 14.130325557704492, 0.0, 0.0, 12.623119605517639, 23.886373380474176, 5.747618696227826, 0.0, 15.50830756853781, 9.612962719552229, 23.929825109039715, 13.520949867106209, 25.821557013371866, 12.639887341795681, 16.563405216858182, 16.298122945238525, 11.753023207548939, 19.38937086781055, 3.9333826761690447, 26.988096257248746, 7.716919602010264, 30.817045157613855, 7.535017439448509, 27.464277618996306, 15.808518281110441, 25.056882073783278, 17.22491855486352, 16.970692098435876, 26.827882331915667, 4.76410488680787, 14.537627816414478, 10.334933164742775, 26.50281145207024, 17.023969990761408, 11.808218794191085, 12.092746265483623, 19.346562027019974, 27.84491836483643, 14.26082762846275, 7.307391312602476, 0.0, 0.0, 9.1693308484301, 0.0, 9.555996214599844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.782708147554146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.940472912778905, 0.0, 0.0, 7.4457218673168875, 0.0, 0.0, 11.990509811158486, 23.43182824011405, 0.0, 20.87267062762542, 24.591473625290277, 4.550523352168579, 13.915039728466333, 13.217303279083508, 24.413447804181914, 8.340536289406142, 19.221064030294166, 7.253501011150695, 14.215221126140513, 31.71442570300443, 20.532608867748287, 30.800437970029524, 27.329199314441112, 37.85178098795286, 14.016492908641515, 13.555016065391673, 28.44228918149635, 32.730353444229706, 7.686515358845656, 31.47193006798544, 35.80450427239423, 12.254926459496753, 17.084765977485436, 13.715362532289042, 14.126876605329882, 9.920911771141526, 9.985467171260527, 0.0, 17.46434470441563, 18.55536800485455, 0.0, 6.66513169853516, 29.272651915996725, 0.0, 7.863535006474621, 8.204926741891985, 0.0, 9.607314753152645, 9.687861135699645, 10.518059126267081, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04139318108135, 0.0, 0.0, 0.0, 7.679996035389319, 0.0, 6.819193232491305, 25.812146088825095, 12.46688411541945, 0.0, 21.73230376349418, 5.361255820056245, 19.035682010343322, 23.30322715808078, 21.995210901879148, 8.089831790067658, 23.714719035305762, 29.85495288654129, 21.915837983586705, 10.665438083482204, 19.886638204906603, 16.21508517738812, 44.380827064079156, 25.03140846724543, 43.53670995917351, 18.451798041356806, 39.571604800178775, 24.750327367434714, 15.359342242424153, 25.16021714652994, 42.740647635596005, 30.66614846252848, 21.046606992033567, 14.237220878677746, 30.04956024977756, 19.48088417164439, 4.128367502630757, 13.118012954167735, 14.135978913437642, 19.396277152801385, 5.160733113074151, 11.187033317852066, 17.563589209697344, 11.911975271429062, 13.072091067908229, 6.744643287466357, 7.320337556813292, 7.448865862333962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.476919425657906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.90771325974671, 12.862989157165712, 24.47417865148239, 5.7394917487161665, 10.931620425620885, 25.724936213853972, 14.27746424771829, 9.128981034106243, 29.970825617290505, 7.928801542270209, 15.335208137581958, 14.656045381118332, 24.048630407973675, 26.383198612970645, 28.17169428557682, 23.907528921527174, 8.99311061561986, 26.318692222833885, 19.661390867916232, 22.07101495822213, 21.76750288940249, 37.48054692826017, 32.958848990834184, 19.380176474654384, 14.349552287296135, 11.50097503076284, 32.87788415624407, 15.602023569131584, 13.115287220208733, 23.950071857753215, 10.39987304376072, 26.742655998562693, 24.401689119595854, 25.677369856330316, 13.641902126744895, 19.205445018658374, 15.414304059357187, 16.632151210635516, 5.811712225817974, 36.894094151248915, 0.0, 7.122897670413621, 7.365303235982192, 0.0, 24.448560340553463, 0.0, 0.0, 0.0, 0.0, 10.722785063088995, 0.0, 0.0, 0.0, 13.150585135755565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.04576932714837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.556134570852558, 22.97736618305438, 0.0, 0.0, 10.120451108531162, 0.0, 0.0, 0.0, 15.922195209245732, 7.76633911120967, 7.08758638899117, 6.910137111795205, 0.0, 5.773286528567786, 21.45970864421321, 20.42937365831101, 28.84725082983361, 45.270779793573496, 12.273628557523594, 31.37739643338275, 26.239116573567053, 31.292306776885468, 16.780273411807137, 43.4669007102765, 23.346199283847504, 27.933237775700196, 24.571631859350322, 20.74731848837061, 22.547077028625715, 31.401823525394583, 33.47755922371345, 26.027541488894002, 36.23384988661514, 24.131499455464642, 24.231593658222533, 43.66031235997703, 35.95547900792143, 29.139754897695283, 17.0799632762686, 20.613886746830104, 27.53310970611963, 26.362722665469708, 24.724582101113402, 18.55862707634531, 23.48144003527003, 16.570995906067505, 4.630287130639889, 9.608837088918744, 10.285345083055995, 10.906572067274187, 11.643662019290627, 12.271344917431167, 19.810925225668672, 14.241663316390051, 14.929759690676327, 15.695042471728087, 0.0, 26.820411551537397, 0.0, 19.811518614885955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.022023558427186, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.15345370136755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.796436018153734, 21.551582221884694, 13.398034666260086, 12.834207357327664, 5.950772163747547, 16.47952801106808, 15.355527738329924, 9.662380259953462, 8.976689136802005, 8.336311490155321, 43.111238779465175, 10.846510796044814, 31.443554923393396, 32.32951346449266, 33.08905632440246, 25.73690590502669, 18.855982321670336, 27.717733384154528, 24.16929555817104, 32.5773765661032, 28.875864402885934, 30.109104676807757, 53.278984395609264, 33.57482383387074, 35.911543088040325, 23.479736815072826, 34.49558552403765, 21.790999029279252, 25.367013566059992, 31.15862106950175, 12.4655636072286, 29.401588726526803, 22.595988317861472, 17.76320434261981, 35.147602342897564, 7.047663629974897, 14.851308731178436, 22.93874773002458, 20.846927603410798, 35.92413543146813, 9.856992750796834, 26.014774396997435, 16.708200622578445, 5.91250686625941, 6.094773705194124, 13.65034808799021, 7.0995314770451134, 7.711078461819014, 0.0, 0.0, 18.26579678701703, 0.0, 0.0, 0.0, 0.0, 12.359698002117668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.964607469119809, 0.0, 7.6886918812441, 14.860254539868356, 6.976141102920844, 12.809381729086812, 11.99363081089334, 5.683204032800376, 5.293444129804888, 9.766316246613965, 18.0540722179363, 25.48881842962269, 31.492467007142423, 36.781804465178006, 10.192793725062742, 37.63592469734482, 52.51845414574255, 24.53188250031553, 30.80555497984603, 16.849000131686815, 20.724665206650165, 25.73529748784714, 38.45288670030334, 28.334910937104333, 22.340004059894977, 45.91259430806845, 27.720904889787015, 37.72586365451012, 27.512800076114186, 22.438005457199388, 20.56945826956743, 16.516631363170575, 16.788579492849966, 38.374224557050944, 19.33635789797816, 17.768220109035358, 16.445989253141278, 17.46079076651872, 41.15383429648058, 23.305221356835848, 14.615548722438756, 7.844331933201617, 12.824777798776122, 18.363218107192505, 14.665825942474022, 5.074958239527188, 0.0, 5.866074866328307, 38.83120551129576, 7.183894615979856, 14.84508794641026, 0.0, 25.14758294659083, 8.875197300892273, 0.0, 0.0, 10.878229570287653, 21.964473114016513, 11.518517839556045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.574015544442185, 0.0, 0.0, 9.11151429676485, 8.356683857496353, 0.0, 7.3270838321200396, 14.261808814172884, 13.421308132469473, 6.244232570997385, 11.714424035884733, 32.125209327278185, 14.83892125798872, 14.06874203873872, 16.888778836997684, 19.99232639067638, 14.620830475612411, 33.69558173290923, 40.73165829428086, 29.050048517421573, 23.165056807524696, 23.71211523321662, 22.37688670562641, 21.03142649361996, 23.689173722357683, 20.063032741816322, 31.666729454891883, 25.420353773460835, 25.65169917253989, 21.929561143419402, 22.30029019152261, 18.623563216101722, 31.843425378163687, 16.316089453413237, 22.291786733688895, 35.47514324446663, 24.473620206848004, 28.195112600483174, 12.985256358808796, 27.125414175199253, 42.11214153792393, 24.068947960789096, 28.733764533688472, 25.06667561046921, 30.475170007768504, 25.587114733311644, 35.35597928492604, 4.285935027393695, 18.95462592629335, 5.0907016172195085, 21.164117204942812, 11.774172422504183, 24.56478749447784, 0.0, 0.0, 22.821147710717206, 15.99639378783933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.954916077914868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.246046199047326, 8.94973608372984, 0.0, 0.0, 7.42989212683968, 6.599999809246023, 19.180720346691984, 23.752837821785107, 16.076538022934674, 20.673309354361145, 37.74737023100879, 17.771009091942325, 28.059977734548458, 7.4728345709363175, 23.772638828792445, 18.734339509116424, 20.18013875910607, 23.597244080308887, 29.477771900171682, 39.80824220649606, 46.91671344950455, 28.775357544630623, 33.18960136826902, 44.21887204355408, 29.412825335156707, 15.750468297975614, 18.042621342213682, 32.230842541485316, 18.148540268537317, 33.02792326714657, 17.114814366727323, 32.072166428204746, 29.182048172028818, 33.28375778085775, 30.399377018593658, 26.01173673572661, 36.13955567126747, 32.62081090797904, 24.313403602106057, 27.11236882793153, 34.26377707489031, 49.695698562605024, 31.645729249364834, 24.127026671275853, 37.05470761037043, 15.746148844964974, 17.819834952333252, 14.372499920014992, 45.43824826849321, 16.312505449731297, 0.0, 25.220948521624607, 6.846478248060821, 14.79749740024302, 7.80562343724356, 16.982793702834115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.52228746592777, 0.0, 0.0, 0.0, 0.0, 0.0, 8.540067799232546, 0.0, 30.257948157261456, 7.212233811275606, 20.08396088169154, 6.291449070927884, 11.849876469825134, 15.74421928079018, 29.741011224212773, 13.689950640342111, 29.289786654259295, 15.40918492245064, 28.07336489192981, 28.827708166768872, 18.00177134527761, 31.855474376769287, 19.205208771284763, 24.67101297824654, 26.57557714848147, 17.81999432798259, 38.43591880235796, 35.4368531533444, 24.075909731127787, 27.88566924616586, 26.901812703028412, 25.788582121037045, 23.037205010570233, 22.74691837048768, 23.920974801905533, 33.77037759576947, 20.731294666013937, 25.62946352312456, 24.727090379168995, 33.869342097722246, 45.58365101244769, 31.07312213299972, 31.16149587052966, 36.29877277484718, 21.896090980162963, 34.202141725993215, 26.112962772640078, 32.18315286763007, 32.1247435940665, 45.15760554627489, 15.29227275993207, 8.281952493167022, 17.968647833239267, 9.754980424324675, 25.99925346982152, 11.60552487920081, 12.385500818750945, 6.51107732792252, 14.194338617617412, 0.0, 24.42399377487142, 0.0, 0.0, 0.0, 0.0, 0.0, 11.906849645878953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.593209290963756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.339517935026437, 0.0, 14.619520859973282, 7.04922768497222, 19.449318588379285, 11.975784396485196, 16.197158154786358, 0.0, 37.09352788870528, 12.990628071246677, 12.115914005806316, 32.93232952007431, 22.948874730785843, 32.704500504562894, 29.717825083863694, 39.2668372771025, 33.06769499274013, 25.806969311584805, 43.82427514127488, 32.935339613196646, 20.198405747655013, 30.319704694685132, 37.1811074436142, 29.730245967569452, 20.038208827967892, 22.21160253968355, 20.392035527793993, 17.781727887508612, 23.252025163853304, 24.76786720107023, 28.95736400620029, 19.386934385089827, 16.71676433056758, 29.12760123901485, 21.106250139854037, 30.72630471104298, 32.891269520958396, 30.048770262144895, 17.78253292985094, 27.72075057535836, 42.41787726623684, 27.19806341078344, 29.654779281936463, 32.62793262360806, 36.03642872893782, 31.416217084552585, 30.329389830545537, 32.887156553912256, 10.08477358241899, 16.58223445375397, 0.0, 0.0, 13.935872148504071, 14.704284885177822, 31.92649460817625, 0.0, 8.75117701454365, 9.951520196267419, 0.0, 0.0, 11.163142250366644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.900428282335636, 10.118933485198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 30.989143556206994, 17.62598030011264, 10.629733841984182, 5.045498494672866, 13.48908112081962, 24.630928456606725, 23.341676043323147, 13.498507742296136, 41.05270491631667, 25.4438308374419, 33.34006660880466, 27.186772892939747, 28.15801642323244, 40.268265087105945, 21.147046915635435, 21.64619226320122, 36.05927500316296, 27.64550897048044, 26.916119479841402, 25.02228079748444, 15.325888697384766, 23.70874865331386, 21.592668495179726, 14.671778797823212, 19.16065030543864, 17.742594463363588, 24.050839333433913, 25.17043063493164, 25.632836239365517, 16.344288404526694, 34.79666540815366, 30.919400647181803, 17.694199094735996, 26.205286506954774, 32.118936532224595, 18.375444280048995, 31.797669630038804, 20.24542740023844, 16.698123929929295, 18.35781774951042, 48.268657081237016, 41.2375759942298, 12.329196457471713, 13.511242974371472, 24.677654416605115, 5.341430819105314, 23.634951475049306, 12.825443914144143, 13.610177002537656, 7.173830504344104, 8.008273537513872, 16.497570751931878, 8.852790450655238, 0.0, 30.245505709400117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.1729112484884, 0.0, 0.0, 10.863432737155124, 0.0, 9.726804592093233, 9.34234199608807, 16.93717960042091, 0.0, 0.0, 6.870812325542281, 26.579872427710754, 5.999725512688793, 17.085241387506883, 20.897592048600163, 24.162049901246267, 21.876706109904568, 20.10903932845201, 14.519427115975239, 26.264225802863102, 29.49607103783366, 18.500699569316808, 31.11712761718693, 18.99253531235623, 33.85882016215605, 21.748072381317776, 24.932309386896108, 29.56568683093075, 20.297313970535992, 18.84613813597381, 29.54366968194033, 16.265026698037463, 21.270112419652637, 22.594468698656737, 17.421783659122127, 13.429579392624017, 17.20445194433063, 20.203170089065303, 24.234834920897423, 16.97724800417629, 23.287274710506257, 18.137157295741527, 34.30550279093998, 30.30825321209848, 24.14720425144345, 41.64814659611398, 27.695405451111743, 25.087623206112724, 33.55076972578813, 40.16904305385777, 18.864181879237897, 44.40498649225306, 16.92285251478536, 35.841746968272886, 19.89778029687176, 17.51791800185739, 38.52391469222232, 20.456222046711265, 28.19398168879031, 0.0, 13.196355889819785, 0.0, 7.570609453917466, 8.37031986518012, 0.0, 0.0, 9.75789380569095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.09847484622628, 16.56286122542545, 0.0, 14.87795652143199, 13.80223626733621, 6.307013326936365, 23.3520964979759, 10.694398461785992, 20.301999042674822, 41.749155543890225, 12.874577097648523, 11.66822681226225, 23.868336616005113, 21.794913375487027, 14.335921014281999, 20.189126232113267, 31.477757843592588, 25.978943799896147, 21.24821921543203, 24.45603603611372, 29.96486154118728, 35.307616781234366, 26.9118852545783, 19.594140922902408, 23.454712201946116, 17.499408620572837, 11.445261383942771, 16.447589985346177, 12.502207247779626, 12.643602337589265, 18.313281952071073, 11.935191906527022, 11.891782196965547, 19.51434742842991, 15.041333405353047, 12.394541017171129, 21.827834734643936, 27.674876958406028, 25.215905475911814, 29.068671831912567, 22.80733843096617, 20.953465076838448, 23.856823151499707, 31.361202069998054, 25.276303981884308, 33.52771248718702, 12.491719267755393, 20.8752584724292, 31.02279806710608, 12.858451044368685, 9.602504520459696, 15.130873495431477, 5.260878439228097, 17.933437612586644, 0.0, 6.97439804596437, 7.317914835005864, 0.0, 8.682487002464029, 0.0, 0.0, 10.04139938325669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.660062848437516, 0.0, 10.384895989454993, 9.405736387338546, 8.926417087603719, 8.451404220046127, 0.0, 0.0, 13.588253647570662, 6.276711372643475, 11.484078861180178, 5.264945426062222, 24.8288998262306, 13.256175252432161, 24.271691038850275, 22.38838747507508, 6.8309727458550595, 63.26699362221367, 40.93186949662144, 29.015967733053564, 29.83891964015259, 32.15348034004717, 16.177421258348854, 33.94655415362633, 29.164376317045317, 17.521157591257108, 27.534631930441854, 20.08259939172489, 15.37613828409366, 16.667154691807898, 8.494349109073115, 15.517015231128028, 9.834948071680413, 7.135722991084876, 9.099423788309204, 14.773084806437177, 10.337221783467085, 13.3075380735109, 17.662416289870755, 18.993715852201642, 20.331092094669607, 21.50732491044815, 27.826676278751425, 22.416717840645177, 25.037689737083692, 21.098340742064643, 39.28305704229571, 25.165166925534574, 33.63610625352512, 21.945932767176295, 30.10478445547885, 36.981154891558205, 30.308243674741952, 20.385717333614444, 30.962832277600686, 10.177646036414643, 16.22638407126172, 17.471850409167104, 12.70942466019914, 0.0, 7.487863349797882, 0.0, 8.491678989151088, 0.0, 0.0, 0.0, 22.29897465687943, 11.312478500200546, 0.0, 0.0, 0.0, 14.126411949369867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.209949042624226, 0.0, 0.0, 0.0, 9.533668820163026, 9.084714349888705, 8.218335307016474, 7.995540259254436, 7.134863694528537, 6.679887342335205, 0.0, 5.9361202252478185, 21.626235362861397, 14.841360244705657, 13.133029276410108, 36.2628278145881, 32.71706944051127, 9.425301028739263, 17.48955863658477, 32.22694808778863, 20.684410391625544, 32.64331019447755, 8.843922318184914, 26.117829572862163, 20.53158368385214, 37.60348800254891, 23.293973248134836, 24.386190613327567, 18.919769290266082, 21.81540962762764, 15.356185853897838, 13.386702846462073, 9.512492591443054, 7.863576728375129, 9.020607950213325, 7.529490006997773, 7.808285170587875, 9.167136900039186, 11.57742795168149, 10.973480947344488, 13.0186419113996, 23.90663198490636, 24.358819181512104, 21.858818263197517, 30.187873058405582, 26.266083042151088, 23.999296600432988, 35.50874669815096, 28.369756564845225, 29.777226470112225, 31.23989430569485, 22.910138349448662, 26.10478666825387, 24.841143791799297, 23.77044143840864, 21.87525625403014, 19.42074503302156, 36.8331041715542, 5.547081207334782, 6.113066038349138, 6.487639473512662, 0.0, 0.0, 8.21403150243872, 17.384291628849958, 0.0, 0.0, 0.0, 0.0, 12.194288447342037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.240829941900742, 0.0, 0.0, 0.0, 9.008795660689978, 0.0, 0.0, 7.036009850550751, 13.352664274491948, 24.5142285937528, 5.46490162427025, 10.486215499936959, 27.87921178570216, 34.547459160587835, 15.642785590767186, 39.04487652341257, 15.953104969037929, 17.314263036309278, 28.272714258295697, 37.9465992648494, 29.448586689375524, 33.74830706248044, 15.814851422515694, 19.412036160087247, 30.73279972398328, 13.562448795187104, 19.956239980555818, 16.252149307333468, 13.309350269195354, 13.361819468711863, 8.802206888123395, 8.528870216408956, 6.330075599341857, 3.5035969759905057, 4.782820912579143, 4.672907474666917, 7.984633363376749, 11.651762653911804, 14.295360093688394, 14.758953724114933, 15.665978931372747, 20.97544780216645, 28.331681912768662, 31.620400526862234, 23.304010392121548, 27.56918350990958, 27.159582209442384, 27.716635104802837, 24.44205713326356, 35.2184047247206, 31.473085596370368, 18.90761493719862, 28.034064439377918, 19.628585243186052, 8.965942769598179, 18.67653595629754, 10.178145409221711, 16.649348189560317, 23.99408316677318, 0.0, 7.093891995822983, 15.51095731989691, 8.192960899023621, 9.132056556042752, 0.0, 20.41138287520834, 0.0, 0.0, 0.0, 25.706229751392144, 13.258862743016328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.153388954807903, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.176376887414247, 19.28077513226412, 6.190116119679766, 22.495950899932556, 0.0, 28.067534473739144, 8.242902636820515, 3.704658301664674, 34.42903013985756, 18.931032567718646, 41.499885574270046, 24.61843488908081, 19.644766202945018, 24.661929557467616, 20.876112728740452, 22.27156103502256, 19.786343518965587, 31.94271543131465, 16.555342637544868, 16.74949136754696, 12.569840203835044, 11.554769782438143, 10.245582892013868, 8.114634734866021, 5.6915159705524605, 3.238383169892228, 2.3961351046541775, 2.9616152709024433, 3.419553373207075, 3.7562625213041767, 5.544227288307424, 9.0302290635342, 13.65549197608733, 13.348570450325505, 16.645822464458128, 15.647017055613782, 16.40861396377346, 21.113155261792574, 30.558314098174954, 15.988128686432553, 39.242702281731546, 36.38863769118388, 39.75817127026018, 22.729017341011648, 28.157450875664605, 13.64532738351466, 15.436020033300487, 4.334505572008058, 4.5946345071657575, 10.34385004575449, 16.77140625282386, 18.493602448405774, 6.483621982514807, 6.908763021294441, 15.20911157037958, 0.0, 8.973075573438498, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 18.336047529741744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.537346411869393, 0.0, 9.63848260533677, 8.8458673051159, 16.258218263743018, 7.63007562799824, 6.844356944241978, 6.367080087376393, 5.939210062220921, 0.0, 15.156958663182998, 0.0, 17.131012158720853, 11.281711194096442, 31.175011535809478, 11.92039221351031, 43.619104219750234, 29.654318795729214, 30.146144768606298, 27.589294632958115, 39.30235513346173, 34.24808410677397, 38.44190133516287, 18.452486149528365, 27.42550741847295, 21.864971991804218, 14.924038845582016, 9.650230295078927, 7.280483599160583, 5.644615962538039, 2.8706101832672073, 2.124680767188776, 0.8525381817301357, 0.9785113320242633, 2.27502375300581, 3.6563097254041805, 4.631194448625679, 8.70234300636644, 11.332305125625066, 12.362251977025645, 17.10588741740762, 23.123651492334563, 20.081394280595152, 22.528065801328584, 25.891958047442568, 25.477385326338183, 31.76905621342602, 30.870294733524894, 33.996751255657216, 19.16446494484049, 24.50381307919716, 17.468214778303057, 30.485791202773516, 17.028182346814802, 18.70141782832851, 20.347807868573433, 16.6436820557395, 6.046226430109846, 6.474595248113848, 13.894465139299468, 7.323519486122109, 7.85911539704611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.492983448821272, 16.01133363319159, 7.465178781190943, 6.893940873081953, 26.248618033670745, 5.824367650728496, 16.217603785378703, 10.075421314133731, 13.889499365629959, 32.91622559195817, 30.561608073216682, 16.938400262244077, 12.325165382963824, 21.799711825804224, 31.747091316269067, 33.88696682861894, 41.74267161009685, 23.63246194206969, 31.761594705485198, 25.335644122125014, 28.926288305398877, 18.039970133700027, 23.00720290642688, 13.098634377903416, 8.64324134118583, 7.079080617806863, 4.146033544858598, 2.455632084368443, 0.8775414676689082, 0.27111880630645147, 0.2270178759129509, 1.1283359984949235, 2.4648869172573793, 4.3695851742479475, 6.3694617794292885, 9.024269958213674, 14.894265252395577, 12.276973285985738, 20.252716973148615, 21.91927476532546, 18.568143434278635, 29.085498895289202, 26.13036250564898, 28.78521991430198, 18.9550999281865, 31.144294791847386, 19.11152760158352, 31.16870833719921, 34.28052234660303, 22.83648900753683, 28.973340267145197, 4.657814149949503, 20.00826786396504, 11.137885956570342, 23.793174255325425, 12.972175669605113, 6.976195635607321, 0.0, 0.0, 0.0, 9.40097844375153, 0.0, 10.423583062499304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.86027966897886, 0.0, 8.761393223858402, 0.0, 0.0, 6.999772448198767, 0.0, 11.88576958265906, 16.56100595993291, 10.40605059631434, 22.654040328110383, 12.6803678627507, 18.842993279971267, 20.780885593107715, 33.85549941049086, 30.00560344995658, 14.82988322406395, 20.947133520099648, 29.512406146889735, 25.103672097982027, 16.92701652243825, 31.40191148069845, 22.68827046271425, 16.296362917474713, 16.94485473960153, 15.740462029968528, 10.570069354700165, 9.36166332611491, 3.777308163454032, 1.9242786602944573, 1.0684334065796057, 0.26879136591862207, 0.23504614706565974, 0.659384864495866, 2.6615050100702122, 4.642128622635772, 6.313828219575138, 11.382196880532529, 13.467190053334106, 14.045778353013684, 14.848804095876304, 20.29549733908259, 26.75001536085803, 19.5940375050494, 25.51786812229348, 25.38747149276785, 42.57977448878097, 33.53725478046563, 24.53633821996451, 24.29148208273382, 27.002228462439028, 26.685356572770285, 16.41111003188101, 27.794296550567687, 20.447224309343824, 16.621537694376283, 17.705282234540707, 19.97664870161478, 7.031685972138513, 7.597935428336296, 8.116566326900298, 8.792865823520442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.3563406530753, 0.0, 0.0, 7.816976120939454, 7.295184300619572, 0.0, 5.895637289030457, 5.650463822446718, 15.361861487811316, 32.873576330484084, 20.950061301512346, 18.77570035367393, 20.32844235395195, 36.16666713329317, 49.06303422934991, 27.16346878462753, 21.617158686902815, 23.82155804317407, 31.272513677341184, 23.318179518523586, 24.615669176479656, 21.499489248333276, 19.690312497776223, 17.225876367709212, 13.618249671047327, 12.86433212849131, 8.522358382686422, 6.418756964367325, 2.741095825688941, 1.9597947823539537, 1.3060521291998406, 1.1595373306273944, 1.6466615756287364, 3.6283318690813564, 6.51994284406365, 9.356132168029003, 10.835131747900345, 14.698538880747885, 13.606830740275326, 11.867439825786887, 23.907156661507788, 22.255316355426576, 21.36979401466501, 30.18917491270766, 18.508458588585313, 23.125553047725198, 28.936226810412336, 16.835850687676604, 18.42009217138871, 34.715509065271156, 7.874333796303372, 25.11407301044611, 18.45958508700773, 15.623274139388425, 0.0, 0.0, 12.888804806385178, 0.0, 15.159634394736074, 8.42586095925717, 8.87024165873929, 0.0, 0.0, 0.0, 11.25670940312615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.850326943087168, 0.0, 0.0, 0.0, 0.0, 0.0, 8.857882652025392, 0.0, 0.0, 21.095074394489437, 0.0, 24.534258667063465, 5.514905348849353, 15.5913826304011, 23.767442813082226, 17.269468484039436, 30.710492846339815, 42.638853208455714, 24.66054958651595, 36.19152362867733, 44.89384681757604, 38.72188734063161, 29.90062570055147, 29.014811870206202, 27.19430769598603, 22.891472684497035, 26.972170808832846, 22.803805259047042, 21.88395045458569, 17.80422701785064, 11.875802372120644, 10.73440970982848, 6.299700310288096, 3.1597040241320036, 3.715124239161183, 2.3284801339374166, 2.837614867238177, 2.707161016349053, 4.784774195162909, 7.764527154265211, 8.716140003111263, 11.130033296310128, 17.592076112810105, 15.563971427969415, 18.901470731222545, 25.13879654730288, 28.23993408557932, 34.63466264467156, 27.68475542691432, 37.26302073435266, 25.8874294661112, 34.37878123656214, 47.45220441156605, 18.810076949729083, 16.963996561988814, 15.085630642240632, 30.074515009291495, 13.966337473528384, 35.42453974176587, 22.547971291196387, 18.08865271588132, 12.949565426982703, 7.02774489601798, 15.314454523825416, 8.016380326828115, 8.904008252033208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.312450748596588, 0.0, 17.626155087365028, 8.133927650173176, 0.0, 14.040757972052127, 19.805767163152876, 18.341407273296117, 16.962140779061773, 10.522137706058238, 19.22472501017813, 4.478022898328414, 35.54221425636326, 17.702508741196716, 6.503962054134689, 25.29717959363515, 43.28950727792264, 24.71980251438288, 15.69693562081703, 18.38445822798371, 32.617177364394394, 20.8535832545152, 20.33309051392222, 19.421688553535102, 21.026541467268377, 14.711569640223658, 13.402392763246342, 11.488155851097828, 9.093087472689897, 6.847205063829936, 4.643598826133427, 3.619526294397999, 3.0632300290293673, 4.293340098144949, 7.554677571948431, 9.793891983275753, 10.906160333021813, 13.598696180641303, 14.36063575356164, 18.369615482971128, 18.404132539081623, 25.502567799758225, 40.099236201533834, 29.03830156686558, 26.808384407264498, 24.79188254517361, 29.40989154703646, 25.551832705467962, 34.74495282362888, 19.4385769447408, 42.32912915583295, 34.89438679354069, 21.787094738896997, 18.578974307436674, 15.165385149237878, 5.39202648047083, 6.056493485504526, 19.805782714374658, 29.298410408419503, 7.673624242288125, 0.0, 8.844830345826477, 0.0, 10.253578455759092, 10.590237390501402, 11.067265204204604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.778157756167427, 14.37368628045255, 6.471642963245249, 6.030709294570019, 11.135481459804701, 0.0, 24.349753831955958, 21.829714525933305, 16.158934202824238, 21.97974854711757, 22.919477245936342, 38.42752446413638, 18.314640021074027, 34.757986001784104, 26.34880293991505, 24.28732855484585, 32.38833210808129, 25.920674708254012, 25.177521133218402, 17.50967514446126, 25.28159574682756, 13.938411328869956, 15.973022282511858, 14.53629047149693, 8.954537660856133, 9.469712075263981, 7.077233345852675, 7.783267184502883, 6.191370310336775, 8.487821000981997, 7.978946116964099, 10.078360512849969, 13.315175036620442, 10.242036723396419, 15.130646662103874, 24.037073357170577, 21.244394301911335, 17.74753113234468, 20.96121655836467, 28.543786141818522, 30.43492741510174, 40.39637897958084, 25.106180814440577, 40.907442329061155, 18.072011948658883, 25.333809711944642, 26.02302537821904, 28.217088858988937, 21.85698046064872, 4.8773454577601, 15.903722414299075, 0.0, 12.268597364640293, 6.481302489731191, 6.98626945179969, 15.421923295410146, 0.0, 0.0, 0.0, 10.096227108909433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.98795514611698, 0.0, 0.0, 0.0, 0.0, 11.058404785500212, 0.0, 0.0, 0.0, 0.0, 7.88653539370682, 0.0, 0.0, 12.231967921339706, 11.590978876676914, 11.006943384037054, 14.934522052715216, 8.850360822751433, 20.567666325340316, 32.92795172575271, 20.229748646771235, 24.65283844990028, 21.6773235275343, 26.41329978064966, 16.969303486692624, 27.845380582503598, 21.47570497367842, 27.720020923192394, 16.729515665974198, 34.623476894873306, 21.212795681545238, 20.907107260850275, 16.48598374730345, 18.52437579830131, 14.255011207290288, 10.592452737703159, 12.673585429541573, 15.449281833466179, 12.053009279281632, 11.29365982565434, 9.91954693793523, 9.932163817699916, 14.423140354251142, 17.57389608487392, 26.93175173662816, 24.73173049613697, 22.408088530457746, 27.703471140938834, 17.88850128279352, 29.39272035651677, 29.95581822600392, 36.531920938796006, 14.24782223773807, 40.19873446580964, 18.18881107813314, 23.156741697246343, 26.127437637019035, 12.24090219221253, 13.365004417697374, 29.616031303853955, 10.722159732253427, 29.131719801250625, 12.129853284816647, 7.034002599127715, 7.29924446070895, 0.0, 17.30002208319835, 9.087504432542117, 9.366905543369818, 0.0, 0.0, 0.0, 12.15355499736465, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.780901603596861, 0.0, 0.0, 0.0, 0.0, 13.730470562657263, 25.366767494521937, 11.672293497772843, 11.109814296151635, 5.223891820678528, 4.769305397409283, 25.32711682951114, 35.03320061612837, 20.549882363367914, 12.48215895651656, 19.9190546189108, 20.093867762145134, 35.83539971573089, 33.69502152358236, 38.1824226605999, 29.504929330223014, 28.015974143740703, 27.378430630065097, 27.544877762700285, 16.784214518478624, 21.62851438511937, 20.223870897839358, 14.217969957561118, 13.676820027322186, 16.339994427195375, 11.351463051694184, 16.042933355514876, 17.696275782110696, 16.48064039212042, 16.69105644236642, 11.1563708042358, 13.611148101687728, 18.24491307987067, 31.47764210777403, 40.64008167019766, 32.65035194385344, 20.022873463431743, 29.72509875742904, 21.81251532413119, 29.02287235895215, 30.166545561673964, 38.98451832793384, 31.122305855056098, 24.051927979540093, 11.534740809869602, 13.101729800821175, 14.0853641698803, 20.421428284139356, 16.649418266531754, 12.083279189310026, 6.561385984022725, 6.700445819517458, 14.85562153546676, 15.930057070988521, 0.0, 27.559135256736585, 9.55371284967571, 20.83001690341152, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.53763508999899, 11.28655048043214, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 22.550588286883507, 10.29712213132466, 19.25529715752782, 26.20231732063011, 20.00874340356974, 14.732459727068047, 39.132970172018204, 23.827412228810765, 29.443963377006884, 30.89187173829533, 20.99809171454389, 37.239216140519495, 25.29192894532905, 19.109227809545285, 18.12366925155998, 25.913402414631754, 26.2827217892999, 15.147628952738144, 16.56477877521323, 19.957591994907922, 18.806142535098513, 17.692180835946928, 22.154293547757227, 17.73843206338555, 11.626595084800286, 19.039215255420366, 20.036919602861555, 23.64526429687833, 20.920038313181927, 23.55810517930833, 15.19726163985119, 33.55794652970399, 29.065620255255208, 26.07343400305946, 37.62213602349414, 25.482595514855035, 27.917296559888197, 16.20337603240285, 26.29731395499547, 29.40171302505625, 32.660255563916664, 12.002794283778975, 8.971453598745445, 0.0, 20.24233052978384, 16.759377807475005, 18.467701068907733, 12.819811571798, 6.872881929323616, 7.3424265793415096, 8.348253782712504, 0.0, 9.453860792897753, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.382796713412938, 0.0, 0.0, 0.0, 8.820748599872216, 8.163207936042962, 7.48801681069324, 7.305887554615, 13.831449731298317, 24.643670875282314, 5.57197968397419, 26.65036834578649, 9.706289154205779, 31.522677332891575, 28.699070114314527, 14.89405382635749, 17.40293063790135, 21.488973340969753, 34.10106276846127, 10.223490654618416, 25.252998578097277, 20.81665657567128, 27.266146931451217, 34.28168537105896, 38.16680603411008, 31.7540969964087, 26.358195555038954, 25.190948227250843, 22.374948015967725, 22.539664071685493, 19.469362162173173, 16.4112989226799, 19.64173801756526, 18.629357198168464, 23.04856172615214, 24.229826536451554, 22.630323834969417, 29.683245518965506, 22.414025242374056, 17.204810686321906, 19.43899845228422, 40.102043433245264, 28.886025377825298, 38.28597087801775, 26.22019295116018, 24.9148005643358, 27.967322464016917, 27.850454681155004, 21.72344694403003, 37.81510150297426, 11.577766911302641, 37.48794663386318, 22.562743585892246, 5.053438140805714, 16.255455959074087, 11.918369662919185, 0.0, 13.198633337545953, 0.0, 14.976304536555169, 24.62812597514977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.201824260196629, 23.590356906051706, 0.0, 6.880223784329489, 12.669456031412142, 12.053808653090844, 11.414774551696283, 15.4820905327026, 23.480848270764746, 17.476385008366996, 12.098303472579857, 18.233171795207905, 49.42077124496205, 30.270553801149717, 24.070443535498033, 31.42568395450727, 31.786081757913717, 29.952038442438134, 38.09205130892771, 27.68252233052423, 30.913397709633365, 17.120600465991597, 30.474959985364286, 38.97758003232178, 23.083856504225974, 16.339186087232196, 25.872368091486717, 20.969777096561927, 31.927582729804122, 23.885815822744707, 33.864476699034, 30.25213953066553, 29.065174006505863, 23.98976064132909, 26.3777391850271, 30.320305885155154, 19.083358631589054, 21.25334262204314, 41.16420280159801, 26.5663656875276, 39.036401630030504, 32.75934695585864, 14.911472505760761, 35.41181196754873, 21.68584837066905, 19.63402530025771, 17.16749369901125, 18.63639519069642, 15.380936270217346, 5.342553920961569, 11.992086290966071, 6.563093367852716, 0.0, 0.0, 7.936540114189235, 8.766190184626867, 0.0, 9.485408693936478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.304798203050833, 0.0, 9.723525922778023, 18.659197037997956, 0.0, 8.170182282575077, 15.273034426130149, 0.0, 0.0, 0.0, 23.31380764774745, 10.597225653854832, 9.790614606015748, 9.159781631536406, 16.449974400080592, 30.31742821138548, 35.135179193137056, 28.63043315900901, 14.575621360810505, 39.39017908202693, 35.74108250950654, 33.34646886685934, 38.159703940793776, 18.317272670061268, 16.789072752862953, 40.01544291471445, 37.80537474952754, 30.126310435802733, 27.87372471221549, 26.745047639235633, 18.11020787580801, 19.526217661985225, 19.629687459704368, 22.757307494226303, 18.806938557001608, 21.96951624352896, 18.1604579426351, 15.467250044652296, 18.290245695248572, 20.125552078223787, 34.94233384792959, 33.7911941051226, 24.49543865759108, 38.66542883802393, 18.903944594682844, 17.56249143527034, 29.00564929033998, 28.165408870865722, 19.028252749825683, 24.53191332164668, 40.427535343854835, 9.930923453885477, 0.0, 5.72279050040548, 6.264336197658339, 6.427897162612919, 0.0, 0.0, 8.382618518897534, 0.0, 0.0, 9.65953973321728, 10.152285790398693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.113975871056077, 0.0, 27.134082640378715, 8.142738677424685, 7.8805375328944285, 14.528225863996946, 13.713077983132026, 0.0, 47.75607854224146, 27.236311987935554, 20.382334280679174, 14.43304649368271, 12.971101158377945, 15.964419539903016, 14.95613115780397, 27.29533001448095, 16.055186082258206, 23.61401568037425, 37.62195367799231, 26.677922930493374, 31.06699506066213, 42.66426290950601, 26.691434343970492, 38.57555575317747, 33.86924228836612, 22.88152202391662, 12.918648073977725, 32.32791679215794, 35.18819484162065, 35.211846351561455, 28.92983921008836, 28.224109367637027, 22.07947130426659, 24.694836726770127, 24.693226152708185, 39.28323963548675, 22.69905087205667, 20.318848019641674, 20.44488362251159, 31.51596285277252, 26.449846246808637, 30.955758693801513, 23.242986265896835, 28.503799801080792, 30.944142286412358, 18.18661315257046, 24.15471072358973, 30.701611326530653, 28.22956990564699, 25.583884443787596, 16.063990047056812, 11.852653744001087, 0.0, 0.0, 0.0, 7.752608824446363, 17.05265760945564, 8.631773127103624, 0.0, 0.0, 0.0, 0.0, 12.09823892973773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.917173230005833, 0.0, 0.0, 0.0, 19.822535442930217, 18.397488398136243, 0.0, 10.565327544168115, 30.460442601539505, 13.837014574166469, 21.675804903108922, 27.91503732600368, 25.524533410270074, 29.98657592371766, 21.938497147929887, 34.90081087373445, 37.264616728675314, 30.12201158261036, 29.474403380713827, 31.810954664469893, 21.979835256890446, 42.80394674740159, 32.14810392190277, 35.557867346761725, 22.94959918662679, 25.128773704602555, 25.151685322899215, 24.90275592610006, 28.764090142705605, 26.055914710855127, 23.812931361532087, 21.545341978311864, 35.49714537917413, 36.447386037629684, 29.68620532954052, 39.10036332267141, 26.68003445663147, 29.437168808221873, 14.751214789650488, 19.023703854587406, 16.835271580244033, 10.759584681604514, 31.964536911503, 16.82916650148408, 13.898745619089283, 14.786744121481759, 5.450936366028633, 23.335860900474714, 18.59358307580824, 6.792076017677246, 13.975730308408458, 7.716387015913243, 7.886911936082252, 17.108503687717544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.973067711895899, 0.0, 0.0, 0.0, 0.0, 0.0, 9.652769635817563, 0.0, 9.070367645250471, 8.063167042043869, 8.04425469822254, 0.0, 6.800590037405176, 6.551334001453588, 23.82701728606959, 33.39753649802911, 5.435416578303198, 14.554062862850296, 27.31156822449772, 20.836692662223804, 38.95670157315083, 43.80978537645765, 30.365454431152575, 12.498085988481481, 17.30215830364218, 35.869900939026664, 25.28931697180892, 20.894603674999814, 24.845629742185565, 30.59687226493743, 25.994669505261445, 27.250578290082657, 39.69193302300567, 16.707363755648093, 32.56392672466718, 24.811171888259995, 40.5559815763933, 28.153720248356784, 36.68524344880984, 42.483452977060644, 21.572163322257015, 35.90759561528603, 40.37101986276435, 35.34406410963815, 30.37905332907918, 40.95326400277211, 31.954222401082898, 23.5854617800875, 29.024849837598556, 20.08555634469009, 21.08840747174422, 18.438792226879187, 14.833182202742499, 20.848948017538085, 5.573285588432011, 0.0, 0.0, 6.707626999515195, 0.0, 0.0, 8.460983047165694, 8.909085934256334, 9.331420263312442, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.00055703205669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.874362702970704, 8.828651579962271, 16.042239678675973, 7.4710075409713905, 0.0, 19.904721606242767, 12.667465300631937, 0.0, 22.231094959726114, 15.590910632348796, 9.619076834945615, 13.311952409421549, 12.21023828256803, 27.55980978980121, 28.691933503109233, 38.00271756949226, 25.54451397287676, 21.063303448850608, 42.77768825291667, 47.369291484846926, 28.123267073780085, 24.035995224041834, 34.279326410072635, 35.83999764077679, 29.963540327299157, 33.726920154383194, 29.847866396774787, 33.950925720249074, 36.42959045834825, 27.54373811525784, 31.10778180576534, 18.023323620097237, 36.31806466658632, 17.53237456730791, 27.033138643535906, 31.09879036758993, 23.882650136801875, 22.26064691706533, 13.474082610834028, 17.972636054186957, 19.40954184084364, 8.460572875895359, 36.176001226343956, 4.825699607727081, 26.220574788700524, 0.0, 6.093293436624366, 19.293656863728046, 0.0, 0.0, 0.0, 0.0, 0.0, 17.90348522288516, 18.944950470670996, 0.0, 0.0, 0.0, 0.0, 0.0, 13.370441389138545, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.182969012172173, 0.0, 0.0, 0.0, 9.07454834328353, 0.0, 15.799214935869887, 14.91971773089602, 14.039033244434838, 6.653694976070189, 12.685158884452722, 5.830511932476556, 21.929503527976323, 15.062334831069117, 19.428756733242253, 18.465882126220077, 41.93686598750816, 34.95361380989073, 22.05701407050235, 17.649484044629897, 23.19651230156447, 18.30129821654128, 23.403882274277212, 16.555809958092148, 26.986013369728482, 26.18338510214134, 32.78085414648565, 17.315137107659375, 17.191856464116874, 47.918227599142234, 23.508952555222447, 29.64490227722537, 19.432909533465004, 27.722202455650777, 47.43226254201416, 8.257322744942861, 25.750242355082232, 18.000622844083914, 28.809291677461648, 39.55806489390858, 21.037014958740766, 22.43966833550317, 39.65886247809114, 12.6788697942231, 9.079012576798599, 5.004829925381696, 10.336397753755396, 38.18920884554815, 6.024144743275409, 6.159561605292792, 13.253917374095472, 14.557872176795925, 0.0, 15.609123277483809, 0.0, 8.67014788841758, 0.0, 19.938785767597494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.204951492543493, 0.0, 0.0, 0.0, 0.0, 36.961178348253114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.604813054830053, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.216741885998402, 7.664278167684865, 14.906226306337789, 0.0, 13.057329428702454, 18.460972550845657, 23.10666661971928, 22.339847699615028, 15.102923509853278, 28.853849636631463, 35.51045848448257, 12.59211660938489, 28.180382464152366, 3.8714260166233525, 29.08436182634553, 27.341313631103734, 26.082996783347934, 25.470493480504977, 21.045947571017333, 17.74738937015989, 22.92960680552427, 33.270030464833475, 35.62236118525044, 16.417389311205504, 5.2447943912641986, 30.11228244691712, 36.013999160553794, 8.331367575904713, 17.576219168716555, 29.874663209004336, 28.095218241378607, 16.590541603319217, 34.55617484960017, 18.499464139732, 19.180973612609925, 8.237656353367633, 30.06859123129381, 13.674935662118513, 33.07608417997457, 20.513482682212604, 16.477238892381983, 23.623743366492988, 12.409052659172506, 12.670429630119521, 13.875360712132505, 14.554310072011031, 7.815371130054453, 0.0, 0.0, 0.0, 9.526749511932213, 10.237283531278342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.098468400828825, 7.633978475503065, 0.0, 0.0, 26.155188140786034, 0.0, 17.19842144512884, 10.905588675778572, 46.69035866643151, 48.466996207417836, 18.573852723693836, 21.734136949200305, 20.547718422621156, 27.691650272964075, 11.088833784903159, 33.10559443749139, 14.14155805858119, 20.35209752207108, 26.551891114719602, 15.700656034383194, 40.21459176767403, 30.44441136196486, 30.093314234975892, 34.28697490610085, 31.349768701668708, 28.349501878934984, 25.643021009512836, 19.844397383263072, 26.504422416446708, 21.065548254905597, 18.36950480121878, 3.66151595759632, 16.174597842350483, 20.787976297689347, 17.63757666358275, 14.040014259711347, 44.307219075779585, 10.364452713971342, 16.24743241374981, 11.213540560079492, 24.422369170204227, 6.4895109305187875, 0.0, 7.2087383581544, 0.0, 8.368979522067718, 8.578631922164366, 0.0, 0.0, 0.0, 0.0, 11.370851291072565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.153701186243993, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.922828877167632, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.943796349059471, 0.0, 0.0, 13.563668531312928, 6.751931385457393, 18.53642846491303, 0.0, 16.686586148554916, 10.64416040012491, 19.67988618126337, 14.538985658254685, 27.331151527945977, 30.69447990161096, 16.553922070479302, 11.993067442729533, 23.369659710344877, 18.6604568522378, 17.973799592821425, 14.605110327545475, 20.25833908144049, 23.70940501235754, 44.17740282460485, 31.560516465923783, 41.08521662333338, 31.182573066936815, 21.37273888814693, 40.24547632469189, 22.176538888364128, 34.400401845374425, 39.638659830106214, 16.403075454273964, 30.30974352212354, 17.90551851391208, 28.143797122431007, 5.219274313801391, 15.7107597562353, 16.49242962476253, 11.245979307445637, 12.017139404173106, 12.605688011576826, 20.27417772330785, 7.275085653791378, 0.0, 0.0, 0.0, 17.53556072925668, 0.0, 9.691518345952336, 0.0, 0.0, 0.0, 0.0, 13.061513040084797, 13.415684682105526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.31730401374782, 0.0, 10.16812422337293, 0.0, 0.0, 8.950195239705353, 16.776147281018922, 0.0, 0.0, 14.285285264890778, 0.0, 6.2236521158528415, 12.425312738704639, 5.87888425302374, 33.8218532127089, 5.1754369491267385, 15.050159361108266, 19.59046067006394, 9.531408391789196, 13.702327254160135, 17.39546923016982, 8.507999312712514, 24.41863908801964, 8.016685593140735, 22.98148493053175, 11.73617902439732, 11.386905531548937, 15.540296650078671, 11.180606246091077, 23.258107838249657, 18.9606595208978, 19.67547521309259, 23.648860267380968, 8.363276632984434, 16.73932242691169, 47.869028380852015, 8.882491707573216, 18.98740800570456, 14.957155542561262, 20.62532802032315, 16.03059727820615, 16.68167755764802, 41.78136143745098, 12.357421142777795, 12.939124625497081, 34.065339803284516, 14.368076262876357, 7.716972071616857, 0.0, 0.0, 0.0, 18.1528819101079, 0.0, 0.0, 0.0, 10.946420365069196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.884666515993654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.016132750978425, 8.611624787596435, 8.584960303425742, 0.0, 0.0, 7.338876243955879, 7.0603106245763065, 0.0, 12.92579253684484, 17.40399003961933, 0.0, 16.97871041930009, 20.841149365570732, 24.884951147534206, 9.725347467859208, 0.0, 18.381441984393682, 31.252828273283626, 22.02534798196855, 8.798239301617404, 12.812884286293706, 16.684212851390342, 21.332295841091828, 8.333085204186904, 8.518301868570196, 13.153239884330157, 34.16335072308928, 31.532433759060858, 27.41835073332246, 18.36310152172738, 4.701557405802436, 14.867105105703942, 25.152131183815193, 25.901652036912374, 16.3297259390123, 23.239281533504027, 5.807614599016011, 6.232637367940528, 6.585149204675442, 6.712582088191993, 0.0, 7.549511705513671, 16.030901415322443, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.6190329945876, 0.0, 0.0, 0.0, 7.375896096910728, 34.86739088201665, 20.363623796653847, 6.21234932401362, 12.109095976190234, 23.387375442715204, 11.580075906021676, 16.738157297330442, 21.74891593763582, 5.0715285009789834, 20.180078367687813, 9.860534348885924, 9.729083204723942, 33.37991434684933, 28.742967089614005, 23.111632900949306, 18.841257201417584, 18.431282539083583, 32.4349481537933, 23.45924086684627, 23.474669070036846, 38.476587156925426, 9.779986098072538, 20.152547441694914, 46.23819831846233, 5.521028378065055, 11.136722636893593, 11.641231686207533, 12.038842548373013, 18.481795779913725, 6.413181842597294, 13.545947848768476, 14.516621519439775, 0.0, 0.0, 0.0, 0.0, 8.82253295074404, 0.0, 0.0, 0.0, 0.0, 11.092559064959724, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.777293946219937, 0.0, 0.0, 13.653556670404457, 19.66874053678471, 12.741435813288296, 18.667501840669168, 0.0, 11.67318123266151, 22.52423719992859, 10.974066950986579, 20.926224187860477, 15.9379402423314, 0.0, 15.545113609416678, 25.23671457960668, 10.505446316360317, 10.103726146320845, 10.074692980395913, 15.826386913468571, 31.065987623244016, 37.072758226410095, 26.09189489833289, 16.205619891890652, 16.583355194807346, 17.49792353708918, 6.048636421290284, 6.156287950905061, 6.175407639447297, 6.3173342706911315, 20.643537144639488, 6.815757646632268, 14.469014687287904, 0.0, 0.0, 0.0, 0.0, 18.471244149155538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.912221318277657, 0.0, 7.764203766423518, 7.150389637616244, 0.0, 0.0, 13.212267146309244, 12.922637340015065, 12.450305356011725, 24.600658326506192, 6.142214010951489, 29.54958292647288, 11.455185455288298, 5.853306950068442, 5.519401987705458, 28.071594417487464, 10.72640678314325, 10.916476362338834, 16.233611104837255, 16.770297062236903, 17.008907220006606, 16.94207029437508, 5.785733857581856, 0.0, 6.069357416535497, 0.0, 32.277449054499534, 0.0, 13.862137311801007, 13.844574568577128, 0.0, 7.506499582876904, 7.775465902516887, 8.425215619362277, 0.0, 18.250712233771047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.65389182431191, 0.0, 17.92480492355255, 0.0, 0.0, 16.012821796674988, 7.491785453116725, 0.0, 0.0, 0.0, 6.829374941124702, 6.3002889096295664, 0.0, 12.652493472047052, 12.469894645545697, 17.923664648307692, 18.356061220617896, 5.903006910226098, 0.0, 5.908464617093419, 6.118521784320542, 6.115785986460844, 24.627062023821118, 12.351062148955279, 37.42058659724951, 6.33700302812381, 6.6089442609368305, 6.7096980724954935, 27.49024813235417, 0.0, 14.921140336737666, 15.477671231029085, 7.9125081143061395, 0.0, 0.0, 8.627657468744586, 8.989495879776799, 0.0, 0.0, 0.0, 20.92370088831934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.291603246326341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.68108248870819, 15.686897627254535, 7.350304626405629, 0.0, 21.650270508559153, 7.126456133895736, 6.910530355349563, 0.0, 6.753485914510238, 6.759622084437648, 0.0, 32.493050398808656, 13.296161551539663, 0.0, 0.0, 6.633577201243432, 6.393344597248583, 6.634379016697302, 7.018859987089681, 0.0, 7.14796839505729, 0.0, 0.0, 7.559113697076574, 7.651218520366829, 0.0, 8.339611805117881, 0.0, 17.597512110557638, 9.014967040563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.906572517465221, 0.0, 0.0, 0.0, 0.0, 8.22238010248945, 7.85723111801123, 15.995848458793596, 14.982860315657067, 22.580808362797526, 14.872644932137607, 14.363698396429324, 0.0, 14.353672862980854, 7.275090455550375, 7.091436673599727, 21.033787775530453, 20.55602336496904, 27.96777629931556, 0.0, 7.352058748724547, 0.0, 0.0, 0.0, 14.830047259122678, 15.776864336307016, 0.0, 7.869872248435308, 0.0, 17.22827108354261, 0.0, 18.315202823746414, 9.604325998626589, 0.0, 0.0, 0.0, 10.993745992964943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.92807304746396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.381181265371655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.662002519043632, 0.0, 9.105048084122457, 9.018784418965616, 0.0, 8.33298252229289, 0.0, 16.08230814826978, 8.046806267914267, 15.899313749124385, 0.0, 0.0, 30.589545659383873, 0.0, 0.0, 0.0, 0.0, 0.0, 7.735832486233113, 7.735674399306397, 15.815957320660463, 0.0, 24.218119714955364, 8.434178164112893, 0.0, 0.0, 0.0, 0.0, 9.193254885594076, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.73449465453832, 0.0, 9.094613182107537, 9.058803426825198, 9.033738356142603, 0.0, 16.755988499323326, 0.0, 8.245196614386282, 8.2661841890983, 0.0, 8.379020858862674, 7.874864056993534, 7.889519968900125, 0.0, 0.0, 8.289114649282661, 0.0, 0.0, 8.424774685028238, 0.0, 0.0, 9.00598923655463, 27.229989775686555, 9.333877715340126, 9.769746227850726, 9.815931988261964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.903622957623718, 0.0, 12.162853554596461, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.136540364761672, 9.739159307671162, 0.0, 9.16558719675554, 0.0, 9.042336879689149, 0.0, 0.0, 0.0, 0.0, 0.0, 17.61514390017978, 8.962805074528656, 26.052087037923116, 0.0, 0.0, 0.0, 0.0, 0.0, 9.493683808104919, 18.794685851247962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.232563151656421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.826693545523854, 9.272181244075263, 9.842827223227264, 0.0, 9.465277811444823, 0.0, 0.0, 9.03249282910562, 9.101796112908648, 9.630175004130585, 9.136883091396967, 0.0, 9.801472631221575, 0.0, 0.0, 0.0, 0.0, 10.476399848920838, 10.417357780887372, 0.0, 0.0, 0.0, 0.0, 11.842600377857895, 12.178803243413851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.685149965633542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.27593460814017, 0.0, 10.305522853278816, 9.868584176777437, 0.0, 0.0, 9.954438415787324, 0.0, 10.038819418009378, 10.263251551046316, 0.0, 20.82260248709028, 0.0, 0.0, 0.0, 11.048433827625725, 11.035152859997524, 0.0, 11.641930101318355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.31304407818492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.911378482086997, 10.86616351093534, 0.0, 0.0, 0.0, 10.410151975274966, 0.0, 0.0, 0.0, 0.0, 0.0, 10.475715194087671, 0.0, 0.0, 0.0, 0.0, 11.598566580038153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.380989223585749, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.163747997370713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.537199341479218, 23.116620080230803, 0.0, 0.0, 11.752979201042328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.892845328509521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.761494885645789, 0.0, 0.0, 0.0, 0.0, 0.0, 12.206095548132478, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.411259330225793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.972374201703156, 0.0, 0.0, 12.457082780726786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.323950871672922, 0.0, 0.0, 0.0, 13.216089833251765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.014555684881804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.78582694813311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 20.197356326751034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.array.fArray[] elements >= 0.0
return.fScalefactor == 1.0
return.fTsumwy == 281.0846390360272
return.fTsumwy2 == 25124.041480849166
return.fTsumwxy == 0.0
return.tAttLine has only one value
return.tAttLine.fLineColor == 1
return.tAttLine.fLineStyle == 1
return.tAttLine.fLineWidth == 1
return.tAttFill has only one value
return.tAttFill.fFillColor == 0
return.tAttFill.fFillStyle == 1001
return.tAttMarker has only one value
return.tAttMarker.fMarkerColor == 1
return.tAttMarker.fMarkerStyle == 1
return.tAttMarker.fMarkerSize == 1.0
return.fNcells == 10404
return.fXaxis has only one value
return.fXaxis.tAttAxis has only one value
return.fXaxis.fNbins == 100
return.fXaxis.fXmin == -5.0
return.fXaxis.fXmax == 5.0
return.fXaxis.fXbins == null
return.fXaxis.fFirst == 0
return.fXaxis.fLast == 0
return.fXaxis.fBits2 == 0
return.fXaxis.fTimeDisplay == false
return.fXaxis.fTimeFormat == null
return.fXaxis.fLabels == null
return.fXaxis.name has only one value
return.fXaxis.name.toString == "xaxis"
return.fXaxis.title has only one value
return.fXaxis.title.toString == ""
return.fXaxis.fUniqueID == 0
return.fXaxis.fBits == 50331648
return.fYaxis has only one value
return.fYaxis.tAttAxis has only one value
return.fYaxis.fNbins == 100
return.fYaxis.fXmin == -5.0
return.fYaxis.fXmax == 5.0
return.fYaxis.fXbins == null
return.fYaxis.fFirst == 0
return.fYaxis.fLast == 0
return.fYaxis.fBits2 == 0
return.fYaxis.fTimeDisplay == false
return.fYaxis.fTimeFormat == null
return.fYaxis.fLabels == null
return.fYaxis.name has only one value
return.fYaxis.name.toString == "yaxis"
return.fYaxis.title has only one value
return.fYaxis.title.toString == ""
return.fYaxis.fUniqueID == 0
return.fYaxis.fBits == 50331648
return.fZaxis has only one value
return.fZaxis.tAttAxis has only one value
return.fZaxis.fNbins == 1
return.fZaxis.fXmin == 0.0
return.fZaxis.fXmax == 1.0
return.fZaxis.fXbins == null
return.fZaxis.fFirst == 0
return.fZaxis.fLast == 0
return.fZaxis.fBits2 == 0
return.fZaxis.fTimeDisplay == false
return.fZaxis.fTimeFormat == null
return.fZaxis.fLabels == null
return.fZaxis.name has only one value
return.fZaxis.name.toString == "zAxis"
return.fZaxis.title has only one value
return.fZaxis.title.toString == ""
return.fZaxis.fUniqueID == 0
return.fZaxis.fBits == 50331648
return.fBarOffset == 0
return.fBarWidth == 1000
return.fEntries == 25000.0
return.fTsumw == 25000.0
return.fTsumw2 == 25000.0
return.fTsumwx == 31.88254774666985
return.fTsumwx2 == 25440.254425694213
return.fMaximum == -1111.0
return.fMinimum == -1111.0
return.fNormFactor == 0.0
return.fContour == null
return.fSumw2 has only one value
return.fSumw2.fArray has only one value
return.fSumw2.fArray[] == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 229.55365320525362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.35743590965694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 278.2870161068039, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 275.98581915449836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 159.93124636748806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.40159409347527, 0.0, 0.0, 158.50386259492845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 123.02608699260242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 379.9512514614612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.8529894663116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 110.04637700272667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.39633381618849, 0.0, 0.0, 0.0, 0.0, 145.81075958281144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 122.47405200490914, 0.0, 0.0, 105.68982488289707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.85176446237296, 108.65678032834029, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 167.3640639790128, 0.0, 0.0, 270.644012116525, 0.0, 0.0, 0.0, 113.45972820740744, 0.0, 208.20006007377322, 0.0, 0.0, 0.0, 0.0, 0.0, 91.64394450277584, 0.0, 90.75644906101401, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.64048704242822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.4483025707086, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 207.85708972727898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 187.07098957996038, 0.0, 0.0, 0.0, 0.0, 0.0, 149.58048532825316, 75.56510013741186, 78.28588728281352, 0.0, 155.97401517376358, 0.0, 0.0, 0.0, 162.63512946738751, 0.0, 0.0, 82.56083755949028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.00861538539576, 260.06646661993227, 0.0, 0.0, 0.0, 0.0, 93.71807826389512, 0.0, 0.0, 76.44346803824827, 0.0, 0.0, 76.01074028910294, 68.28834594179257, 0.0, 63.66077688414116, 63.71105354807626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.04618328857103, 0.0, 0.0, 0.0, 0.0, 87.90937430152617, 0.0, 97.79613557027211, 0.0, 111.57562061881144, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.10881886948316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.85866518537023, 0.0, 0.0, 0.0, 63.824335079404776, 0.0, 59.00659728176397, 115.53402979440975, 115.55517185176194, 0.0, 115.23884099682374, 119.77667754706664, 60.3282316731778, 0.0, 62.37656520285095, 64.86484908774327, 0.0, 0.0, 0.0, 79.45592090879668, 82.41023253285763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.47705045808848, 74.17959237459432, 0.0, 0.0, 69.25081101538709, 65.10129723940173, 63.76804228106964, 120.4490199928676, 171.80705201293097, 105.71858655582817, 48.96610869644089, 53.452686392419075, 50.72461251473717, 0.0, 52.29608645083905, 102.69323313095512, 49.2515325396414, 0.0, 0.0, 51.6406238144346, 0.0, 0.0, 110.33691259456103, 56.120709769063936, 61.64844314131909, 135.87817200723055, 0.0, 73.34769837257272, 0.0, 81.57385100488682, 0.0, 92.3265575071039, 0.0, 111.59657392195705, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 176.2306185222046, 0.0, 75.77576465203073, 73.02392866507496, 125.34753540539907, 0.0, 55.201097787482226, 0.0, 49.712700295114836, 51.87828635748076, 189.9188299387942, 137.29967933865916, 172.68959924000762, 128.7105370335912, 123.57497549527332, 43.289292601993196, 85.74863101214106, 128.2884649760985, 43.14512055797298, 0.0, 43.85913889574651, 46.3035876840471, 49.22634420929598, 0.0, 45.798909762920076, 51.39857919654231, 54.32492456901119, 0.0, 0.0, 60.37712683167125, 0.0, 77.41270951889318, 150.69582940219595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 89.74362093328763, 0.0, 0.0, 67.55322034461781, 0.0, 61.19229043499082, 53.191645308430076, 0.0, 96.98427110923504, 147.03782618453803, 0.0, 42.38341510222756, 85.4477382483048, 75.21553969308582, 36.61728655559116, 35.858026034671035, 74.45852553250445, 70.21190963756641, 33.63725682546873, 74.04502528238974, 39.453637274699275, 107.04652418225399, 35.17590388437419, 79.41872262872698, 79.02667690923093, 127.00124780634732, 176.51031822846772, 41.57425413208977, 96.52842669913667, 0.0, 55.057133935416985, 55.61852778364321, 0.0, 130.9154406692775, 0.0, 0.0, 84.36327272356431, 0.0, 96.45100737995433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.0126056013084, 0.0, 74.3015630623963, 0.0, 0.0, 59.35589814166099, 0.0, 0.0, 45.89408050353946, 132.18317493141595, 123.28945932825562, 234.01372285225375, 76.62397503258039, 0.0, 69.96663024923015, 96.92140756515711, 32.466947388369874, 30.57982408070632, 60.74457292352491, 31.744206478709064, 122.75628696414273, 92.17734442313854, 95.28616775186262, 0.0, 31.905076966541838, 65.43436410214917, 182.46342212544266, 35.424441883694044, 117.90101609862276, 82.32898086297504, 89.88628610132244, 44.54035201373501, 0.0, 108.03446299180003, 114.32000640021437, 61.86682634375864, 66.79140297461221, 0.0, 0.0, 86.5752209573222, 190.12325528539316, 94.32931705182773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.87248416012525, 65.07478112999974, 54.99471497369431, 50.978635866945574, 94.58418983723604, 85.99382715728291, 0.0, 112.75335773254878, 136.34538642060053, 0.0, 93.03225010477875, 32.085600431519254, 88.77034642125724, 56.32606760819358, 136.9408103531372, 104.41546640532853, 105.80343746776937, 27.735703674465835, 0.0, 78.75335367234446, 203.59559208385315, 28.2146991254042, 167.1522613503965, 88.8156285322849, 152.6835607242328, 0.0, 63.97931334403411, 0.0, 115.37216076862751, 121.5845359941977, 43.28715742160725, 0.0, 53.10372098573565, 53.19220561176862, 0.0, 0.0, 0.0, 0.0, 0.0, 96.44579757444714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 99.80782780566676, 0.0, 0.0, 69.7512878425508, 124.12108489648884, 63.679274907683336, 0.0, 0.0, 92.94973182502156, 41.61776156924985, 35.62411184936818, 105.16750160561594, 129.94489908403574, 58.68403337313864, 84.8657691564491, 0.0, 98.43220219506296, 72.64267733262403, 139.015433494785, 131.22124115080598, 66.65775632713822, 64.23449704357427, 89.17887507824922, 61.134264974869225, 44.62997349340849, 112.48339836041335, 141.6775693798691, 22.737266623408793, 68.63472123850593, 154.23502969174302, 50.404125972395164, 52.618632921346816, 0.0, 64.685406014828, 0.0, 41.297476912632625, 0.0, 42.18620768587905, 0.0, 0.0, 59.899876671401216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.81164474904509, 99.40524480844729, 0.0, 0.0, 159.0101606142522, 71.96500722840818, 129.39821795321762, 58.7933844188441, 106.21265492965313, 95.7364514492786, 40.8995877993734, 76.40616800140606, 0.0, 64.01633002358021, 0.0, 57.362625865009775, 130.11907493166584, 122.94359890195842, 94.64604508067772, 87.10985077994724, 21.028217936885696, 96.52516776782635, 149.50754281405082, 38.12639538727588, 85.46530041909091, 176.31270351985444, 105.17366012736395, 160.11887052252143, 51.298863431768964, 128.50448591706393, 20.916094014620953, 59.4519018667372, 126.90434246977415, 87.10745009899763, 100.07647461335591, 74.97036213580513, 114.38846319775851, 29.78290785343491, 96.07148566746852, 36.08159288059311, 0.0, 43.52844282818297, 44.39331169679729, 52.03833726879191, 116.76010709635003, 125.29907848375267, 0.0, 0.0, 87.42458647292077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 155.8282001291064, 144.98053542150282, 125.00278009130808, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 120.25501672925883, 99.83866533472178, 0.0, 0.0, 79.68234546973652, 142.75009370896012, 33.03512067722765, 0.0, 80.20521201039912, 46.2048255320734, 114.59201152233068, 60.98074762107923, 111.19919635869869, 53.26758921511582, 68.61461961501757, 66.4603250671317, 46.0793406699626, 75.24146765331604, 15.471499277186755, 104.1161939926075, 29.7807907287141, 118.75419442383092, 28.393979291626966, 107.8417388647864, 62.51829677438094, 104.6764930214776, 74.19520060606939, 72.00417563211158, 119.9713539162593, 22.696695372506632, 70.46254063594819, 53.41399273864517, 140.54116464748225, 96.63038338795033, 69.71702716629295, 73.1172562104637, 124.77184335739588, 193.88512620081087, 101.70311621872463, 53.39796779549814, 0.0, 0.0, 84.07662820797185, 0.0, 91.31706365344655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 163.39762758554716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.49799027815374, 0.0, 0.0, 55.43877412544088, 0.0, 0.0, 71.91418574768119, 137.39343732549455, 0.0, 108.99663737446025, 120.95542077001913, 20.70726277863156, 64.54600329583195, 58.23960922620472, 99.37772723678185, 34.78526281340007, 73.96065745003702, 26.32602193523804, 50.548979609419106, 111.78453557300409, 70.27147749838196, 105.44640641279287, 93.47584642407195, 130.421170185466, 49.16918279048018, 45.95905922752406, 101.27639133469992, 119.15552677638182, 29.56032176047979, 123.85111927780173, 142.59001001574987, 50.08976763177327, 72.99809824144418, 62.71248212374534, 66.56520259115752, 49.23758110854864, 49.85727985853512, 0.0, 101.74683440365928, 114.78636114083335, 0.0, 44.42398055881819, 214.2834312475526, 0.0, 61.83518279805181, 67.32082283981421, 0.0, 92.30049676614446, 93.85465338459962, 110.62956778365023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.327425085282, 0.0, 0.0, 0.0, 58.982339103595656, 0.0, 46.50139634205521, 166.65512553167298, 77.73085540983976, 0.0, 118.11379082825961, 28.74306396808696, 90.59501842180565, 108.66228614184887, 96.87660898247876, 32.72613072526663, 93.76759614886451, 111.53346780905949, 80.11206831261617, 37.94240721719452, 65.94984302866442, 52.60592454014743, 140.888850497338, 78.38709489594865, 135.51871826014985, 56.78121947184084, 120.6005962744034, 76.63452340499593, 47.24806612854611, 79.1827263198794, 140.6925808269452, 104.55945423170866, 73.86227544109164, 50.72087114236646, 112.9594166790661, 75.93771016534257, 17.043418236777715, 57.367398369139465, 66.61242170432783, 94.09695666449805, 26.633166264380023, 62.603232584997784, 102.86006042630198, 70.95065429134496, 85.50752994919844, 45.490213075164995, 53.58734194569119, 55.48560263504428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 181.62735720567542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.77443258242002, 82.75391461245854, 149.75905535069012, 32.94176553358096, 59.75016413778833, 132.43227972661157, 67.95280980318154, 41.729434512229176, 128.45254468243283, 31.490887843836468, 58.842242780932494, 53.709120396063554, 82.65623394017584, 87.0995461495352, 88.27926428051704, 71.49600917552776, 26.970599592838763, 76.9834270878494, 55.26958332021109, 60.96901983711648, 59.292666166026294, 100.46771293083448, 90.64826772554898, 53.70989377569014, 41.21867191663198, 33.14974425271784, 98.42015234598321, 48.747421339598674, 43.00619902741906, 82.01609566227305, 36.05554025263148, 102.25280465280532, 99.3161523204922, 110.01578566052655, 62.04583615798126, 92.2596498013781, 79.24349754518974, 92.23045868895422, 33.77599899572211, 226.9648619800256, 0.0, 50.735671223183786, 54.24769175796975, 0.0, 199.31822082817766, 0.0, 0.0, 0.0, 0.0, 114.97811950920448, 0.0, 0.0, 0.0, 172.9378894127552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 362.74132926294567, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 157.65651536135877, 264.0689330779427, 0.0, 0.0, 102.42353064016963, 0.0, 0.0, 0.0, 126.7966489983335, 60.31602319030501, 50.23388082141289, 47.74999490380937, 0.0, 33.330837340942274, 115.19736770703841, 104.39384579849187, 138.79634389352321, 205.01773598618453, 50.22426973331841, 123.094916405812, 98.39028673905713, 108.91842513025618, 56.38270284116252, 135.0615159778349, 68.20949355435312, 78.11631524029819, 67.13671974554819, 53.86983234187614, 56.5906571834926, 75.97211952139328, 80.12269974057563, 61.62801584191782, 87.62081805018808, 58.30089344202064, 58.77043541574457, 112.23010891227939, 92.3771730685003, 77.27392693462562, 48.670737615579796, 60.71630546072935, 84.31435691843168, 86.89521978163762, 87.45273397301085, 68.92235469244609, 92.01205532756096, 68.68265275843129, 21.439558912169378, 46.198891460562606, 52.89763762419861, 59.49179467452124, 67.7875651965373, 75.29914071440743, 130.8452017609734, 101.43064315699411, 111.48247687391915, 123.25700147480258, 0.0, 239.85094158436317, 0.0, 196.25132341257404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 577.0576158416308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 124.39952946854949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.78441458516486, 155.03861753518834, 89.77158147094303, 82.35849138975277, 35.41168934483266, 90.54722831583895, 78.59904719535291, 46.68320482280234, 40.29461127364081, 34.75625779122851, 169.107407554225, 39.22529635848413, 109.91437233820625, 104.6823214747146, 99.5625003499524, 73.72918914708765, 50.89304612709884, 69.87293068600079, 58.48829496963017, 75.91843523136914, 64.24880266988013, 64.81901552248317, 113.72809254746753, 70.5516623764586, 75.97306452670428, 50.20661286973154, 74.45717153444905, 47.55361628148176, 58.57767152447191, 74.82213059115146, 31.10730954153201, 78.65700357653544, 63.86159104067712, 52.679163557855944, 112.4295262890605, 24.840095491807535, 55.20424135711698, 87.74270270138439, 86.99282877082442, 161.44831346391013, 48.58016664845033, 135.4018961534745, 93.14474445187078, 34.95773744356466, 37.14626651752572, 93.21752653990798, 50.40334719355437, 59.46073104432909, 0.0, 0.0, 166.89110494996504, 0.0, 0.0, 0.0, 0.0, 152.76213470355145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 80.36418707539866, 0.0, 59.115982844708945, 110.47001309849173, 48.66654468786166, 82.0402279040487, 71.97022715549559, 32.298808078438455, 28.020550755365825, 47.73372124398868, 81.49895985604228, 108.32010387680666, 124.06165719875987, 135.45424860545495, 34.644956172371174, 118.10317523237453, 153.38641412453978, 66.97104584991088, 79.14308241173926, 40.59326771923172, 47.774058324550765, 55.29930528513921, 77.9568686682653, 53.602302011703834, 41.63399051194583, 84.44644172246899, 51.29279753286911, 67.87770427001689, 50.50490967982072, 42.01027483296726, 38.47677057897876, 34.2230016582743, 35.290576507463136, 86.77584144311278, 46.79883550136131, 45.13449043250257, 45.09578534363247, 50.93339983017997, 130.4426514602074, 77.65697039130572, 53.40804014486609, 30.798266822530266, 54.83871267508411, 84.33294382106098, 71.78317802105377, 25.755201132944894, 0.0, 34.41083433736867, 251.41412714895938, 51.60834185350436, 110.24577774905612, 0.0, 210.82458741681512, 78.76912712976548, 0.0, 0.0, 118.33587858388069, 241.31555009438472, 132.67625322017088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.80980473410496, 0.0, 0.0, 83.01969278015027, 69.83416509414013, 0.0, 53.686157482914886, 101.7457837008034, 90.07698266578277, 38.99044040070461, 68.67245574668333, 172.06232098326234, 73.41207545209876, 66.02532847720903, 71.36103127995338, 80.01954135191228, 53.47830986298942, 113.5905069575592, 127.87346352542859, 84.44064925144195, 59.711109315759096, 56.26024495452275, 50.123959881760115, 44.28082162873222, 46.832861921745206, 36.64132221732507, 55.79646750533727, 43.16589688023939, 41.18590191096612, 34.40583061304242, 35.593388982513304, 28.994136979007102, 50.79327449748443, 26.685020596188938, 38.30115772117425, 63.08407984052806, 46.152698942373185, 56.90642687688841, 28.11532429563729, 61.362849847125496, 104.40981675534213, 64.45209448839175, 82.65618026941857, 78.64912561045963, 103.35415267725213, 93.59164319483028, 138.92079208117673, 18.36923905904019, 89.87959803988106, 25.915242955561318, 112.01450642659645, 69.31727688697133, 150.92183920246603, 0.0, 0.0, 173.7004826412198, 128.0221343054746, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 194.7396827416469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 85.48937031491751, 80.09777596841595, 0.0, 0.0, 55.20329701647426, 43.559997482047535, 122.75631612322462, 141.16072165970485, 86.16607217315489, 106.92124299434111, 178.19277340122727, 79.06235671068274, 112.52678419185511, 27.92277899940084, 80.8443270167069, 58.51691281878451, 58.239864680728175, 61.95068146926641, 72.51582161078935, 88.2074607813107, 95.85302531298385, 55.29922788144327, 58.04699411822454, 72.59120919016421, 45.63034827125365, 22.61536272994676, 25.094632269675024, 43.399350345074204, 23.57250960599127, 43.74426238639652, 22.577184134023394, 44.789802556233624, 42.71608798829925, 50.45956464610798, 48.694079418338426, 45.192853357196206, 68.87758907637537, 66.58313716219237, 53.89674114732674, 66.89119436253785, 90.44206290927593, 145.3949783236273, 100.30270542126381, 83.20717793807547, 137.51667447601602, 61.9905341924899, 79.43092960799355, 68.92887955157975, 229.57130157419675, 88.70277694382509, 0.0, 159.04469093536343, 46.87426440116997, 109.49040985642166, 60.92775724404597, 144.21757007107107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.6838664138985, 0.0, 0.0, 0.0, 0.0, 0.0, 72.93275801548862, 0.0, 229.00026585653586, 52.016316548507056, 134.51259055440602, 39.582331412079334, 70.21696073237676, 82.68818743857686, 147.48501428028194, 62.48183227464868, 122.66903634143137, 59.39262095495915, 98.57761824936071, 92.43279493055981, 54.0309611910521, 84.6439171638776, 46.1515178116212, 55.408411095494344, 54.440860029964234, 31.801419223903878, 64.36199665873568, 54.76605930046601, 34.161869533461086, 37.099527036714676, 33.00139233209618, 30.28472142574541, 26.601934992526036, 24.729337735807995, 26.06392246193631, 38.14628026209487, 23.96522891021309, 31.362452912861247, 32.217901103026975, 47.908077299536664, 69.47993474584976, 50.92831048555135, 57.22954151875376, 73.29477253794599, 48.06761629996402, 83.66803015416308, 68.2752634489674, 94.21773543403941, 103.32371187644338, 156.93632732871515, 58.47603930129575, 34.29809305873772, 80.74487113473559, 47.584230941846315, 135.2909790163402, 67.39806745028268, 76.70031527815877, 42.39412797018666, 100.78033483326631, 0.0, 198.85461789378087, 0.0, 0.0, 0.0, 0.0, 0.0, 141.77306848956775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 184.7753388279434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.54755938862762, 0.0, 106.86534480035372, 49.69161095457881, 126.17079123658885, 71.73567235866489, 87.45054358303608, 0.0, 172.05310790975187, 56.29312487197646, 48.978828379995946, 120.56214047023082, 75.26714625381558, 97.36822409702319, 80.42506853685695, 96.50744112226012, 72.96537201117921, 51.334652799278125, 80.18504572079746, 54.342923415618756, 29.204205356735716, 40.08654638876014, 44.684592226824016, 32.83825328542101, 20.12017267626417, 21.503032443311536, 18.96899104186014, 15.842237846539488, 20.88013365809346, 22.788261500060365, 28.02536275200034, 19.842989556429238, 18.676326052310344, 35.4507570946693, 27.902228269828854, 45.03022427738869, 54.19873329771316, 53.190678248836534, 35.19604579957739, 59.14549436482239, 105.91198535116044, 74.0867104657807, 88.02767404781764, 106.5392750304619, 130.04642236100804, 123.44071344680012, 131.56458807807468, 154.6526587469822, 50.860448572903394, 91.73393779839684, 0.0, 0.0, 97.12654107586211, 108.1357449814765, 254.97781248974312, 0.0, 76.5830991398771, 99.03275421671832, 0.0, 0.0, 124.61574490192085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 218.4202204932932, 102.39281487788107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 192.1492114010502, 103.5963933200712, 56.52774746927433, 25.457055059746153, 60.69137325896504, 101.15808592902378, 90.8306276119856, 45.569739221374945, 129.74051992955404, 71.97285175047705, 85.57458477821861, 61.68189629040636, 56.73227458538487, 73.8457917332454, 34.45643631582108, 31.307477995759243, 46.541097744098906, 31.926745372799992, 27.952409369670093, 23.276068198339694, 13.123163538405334, 18.811648392485683, 16.15219466447909, 10.298701209671343, 13.654393680823842, 13.191569556264074, 18.75043929235855, 21.21852025636613, 23.529088576382946, 16.74775245968398, 40.53263637901025, 39.94897013346628, 26.178052724741836, 42.97203980247357, 57.39809486605118, 37.61854993837104, 72.34623399134294, 51.303745489099484, 46.4884353515144, 56.23580178313853, 166.59342027878202, 154.68648261785196, 50.68202204010113, 60.869357480011445, 121.88016445803463, 28.530883195288066, 139.66726434251783, 82.24658644363751, 92.62697901139404, 51.46384410505798, 64.13244505164495, 136.2396014942725, 78.37189876321257, 0.0, 305.18464558833244, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 173.52559076055223, 0.0, 0.0, 118.01417083469367, 0.0, 94.610727572766, 87.27935397187082, 143.43482926770372, 0.0, 0.0, 47.20806201282373, 176.69885132560654, 35.996706227608804, 97.37114948868248, 109.2172143424864, 116.863210886047, 95.78619784987778, 80.91508354997107, 52.71854202706877, 86.310468345841, 87.12428746410087, 48.949049238682385, 74.58834252889372, 40.11261109765839, 63.795091150380145, 36.481354479903146, 36.67344774613592, 38.108322158332236, 22.9115599382618, 18.7534411940693, 25.772197625768428, 12.66322134359813, 15.136735409740954, 14.279361408515584, 10.165845514039564, 7.570833369083759, 9.60642117744691, 11.729850499200241, 15.140738745598126, 11.601170591529113, 18.15052016121831, 15.713740719411202, 33.77216915652698, 34.12405519571115, 30.73812352806019, 59.95932860270445, 45.22211010906793, 48.516211465489974, 70.40557937749189, 95.0026844541638, 50.909328021502894, 131.74291086975725, 57.3003205595073, 128.60132641438761, 79.27276890157836, 76.83392713569427, 185.5673295233945, 104.62642354820505, 159.09711090164905, 0.0, 87.09064737254762, 0.0, 57.31412750374452, 70.06225464542894, 0.0, 0.0, 95.2164915231418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 82.78224452741232, 137.16929378932744, 0.0, 110.70756408301705, 95.25094490821009, 39.77841710615291, 136.3475661844411, 57.18511558306038, 103.093531833182, 193.7870284056478, 55.26299065034186, 45.3904450583596, 81.43045432158262, 67.9208534377207, 41.143808938472525, 50.98860237237986, 70.86199311129393, 51.98935870567064, 37.685381647618485, 37.4991308823228, 40.89790718053626, 40.3082103639045, 26.911354155307535, 16.736284860552754, 17.252290095728856, 11.033222703594058, 6.58066841870488, 7.9999971211157765, 5.418288699350806, 5.362833830118454, 8.048025270251902, 5.508666070608042, 5.940493753122858, 10.623101360308926, 9.459707369713495, 9.070465773036434, 18.409107859013996, 27.47863232372501, 28.961980464851962, 38.52191833303561, 34.74041523144559, 36.65874678032981, 47.5139171739326, 70.36472433418942, 64.00373624853816, 93.7802236415084, 39.04705417499656, 72.69187769235745, 120.42357014954128, 55.125057587958096, 46.10417049246102, 76.34974766496609, 27.676841952335064, 107.23949880577158, 0.0, 48.64222810355162, 53.5518775323989, 0.0, 75.3855805479568, 0.0, 0.0, 100.82970157406784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 135.95706562951278, 0.0, 107.84606471179839, 88.46787698810436, 79.68092202186365, 71.42623329061348, 0.0, 0.0, 92.33160081437181, 39.39710565547193, 65.95304380893495, 27.719650339413512, 123.32792438822568, 58.57594300887993, 98.20492578519018, 83.58085459075123, 23.337128283142974, 190.79195832245156, 111.83349413952679, 70.22792367440219, 63.73250817244047, 60.90628579805319, 26.260582153702497, 48.120393506859244, 35.54112786676529, 18.11388095428163, 23.801454665832093, 14.466197304939332, 9.517285879013027, 8.473651754372849, 3.6334115534089393, 5.788857679803861, 3.2617603817865293, 2.141142723420467, 2.786720227709269, 5.0126706886584556, 3.977149886826007, 5.762688121638053, 8.980262570724573, 11.717762835888179, 14.81712827807744, 18.578815568346425, 28.75888753528506, 26.56215702250392, 34.90177315166071, 34.30071788941423, 73.57163766367552, 52.849097515865004, 80.93512702819586, 60.24781131495108, 90.72280481108511, 124.494685926463, 114.90820396149766, 83.21832534893032, 136.99133713217557, 51.79237288693341, 87.8118210428845, 101.81943894916282, 80.85702562713364, 0.0, 56.06809754524636, 0.0, 72.10861205479006, 0.0, 0.0, 0.0, 248.62315889819374, 127.9721698174996, 0.0, 0.0, 0.0, 199.55551456329977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 149.08285562348024, 0.0, 0.0, 0.0, 90.89084117254866, 82.53203481907374, 67.54103521855356, 63.92866403735849, 50.9062799395014, 44.6208949062901, 0.0, 35.23752332859621, 116.96102750076238, 73.43142970506128, 57.54975626847025, 146.14130726843726, 119.0065174078333, 29.61795973936003, 51.05568347560719, 86.64476682421224, 47.59555037634091, 66.7088001934678, 15.666112551008405, 40.1860629228165, 26.383218769644955, 41.692321582658565, 21.789754624853273, 18.668975841004574, 11.995250050032409, 11.13223858235838, 6.410934430702938, 4.54130405078594, 2.542211352484711, 1.848307604821613, 1.7955393960012074, 1.5983729684166734, 1.8163692677650762, 2.4266729657182915, 3.7437224379552947, 4.486141610523994, 6.57841387310106, 15.11813794009453, 18.623986860857773, 19.95546379754919, 33.846652399431285, 34.59090670835769, 36.11472425697137, 63.1817180677642, 57.61633472958843, 68.27101349631093, 81.39746215729663, 65.70978273154321, 85.30145958975955, 88.18033856913698, 94.24367079552981, 95.7610199517557, 94.35573214146967, 193.9991641894014, 30.7701099207667, 37.36957638921763, 42.089465938279645, 0.0, 0.0, 67.4703135230557, 151.1070655015325, 0.0, 0.0, 0.0, 0.0, 148.70067073697948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.35625778273224, 0.0, 0.0, 0.0, 81.15839925606659, 0.0, 0.0, 49.5054346170472, 89.1545096959832, 150.26262223508488, 29.865149762951617, 54.99977199096137, 129.56791308828784, 149.2802971526409, 61.229587202806385, 138.76142982789517, 50.971713970772754, 50.019101951731045, 72.74041978276092, 84.83745318361484, 57.87365096602439, 57.05710386912156, 22.784125363780014, 23.660797783657287, 31.571967252073687, 11.54731378027221, 13.774263137820547, 8.86013535918713, 5.769896600661059, 4.401277454535642, 2.235118837463988, 1.6480005534170736, 0.9515545509597647, 0.4513458184903597, 0.5990689574435293, 0.6768614133367638, 1.5527946416138696, 2.9364960850124184, 4.687744163520578, 6.43910027503344, 8.493500747742758, 14.262889782861924, 24.430044158442758, 32.34909328690139, 28.66719672626494, 40.10490528091065, 46.18536575108504, 54.93748975076831, 54.37269985626439, 88.66792298305664, 90.16500606931815, 59.62874464780559, 98.29775865953553, 77.1620294547301, 40.19451782441628, 87.22805310342025, 51.813965358170776, 92.40129455765262, 143.93909469408396, 0.0, 50.32330364840139, 120.29906235734902, 67.12460829292995, 83.3944569427634, 0.0, 208.31228946092088, 0.0, 0.0, 0.0, 330.4091600238463, 175.79744123814646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.70486308684676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 51.5003852302134, 123.91979265796228, 38.31753757511929, 126.59809450003189, 0.0, 131.35704898180342, 33.9744195446459, 13.724493132092986, 118.59692160849704, 59.80742441399711, 114.9187459413847, 60.67308359101389, 42.94093583029363, 46.87574994106345, 33.61029885126904, 31.054124554706753, 23.11440072853358, 31.00348249034258, 13.114877149770013, 10.44663378766947, 6.123215165162253, 4.215599324349762, 2.7985639246070004, 1.5269233385256988, 0.7735345079703058, 0.30043927072822574, 0.17005033885673712, 0.2061049584860092, 0.28853741994938364, 0.4801592019494058, 1.040626697450619, 2.423093252607128, 5.083904455016013, 6.6354234449554905, 10.29634957480302, 12.282848447446055, 15.912125040117871, 24.793097325829063, 42.5711613763268, 25.59864010488372, 73.44282693821084, 77.96329150811529, 98.90998226350791, 64.63658493993363, 88.14933060543768, 46.56935847751821, 59.62220281798911, 18.7879385537689, 21.110666254438325, 53.5446640370607, 93.85813962253302, 114.00753089226156, 42.03735401214923, 47.7310064844055, 115.67748140217549, 0.0, 80.51608524663864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 336.2106390129483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 111.03566940373678, 0.0, 92.90034693337951, 78.24936837971845, 132.18494618524622, 58.218054088972735, 46.845221980193394, 40.53970883906497, 35.27421616318624, 0.0, 76.59884960340156, 0.0, 73.42442984131605, 42.45582478667888, 108.13217212188135, 35.53134263056385, 119.03038499084407, 73.33716727748173, 65.00486288277051, 50.83741204689097, 61.9491725576898, 45.20052128818956, 43.58626516838483, 17.05976875688613, 20.9735890673001, 13.337858067398342, 6.793783729585614, 3.235101274096022, 1.6805344575046595, 0.8407861318912019, 0.24836892319432854, 0.10016078306399902, 0.02512398291998388, 0.026987136494899637, 0.10880761025759056, 0.3325725434878212, 0.7085579012897424, 2.0262449312690634, 3.697805943118953, 5.502672057844092, 9.807812395357647, 17.317704603941436, 19.24984221572063, 25.4633504983856, 35.35837365290946, 40.66973655306464, 59.479379568618455, 68.14266221942735, 82.68445253938022, 52.54154338001041, 75.11790032785977, 61.0616541981082, 116.2072397852617, 72.56630759105985, 87.5062765554899, 103.56065239121833, 92.34894752141112, 36.556854044158854, 41.92038362689841, 96.53126458811775, 53.63393766361024, 61.765694824087234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 72.13076786195208, 128.2039008703583, 55.72889423514349, 47.526420761549964, 172.30663419366755, 33.92325853085258, 87.67044381934045, 50.76052769163083, 64.35434090132391, 135.48858158920223, 116.83316459412373, 57.39754896911401, 38.00026017709808, 59.45012380682094, 77.62938056650252, 71.91693589724834, 75.90125039228072, 37.350453805302394, 42.136328464069464, 27.998195140099526, 26.239542466512027, 13.082259616807686, 12.983571273611933, 5.573864796734041, 2.7869799355733784, 1.455417173227919, 0.518643027695543, 0.16107232609364866, 0.025842194690793553, 0.002188117341539604, 0.002044792613609386, 0.03304860853265137, 0.1848561961306062, 0.5638412006988327, 1.283959803029776, 2.8349087799071007, 6.207703130277893, 6.886570033495204, 14.693584430452322, 20.124812227729453, 20.325216615786417, 38.54024386662932, 40.22558174642854, 51.853198227274156, 39.960990138867245, 74.74352848826743, 52.220277115637174, 97.21766426791095, 117.59336670388952, 86.94617950128054, 119.9787904577981, 21.69523265546981, 100.12385503810913, 62.05066451704447, 141.54110556649727, 84.15166139721447, 48.66730554626663, 0.0, 0.0, 0.0, 88.37839569988094, 0.0, 108.65108386082237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 97.22511515047786, 0.0, 76.76201122307192, 0.0, 0.0, 48.996814326562564, 0.0, 70.65337985649758, 91.42732718356974, 54.14694031545642, 102.68708050069098, 53.59965897238124, 71.08469718371131, 72.06122835460899, 104.29925246533824, 81.93143674384976, 36.69415260991937, 43.945970748250076, 54.5823983732621, 39.44466629618073, 22.076789140783553, 35.32441968586843, 20.680329176416247, 12.1246438378513, 9.946654501302874, 6.926109074875256, 3.318194695804697, 1.980620318278768, 0.48671621655423913, 0.13317837961294796, 0.03026026645179651, 0.002709855897200594, 0.0022336281749421034, 0.016961305376532496, 0.19543216422426243, 0.6104382130358033, 1.3058532823742033, 3.532510935095334, 5.893851104878079, 7.933343090961521, 11.064958689995954, 18.770129233526625, 29.913626609016042, 25.64906326476843, 40.778738508147626, 46.1366675119582, 90.81426441498527, 80.42925136152157, 66.9344874504162, 73.79874898020002, 91.2070916401451, 101.7720347932443, 67.34141582399883, 128.8739404159066, 104.53418850194339, 92.11954798137427, 104.51945390155606, 133.06154449746828, 49.444607610769545, 57.72862277316785, 65.87864893897179, 77.31448939043382, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 87.54111041638953, 0.0, 0.0, 61.105115675337636, 53.21971398000627, 0.0, 34.7585390438064, 31.927741408779177, 78.70852395327086, 154.45469753006162, 87.80282847495596, 70.52945832271978, 68.9296536442538, 109.12431570811411, 133.89207428387633, 67.12690973857529, 46.803968668841506, 43.726844609495984, 48.96403800613273, 32.067574948031, 27.611169779011842, 20.170390546657632, 14.40116525071324, 9.924276719251477, 6.032512534430186, 4.289926654863538, 1.9450169302538185, 0.9531792674620779, 0.24588386961017383, 0.09530839597437948, 0.04278715607215878, 0.03269367562717054, 0.08097278471325678, 0.3398684488040151, 0.9638410634711951, 2.164821886087108, 3.5939427422673274, 6.592202683426857, 7.762514824738063, 8.838684729582459, 22.057186649484247, 24.849977994296037, 28.61531082237224, 48.11467274911029, 34.30186649545678, 48.69915593535421, 69.8833640093118, 47.28770273324561, 56.60872337798956, 120.67234405642928, 31.016312896034833, 105.13287566820975, 85.21233930520495, 81.4002204656784, 0.0, 0.0, 83.06075106838662, 0.0, 114.91830557501828, 70.99513290473415, 78.68118708443396, 0.0, 0.0, 0.0, 126.7135065864287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 165.13090254423201, 0.0, 0.0, 0.0, 0.0, 0.0, 78.4620850770524, 0.0, 0.0, 148.45137059376304, 0.0, 150.55416620527316, 30.4141810067672, 81.0304552678308, 113.10291357313776, 74.58850461722623, 117.93969623193577, 151.58072380745713, 76.05734894503397, 100.84892706316272, 112.16763380983956, 83.41338042545576, 55.96196016985297, 46.86530415904609, 37.05219175840271, 26.274818822198704, 26.079007212236725, 18.01975552593438, 13.747887637035955, 8.846625212764133, 4.442015202590422, 2.8507221556333113, 1.1956895968032322, 0.4057643488828679, 0.32491415699376275, 0.15279851700626748, 0.20477010202628243, 0.2447095951640769, 0.6164373248308666, 1.5009867205557397, 2.2548106551459126, 4.149743064797714, 8.649045718995724, 9.747747755256274, 14.947579865918014, 24.37531518275056, 33.31759357433862, 48.09703917524668, 45.18366926811374, 69.51018816946771, 55.917224764767894, 84.4924256850878, 132.5878349216076, 59.00574646346526, 57.58238289814116, 56.94308846975442, 129.32625615718982, 65.0711482015661, 179.37456326462254, 127.13594262300367, 109.15788498424325, 83.86598932511015, 49.38919832350677, 117.35988585779711, 64.26235354435683, 79.28136295227546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 106.34664044223032, 0.0, 155.3429162557435, 66.16077901825172, 0.0, 98.57331064605077, 130.7966984024134, 112.17645930218524, 95.92437471426466, 55.36376744748354, 92.40934098810158, 20.052689077953605, 140.5004359455739, 62.770657375614434, 21.15292378331271, 71.1925803493691, 110.36376578639108, 55.6022020379057, 30.85144484666963, 30.773747904826827, 48.453750137813984, 25.66067916720845, 20.726652917059184, 16.43967284095496, 14.328353895816148, 8.083664525466833, 5.673342716147897, 3.8004846278631192, 2.3196003591622407, 1.2529514600002842, 0.7085479710878978, 0.4333477556649128, 0.4137713214616468, 0.6519927757452277, 1.4513440478897848, 2.5004342473606367, 3.6315992638886048, 5.811169727080222, 7.95744403469308, 12.543714707862245, 15.457200597541123, 26.10733499515674, 50.3537835404154, 42.249944411964506, 44.951655526280625, 47.37740271993644, 66.63247387117745, 65.37547053404353, 100.6517577329073, 63.01997070660221, 149.4403929057865, 135.40742010151348, 95.02067170083535, 86.29956703807211, 76.6819202224883, 29.073949566098644, 36.68111333995876, 130.76246080941644, 214.62184004209325, 58.884509011832, 0.0, 78.23102384645291, 0.0, 105.135871148407, 112.15312798717395, 122.48435910019798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.499738079827495, 103.3611036109795, 41.88216264372175, 36.36945459561321, 61.99998865369673, 0.0, 118.67447585136225, 95.39221675722509, 65.35879269939323, 80.60626213264104, 75.08216243921261, 113.71407778836722, 47.9461760854768, 80.66796915960221, 53.53711432205565, 42.194901316978076, 50.0325086888395, 33.6466155347263, 27.640092500687835, 16.170691901900994, 19.434009101884953, 8.854205861492742, 8.023138136499089, 6.066535597185251, 3.011108903607253, 2.513986198463983, 1.6338662045954286, 1.58112457801575, 1.2995414280380064, 2.029642708398941, 2.148467409044827, 3.29900147411493, 5.417917350185477, 5.273636111855336, 9.564104890397719, 18.131774011468902, 19.700918785583944, 19.73365452729478, 27.533482938474393, 42.96303322354737, 54.595224233967706, 81.72247824970084, 57.40135324663781, 104.68363493016176, 54.45797084324, 80.24991680511408, 96.79013904255332, 113.79188374130514, 95.62459147958228, 23.78849871433308, 84.3355856227641, 0.0, 75.27098450412673, 42.007281963395734, 48.807960853149545, 118.91959820646696, 0.0, 0.0, 0.0, 101.93380183467774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.66288916978047, 0.0, 0.0, 0.0, 0.0, 122.288316399974, 0.0, 0.0, 0.0, 0.0, 62.19744051619039, 0.0, 0.0, 74.81985489860753, 67.18488631480395, 60.57644041241005, 74.37537513504387, 39.19783979047241, 84.67018432230152, 120.54695074436998, 68.29454170915987, 75.99474137778228, 58.795455899234106, 63.52426272272516, 36.03169509523802, 51.76556378313666, 35.5638812544104, 38.50100269310522, 20.036021992062636, 35.37854963417371, 18.059010132312814, 15.142403764435233, 10.116405887750897, 9.591561590019605, 6.200127074605774, 3.906247134933527, 4.155207584358734, 4.925477665198109, 3.7627779766696303, 3.7961955302273087, 3.673425355699354, 4.138181205960234, 7.480014078942517, 10.681229376782243, 19.700072732442003, 21.965589644197802, 22.88758684868431, 33.46551683533885, 24.660753543776977, 48.070540602467105, 56.16036560094994, 78.62029925955841, 33.88274000599729, 107.84694334707574, 55.182495140577686, 76.6530112147529, 97.59773963744715, 49.972649289947796, 59.54333585229894, 146.30316631263938, 57.48582934027364, 169.83699828053693, 73.57024885501802, 49.47719256453544, 53.27896969719029, 0.0, 149.64988883125662, 82.58273681147261, 87.73891945841221, 0.0, 0.0, 0.0, 147.70889907396725, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 95.66603617924366, 0.0, 0.0, 0.0, 0.0, 94.29965859688545, 160.94285256263584, 68.17193506897698, 61.72519205173548, 27.289045754152024, 22.746273973757322, 106.94329334840282, 136.50144044954652, 70.42420527626138, 38.972489908895966, 56.75768818209175, 50.50159599572324, 80.40016528378212, 66.84853797170534, 66.37372924246169, 45.90173287143718, 37.447521777789525, 31.336120963949643, 27.182175085822674, 14.131355197162026, 15.675397581586543, 12.86322659867392, 7.834458701094034, 6.7128604653083865, 7.268902895124291, 4.820242764206089, 6.811635309642248, 7.894436373290218, 8.038226795710333, 9.057895349938594, 6.966702147979598, 9.804340131117826, 15.200610593969863, 31.055141680155057, 46.00668455873346, 44.57876129556682, 30.85973017138248, 52.05539724545085, 43.31043316284034, 64.87946301089174, 75.93213768343205, 108.65963569255442, 96.93676738806292, 82.74261896639453, 44.41202570175, 57.22264312841502, 66.18037148037487, 104.28959718822671, 92.47244764282729, 73.02430253181467, 43.05178603132986, 44.895974180288974, 110.35280991348839, 126.89115289707831, 0.0, 253.34903988879452, 91.27342921405878, 216.95345733430682, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.11702346997598, 127.38622174734297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.2031340536108, 53.03254565037918, 92.71877035120018, 114.48375727682912, 80.10509873432427, 54.33040272849464, 127.70402876120124, 71.02793200332934, 78.90091369883945, 73.52898764970337, 44.170485959409554, 69.47950622349411, 42.692766107564815, 28.13048755793238, 23.51679739444332, 29.286953325183813, 25.66657798516845, 13.547747631398682, 12.510682000239452, 13.808673031452779, 11.835859283890935, 10.509122210513901, 12.650516793577633, 10.20925346238578, 6.797751086047326, 12.142066412329363, 13.915479808970847, 18.118461597530146, 18.314924001046997, 23.166828778717182, 17.808416061715942, 43.41483899881184, 42.36812922957452, 42.55978130864874, 70.88573952907397, 54.20506396610007, 65.01690208225187, 43.814510734373584, 76.86805054676917, 96.11994861996615, 118.63092456664198, 48.08427951356589, 40.24603981732177, 0.0, 102.45650374105136, 93.62659037934654, 113.70086298197472, 82.18182705659629, 47.23650601442311, 53.91122807302066, 69.69334122057364, 0.0, 89.37548389148934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 129.56806101888438, 0.0, 0.0, 0.0, 77.80560586214766, 66.6379638070748, 56.07039575722456, 53.37599296067835, 95.65604764231175, 151.8428677859999, 31.046957598621113, 142.07877024961908, 47.12083870272552, 142.183470334814, 117.79180080721989, 55.487412110423364, 60.61077882797264, 66.0206017076123, 97.01814084428162, 26.138311110554127, 58.092037303134894, 43.40861924139172, 49.60760211574423, 56.10157539826261, 56.20375789361352, 40.455783165701526, 30.29263421114118, 25.454390402306004, 20.941883897374638, 18.908326232015803, 15.220079329644905, 12.299858694991178, 14.327338164711415, 13.407970614827182, 17.21078704522102, 19.007378266792045, 19.02414153412366, 27.630831257268543, 22.924043339552856, 19.808825271928736, 25.25241451739987, 57.520962677667825, 46.45255398947511, 69.90314097009315, 52.95451372037499, 56.51704865995707, 71.22731407259069, 77.61133142519425, 67.47154726395785, 130.12520830720285, 44.69743561695613, 156.2182982689175, 101.88279601212504, 25.537237042949908, 88.11301470118914, 71.03057782841222, 0.0, 87.10538615603696, 0.0, 112.14542588279437, 202.21504741771145, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.26992119514998, 185.56988805830875, 0.0, 47.3374793224532, 80.27708399956043, 72.66782590118964, 65.16175677179172, 79.94049287302998, 110.29153003502898, 76.42275697903507, 48.79733241373634, 66.51041901753102, 162.9608251467697, 91.74463044955799, 64.44694899207187, 76.00583108391007, 72.24474282558965, 59.950989755099044, 69.19220117335792, 45.11815302395109, 45.66449796588131, 22.618072310770756, 37.237219752761895, 43.57840043887901, 23.235040710394838, 15.749019978469928, 23.988648486879832, 19.189829511160085, 29.209931373821217, 22.014004447852972, 32.86978936342206, 30.60598272147311, 31.38948250607206, 28.872926505683576, 34.89504286954417, 43.85679040162389, 30.403332529264503, 37.72755971058786, 80.78888472188, 58.896769090453915, 95.309847445546, 89.50202042513155, 44.49808093884381, 114.07083427862689, 78.43645841063523, 77.1711601705137, 73.70542100425962, 86.891001016393, 78.95337232504342, 28.542882398381835, 71.93270160135602, 43.0741945551523, 0.0, 0.0, 62.988668984134875, 76.84609035304842, 0.0, 89.97297809100571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 127.79846241170134, 0.0, 94.54695637093621, 174.13911794703614, 0.0, 66.75187853050369, 116.6329630495643, 0.0, 0.0, 0.0, 135.95798222698517, 56.15127371073002, 47.93464099029682, 41.95116797045827, 67.65700030885051, 114.97448905726532, 123.53302429183739, 91.18825483541059, 42.5583736120554, 103.57506703806747, 85.2349814724617, 74.23277036340453, 76.75390909295515, 33.61719670900524, 28.194983378119982, 61.75162886342327, 53.078522741466315, 39.6003895968241, 33.89003662332073, 31.16606213499074, 20.575465461476586, 21.232350994866497, 21.454783935534348, 25.944634714667885, 22.154948299695878, 26.895947251187824, 23.614093310514335, 21.769248460494317, 27.93604742272482, 33.81966829210653, 64.39539043481587, 67.28763488684022, 54.637760399104344, 93.53204849579939, 51.094859714899385, 51.51082440302425, 93.58520475031172, 99.29688363989945, 72.43175396947669, 100.32396373006412, 181.75357987671276, 49.3126887378147, 0.0, 32.75033111153121, 39.241907997292536, 41.31786193312722, 0.0, 0.0, 70.26829323336388, 0.0, 0.0, 93.30670785760336, 103.06890676993122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.29250792030453, 0.0, 245.42253112979915, 66.30419316882791, 62.10287180735781, 105.55394055698852, 94.05317398878927, 0.0, 285.2804119638823, 148.41673769421612, 103.92684152097576, 69.4607479428397, 56.13193249147003, 63.71830385096544, 55.98423967210678, 93.1996155922186, 51.570393982868026, 69.78238173688214, 101.21442660550868, 64.78842764332902, 69.04911666623244, 86.75724213070525, 51.003914589611846, 67.73893551325887, 54.838831259130515, 34.973910724547565, 18.593959517107756, 45.52416433601582, 47.756933360379705, 46.056442652476136, 38.10581474344641, 38.01377859774372, 30.54677623030568, 35.938242346493155, 38.18434152921598, 64.41568615258075, 39.673141602805515, 37.57178297393651, 41.8617891528569, 71.05831140284896, 63.66262867346999, 79.95166641409644, 67.58286538033755, 90.33303660903871, 106.46261542494362, 66.174773811352, 97.30316682423094, 134.72535486409117, 132.8298674696577, 130.9455280480311, 86.03750614677081, 70.3176474217382, 0.0, 0.0, 0.0, 60.10294358488362, 145.39743624864423, 74.50750731778828, 0.0, 0.0, 0.0, 0.0, 146.36738520102156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 143.11492431718884, 0.0, 0.0, 0.0, 131.0062141734794, 112.93872427935969, 0.0, 55.813498461852326, 154.66941477336, 63.86130733695624, 94.00800676294807, 111.38222032154006, 93.12988450532923, 99.98672400093989, 68.82940687418893, 101.60629316252503, 99.29396069910409, 75.69882394207161, 66.94592275086946, 67.58064869568705, 44.00643024648798, 79.76405543119569, 57.515943233117056, 60.31766752989818, 37.70422799550364, 39.568913091593274, 39.63186052683983, 38.85417804034725, 46.07497241894931, 42.47467470255333, 40.57016504917021, 38.741385064321754, 66.43268168867195, 73.93129404239662, 63.00919313443767, 90.01797851521152, 64.7830682453414, 78.8430970189495, 43.537371430061, 60.34425491059451, 56.706532716627876, 38.60057999752432, 127.84149260711375, 70.81989910278203, 64.42992842429152, 72.90459781004765, 29.712707266493435, 136.15087939795637, 115.28501602728355, 46.1322966299064, 97.66087888174943, 59.542628579354485, 62.2033798875167, 146.41871378643359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 195.2466212812277, 0.0, 0.0, 0.0, 0.0, 0.0, 93.17596164216152, 0.0, 82.27156922000657, 65.01466274790248, 64.7100336498754, 0.0, 46.24802485685454, 42.919977198601885, 141.99580242785325, 185.9982018311077, 29.543753379693246, 70.64007312442769, 124.39008862922012, 86.88655483800576, 151.9405588685785, 160.07622585750752, 102.48156956986276, 39.06260980361325, 49.93400900885065, 99.04899864150032, 63.99498015971435, 48.5404913509736, 56.14074711136339, 66.92742231019685, 52.04356768884514, 53.1409368119715, 75.13632331089923, 31.064271947727203, 59.0092877497943, 44.04355456070803, 74.84957914603748, 52.963723777930056, 70.94807864819076, 86.05426621516371, 46.59637702441288, 80.67961788897502, 96.00752635651179, 89.31999558622309, 83.9975097361179, 119.90183727435029, 102.21295381095499, 79.52206478252931, 105.41070255383696, 80.71438948277465, 89.03328628463495, 85.08236556963847, 73.43609155737484, 108.73026597075142, 31.061512250223945, 0.0, 0.0, 44.99225996462522, 0.0, 0.0, 71.58823412442527, 79.37181218396405, 87.07540413055804, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 512.0933314306071, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 78.75431338387749, 77.94508872037031, 128.67692733421234, 55.815953677251386, 0.0, 132.09692700061538, 80.2541313500393, 0.0, 123.66221892218735, 81.08307966645678, 46.26961206458868, 59.115195077592524, 49.74381693026994, 108.63719812263614, 102.95049625466488, 131.44348638568167, 81.59495550171953, 63.43646872098047, 122.13961317515287, 124.86418459812307, 72.0238812674676, 57.84906091781949, 78.48452619640982, 80.37758989234473, 64.20968217190774, 71.18764264435855, 63.73023710023513, 72.14351463077355, 78.18072104389232, 58.421912801890926, 69.22424218261833, 40.68580501842436, 88.0436312536473, 43.95254782412807, 73.23445025925797, 88.02607377291109, 71.38850606124838, 70.85775428818677, 45.39518682501545, 64.64623963542583, 75.388584667622, 35.81583714374515, 163.84842677927236, 23.287376704017305, 137.58420867770985, 0.0, 37.12822490480958, 124.13161220951045, 0.0, 0.0, 0.0, 0.0, 0.0, 160.31031789613752, 179.457126882294, 0.0, 0.0, 0.0, 0.0, 0.0, 178.76870294038906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 125.05879592720305, 0.0, 0.0, 0.0, 82.34742763458985, 0.0, 124.82355429905995, 111.30804524961806, 98.55083708054153, 44.27165683458167, 80.46025563400516, 33.994869394751504, 120.3409165976771, 75.65307256886219, 94.42272154844225, 85.2479586867108, 175.98934686683094, 135.80846300898332, 81.18654674717315, 62.388448993558555, 76.90387524771157, 55.879972410970765, 68.53673416018222, 45.70296951868455, 72.87774713652195, 68.5897020737445, 82.79647693305742, 42.87694758590477, 42.280679144049294, 114.99337284163276, 55.33028840961062, 73.32281226078958, 47.22657085590412, 69.97968229168922, 125.17937335033297, 22.736618181315475, 73.75492994507402, 54.08789996527999, 92.25088832068884, 130.59432453741613, 73.83896182626569, 84.00432256481744, 157.347923723631, 53.60103773165767, 41.2142362135766, 25.04832258199615, 53.46651268758005, 208.46033631464118, 36.290319887932746, 37.94019916939712, 87.8544838359634, 105.97358465676032, 0.0, 121.84070573519304, 0.0, 75.17146440703182, 0.0, 198.97114889585606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 231.1905498906006, 0.0, 0.0, 0.0, 0.0, 683.1104290005455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 158.88131214721415, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 67.51484722112059, 58.74115983165087, 111.16778896789675, 0.0, 85.2469344643398, 113.62152018470715, 133.60284902892886, 124.7792583852409, 76.0372420610131, 138.8852278478347, 157.68368502191035, 52.87299822755848, 113.56500112979936, 14.98793940218816, 105.80868867675849, 93.47997918124751, 85.12072743423356, 81.18587251569313, 63.307264361432, 52.54660601932014, 65.81231214657296, 92.38569474990565, 97.76911416153756, 44.95990012863325, 13.755944084218244, 82.50701110224563, 99.88803122041615, 23.189621991926906, 51.51331392608493, 89.37731245084157, 87.81114223289839, 55.06812595736979, 119.48237192603445, 68.49504795550592, 73.67173329518178, 33.933358059118675, 129.21251095805056, 62.338638088866, 156.35606537759773, 105.21657509267573, 90.5420009479092, 139.540643048854, 76.99981275166769, 80.26996034619023, 96.28493035816186, 105.95733811885755, 61.08002590048862, 0.0, 0.0, 0.0, 90.75895626310066, 104.80197409978275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 65.58519043922298, 58.27762736444411, 0.0, 0.0, 171.0686335289834, 0.0, 98.60101134876321, 59.47137764625677, 242.33377298228757, 234.95786783552583, 86.25999853547484, 94.48391553164703, 84.5598307893743, 109.62863135978611, 41.00276516696951, 121.88324525321092, 50.007472028008614, 69.10605698211053, 88.23567206673373, 49.34361478922676, 124.44506833595894, 92.81378123291681, 90.69328854081898, 106.92243279896996, 98.33646555565824, 89.34412733662643, 82.24725604835099, 65.69336511759738, 87.90158327895628, 74.01700009493015, 67.50392587731255, 13.406699107732496, 65.42033947153348, 86.44599331398828, 77.79996021801685, 65.75918629709395, 218.3115147422123, 53.71207526909102, 88.00100714143616, 62.88047865933732, 149.18411545757039, 42.11375211732282, 0.0, 51.96590871632659, 0.0, 70.03981824078882, 73.59292565597748, 0.0, 0.0, 0.0, 0.0, 129.29625908368664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 260.9420620144606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 142.15384843422237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 63.10390043533058, 0.0, 0.0, 92.09880168637505, 45.58857743392459, 114.5981400394632, 0.0, 92.82228907655875, 56.6635752039194, 96.85280326705997, 70.48537690625781, 124.58031825136727, 134.70651525632047, 68.5465506934033, 48.02169785601148, 91.06930165428574, 69.7118500880667, 64.6514716509175, 53.34794747513037, 68.41426357428392, 80.38166206481321, 150.33107281934338, 110.70475654151684, 140.7325349762423, 108.06857369249767, 76.18928703724427, 147.36264777481523, 82.03953147636692, 131.56420535925577, 157.19735618329838, 67.27643801703448, 131.35169812681525, 80.24504974093104, 132.06406211964588, 27.240824362706977, 82.35996334216469, 90.66920745807778, 63.237407229306505, 72.21637184700755, 79.45773940829508, 137.09490634427553, 52.92687127000112, 0.0, 0.0, 0.0, 153.7527206300132, 0.0, 93.92552784993069, 0.0, 0.0, 0.0, 0.0, 170.6031228963052, 179.98059548968087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 128.08137013959254, 0.0, 103.39075022194335, 0.0, 0.0, 80.10599482884436, 140.7244997531779, 0.0, 0.0, 102.0575411989843, 0.0, 38.73384565915955, 77.20277838149462, 34.5612800604505, 190.7282897274312, 26.785147614386283, 75.52235323641531, 95.9956505518795, 45.42527117503178, 62.58843127894498, 75.67299379287255, 36.19423419217398, 99.45839962173164, 32.17147277625163, 88.06736467756832, 45.955384972999006, 43.23741981287666, 60.411927576998714, 41.699867861355514, 90.18547031514427, 71.93728454822786, 77.42798048445547, 93.2675674955101, 35.00179390169231, 70.16606737584192, 208.39178671641992, 39.45601430516197, 90.24954195253352, 74.64636613460631, 106.37457197509997, 85.68963987707136, 92.77619848169202, 249.48012358676192, 76.35330254727698, 83.73939833818973, 232.2313388575694, 103.22817214435561, 59.55165795411456, 0.0, 0.0, 0.0, 164.7642435034516, 0.0, 0.0, 0.0, 119.82411880880163, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.01463122836805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 81.29064978326578, 74.16008148234535, 73.7015434113958, 0.0, 0.0, 53.85910452409994, 49.84798611550507, 0.0, 83.53808111256018, 100.97371501680487, 0.0, 96.1589800869812, 108.63300457513142, 123.87291380370016, 47.29752895845898, 0.0, 84.49466462002061, 139.6812667170638, 97.12593002461011, 38.73040618894969, 54.74741110962377, 69.63030073509462, 91.08778145519751, 34.76743612008514, 36.300569449882786, 57.685807266855534, 146.0475038747914, 142.09453660451652, 125.33226203124079, 84.36404534903022, 22.104642040055733, 73.7577991325516, 126.5718006100485, 134.224937015389, 88.89451488424972, 135.05856009835006, 33.7283873307039, 38.84576856024864, 43.36419004783761, 45.05875829071597, 0.0, 56.99512699168794, 128.50881602729868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 74.2877297617897, 0.0, 0.0, 0.0, 54.403843232422915, 243.2690818920171, 138.30365863863713, 38.59328412357248, 73.32909977223517, 136.74819901230904, 67.07488349473488, 93.47379712347535, 118.28319076381071, 25.720401336242134, 101.83415934160794, 48.686753836609846, 47.339297309655244, 159.35505338418625, 137.77298237865645, 106.9039172547111, 88.8034686275138, 84.96455012923492, 150.32048451666702, 110.1141674738972, 110.313591266667, 185.1449442182747, 47.85964681007849, 101.5790662661107, 237.61650267871659, 30.48175435139965, 62.01610039180875, 67.75921596742025, 72.46761552667712, 113.91718876851789, 41.12890134621962, 91.77774267719391, 105.36628165187668, 0.0, 0.0, 0.0, 0.0, 77.83708766696435, 0.0, 0.0, 0.0, 0.0, 123.04486660962016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 60.486301125909286, 0.0, 0.0, 93.24634146290691, 128.9535253516135, 81.26532883548172, 116.30724581995392, 0.0, 68.18077817282685, 126.90340672207775, 60.22921550572854, 109.50351675160786, 84.71553538309539, 0.0, 80.58919487053761, 127.44860204044105, 55.18322828428914, 51.065714804584644, 50.8025564280643, 83.49727795223441, 160.91095854773135, 196.45324995117653, 136.16424935196937, 87.57714495025465, 91.76113722201558, 102.1150606691518, 36.58600255695933, 37.89988133445884, 38.13565951334403, 39.90871228764865, 142.1208831387791, 46.454552297626236, 104.68693063469871, 0.0, 0.0, 0.0, 0.0, 170.61631177224984, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 62.60324618940743, 0.0, 60.28286012654514, 51.12807196972976, 0.0, 0.0, 87.30750447139191, 83.53476073210388, 77.50755210744134, 151.32897767175032, 37.72679295632877, 174.68603108913544, 65.61849298709727, 34.261202251719524, 30.46379830188696, 157.68616540250412, 57.53503588893232, 59.60908905047099, 87.84881554436737, 93.81274360768924, 96.47174184441221, 95.70668818410887, 33.47471627076902, 0.0, 36.83709944965444, 0.0, 208.4391402212578, 0.0, 96.08038907068145, 95.84536474603429, 0.0, 56.347535987731135, 60.45787000120274, 70.98425823274607, 0.0, 166.54540263778136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.19762735551632, 0.0, 160.67064124828903, 0.0, 0.0, 128.21207616359473, 56.12684927553137, 0.0, 0.0, 0.0, 46.64036208646203, 39.69364034480131, 0.0, 80.11515071454762, 77.752095124422, 107.08976633370443, 112.42073751873652, 34.84549058217706, 0.0, 34.909954131444884, 37.43630882520503, 37.402838232190845, 151.7040467592389, 76.27594591846281, 233.40667027881295, 40.15760737845034, 43.67814424416987, 45.02004822404974, 188.9812117385274, 0.0, 111.33833173468375, 119.78091756097439, 62.6077846589605, 0.0, 0.0, 74.43647339798423, 80.81103617252404, 0.0, 0.0, 0.0, 218.9006512469074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.91709737979488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 267.0827595828322, 123.09761773619081, 54.026978100959994, 0.0, 156.35864950242456, 50.78637702834017, 47.75542979220776, 0.0, 45.60957199748818, 45.692490724417176, 0.0, 211.22654407592643, 88.40621150787058, 0.0, 0.0, 44.00434648485665, 40.87485513916764, 44.01498493719346, 49.26439551836856, 0.0, 51.093452176737884, 0.0, 0.0, 57.140199885330674, 58.541144846404364, 0.0, 69.54912506006153, 0.0, 154.9246275229101, 81.26963074243723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 98.14017904379722, 0.0, 0.0, 0.0, 0.0, 67.6075345498144, 61.736080841844, 127.93372734290352, 112.24331004369068, 170.0041465753198, 110.65881669397615, 103.15935836196724, 0.0, 103.04727671581716, 52.92694113644016, 50.28847409567516, 147.50409933791488, 140.8563313645806, 195.63870657704305, 0.0, 54.05276784469715, 0.0, 0.0, 0.0, 109.9667368316586, 124.45597328943947, 0.0, 61.934889206692205, 0.0, 148.5048778894491, 0.0, 167.7435873256984, 92.24307788789461, 0.0, 0.0, 0.0, 120.86245095783273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 397.12809538505957, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05601205673338, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 93.35429267800549, 0.0, 82.90190061418201, 81.33847239577696, 0.0, 69.43859771683876, 0.0, 129.39124779363613, 64.75109111334433, 126.42279016246556, 0.0, 0.0, 233.95407267939012, 0.0, 0.0, 0.0, 0.0, 0.0, 59.84310425505958, 59.84065841208439, 125.08567421506623, 0.0, 195.5880517429354, 71.13536130399874, 0.0, 0.0, 0.0, 0.0, 84.51593539149934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 94.76038617923513, 0.0, 82.71198893216418, 82.06191952585996, 81.60842868724205, 0.0, 140.3924449753012, 0.0, 67.98326720988702, 68.32980104809873, 0.0, 70.20799055325578, 62.01348391612866, 62.244525339673835, 0.0, 0.0, 68.70942166895242, 0.0, 0.0, 70.97682849349265, 0.0, 0.0, 81.10784212893785, 247.15993678519104, 87.12127320492301, 95.4479413566035, 96.35252079818447, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 166.50348543251386, 0.0, 147.93500659055977, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 102.74945056644269, 94.85122402019783, 0.0, 84.00798866132908, 0.0, 81.76385624578649, 0.0, 0.0, 0.0, 0.0, 0.0, 155.16186713215507, 80.33187480399664, 226.3419384830923, 0.0, 0.0, 0.0, 0.0, 0.0, 90.13003224827351, 176.79476806368672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126.17047495594964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 96.56390603764018, 85.97334502298109, 96.88124774630373, 0.0, 89.5914840478297, 0.0, 0.0, 81.58592670784444, 82.84269248095897, 92.74027061018151, 83.4826326258558, 0.0, 96.06886574058558, 0.0, 0.0, 0.0, 0.0, 109.75495379446856, 108.52134313501466, 0.0, 0.0, 0.0, 0.0, 140.24718370963996, 148.32324844178774, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 387.50512916948225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 105.59483207077288, 0.0, 106.20380127945195, 97.38895365414201, 0.0, 0.0, 99.09084417370245, 0.0, 100.77789530740216, 105.33433240005462, 0.0, 216.79587265365873, 0.0, 0.0, 0.0, 122.06789004342444, 121.77459864351154, 0.0, 135.5345364839824, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 151.6110544713247, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 119.05818037935114, 118.07350944638264, 0.0, 0.0, 0.0, 108.37126414832127, 0.0, 0.0, 0.0, 0.0, 0.0, 109.74060882763929, 0.0, 0.0, 0.0, 0.0, 134.5267467115779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 179.05087260171794, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 147.95676534354004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 133.1069686450285, 267.18950905385543, 0.0, 0.0, 138.13252010013355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 193.01115132188883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 162.8557517163636, 0.0, 0.0, 0.0, 0.0, 0.0, 148.98876853013948, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.0393581621168, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 168.2824924290136, 0.0, 0.0, 155.1789114058798, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 205.17556857409946, 0.0, 0.0, 0.0, 174.66503048058067, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 196.4077710446529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 190.04902464387305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 407.93320258975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
return.fSumw2.fArray[] elements >= 0.0
return.fOption has only one value
return.fOption.toString == ""
return.fFunctions has only one value
return.fFunctions.name has only one value
return.fFunctions.name.toString == ""
return.fFunctions.fSize == 0
return.fFunctions.list has only one value
return.fFunctions.list.getClass().getName() == java.util.ArrayList.class
return.fFunctions.fUniqueID == 0
return.fFunctions.fBits == 50331648
return.fBufferSize == 0
return.fBuffer == null
return.fBinStatErrOpt has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kNormal has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.kPoisson2 has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES has only one value
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES.getClass().getName() == hep.io.root.output.classes.hist.TH1$EBinErrorOpt[].class
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[] contains no nulls and has only one value, of length 3
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() == [hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt, hep.io.root.output.classes.hist.TH1.EBinErrorOpt]
hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[].getClass().getName() elements == hep.io.root.output.classes.hist.TH1.EBinErrorOpt.class
return.name has only one value
return.name.toString == "test5"
return.title has only one value
return.title.toString == "Profile created from Java"
return.fUniqueID == 0
return.fBits == 50331648
size(return.fBinEntries.fArray[]) == 10404
size(hep.io.root.output.classes.hist.EErrorType.$VALUES[]) == 4
size(return.fBinSumw2.fArray[]) == 10404
size(return.array.fArray[]) == 10404
size(return.fSumw2.fArray[]) == 10404
size(hep.io.root.output.classes.hist.TH1$EBinErrorOpt.$VALUES[]) == 3
Exiting Daikon.
