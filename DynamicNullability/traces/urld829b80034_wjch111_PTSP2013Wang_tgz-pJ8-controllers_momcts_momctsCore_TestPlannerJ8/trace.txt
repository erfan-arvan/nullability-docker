Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
controllers.momcts.MOOTools$firstDimComparator:::OBJECT
this.optDirection == 1
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.compare(java.lang.Object, java.lang.Object):::ENTER
arg0.getClass().getName() == arg1.getClass().getName()
arg0 != null
arg0.getClass().getName() == java.util.Vector.class
arg1 != null
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.compare(java.lang.Object, java.lang.Object):::EXIT272
return == 1
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.compare(java.lang.Object, java.lang.Object):::EXIT273
return == 0
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.compare(java.lang.Object, java.lang.Object):::EXIT274
return == -1
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.compare(java.lang.Object, java.lang.Object):::EXIT
this.optDirection == orig(this.optDirection)
return one of { -1, 0, 1 }
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.firstDimComparator(boolean):::ENTER
arg0 == true
===========================================================================
controllers.momcts.MOOTools$firstDimComparator.firstDimComparator(boolean):::EXIT
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
arg2 == true
size(arg0[]) == 3
size(arg1[]) == 3
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT60
return == false
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT60;condition="not(return == true)"
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT67
(return == false)  ==>  (orig(arg0) == orig(arg1))
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT67;condition="return == true"
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT67;condition="not(return == true)"
orig(arg0) == orig(arg1)
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
controllers.momcts.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
controllers.momcts.MOOTools.fastNonDominatedSort(java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 == true
===========================================================================
controllers.momcts.MOOTools.fastNonDominatedSort(java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
return[].getClass().getName() one of { [java.util.Vector], [java.util.Vector, java.util.Vector] }
size(return[]) one of { 1, 2 }
===========================================================================
controllers.momcts.MOOTools.nonDominatedInds(java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 == true
===========================================================================
controllers.momcts.MOOTools.nonDominatedInds(java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.MOOTools.nonDominatedPnts(java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 == true
===========================================================================
controllers.momcts.MOOTools.nonDominatedPnts(java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.momctsCore.MOMCTS:::CLASS
controllers.momcts.momctsCore.MOMCTS.RdomType has only one value
controllers.momcts.momctsCore.MOMCTS.RdomType != null
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == "Dom"
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == 10
===========================================================================
controllers.momcts.momctsCore.MOMCTS:::OBJECT
this.archive.solNbLimit == this.solNbLimitPerPoint
this has only one value
this.getClass().getName() == controllers.momcts.momctsCore.TestPlanner.class
this.root has only one value
this.root != null
this.root.action == -1
this.root.state == 0
this.root.sons has only one value
this.root.sons != null
this.root.sons[] elements != null
this.root.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
this.root.context has only one value
this.root.context != null
this.root.context[] == []
this.root.context[].getClass().getName() == []
this.root.rwds has only one value
this.root.rwds != null
this.root.nbs has only one value
this.root.nbs != null
this.root.rwdAges has only one value
this.root.rwdAges != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] elements != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() elements == java.lang.String.class
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String] }
this.archive has only one value
this.archive != null
this.archive.points != null
this.archive.points[] elements != null
this.archive.points[].getClass().getName() elements == java.util.Vector.class
this.archive.pnt2sols has only one value
this.archive.pnt2sols != null
this.objectives[] contains no nulls and has only one value, of length 3
this.objectives[] elements != null
this.objectives[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.objectives[].getClass().getName() elements == java.lang.String.class
this.metaRewardType has only one value
this.metaRewardType != null
this.metaRewardType.toString == "testDom"
this.maximize == true
this.smt >= 0
this.pwConst == 0.5
this.EvEConsts has only one value
this.EvEConsts != null
this.raveLocal == 10
this.defDiscount == 0.99
this.solNbLimitPerPoint one of { -1, 3 }
this.solNbLimitPerPoint != 0
this.dbg has only one value
this.dbg != null
controllers.momcts.utils.Debug.debugOn == true
this.dbg.counter == 0
this.dbg.currentTime == -1
this.dbg.initMemory == -1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) one of { 0, 3 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])-1 != 0
size(this.objectives[]) == 3
this.root.action < this.smt
this.root.action <= this.solNbLimitPerPoint
===========================================================================
controllers.momcts.momctsCore.MOMCTS.MOMCTS(java.lang.String, boolean, double, int, double):::ENTER
arg0 has only one value
arg0.toString == "testDom"
arg1 == true
arg2 == 0.5
arg3 == 10
arg4 == 0.99
===========================================================================
controllers.momcts.momctsCore.MOMCTS.MOMCTS(java.lang.String, boolean, double, int, double):::EXIT
this.root.action == this.solNbLimitPerPoint
this.metaRewardType == orig(arg0)
this.maximize == orig(arg1)
this.pwConst == orig(arg2)
this.raveLocal == orig(arg3)
this.defDiscount == orig(arg4)
arg0.toString == orig(arg0.toString)
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == []
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.objectives == null
this.smt == 0
this.solNbLimitPerPoint == -1
arg0.toString == "testDom"
===========================================================================
controllers.momcts.momctsCore.MOMCTS.UCBRanks(java.util.Vector, java.lang.String, double, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
arg2 == 0.05
arg3 == false
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.UCBRanks(java.util.Vector, java.lang.String, double, boolean):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg1)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Double.class
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.bestUCB(controllers.momcts.momctsCore.MOUCT, java.lang.String, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0.action >= -1
arg0.state == 0
arg0.sons != null
arg0.sons[] elements != null
arg0.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
arg1.toString == "testDom"
arg2 == false
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action <= arg0.action
this.smt > arg0.action
this.solNbLimitPerPoint >= arg0.action
===========================================================================
controllers.momcts.momctsCore.MOMCTS.bestUCB(controllers.momcts.momctsCore.MOUCT, java.lang.String, boolean):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg1)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0.action == orig(arg0.action)
arg0.state == orig(arg0.state)
arg0.sons == orig(arg0.sons)
arg0.sons[] == orig(arg0.sons[])
arg0.context == orig(arg0.context)
arg0.context[] == orig(arg0.context[])
arg0.rwds == orig(arg0.rwds)
arg0.nbs == orig(arg0.nbs)
arg0.rwdAges == orig(arg0.rwdAges)
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0.action >= -1
arg0.state == 0
arg0.sons != null
arg0.sons[] elements != null
arg0.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
arg1.toString == "testDom"
return != null
return.action >= 0
return.state == 0
return.sons != null
return.sons[] elements != null
return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return.context != null
return.context[] elements != null
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds != null
return.nbs != null
return.rwdAges != null
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(return.context[]) >= 1
this.root.action <= arg0.action
this.root.action < return.action
this.smt > arg0.action
this.smt >= return.action
this.solNbLimitPerPoint >= arg0.action
this.solNbLimitPerPoint >= return.action
===========================================================================
controllers.momcts.momctsCore.MOMCTS.bestUCB(java.util.Vector, java.lang.String, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
arg2 == false
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.bestUCB(java.util.Vector, java.lang.String, boolean):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg1)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
return != null
return.action >= 0
return.state == 0
return.sons != null
return.sons[] elements != null
return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return.context != null
return.context[] elements != null
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds != null
return.nbs != null
return.rwdAges != null
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(return.context[]) >= 1
this.root.action < return.action
this.smt >= return.action
this.solNbLimitPerPoint >= return.action
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getArchive():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getArchive():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == return
this.archive.points == return.points
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == return.pnt2sols
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == return.solNbLimit
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
return == orig(this.archive)
return.points == orig(this.archive.points)
return.pnt2sols == orig(this.archive.pnt2sols)
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
return has only one value
return.points has only one value
return.points[] contains no nulls and has only one value, of length 40
return.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
return.points[].getClass().getName() elements == java.util.Vector.class
return.pnt2sols has only one value
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
size(return.points[]) == 40
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getEvEConst(java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg0
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0.toString == "testDom"
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getEvEConst(java.lang.String):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg0)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0.toString == "testDom"
return == 0.05
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getMetaRewardType():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getMetaRewardType():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == return
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
return == orig(this.metaRewardType)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
return has only one value
return != null
return.toString == "testDom"
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getRoot():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getRoot():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == return
this.root.action == return.action
this.root.state == orig(this.root.state)
this.root.sons == return.sons
this.root.sons[] == orig(this.root.sons[])
this.root.context == return.context
this.root.context[] == orig(this.root.context[])
this.root.rwds == return.rwds
this.root.nbs == return.nbs
this.root.rwdAges == return.rwdAges
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
return == orig(this.root)
return.action == orig(this.root.action)
return.sons == orig(this.root.sons)
return.context == orig(this.root.context)
return.rwds == orig(this.root.rwds)
return.nbs == orig(this.root.nbs)
return.rwdAges == orig(this.root.rwdAges)
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
return has only one value
return.action == -1
return.state == 0
return.sons has only one value
return.sons[] contains no nulls and has only one value, of length 4
return.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return.context has only one value
return.context[] == []
return.context[].getClass().getName() == []
return.rwds has only one value
return.nbs has only one value
return.rwdAges has only one value
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
size(return.sons[]) == 4
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getSmt():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.getSmt():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == return
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
return == orig(this.smt)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < return
===========================================================================
controllers.momcts.momctsCore.MOMCTS.isMaximize():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
===========================================================================
controllers.momcts.momctsCore.MOMCTS.isMaximize():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == return
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
return == orig(this.maximize)
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] contains no nulls and has only one value, of length 40
this.archive.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.smt == 1001
this.solNbLimitPerPoint == 3
return == true
size(this.root.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) == 40
===========================================================================
controllers.momcts.momctsCore.MOMCTS.isMaximize():::EXIT;condition="return == true"
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence():::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < orig(this.smt)
this.smt - orig(this.smt) - 1 == 0
size(this.root.sons[]) >= orig(size(this.root.sons[]))
size(this.root.sons[])-1 <= orig(size(this.root.sons[]))
size(this.root.sons[])-1 >= orig(size(this.root.sons[]))-1
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 == 0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < orig(this.smt)
this.smt - orig(this.smt) - 1 == 0
size(this.root.sons[]) >= orig(size(this.root.sons[]))
size(this.root.sons[])-1 <= orig(size(this.root.sons[]))
size(this.root.sons[])-1 >= orig(size(this.root.sons[]))-1
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 == 0
arg1 == false
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < orig(this.smt)
this.smt - orig(this.smt) - 1 == 0
size(this.root.sons[]) >= orig(size(this.root.sons[]))
size(this.root.sons[])-1 <= orig(size(this.root.sons[]))
size(this.root.sons[])-1 >= orig(size(this.root.sons[]))-1
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean, java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 == 0
arg1 == false
arg2 has only one value
arg2 != null
arg2.toString == "a"
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean, java.lang.String):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg2.toString == orig(arg2.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg2.toString == "a"
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < orig(this.smt)
this.smt - orig(this.smt) - 1 == 0
size(this.root.sons[]) >= orig(size(this.root.sons[]))
size(this.root.sons[])-1 <= orig(size(this.root.sons[]))
size(this.root.sons[])-1 >= orig(size(this.root.sons[]))-1
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean, java.lang.String, boolean, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 == 0
arg1 == false
arg2 has only one value
arg2 != null
arg2.toString == "a"
arg3 == false
arg4 == false
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.playOneSequence(long, boolean, java.lang.String, boolean, boolean):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg2.toString == orig(arg2.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg2.toString == "a"
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.root.action < orig(this.smt)
this.smt - orig(this.smt) - 1 == 0
size(this.root.sons[]) >= orig(size(this.root.sons[]))
size(this.root.sons[])-1 <= orig(size(this.root.sons[]))
size(this.root.sons[])-1 >= orig(size(this.root.sons[]))-1
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setEvEConst(java.lang.String, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg0
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
this.solNbLimitPerPoint == 3
arg0.toString == "testDom"
arg1 == 0.05
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setEvEConst(java.lang.String, double):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg0)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0.toString == orig(arg0.toString)
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
this.solNbLimitPerPoint == 3
arg0.toString == "testDom"
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setObjectives(java.util.Vector):::ENTER
this.root.action == this.solNbLimitPerPoint
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == []
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.objectives == null
this.smt == 0
this.solNbLimitPerPoint == -1
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[].getClass().getName() elements == java.lang.String.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setObjectives(java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == this.solNbLimitPerPoint
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg0)
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.root.action)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
this.solNbLimitPerPoint == -1
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[].getClass().getName() elements == java.lang.String.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setSolNbLimitPerPoint(int):::ENTER
this.root.action == this.solNbLimitPerPoint
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
this.solNbLimitPerPoint == -1
arg0 == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.setSolNbLimitPerPoint(int):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.action == orig(this.archive.solNbLimit)
this.root.action == orig(this.solNbLimitPerPoint)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(arg0)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
this.solNbLimitPerPoint == 3
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.totalNb(java.util.Vector, java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.totalNb(java.util.Vector, java.lang.String):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg1)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1.toString == "testDom"
size(this.root.sons[]) one of { 2, 3, 4 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.defDiscount < return
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateArchive(java.util.Vector, java.util.Vector):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg0[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateArchive(java.util.Vector, java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.archive.points[]) >= orig(size(this.archive.points[]))-1
size(this.archive.points[])-1 <= orig(size(this.archive.points[]))
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateDomReward(java.util.Vector, java.util.Vector, int, java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.metaRewardType == arg3
this.smt == arg2
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
arg3.toString == "testDom"
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateDomReward(java.util.Vector, java.util.Vector, int, java.lang.String):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType == orig(arg3)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.smt == orig(arg2)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg3.toString == orig(arg3.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
arg3.toString == "testDom"
return one of { 0.0, 1.0 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
this.defDiscount != return
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg2
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] contains no nulls and has only one value, of length 3
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
arg3 != null
arg3[] elements != null
arg3[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg3[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 5
size(arg2[]) == 3
size(arg3[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg2)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] contains no nulls and has only one value, of length 3
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
arg3[] elements != null
arg3[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg3[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg2
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] contains no nulls and has only one value, of length 3
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
arg3 != null
arg3[] elements != null
arg3[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg3[].getClass().getName() elements == java.lang.Double.class
arg4 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 5
size(arg2[]) == 3
size(arg3[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, double):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg2)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
arg3[] == orig(arg3[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg1[].getClass().getName() elements == java.lang.Integer.class
arg2[] contains no nulls and has only one value, of length 3
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
arg3[] elements != null
arg3[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg3[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg1
this.smt == arg3
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 3
size(arg2[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg1)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.smt == orig(arg3)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg1
this.smt == arg3
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
arg4 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 3
size(arg2[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOMCTS.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int, double):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg1)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.smt == orig(arg3)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.solNbLimitPerPoint == 3
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT:::CLASS
controllers.momcts.momctsCore.MOUCT.defRwdTypes != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] elements != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() elements == java.lang.String.class
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String] }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) one of { 0, 3 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])-1 != 0
===========================================================================
controllers.momcts.momctsCore.MOUCT:::OBJECT
this.action >= -1
this.state == 0
this.sons != null
this.sons[] elements != null
this.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
this.context != null
this.context[] elements != null
this.context[].getClass().getName() elements == java.lang.Integer.class
this.rwds != null
this.nbs != null
this.rwdAges != null
===========================================================================
controllers.momcts.momctsCore.MOUCT.MOUCT(int):::ENTER
===========================================================================
controllers.momcts.momctsCore.MOUCT.MOUCT(int):::EXIT
this.action == orig(arg0)
this.sons[] == []
this.sons[].getClass().getName() == []
this.context[] == []
this.context[].getClass().getName() == []
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return.action == orig(arg0)
size(this.sons[])-1 == orig(size(this.sons[]))
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return.action >= 0
return.state == 0
return.sons != null
return.sons[] == []
return.sons[].getClass().getName() == []
return.context != null
return.context[] elements != null
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds != null
return.nbs != null
return.rwdAges != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int, int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
arg1 == -1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int, int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return.action == orig(arg0)
size(this.sons[])-1 == orig(size(this.sons[]))
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return.action >= 0
return.state == 0
return.sons != null
return.sons[] == []
return.sons[].getClass().getName() == []
return.context != null
return.context[] elements != null
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds != null
return.nbs != null
return.rwdAges != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int, int, boolean):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
arg1 == -1
arg2 == true
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int, int, boolean):::EXIT243
===========================================================================
controllers.momcts.momctsCore.MOUCT.addSon(int, int, boolean):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return.action == orig(arg0)
size(this.sons[])-1 == orig(size(this.sons[]))
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return.action >= 0
return.state == 0
return.sons != null
return.sons[] == []
return.sons[].getClass().getName() == []
return.context != null
return.context[] elements != null
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds != null
return.nbs != null
return.rwdAges != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= 0.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String, int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg1 one of { -1, 4 }
arg1 != 0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String, int):::EXIT131
arg0.toString one of { "a", "b", "c" }
orig(arg1) == 4
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String, int):::EXIT132
orig(arg1) == -1
===========================================================================
controllers.momcts.momctsCore.MOUCT.avgR(java.lang.String, int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= 0.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.extractActs(java.util.Vector):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.extractActs(java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.findSon(int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.findSon(int):::EXIT273
this.action == -1
this.sons has only one value
this.sons[] contains no nulls and has only one value, of length 4
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
this.context has only one value
this.context[] == []
this.context[].getClass().getName() == []
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
return has only one value
orig(this) has only one value
size(this.sons[]) == 4
===========================================================================
controllers.momcts.momctsCore.MOUCT.findSon(int):::EXIT275
return == null
===========================================================================
controllers.momcts.momctsCore.MOUCT.findSon(int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return.action == orig(arg0)
(return == null)  ==>  (this.context[].getClass().getName() elements == java.lang.Integer.class)
(return has only one value)  <==>  (size(this.sons[]) == 4)
(return has only one value)  ==>  (orig(arg0) == 1)
(return has only one value)  ==>  (orig(this) has only one value)
(return has only one value)  ==>  (return.action == orig(arg0))
(return has only one value)  ==>  (return.context has only one value)
(return has only one value)  ==>  (return.context[] contains no nulls and has only one value, of length 1)
(return has only one value)  ==>  (return.context[] elements has only one value)
(return has only one value)  ==>  (return.context[].getClass().getName() == [java.lang.Integer])
(return has only one value)  ==>  (return.context[].getClass().getName() elements == java.lang.Integer.class)
(return has only one value)  ==>  (return.nbs has only one value)
(return has only one value)  ==>  (return.rwdAges has only one value)
(return has only one value)  ==>  (return.rwds has only one value)
(return has only one value)  ==>  (return.sons has only one value)
(return has only one value)  ==>  (return.sons[] contains no nulls and has only one value, of length 4)
(return has only one value)  ==>  (return.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT])
(return has only one value)  ==>  (return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class)
(return has only one value)  ==>  (this.action == -1)
(return has only one value)  ==>  (this.context has only one value)
(return has only one value)  ==>  (this.context[] == [])
(return has only one value)  ==>  (this.context[].getClass().getName() == [])
(return has only one value)  ==>  (this.nbs has only one value)
(return has only one value)  ==>  (this.rwdAges has only one value)
(return has only one value)  ==>  (this.rwds has only one value)
(return has only one value)  ==>  (this.sons has only one value)
(return has only one value)  ==>  (this.sons[] contains no nulls and has only one value, of length 4)
(return has only one value)  ==>  (this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return.action == 1
return.state == 0
return.sons has only one value
return.sons[] contains no nulls and has only one value, of length 4
return.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return.context has only one value
return.context[] contains no nulls and has only one value, of length 1
return.context[] elements has only one value
return.context[].getClass().getName() == [java.lang.Integer]
return.context[].getClass().getName() elements == java.lang.Integer.class
return.rwds has only one value
return.nbs has only one value
return.rwdAges has only one value
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(return.sons[]) == 4
size(return.context[]) == 1
===========================================================================
controllers.momcts.momctsCore.MOUCT.getAction():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getAction():::EXIT
this.action == return
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return == orig(this.action)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= -1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getContext():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getContext():::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == return
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return == orig(this.context)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getNb(java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getNb(java.lang.String):::EXIT143
return == 0.0
size(this.sons[]) one of { 0, 1, 2 }
===========================================================================
controllers.momcts.momctsCore.MOUCT.getNb(java.lang.String):::EXIT144
return >= 1.0
===========================================================================
controllers.momcts.momctsCore.MOUCT.getNb(java.lang.String):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
(return == 0.0)  ==>  (size(this.sons[]) one of { 0, 1, 2 })
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= 0.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= 0.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String, int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg1 == -1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String, int):::EXIT110
return == 0.0
size(this.sons[]) one of { 0, 1, 2 }
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String, int):::EXIT113
===========================================================================
controllers.momcts.momctsCore.MOUCT.getRwd(java.lang.String, int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return >= 0.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getSon(int):::ENTER
this has only one value
this.action one of { -1, 1 }
this.sons has only one value
this.sons[] contains no nulls and has only one value, of length 4
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
this.context[] elements has only one value
this.context[].getClass().getName() one of { [], [java.lang.Integer] }
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 == 0
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getSon(int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.action one of { -1, 1 }
this.sons has only one value
this.sons[] contains no nulls and has only one value, of length 4
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
this.context[] elements has only one value
this.context[].getClass().getName() one of { [], [java.lang.Integer] }
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return has only one value
return.action == 1
return.state == 0
return.sons has only one value
return.sons[] contains no nulls and has only one value, of length 4
return.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
return.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return.context[].getClass().getName() elements == java.lang.Integer.class
return.context[].getClass().getName() one of { [java.lang.Integer], [java.lang.Integer, java.lang.Integer] }
return.rwds has only one value
return.nbs has only one value
return.rwdAges has only one value
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(return.sons[]) == 4
size(return.context[]) one of { 1, 2 }
===========================================================================
controllers.momcts.momctsCore.MOUCT.getSons():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.getSons():::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == return
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
return == orig(this.sons)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return[] elements != null
return[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.hasSon(int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.hasSon(int):::EXIT280
===========================================================================
controllers.momcts.momctsCore.MOUCT.hasSon(int):::EXIT280;condition="not(return == true)"
===========================================================================
controllers.momcts.momctsCore.MOUCT.hasSon(int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return == false
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.hasSon(int):::EXIT;condition="not(return == true)"
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRAVE(int, java.lang.String, double, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 >= 0
arg1 != null
arg2 >= 0.0
arg3 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
arg2 <= arg3
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRAVE(int, java.lang.String, double, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRwd(java.lang.String, double, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg1 >= 0.0
arg2 <= 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRwd(java.lang.String, double, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
return != orig(arg2)
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRwd(java.lang.String, double, int, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg1 >= 0.0
arg2 >= 0
arg3 one of { 0.99, 1.0 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
arg1 != arg3
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRwd(java.lang.String, double, int, double):::EXIT197
===========================================================================
controllers.momcts.momctsCore.MOUCT.incrementRwd(java.lang.String, double, int, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
return != orig(arg3)
===========================================================================
controllers.momcts.momctsCore.MOUCT.isLeaf():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.isLeaf():::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return == false
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.isLeaf():::EXIT;condition="not(return == true)"
===========================================================================
controllers.momcts.momctsCore.MOUCT.isRoot():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.isRoot():::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
(this.action == -1)  <==>  (return == true)
(this.action == -1)  ==>  (orig(this) has only one value)
(this.action == -1)  ==>  (this.context has only one value)
(this.action == -1)  ==>  (this.context[] == [])
(this.action == -1)  ==>  (this.context[].getClass().getName() == [])
(this.action == -1)  ==>  (this.nbs has only one value)
(this.action == -1)  ==>  (this.rwdAges has only one value)
(this.action == -1)  ==>  (this.rwds has only one value)
(this.action == -1)  ==>  (this.sons has only one value)
(this.action >= 0)  <==>  (return == false)
(this.action >= 0)  <==>  (size(this.context[]) >= 1)
(this.action >= 0)  ==>  (this.context[].getClass().getName() elements == java.lang.Integer.class)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.isRoot():::EXIT;condition="return == true"
this.action == -1
this.sons has only one value
this.context has only one value
this.context[] == []
this.context[].getClass().getName() == []
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
return == true
orig(this) has only one value
===========================================================================
controllers.momcts.momctsCore.MOUCT.isRoot():::EXIT;condition="not(return == true)"
this.action >= 0
return == false
size(this.context[]) >= 1
===========================================================================
controllers.momcts.momctsCore.MOUCT.resetAsRoot():::ENTER
this has only one value
this.action == 1
this.sons has only one value
this.sons[] contains no nulls and has only one value, of length 4
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
this.context has only one value
this.context[] contains no nulls and has only one value, of length 1
this.context[] elements has only one value
this.context[].getClass().getName() == [java.lang.Integer]
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(this.sons[]) == 4
size(this.context[]) == 1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.resetAsRoot():::EXIT
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
size(this.context[]) == orig(size(this.context[]))-1
this.action == -1
this.sons has only one value
this.sons[] contains no nulls and has only one value, of length 4
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
this.context has only one value
this.context[] == []
this.context[].getClass().getName() == []
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(this.sons[]) == 4
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.resetSonContexts(java.util.Vector):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.resetSonContexts(java.util.Vector):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(arg0)
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
size(this.context[]) == orig(size(this.context[]))-1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setContext(java.util.Vector):::ENTER
this.action >= 0
this.sons[] == []
this.sons[].getClass().getName() == []
this.context[] == []
this.context[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setContext(java.util.Vector):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(arg0)
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
this.action >= 0
this.sons[] == []
this.sons[].getClass().getName() == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.context[])-1 >= orig(size(this.context[]))
===========================================================================
controllers.momcts.momctsCore.MOUCT.setDefRwdTypes(java.util.Vector):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == []
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == []
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[].getClass().getName() elements == java.lang.String.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setDefRwdTypes(java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg0)
arg0[] == orig(arg0[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[].getClass().getName() elements == java.lang.String.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setNb(java.lang.String, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg1 >= 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setNb(java.lang.String, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setRwd(java.lang.String, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.setRwd(java.lang.String, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0.toString == orig(arg0.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int):::ENTER
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 == 1
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector):::ENTER
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 == 1
arg1[] == []
arg1[].getClass().getName() == []
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg1[] == orig(arg1[])
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[] == []
arg1[].getClass().getName() == []
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean):::ENTER
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 == 1
arg1[] == []
arg1[].getClass().getName() == []
arg2 == true
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg1[] == orig(arg1[])
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[] == []
arg1[].getClass().getName() == []
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean, java.lang.String):::ENTER
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 == 1
arg1[] == []
arg1[].getClass().getName() == []
arg2 == true
arg3 has only one value
arg3.toString == ""
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean, java.lang.String):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg1[] == orig(arg1[])
arg3.toString == orig(arg3.toString)
this.action one of { -1, 1 }
this.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[] == []
arg1[].getClass().getName() == []
arg3.toString == ""
size(this.sons[]) == 4
size(this.context[]) one of { 0, 1, 2 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean, java.lang.String, int):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 one of { 0, 1 }
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String] }
arg2 == true
arg3 != null
arg3.toString one of { "", "a" }
arg4 one of { 0, 1 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) one of { 0, 3 }
===========================================================================
controllers.momcts.momctsCore.MOUCT.showSelf(int, java.util.Vector, boolean, java.lang.String, int):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.sonActions():::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.sonActions():::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.update(java.util.Vector, java.lang.String, double, int, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg2 >= 0.0
arg3 >= 0
arg4 one of { 0.99, 1.0 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
arg2 != arg4
===========================================================================
controllers.momcts.momctsCore.MOUCT.update(java.util.Vector, java.lang.String, double, int, double):::EXIT
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVE(java.util.Vector, java.lang.String, double):::ENTER
this has only one value
this.action == -1
this.sons has only one value
this.context has only one value
this.context[] == []
this.context[].getClass().getName() == []
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1 has only one value
arg1 != null
arg1.toString == "testDom"
arg2 one of { 0.0, 1.0 }
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg0[]) == 5
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVE(java.util.Vector, java.lang.String, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
this.action == -1
this.sons has only one value
this.context has only one value
this.context[] == []
this.context[].getClass().getName() == []
this.rwds has only one value
this.nbs has only one value
this.rwdAges has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1.toString == "testDom"
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVE(java.util.Vector, java.lang.String, double, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1 != null
arg2 >= 0.0
arg3 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
arg2 <= arg3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVE(java.util.Vector, java.lang.String, double, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
arg3 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 3
size(arg2[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRAVEs(java.util.Vector, java.util.Vector, java.util.Vector, double):::EXIT
this.action == orig(this.action)
this.state == orig(this.state)
this.sons == orig(this.sons)
this.sons[] == orig(this.sons[])
this.context == orig(this.context)
this.context[] == orig(this.context[])
this.rwds == orig(this.rwds)
this.nbs == orig(this.nbs)
this.rwdAges == orig(this.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg1)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int, double):::ENTER
controllers.momcts.momctsCore.MOUCT.defRwdTypes == arg1
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
arg4 == 1.0
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(arg1[]) == 3
size(arg2[]) == 3
===========================================================================
controllers.momcts.momctsCore.MOUCT.updateRwds(java.util.Vector, java.util.Vector, java.util.Vector, int, double):::EXIT
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(arg1)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg2[] == orig(arg2[])
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg1[].getClass().getName() elements == java.lang.String.class
arg2[] elements != null
arg2[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg2[].getClass().getName() elements == java.lang.Double.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
===========================================================================
controllers.momcts.momctsCore.TestPlanner:::CLASS
controllers.momcts.momctsCore.MOMCTS.RdomType has only one value
controllers.momcts.momctsCore.MOMCTS.RdomType != null
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == "Dom"
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == 10
===========================================================================
controllers.momcts.momctsCore.TestPlanner:::OBJECT
controllers.momcts.momctsCore.MOUCT.defRwdTypes == this.objectives
this.archive.solNbLimit == this.solNbLimitPerPoint
this has only one value
this.root has only one value
this.root != null
this.root.action == -1
this.root.state == 0
this.root.sons has only one value
this.root.sons != null
this.root.sons[] elements != null
this.root.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
this.root.context has only one value
this.root.context != null
this.root.context[] == []
this.root.context[].getClass().getName() == []
this.root.rwds has only one value
this.root.rwds != null
this.root.nbs has only one value
this.root.nbs != null
this.root.rwdAges has only one value
this.root.rwdAges != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes has only one value
controllers.momcts.momctsCore.MOUCT.defRwdTypes != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] contains no nulls and has only one value, of length 3
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] elements != null
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
controllers.momcts.momctsCore.MOUCT.defRwdTypes[].getClass().getName() elements == java.lang.String.class
this.archive has only one value
this.archive != null
this.archive.points != null
this.archive.points[] elements != null
this.archive.points[].getClass().getName() elements == java.util.Vector.class
this.archive.pnt2sols has only one value
this.archive.pnt2sols != null
this.objectives[] contains no nulls and has only one value, of length 3
this.objectives[] elements != null
this.objectives[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.objectives[].getClass().getName() elements == java.lang.String.class
this.metaRewardType has only one value
this.metaRewardType != null
this.metaRewardType.toString == "testDom"
this.maximize == true
this.smt >= 0
this.pwConst == 0.5
this.EvEConsts has only one value
this.EvEConsts != null
this.raveLocal == 10
this.defDiscount == 0.99
this.solNbLimitPerPoint == 3
this.dbg has only one value
this.dbg != null
controllers.momcts.utils.Debug.debugOn == true
this.dbg.counter == 0
this.dbg.currentTime == -1
this.dbg.initMemory == -1
size(controllers.momcts.momctsCore.MOUCT.defRwdTypes[]) == 3
size(this.objectives[]) == 3
this.root.action < this.smt
===========================================================================
controllers.momcts.momctsCore.TestPlanner.TestPlanner():::EXIT
this.root.sons[] == []
this.root.sons[].getClass().getName() == []
this.archive.points has only one value
this.archive.points[] == []
this.archive.points[].getClass().getName() == []
this.smt == 0
===========================================================================
controllers.momcts.momctsCore.TestPlanner.candidateActions(controllers.momcts.momctsCore.MOUCT):::ENTER
arg0.action >= -1
arg0.state == 0
arg0.sons != null
arg0.sons[] elements != null
arg0.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
this.root.action <= arg0.action
this.smt >= arg0.action
this.solNbLimitPerPoint >= arg0.action
===========================================================================
controllers.momcts.momctsCore.TestPlanner.candidateActions(controllers.momcts.momctsCore.MOUCT):::EXIT33
this.root.sons[] contains no nulls and has only one value, of length 4
this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT]
arg0.action >= 0
arg0.sons[] == []
arg0.sons[].getClass().getName() == []
arg0.context[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return[] == []
return[].getClass().getName() == []
orig(arg0) != null
size(this.root.sons[]) == 4
size(arg0.context[]) == 6
this.root.action < arg0.action
this.smt > this.solNbLimitPerPoint
this.smt > arg0.action
===========================================================================
controllers.momcts.momctsCore.TestPlanner.candidateActions(controllers.momcts.momctsCore.MOUCT):::EXIT37
return[] contains no nulls and has only one value, of length 4
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
size(return[]) == 4
===========================================================================
controllers.momcts.momctsCore.TestPlanner.candidateActions(controllers.momcts.momctsCore.MOUCT):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0.action == orig(arg0.action)
arg0.state == orig(arg0.state)
arg0.sons == orig(arg0.sons)
arg0.sons[] == orig(arg0.sons[])
arg0.context == orig(arg0.context)
arg0.context[] == orig(arg0.context[])
arg0.rwds == orig(arg0.rwds)
arg0.nbs == orig(arg0.nbs)
arg0.rwdAges == orig(arg0.rwdAges)
(return[] == [])  <==>  (return[].getClass().getName() == [])
(return[] == [])  <==>  (size(arg0.context[]) == 6)
(return[] == [])  ==>  (arg0.action >= 0)
(return[] == [])  ==>  (arg0.context[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer])
(return[] == [])  ==>  (arg0.sons[] == [])
(return[] == [])  ==>  (arg0.sons[].getClass().getName() == [])
(return[] == [])  ==>  (orig(arg0) != null)
(return[] == [])  ==>  (size(this.root.sons[]) == 4)
(return[] == [])  ==>  (this.root.action < arg0.action)
(return[] == [])  ==>  (this.root.sons[] contains no nulls and has only one value, of length 4)
(return[] == [])  ==>  (this.root.sons[].getClass().getName() == [controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT, controllers.momcts.momctsCore.MOUCT])
(return[] == [])  ==>  (this.smt > arg0.action)
(return[] == [])  ==>  (this.smt > this.solNbLimitPerPoint)
(return[] contains no nulls and has only one value, of length 4)  <==>  (return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer])
(return[] contains no nulls and has only one value, of length 4)  <==>  (size(return[]) == 4)
(return[] contains no nulls and has only one value, of length 4)  ==>  (arg0.action >= -1)
(return[] contains no nulls and has only one value, of length 4)  ==>  (arg0.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class)
(return[] contains no nulls and has only one value, of length 4)  ==>  (return[].getClass().getName() elements == java.lang.Integer.class)
arg0.action >= -1
arg0.state == 0
arg0.sons != null
arg0.sons[] elements != null
arg0.sons[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
size(return[]) one of { 0, 4 }
size(return[])-1 != 0
this.root.action <= arg0.action
this.smt >= arg0.action
this.solNbLimitPerPoint >= arg0.action
===========================================================================
controllers.momcts.momctsCore.TestPlanner.evaluateSeq(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.momctsCore.TestPlanner.evaluateSeq(java.util.Vector):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
return != null
return[] elements != null
return[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
return[].getClass().getName() elements == java.lang.Double.class
size(return[]) == 3
===========================================================================
controllers.momcts.momctsCore.TestPlanner.generateRandomPath(controllers.momcts.momctsCore.MOUCT):::ENTER
arg0 != null
arg0.action >= 0
arg0.state == 0
arg0.sons != null
arg0.sons[] == []
arg0.sons[].getClass().getName() == []
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
this.root.action < arg0.action
this.solNbLimitPerPoint >= arg0.action
===========================================================================
controllers.momcts.momctsCore.TestPlanner.generateRandomPath(controllers.momcts.momctsCore.MOUCT):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
this.root == orig(this.root)
this.root.action == orig(this.root.action)
this.root.state == orig(this.root.state)
this.root.sons == orig(this.root.sons)
this.root.sons[] == orig(this.root.sons[])
this.root.context == orig(this.root.context)
this.root.context[] == orig(this.root.context[])
this.root.rwds == orig(this.root.rwds)
this.root.nbs == orig(this.root.nbs)
this.root.rwdAges == orig(this.root.rwdAges)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes)
controllers.momcts.momctsCore.MOUCT.defRwdTypes == orig(this.objectives)
controllers.momcts.momctsCore.MOUCT.defRwdTypes[] == orig(controllers.momcts.momctsCore.MOUCT.defRwdTypes[])
this.archive == orig(this.archive)
this.archive.points == orig(this.archive.points)
this.archive.points[] == orig(this.archive.points[])
this.archive.pnt2sols == orig(this.archive.pnt2sols)
this.objectives[] == orig(this.objectives[])
this.metaRewardType == orig(this.metaRewardType)
this.metaRewardType.toString == orig(this.metaRewardType.toString)
this.maximize == orig(this.maximize)
this.smt == orig(this.smt)
this.pwConst == orig(this.pwConst)
this.EvEConsts == orig(this.EvEConsts)
this.raveLocal == orig(this.raveLocal)
this.defDiscount == orig(this.defDiscount)
this.solNbLimitPerPoint == orig(this.archive.solNbLimit)
this.solNbLimitPerPoint == orig(this.solNbLimitPerPoint)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
this.dbg == orig(this.dbg)
controllers.momcts.utils.Debug.debugOn == orig(controllers.momcts.utils.Debug.debugOn)
this.dbg.counter == orig(this.dbg.counter)
this.dbg.currentTime == orig(this.dbg.currentTime)
this.dbg.initMemory == orig(this.dbg.initMemory)
arg0.action == orig(arg0.action)
arg0.state == orig(arg0.state)
arg0.sons == orig(arg0.sons)
arg0.sons[] == orig(arg0.sons[])
arg0.context == orig(arg0.context)
arg0.context[] == orig(arg0.context[])
arg0.rwds == orig(arg0.rwds)
arg0.nbs == orig(arg0.nbs)
arg0.rwdAges == orig(arg0.rwdAges)
arg0.action >= 0
arg0.state == 0
arg0.sons != null
arg0.sons[] == []
arg0.sons[].getClass().getName() == []
arg0.context != null
arg0.context[] elements != null
arg0.context[].getClass().getName() elements == java.lang.Integer.class
arg0.rwds != null
arg0.nbs != null
arg0.rwdAges != null
return != null
return[] elements != null
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return[].getClass().getName() elements == java.lang.Integer.class
size(return[]) == 5
this.root.action < arg0.action
this.solNbLimitPerPoint >= arg0.action
===========================================================================
controllers.momcts.momctsCore.TestPlanner.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
controllers.momcts.momctsCore.TestPlanner.main(java.lang.String[]):::EXIT
controllers.momcts.momctsCore.MOMCTS.RdomType == orig(controllers.momcts.momctsCore.MOMCTS.RdomType)
controllers.momcts.momctsCore.MOMCTS.RdomType.toString == orig(controllers.momcts.momctsCore.MOMCTS.RdomType.toString)
controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity == orig(controllers.momcts.momctsCore.MOMCTS.seqTimeGranularity)
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
controllers.momcts.utils.Archive:::OBJECT
this has only one value
this.points != null
this.points[] elements != null
this.points[].getClass().getName() elements == java.util.Vector.class
this.solNbLimit one of { -1, 3 }
this.solNbLimit != 0
this.pnt2sols has only one value
this.pnt2sols != null
===========================================================================
controllers.momcts.utils.Archive.Archive():::EXIT
this.points has only one value
this.points[] == []
this.points[].getClass().getName() == []
this.solNbLimit == -1
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::ENTER
this.solNbLimit == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT77
this.points[] == orig(this.points[])
return == false
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT77;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT80
size(this.points[])-1 == orig(size(this.points[]))
return == true
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT80;condition="return == true"
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT
this.points == orig(this.points)
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
(return == false)  ==>  (this.points[] == orig(this.points[]))
(return == true)  <==>  (size(this.points[])-1 == orig(size(this.points[])))
this.solNbLimit == 3
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
size(this.points[]) >= orig(size(this.points[]))
size(this.points[])-1 <= orig(size(this.points[]))
size(this.points[])-1 >= orig(size(this.points[]))-1
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT;condition="return == true"
size(this.points[])-1 == orig(size(this.points[]))
return == true
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector):::EXIT;condition="not(return == true)"
this.points[] == orig(this.points[])
return == false
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::ENTER
this.solNbLimit == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT87
size(this.points[])-1 == orig(size(this.points[]))
return == true
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT87;condition="return == true"
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT89
this.points[] == orig(this.points[])
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return == false
orig(size(arg1[])) == 11
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT89;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT92
this.points[] == orig(this.points[])
arg1[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] }
return == true
orig(size(arg1[])) one of { 10, 11 }
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT92;condition="return == true"
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT
this.points == orig(this.points)
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
(return == false)  ==>  (arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer])
(return == false)  ==>  (orig(size(arg1[])) == 11)
(return == false)  ==>  (this.points[] == orig(this.points[]))
this.solNbLimit == 3
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(this.points[]) >= orig(size(this.points[]))
size(this.points[])-1 <= orig(size(this.points[]))
size(this.points[])-1 >= orig(size(this.points[]))-1
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT;condition="return == true"
return == true
===========================================================================
controllers.momcts.utils.Archive.addNewPoint(java.util.Vector, java.util.Vector):::EXIT;condition="not(return == true)"
this.points[] == orig(this.points[])
arg1[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return == false
orig(size(arg1[])) == 11
===========================================================================
controllers.momcts.utils.Archive.addSol(java.util.Vector, java.util.Vector):::ENTER
this.solNbLimit == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.addSol(java.util.Vector, java.util.Vector):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
this.solNbLimit == 3
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.utils.Archive.getBestPoint(java.util.Vector, boolean):::ENTER
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 == true
size(this.points[]) == 40
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getBestPoint(java.util.Vector, boolean):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
return[].getClass().getName() elements == java.lang.Double.class
size(this.points[]) == 40
size(return[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getBestSol(java.util.Vector, boolean):::ENTER
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 == true
size(this.points[]) == 40
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getBestSol(java.util.Vector, boolean):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
return has only one value
return[] contains no nulls and has only one value, of length 11
return[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
return[].getClass().getName() elements == java.lang.Integer.class
size(this.points[]) == 40
size(return[]) == 11
===========================================================================
controllers.momcts.utils.Archive.getBestSolutions(java.util.Vector, boolean):::ENTER
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 == true
size(this.points[]) == 40
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getBestSolutions(java.util.Vector, boolean):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [java.util.Vector]
return[].getClass().getName() elements == java.util.Vector.class
size(this.points[]) == 40
size(return[]) == 1
===========================================================================
controllers.momcts.utils.Archive.getPointScores(java.util.Vector):::ENTER
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0 has only one value
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
size(this.points[]) == 40
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getPointScores(java.util.Vector):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
arg0[] contains no nulls and has only one value, of length 3
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
return[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double]
return[].getClass().getName() elements == java.lang.Double.class
size(this.points[]) == 40
size(return[]) == 40
===========================================================================
controllers.momcts.utils.Archive.getPoints():::ENTER
this.solNbLimit == 3
===========================================================================
controllers.momcts.utils.Archive.getPoints():::EXIT
this.points == return
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
return == orig(this.points)
this.solNbLimit == 3
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.Archive.getSols(java.util.Vector):::ENTER
this.solNbLimit == 3
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Archive.getSols(java.util.Vector):::EXIT63
===========================================================================
controllers.momcts.utils.Archive.getSols(java.util.Vector):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
arg0[] == orig(arg0[])
this.solNbLimit == 3
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
size(return[]) one of { 1, 2, 3 }
===========================================================================
controllers.momcts.utils.Archive.rearrange(boolean):::ENTER
this.solNbLimit == 3
arg0 == true
===========================================================================
controllers.momcts.utils.Archive.rearrange(boolean):::EXIT
this.points == return
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
this.solNbLimit == 3
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
size(this.points[]) <= orig(size(this.points[]))
size(this.points[])-1 <= orig(size(this.points[]))-1
===========================================================================
controllers.momcts.utils.Archive.setSolNbLimit(int):::ENTER
this.points has only one value
this.points[] == []
this.points[].getClass().getName() == []
this.solNbLimit == -1
arg0 == 3
===========================================================================
controllers.momcts.utils.Archive.setSolNbLimit(int):::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(arg0)
this.pnt2sols == orig(this.pnt2sols)
this.points has only one value
this.points[] == []
this.points[].getClass().getName() == []
this.solNbLimit == 3
===========================================================================
controllers.momcts.utils.Archive.showPntSols():::ENTER
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
size(this.points[]) == 40
===========================================================================
controllers.momcts.utils.Archive.showPntSols():::EXIT
this.points == orig(this.points)
this.points[] == orig(this.points[])
this.solNbLimit == orig(this.solNbLimit)
this.pnt2sols == orig(this.pnt2sols)
this.points has only one value
this.points[] contains no nulls and has only one value, of length 40
this.points[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector, java.util.Vector]
this.solNbLimit == 3
size(this.points[]) == 40
===========================================================================
controllers.momcts.utils.Debug:::CLASS
controllers.momcts.utils.Debug.debugOn == true
===========================================================================
controllers.momcts.utils.Debug:::OBJECT
this has only one value
this.counter == 0
this.currentTime == -1
this.initMemory == -1
===========================================================================
controllers.momcts.utils.Debug.Debug():::EXIT
===========================================================================
controllers.momcts.utils.Logger:::OBJECT
this.logFile != null
this.logFile.toString one of { "leafLog", "rootLog" }
this.append == false
===========================================================================
controllers.momcts.utils.Logger.Logger(java.lang.String):::ENTER
arg0.toString one of { "leafLog", "rootLog" }
===========================================================================
controllers.momcts.utils.Logger.Logger(java.lang.String):::EXIT
this.logFile == orig(arg0)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "leafLog", "rootLog" }
===========================================================================
controllers.momcts.utils.Logger.initialize():::ENTER
this.fstream == null
===========================================================================
controllers.momcts.utils.Logger.initialize():::EXIT
this.logFile == orig(this.logFile)
this.logFile.toString == orig(this.logFile.toString)
this.append == orig(this.append)
===========================================================================
controllers.momcts.utils.Logger.write(java.lang.String):::ENTER
this.fstream != null
arg0 != null
===========================================================================
controllers.momcts.utils.Logger.write(java.lang.String):::EXIT
this.logFile == orig(this.logFile)
this.logFile.toString == orig(this.logFile.toString)
this.append == orig(this.append)
this.fstream == orig(this.fstream)
arg0.toString == orig(arg0.toString)
this.fstream != null
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
arg2 == true
size(arg0[]) == 3
size(arg1[]) == 3
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT54
return == false
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT54;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT61
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT61;condition="return == true"
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT61;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
controllers.momcts.utils.MOOTools.dominates(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.Vector.class
arg2 == true
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.Vector.class
arg2 == true
arg3 == true
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT86
return == false
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT86;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT89
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT89;condition="return == true"
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT89;condition="not(return == true)"
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
controllers.momcts.utils.MOOTools.dominatesSet(java.util.Vector, java.util.Vector, boolean, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
controllers.momcts.utils.MathOperation:::CLASS
controllers.momcts.utils.MathOperation.rnd has only one value
controllers.momcts.utils.MathOperation.rnd != null
===========================================================================
controllers.momcts.utils.MathOperation.rndInt(int):::ENTER
===========================================================================
controllers.momcts.utils.MathOperation.rndInt(int):::EXIT
controllers.momcts.utils.MathOperation.rnd == orig(controllers.momcts.utils.MathOperation.rnd)
return >= 0
return < orig(arg0)
===========================================================================
controllers.momcts.utils.MathOperation.rndInt(int, int):::ENTER
arg1 == 0
arg0 > arg1
===========================================================================
controllers.momcts.utils.MathOperation.rndInt(int, int):::EXIT23
===========================================================================
controllers.momcts.utils.MathOperation.rndInt(int, int):::EXIT
controllers.momcts.utils.MathOperation.rnd == orig(controllers.momcts.utils.MathOperation.rnd)
return >= 0
return < orig(arg0)
return >= orig(arg1)
===========================================================================
controllers.momcts.utils.Presentation:::CLASS
controllers.momcts.utils.Presentation.defElemSep has only one value
controllers.momcts.utils.Presentation.defElemSep != null
controllers.momcts.utils.Presentation.defElemSep.toString == "\t"
controllers.momcts.utils.Presentation.defLineSep has only one value
controllers.momcts.utils.Presentation.defLineSep != null
controllers.momcts.utils.Presentation.defLineSep.toString == "\n"
===========================================================================
controllers.momcts.utils.Presentation.multiOut(java.lang.String, int):::ENTER
arg0 != null
arg0.toString one of { "-", ".|", "~" }
arg1 one of { 0, 1, 10 }
===========================================================================
controllers.momcts.utils.Presentation.multiOut(java.lang.String, int):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "-", ".|", "~" }
===========================================================================
controllers.momcts.utils.Presentation.ndigits(double):::ENTER
===========================================================================
controllers.momcts.utils.Presentation.ndigits(double):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
return == orig(arg0)
===========================================================================
controllers.momcts.utils.Presentation.ndigits(double, int):::ENTER
arg0 >= 0.09090909090909091
arg1 one of { 2, 3, 4 }
===========================================================================
controllers.momcts.utils.Presentation.ndigits(double, int):::EXIT109
===========================================================================
controllers.momcts.utils.Presentation.ndigits(double, int):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
return >= 0.091
===========================================================================
controllers.momcts.utils.Presentation.showSeq(java.util.Vector, java.lang.String):::ENTER
arg0 != null
arg0[] elements != null
arg1 != null
arg1.toString one of { "\t", "," }
===========================================================================
controllers.momcts.utils.Presentation.showSeq(java.util.Vector, java.lang.String):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
arg0[] elements != null
arg1.toString one of { "\t", "," }
===========================================================================
controllers.momcts.utils.Presentation.showSeqln(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
===========================================================================
controllers.momcts.utils.Presentation.showSeqln(java.util.Vector):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
arg0[] == orig(arg0[])
arg0[] elements != null
===========================================================================
controllers.momcts.utils.Presentation.showSeqln(java.util.Vector, java.lang.String):::ENTER
controllers.momcts.utils.Presentation.defElemSep == arg1
arg0 != null
arg0[] elements != null
arg1.toString == "\t"
===========================================================================
controllers.momcts.utils.Presentation.showSeqln(java.util.Vector, java.lang.String):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep == orig(arg1)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
arg0[] == orig(arg0[])
arg1.toString == orig(arg1.toString)
arg0[] elements != null
arg1.toString == "\t"
===========================================================================
controllers.momcts.utils.Presentation.spr():::ENTER
===========================================================================
controllers.momcts.utils.Presentation.spr():::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
===========================================================================
controllers.momcts.utils.Presentation.spr(java.lang.String):::ENTER
arg0 != null
arg0.toString one of { "-", "~" }
===========================================================================
controllers.momcts.utils.Presentation.spr(java.lang.String):::EXIT
controllers.momcts.utils.Presentation.defElemSep == orig(controllers.momcts.utils.Presentation.defElemSep)
controllers.momcts.utils.Presentation.defElemSep.toString == orig(controllers.momcts.utils.Presentation.defElemSep.toString)
controllers.momcts.utils.Presentation.defLineSep == orig(controllers.momcts.utils.Presentation.defLineSep)
controllers.momcts.utils.Presentation.defLineSep.toString == orig(controllers.momcts.utils.Presentation.defLineSep.toString)
arg0.toString == orig(arg0.toString)
arg0.toString one of { "-", "~" }
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int):::ENTER
arg0 one of { 0, 1 }
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int):::EXIT
return != null
return[] elements has only one value
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer] }
size(return[]) one of { 0, 1 }
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int, int):::ENTER
arg0 one of { 0, 1 }
arg1 == 0
arg0 >= arg1
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int, int):::EXIT
return != null
return[] elements has only one value
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer] }
size(return[]) one of { 0, 1 }
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int, int, int):::ENTER
arg0 one of { 0, 1 }
arg1 == 0
arg2 == 1
arg0 >= arg1
arg0 <= arg2
===========================================================================
controllers.momcts.utils.SetOperation.arithmeticProgression(int, int, int):::EXIT
return != null
return[] elements has only one value
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
return[].getClass().getName() one of { [], [java.lang.Integer] }
size(return[]) one of { 0, 1 }
===========================================================================
controllers.momcts.utils.SetOperation.assignMatrix(java.util.Vector, int, int, java.lang.Object):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 >= 0
arg2 one of { 0, 1, 2 }
arg3 != null
arg3.getClass().getName() == java.lang.Double.class
===========================================================================
controllers.momcts.utils.SetOperation.assignMatrix(java.util.Vector, int, int, java.lang.Object):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.SetOperation.complementSet(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] contains no nulls and has only one value, of length 4
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
size(arg0[]) == 4
===========================================================================
controllers.momcts.utils.SetOperation.complementSet(java.util.Vector, java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] contains no nulls and has only one value, of length 4
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer]
arg0[].getClass().getName() elements == java.lang.Integer.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.utils.SetOperation.divs(java.util.Map, double):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.HashMap.class
===========================================================================
controllers.momcts.utils.SetOperation.divs(java.util.Map, double):::EXIT
return != null
===========================================================================
controllers.momcts.utils.SetOperation.eliminateElements(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg0[].getClass().getName() one of { [java.util.Vector, java.util.Vector], [java.util.Vector, java.util.Vector, java.util.Vector] }
arg1 != null
arg1[] elements has only one value
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [], [java.lang.Integer] }
size(arg0[]) one of { 2, 3 }
size(arg1[]) one of { 0, 1 }
===========================================================================
controllers.momcts.utils.SetOperation.eliminateElements(java.util.Vector, java.util.Vector):::EXIT
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg0[].getClass().getName() one of { [java.util.Vector], [java.util.Vector, java.util.Vector] }
arg1[] elements has only one value
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
arg1[].getClass().getName() one of { [], [java.lang.Integer] }
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
return[].getClass().getName() one of { [], [java.util.Vector] }
size(return[]) one of { 0, 1 }
size(arg0[])-1 <= orig(size(arg0[]))-1
===========================================================================
controllers.momcts.utils.SetOperation.eliminateFirstNElements(java.util.Vector, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg0[].getClass().getName() one of { [java.util.Vector, java.util.Vector], [java.util.Vector, java.util.Vector, java.util.Vector] }
arg1 one of { 0, 1 }
size(arg0[]) one of { 2, 3 }
===========================================================================
controllers.momcts.utils.SetOperation.eliminateFirstNElements(java.util.Vector, int):::EXIT
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg0[].getClass().getName() one of { [java.util.Vector], [java.util.Vector, java.util.Vector] }
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
return[].getClass().getName() one of { [], [java.util.Vector] }
size(return[]) one of { 0, 1 }
size(arg0[])-1 <= orig(size(arg0[]))-1
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int):::ENTER
arg0 != null
arg0[] elements != null
arg1 one of { 0, 1, 2 }
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int):::EXIT359
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int):::EXIT359;condition="return == true"
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
return == true
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int):::EXIT;condition="return == true"
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 >= 0
arg2 one of { 0, 1, 2 }
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int, int):::EXIT542
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int, int):::EXIT542;condition="return == true"
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int, int):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
return == true
===========================================================================
controllers.momcts.utils.SetOperation.exists(java.util.Vector, int, int):::EXIT;condition="return == true"
===========================================================================
controllers.momcts.utils.SetOperation.frequencePortion(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.utils.SetOperation.frequencePortion(java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Integer.class
return != null
===========================================================================
controllers.momcts.utils.SetOperation.getBestItem(java.util.Vector, java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Double.class
arg2 == true
===========================================================================
controllers.momcts.utils.SetOperation.getBestItem(java.util.Vector, java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Double.class
return != null
return.getClass().getName() == controllers.momcts.momctsCore.MOUCT.class
return.getClass().getName() in arg0[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.getBestItemInd(java.util.Vector, boolean):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 == true
===========================================================================
controllers.momcts.utils.SetOperation.getBestItemInd(java.util.Vector, boolean):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.lang.Double.class
return >= 0
===========================================================================
controllers.momcts.utils.SetOperation.getDoubleValue(java.util.Map, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.HashMap.class
arg1 != null
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.getDoubleValue(java.util.Map, java.lang.Object):::EXIT227
return == 0.0
orig(arg1.getClass().getName()) == java.lang.Integer.class
===========================================================================
controllers.momcts.utils.SetOperation.getDoubleValue(java.util.Map, java.lang.Object):::EXIT228
return >= 0.05
===========================================================================
controllers.momcts.utils.SetOperation.getDoubleValue(java.util.Map, java.lang.Object):::EXIT
(return == 0.0)  ==>  (orig(arg1.getClass().getName()) == java.lang.Integer.class)
===========================================================================
controllers.momcts.utils.SetOperation.getElements(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
===========================================================================
controllers.momcts.utils.SetOperation.getElements(java.util.Vector, java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Integer.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.SetOperation.getIntValue(java.util.Map, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == java.util.HashMap.class
arg1 != null
arg1.getClass().getName() == java.lang.String.class
arg0.getClass().getName() != arg1.getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.getIntValue(java.util.Map, java.lang.Object):::EXIT234
return == 0
===========================================================================
controllers.momcts.utils.SetOperation.getIntValue(java.util.Map, java.lang.Object):::EXIT235
===========================================================================
controllers.momcts.utils.SetOperation.getIntValue(java.util.Map, java.lang.Object):::EXIT
return >= 0
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.lang.Object, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 != null
arg1.getClass().getName() == java.util.Vector.class
arg2 == 3
size(arg0[]) one of { 1, 2, 3 }
arg1.getClass().getName() in arg0[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.lang.Object, int):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
return[].getClass().getName() one of { [java.util.Vector, java.util.Vector], [java.util.Vector, java.util.Vector, java.util.Vector] }
size(return[]) one of { 2, 3 }
orig(arg1.getClass().getName()) in arg0[].getClass().getName()
orig(arg1.getClass().getName()) in return[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.util.Vector] }
size(arg1[]) one of { 1, 5 }
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg1[] elements != null
arg1[].getClass().getName() one of { [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer], [java.util.Vector] }
return != null
return[] elements != null
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.util.Vector, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() == [java.util.Vector]
arg1[].getClass().getName() elements == java.util.Vector.class
arg2 == 3
size(arg0[]) one of { 1, 2, 3 }
size(arg1[]) == 1
===========================================================================
controllers.momcts.utils.SetOperation.joinSeq(java.util.Vector, java.util.Vector, int):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() elements == java.util.Vector.class
arg1[] elements != null
arg1[].getClass().getName() == [java.util.Vector]
arg1[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
return[].getClass().getName() one of { [java.util.Vector, java.util.Vector], [java.util.Vector, java.util.Vector, java.util.Vector] }
size(return[]) one of { 2, 3 }
===========================================================================
controllers.momcts.utils.SetOperation.matrixOnes(int, int, java.lang.Object):::ENTER
arg1 == 3
arg2 != null
arg2.getClass().getName() == java.lang.Object.class
===========================================================================
controllers.momcts.utils.SetOperation.matrixOnes(int, int, java.lang.Object):::EXIT
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.SetOperation.maxItem(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Double.class
===========================================================================
controllers.momcts.utils.SetOperation.maxItem(java.util.Vector, java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.Double.class
return != null
return.getClass().getName() == controllers.momcts.momctsCore.MOUCT.class
return.getClass().getName() in arg0[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.ones(int, java.lang.Object):::ENTER
arg0 == 3
arg1 has only one value
arg1.getClass().getName() == java.lang.Double.class
===========================================================================
controllers.momcts.utils.SetOperation.ones(int, java.lang.Object):::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 3
return[] elements has only one value
return[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
return[].getClass().getName() elements == java.lang.Double.class
size(return[]) == 3
orig(arg1.getClass().getName()) in return[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.pop(java.util.Vector, int):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
arg1 == 0
size(arg0[]) >= 1
===========================================================================
controllers.momcts.utils.SetOperation.pop(java.util.Vector, int):::EXIT
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return != null
return.getClass().getName() == controllers.momcts.momctsCore.MOUCT.class
return.getClass().getName() in orig(arg0[].getClass().getName())
===========================================================================
controllers.momcts.utils.SetOperation.popFront(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
size(arg0[]) >= 1
===========================================================================
controllers.momcts.utils.SetOperation.popFront(java.util.Vector):::EXIT
arg0[] elements != null
arg0[].getClass().getName() elements == controllers.momcts.momctsCore.MOUCT.class
return != null
return.getClass().getName() == controllers.momcts.momctsCore.MOUCT.class
return.getClass().getName() in orig(arg0[].getClass().getName())
===========================================================================
controllers.momcts.utils.SetOperation.randomElement(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
===========================================================================
controllers.momcts.utils.SetOperation.randomElement(java.util.Vector):::EXIT367
===========================================================================
controllers.momcts.utils.SetOperation.randomElement(java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
return != null
return.getClass().getName() in arg0[].getClass().getName()
===========================================================================
controllers.momcts.utils.SetOperation.transposeMatrix(java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector]
arg0[].getClass().getName() elements == java.util.Vector.class
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.SetOperation.transposeMatrix(java.util.Vector):::EXIT578
===========================================================================
controllers.momcts.utils.SetOperation.transposeMatrix(java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg0[] elements != null
arg0[].getClass().getName() == [java.util.Vector, java.util.Vector, java.util.Vector]
arg0[].getClass().getName() elements == java.util.Vector.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.util.Vector.class
===========================================================================
controllers.momcts.utils.SetOperation.weightedSum(java.util.Vector, java.util.Vector):::ENTER
arg0 != null
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1 has only one value
arg1 != null
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
size(arg0[]) == 3
size(arg1[]) == 3
===========================================================================
controllers.momcts.utils.SetOperation.weightedSum(java.util.Vector, java.util.Vector):::EXIT
arg0[] == orig(arg0[])
arg1[] == orig(arg1[])
arg0[] elements != null
arg0[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg0[].getClass().getName() elements == java.lang.Double.class
arg1[] contains no nulls and has only one value, of length 3
arg1[] elements != null
arg1[].getClass().getName() == [java.lang.Double, java.lang.Double, java.lang.Double]
arg1[].getClass().getName() elements == java.lang.Double.class
===========================================================================
controllers.momcts.utils.Transformation.strAry2Vec(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] contains no nulls and has only one value, of length 3
arg0[].toString == [a, b, c]
arg0[].toString elements one of { "a", "b", "c" }
size(arg0[]) == 3
===========================================================================
controllers.momcts.utils.Transformation.strAry2Vec(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] contains no nulls and has only one value, of length 3
arg0[].toString == [a, b, c]
arg0[].toString elements one of { "a", "b", "c" }
return has only one value
return[] contains no nulls and has only one value, of length 3
return[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
return[].getClass().getName() elements == java.lang.String.class
size(return[]) == 3
Exiting Daikon.
