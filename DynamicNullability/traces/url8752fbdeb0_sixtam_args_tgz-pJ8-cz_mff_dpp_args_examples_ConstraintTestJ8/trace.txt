Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 55 times.  Unmatched entries are ignored!
Unterminated calls:
  cz.mff.dpp.args.Parser.parse(java.lang.String[]) : 6 invocations
  cz.mff.dpp.args.Parser.processInputParameters(java.lang.String[]) : 6 invocations
  cz.mff.dpp.args.Parser.processOption(java.lang.String, java.util.LinkedList) : 6 invocations
  cz.mff.dpp.args.ConstraintUtils.checkStringValues(java.lang.reflect.AccessibleObject, java.util.List) : 3 invocations
  cz.mff.dpp.args.ConstraintUtils.checkStringValue(java.lang.reflect.AccessibleObject, java.lang.String) : 3 invocations
  cz.mff.dpp.args.ConstraintUtils.throwAndLog(java.lang.String, java.lang.Object[]) : 6 invocations
  cz.mff.dpp.args.Parser.set(java.lang.reflect.AccessibleObject, java.util.List, java.lang.annotation.Annotation) : 3 invocations
  cz.mff.dpp.args.Configurator.set(java.lang.Object, java.lang.reflect.AccessibleObject, java.util.List) : 3 invocations
  cz.mff.dpp.args.ConstraintUtils.checkValue(java.lang.reflect.AccessibleObject, java.lang.Object) : 3 invocations
  cz.mff.dpp.args.ConstraintUtils.checkValue(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object) : 3 invocations
  cz.mff.dpp.args.ReflectUtils.getMethod(java.lang.Class, java.lang.String, java.lang.Class[]) : 9 invocations
  cz.mff.dpp.args.ReflectUtils.getConstructor(java.lang.Class, java.lang.Class[]) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m1 != null
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m4 != null
com.sun.proxy.$Proxy2.m8 has only one value
com.sun.proxy.$Proxy2.m8 != null
com.sun.proxy.$Proxy2.m7 has only one value
com.sun.proxy.$Proxy2.m7 != null
com.sun.proxy.$Proxy2.m10 has only one value
com.sun.proxy.$Proxy2.m10 != null
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m2 != null
com.sun.proxy.$Proxy2.m11 has only one value
com.sun.proxy.$Proxy2.m11 != null
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m5 != null
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m3 != null
com.sun.proxy.$Proxy2.m6 has only one value
com.sun.proxy.$Proxy2.m6 != null
com.sun.proxy.$Proxy2.m0 has only one value
com.sun.proxy.$Proxy2.m0 != null
com.sun.proxy.$Proxy2.m9 has only one value
com.sun.proxy.$Proxy2.m9 != null
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.aliases():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.aliases():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return != null
return.getClass().getName() == java.lang.String[].class
return[] elements has only one value
return[] elements != null
return[].toString elements == "--port"
return[].toString one of { [], [--port] }
size(return[]) one of { 0, 1 }
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.description():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.description():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return has only one value
return.toString == ""
===========================================================================
com.sun.proxy.$Proxy2.factory():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.factory():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.hashCode():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.hashCode():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
===========================================================================
com.sun.proxy.$Proxy2.incompatible():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.incompatible():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return has only one value
return != null
return.getClass().getName() == java.lang.String[].class
return[] == []
return[].toString == []
===========================================================================
com.sun.proxy.$Proxy2.mustUseWith():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.mustUseWith():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return has only one value
return != null
return.getClass().getName() == java.lang.String[].class
return[] == []
return[].toString == []
===========================================================================
com.sun.proxy.$Proxy2.name():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.name():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return != null
===========================================================================
com.sun.proxy.$Proxy2.required():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.required():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m8 == orig(com.sun.proxy.$Proxy2.m8)
com.sun.proxy.$Proxy2.m7 == orig(com.sun.proxy.$Proxy2.m7)
com.sun.proxy.$Proxy2.m10 == orig(com.sun.proxy.$Proxy2.m10)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m11 == orig(com.sun.proxy.$Proxy2.m11)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m6 == orig(com.sun.proxy.$Proxy2.m6)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m9 == orig(com.sun.proxy.$Proxy2.m9)
return == false
===========================================================================
com.sun.proxy.$Proxy2.required():::EXIT;condition="not(return == true)"
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m1 != null
com.sun.proxy.$Proxy3.m6 has only one value
com.sun.proxy.$Proxy3.m6 != null
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m3 != null
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m2 != null
com.sun.proxy.$Proxy3.m9 has only one value
com.sun.proxy.$Proxy3.m9 != null
com.sun.proxy.$Proxy3.m4 has only one value
com.sun.proxy.$Proxy3.m4 != null
com.sun.proxy.$Proxy3.m8 has only one value
com.sun.proxy.$Proxy3.m8 != null
com.sun.proxy.$Proxy3.m5 has only one value
com.sun.proxy.$Proxy3.m5 != null
com.sun.proxy.$Proxy3.m0 has only one value
com.sun.proxy.$Proxy3.m0 != null
com.sun.proxy.$Proxy3.m7 has only one value
com.sun.proxy.$Proxy3.m7 != null
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.allowedValues():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.allowedValues():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return != null
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[])-1 != 0
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.annotationType():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return has only one value
===========================================================================
com.sun.proxy.$Proxy3.comparator():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.comparator():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return has only one value
return != null
===========================================================================
com.sun.proxy.$Proxy3.ignoreCase():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.ignoreCase():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
(return == true)  ==>  (orig(this) has only one value)
===========================================================================
com.sun.proxy.$Proxy3.ignoreCase():::EXIT;condition="return == true"
return == true
orig(this) has only one value
===========================================================================
com.sun.proxy.$Proxy3.ignoreCase():::EXIT;condition="not(return == true)"
return == false
===========================================================================
com.sun.proxy.$Proxy3.max():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.max():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return != null
return.toString one of { "", "65535" }
===========================================================================
com.sun.proxy.$Proxy3.min():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.min():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return != null
return.toString one of { "", "1024", "1025" }
===========================================================================
com.sun.proxy.$Proxy3.regexp():::ENTER
===========================================================================
com.sun.proxy.$Proxy3.regexp():::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m6 == orig(com.sun.proxy.$Proxy3.m6)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m9 == orig(com.sun.proxy.$Proxy3.m9)
com.sun.proxy.$Proxy3.m4 == orig(com.sun.proxy.$Proxy3.m4)
com.sun.proxy.$Proxy3.m8 == orig(com.sun.proxy.$Proxy3.m8)
com.sun.proxy.$Proxy3.m5 == orig(com.sun.proxy.$Proxy3.m5)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
com.sun.proxy.$Proxy3.m7 == orig(com.sun.proxy.$Proxy3.m7)
return != null
return.toString one of { "", "[a-zA-Z]{3}" }
===========================================================================
cz.mff.dpp.args.CharHandler.valueOf(java.lang.String):::ENTER
===========================================================================
cz.mff.dpp.args.CharHandler.valueOf(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
cz.mff.dpp.args.CheckException:::CLASS
===========================================================================
cz.mff.dpp.args.CheckException:::OBJECT
===========================================================================
cz.mff.dpp.args.CheckException.CheckException(java.lang.String, java.lang.Object[]):::ENTER
arg1.getClass().getName() == java.lang.Object[].class
size(arg1[]) one of { 2, 3 }
===========================================================================
cz.mff.dpp.args.CheckException.CheckException(java.lang.String, java.lang.Object[]):::EXIT
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState:::OBJECT
this.accessible == false
this.accessibleObject != null
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.AccessibleState(java.lang.reflect.AccessibleObject):::ENTER
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.AccessibleState(java.lang.reflect.AccessibleObject):::EXIT
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.makeAccessible():::ENTER
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.makeAccessible():::EXIT
this.accessible == orig(this.accessible)
this.accessibleObject == orig(this.accessibleObject)
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.restore():::ENTER
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.restore():::EXIT
this.accessible == orig(this.accessible)
this.accessibleObject == orig(this.accessibleObject)
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.save():::ENTER
===========================================================================
cz.mff.dpp.args.Configurator$AccessibleState.save():::EXIT
this.accessible == orig(this.accessible)
this.accessibleObject == orig(this.accessibleObject)
===========================================================================
cz.mff.dpp.args.Configurator:::CLASS
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE has only one value
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE != null
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == "Unable to configure field %s with object '%s'"
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR has only one value
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR != null
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == "Unable to call method %s on object %s with params %s"
cz.mff.dpp.args.Configurator.$assertionsDisabled == false
===========================================================================
cz.mff.dpp.args.Configurator.applyValue(java.lang.Object, java.lang.reflect.AccessibleObject, java.lang.Object):::ENTER
arg0 has only one value
arg0.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
===========================================================================
cz.mff.dpp.args.Configurator.applyValue(java.lang.Object, java.lang.reflect.AccessibleObject, java.lang.Object):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
===========================================================================
cz.mff.dpp.args.Configurator.createArrayAndFill(java.lang.Class, java.util.List):::ENTER
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
arg1.getClass().getName() == java.util.LinkedList.class
size(arg1[]) one of { 2, 4 }
===========================================================================
cz.mff.dpp.args.Configurator.createArrayAndFill(java.lang.Class, java.util.List):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
arg1[] == orig(arg1[])
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
===========================================================================
cz.mff.dpp.args.Configurator.createListAndFill(java.lang.Class, java.lang.Class, java.util.List):::ENTER
arg0 has only one value
arg1 has only one value
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
arg2.getClass().getName() == java.util.LinkedList.class
size(arg2[]) == 4
===========================================================================
cz.mff.dpp.args.Configurator.createListAndFill(java.lang.Class, java.lang.Class, java.util.List):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
arg2[] == orig(arg2[])
arg2[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
arg2[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.LinkedList.class
===========================================================================
cz.mff.dpp.args.Configurator.set(java.lang.Object, java.lang.reflect.AccessibleObject, java.util.List):::ENTER
arg0 has only one value
arg0.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg2[].getClass().getName() elements == java.lang.String.class
arg2.getClass().getName() == java.util.LinkedList.class
size(arg2[]) one of { 1, 2, 4 }
===========================================================================
cz.mff.dpp.args.Configurator.set(java.lang.Object, java.lang.reflect.AccessibleObject, java.util.List):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
arg2[] == orig(arg2[])
arg2[].getClass().getName() elements == java.lang.String.class
===========================================================================
cz.mff.dpp.args.Configurator.setFieldValue(java.lang.Object, java.lang.reflect.Field, java.lang.Object):::ENTER
arg0 has only one value
arg0.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
===========================================================================
cz.mff.dpp.args.Configurator.setFieldValue(java.lang.Object, java.lang.reflect.Field, java.lang.Object):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
===========================================================================
cz.mff.dpp.args.Configurator.valueFromList(java.lang.reflect.AccessibleObject, java.util.List):::ENTER
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
arg1.getClass().getName() == java.util.LinkedList.class
size(arg1[]) one of { 2, 4 }
===========================================================================
cz.mff.dpp.args.Configurator.valueFromList(java.lang.reflect.AccessibleObject, java.util.List):::EXIT198
===========================================================================
cz.mff.dpp.args.Configurator.valueFromList(java.lang.reflect.AccessibleObject, java.util.List):::EXIT205
arg1[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
return.getClass().getName() == java.util.LinkedList.class
orig(size(arg1[])) == 4
===========================================================================
cz.mff.dpp.args.Configurator.valueFromList(java.lang.reflect.AccessibleObject, java.util.List):::EXIT
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE)
cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_SET_FIELD_NOT_POSSIBLE.toString)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR)
cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString == orig(cz.mff.dpp.args.Configurator.FORMAT_CALL_SETTER_ERROR.toString)
cz.mff.dpp.args.Configurator.$assertionsDisabled == orig(cz.mff.dpp.args.Configurator.$assertionsDisabled)
arg1[] == orig(arg1[])
arg1[].getClass().getName() elements == java.lang.String.class
arg1[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
===========================================================================
cz.mff.dpp.args.ConstraintUtils:::CLASS
cz.mff.dpp.args.ConstraintUtils.COMPARE has only one value
cz.mff.dpp.args.ConstraintUtils.COMPARE != null
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == "compare"
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO has only one value
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO != null
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == "compareTo"
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED has only one value
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED != null
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == "'%s' is not allowed value (%s) for '%s'"
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED has only one value
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED != null
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == "'%s' does not match regular expression '%s' for '%s'"
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED has only one value
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED != null
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == "'%s' is less than allowed minimun of '%s'"
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED has only one value
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED != null
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == "'%s' is more than allowed maximum of '%s'"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT217
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT217;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT234
(return == false)  ==>  (arg1.toString one of { "SUN___DAY", "bla" })
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT234;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT234;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
arg1.toString == orig(arg1.toString)
(return == false)  ==>  (arg1.toString one of { "SUN___DAY", "bla" })
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkAllowedValues(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT;condition="not(return == true)"
arg1.toString one of { "SUN___DAY", "bla" }
return == false
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
arg2 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT382
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT382;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT396
return == false
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg2) has only one value
orig(arg2.getClass().getName()) == java.lang.Double.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT396;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT398
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT398;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
(return == false)  ==>  (orig(arg0) has only one value)
(return == false)  ==>  (orig(arg1) has only one value)
(return == false)  ==>  (orig(arg2) has only one value)
(return == false)  ==>  (orig(arg2.getClass().getName()) == java.lang.Double.class)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMax(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT;condition="not(return == true)"
return == false
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg2) has only one value
orig(arg2.getClass().getName()) == java.lang.Double.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
arg2 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT334
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT334;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT348
return == false
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT348;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT350
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT350;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkMin(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT257
(arg1.toString == "a1d")  <==>  (return == false)
(arg1.toString == "abc")  <==>  (return == true)
arg1.toString one of { "a1d", "abc" }
orig(arg0) has only one value
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT257;condition="return == true"
arg1.toString == "abc"
orig(arg1) has only one value
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT257;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT264
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT264;condition="return == true"
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
arg1.toString == orig(arg1.toString)
(return == false)  ==>  (arg1.toString == "a1d")
(return == false)  ==>  (orig(arg0) has only one value)
(return == false)  ==>  (orig(arg1) has only one value)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkRegexp(cz.mff.dpp.args.Constraint, java.lang.String):::EXIT;condition="not(return == true)"
arg1.toString == "a1d"
return == false
orig(arg0) has only one value
orig(arg1) has only one value
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValue(java.lang.reflect.AccessibleObject, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValue(java.lang.reflect.AccessibleObject, java.lang.String):::EXIT196
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValue(java.lang.reflect.AccessibleObject, java.lang.String):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
arg1.toString == orig(arg1.toString)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValues(java.lang.reflect.AccessibleObject, java.util.List):::ENTER
arg1[].getClass().getName() elements == java.lang.String.class
arg1.getClass().getName() == java.util.LinkedList.class
size(arg1[]) one of { 1, 2, 4 }
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValues(java.lang.reflect.AccessibleObject, java.util.List):::EXIT80
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].getClass().getName() == [java.lang.String]
orig(arg0) has only one value
orig(arg1) has only one value
orig(size(arg1[])) == 1
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValues(java.lang.reflect.AccessibleObject, java.util.List):::EXIT87
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkStringValues(java.lang.reflect.AccessibleObject, java.util.List):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
arg1[] == orig(arg1[])
arg1[].getClass().getName() elements == java.lang.String.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
arg2 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(java.lang.reflect.AccessibleObject, java.lang.Object):::ENTER
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(java.lang.reflect.AccessibleObject, java.lang.Object):::EXIT128
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg1.getClass().getName()) == cz.mff.dpp.args.examples.ConstraintTest$TestClass.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(java.lang.reflect.AccessibleObject, java.lang.Object):::EXIT154
===========================================================================
cz.mff.dpp.args.ConstraintUtils.checkValue(java.lang.reflect.AccessibleObject, java.lang.Object):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
===========================================================================
cz.mff.dpp.args.ConstraintUtils.compare(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object, java.lang.Object):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
arg1 != null
arg2 != null
arg3 != null
===========================================================================
cz.mff.dpp.args.ConstraintUtils.compare(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object, java.lang.Object):::EXIT447
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg2.getClass().getName()) == java.lang.Double.class
orig(arg3.getClass().getName()) == java.lang.Double.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.compare(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object, java.lang.Object):::EXIT463
orig(arg0) has only one value
orig(arg1) has only one value
orig(arg2.getClass().getName()) == java.lang.Integer.class
orig(arg3.getClass().getName()) == java.lang.Integer.class
===========================================================================
cz.mff.dpp.args.ConstraintUtils.compare(cz.mff.dpp.args.Constraint, java.lang.Class, java.lang.Object, java.lang.Object):::EXIT
cz.mff.dpp.args.ConstraintUtils.COMPARE == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE)
cz.mff.dpp.args.ConstraintUtils.COMPARE.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE.toString)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO)
cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString == orig(cz.mff.dpp.args.ConstraintUtils.COMPARE_TO.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_ALLOWED_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_REGEXP_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MIN_FAILED.toString)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED)
cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString == orig(cz.mff.dpp.args.ConstraintUtils.FORMAT_MAX_FAILED.toString)
(orig(arg2.getClass().getName()) == java.lang.Double.class)  <==>  (orig(arg3.getClass().getName()) == java.lang.Double.class)
(orig(arg2.getClass().getName()) == java.lang.Integer.class)  <==>  (orig(arg3.getClass().getName()) == java.lang.Integer.class)
return one of { -1, 1 }
return != 0
===========================================================================
cz.mff.dpp.args.FactoryRegistry:::CLASS
cz.mff.dpp.args.FactoryRegistry.primiteTypes has only one value
cz.mff.dpp.args.FactoryRegistry.primiteTypes != null
cz.mff.dpp.args.FactoryRegistry.primiteTypes.getClass().getName() == java.util.HashMap.class
cz.mff.dpp.args.FactoryRegistry.userTypes has only one value
cz.mff.dpp.args.FactoryRegistry.userTypes != null
cz.mff.dpp.args.FactoryRegistry.userTypes.getClass().getName() == java.util.HashMap.class
===========================================================================
cz.mff.dpp.args.FactoryRegistry.getFactoryType(java.lang.Class):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.FactoryRegistry.getFactoryType(java.lang.Class):::EXIT109
===========================================================================
cz.mff.dpp.args.FactoryRegistry.getFactoryType(java.lang.Class):::EXIT111
===========================================================================
cz.mff.dpp.args.FactoryRegistry.getFactoryType(java.lang.Class):::EXIT
cz.mff.dpp.args.FactoryRegistry.primiteTypes == orig(cz.mff.dpp.args.FactoryRegistry.primiteTypes)
cz.mff.dpp.args.FactoryRegistry.primiteTypes.getClass().getName() == orig(cz.mff.dpp.args.FactoryRegistry.primiteTypes.getClass().getName())
cz.mff.dpp.args.FactoryRegistry.userTypes == orig(cz.mff.dpp.args.FactoryRegistry.userTypes)
cz.mff.dpp.args.FactoryRegistry.userTypes.getClass().getName() == orig(cz.mff.dpp.args.FactoryRegistry.userTypes.getClass().getName())
return != null
===========================================================================
cz.mff.dpp.args.HelpUtils.printConstraint(java.lang.reflect.AccessibleObject, java.io.PrintWriter):::ENTER
arg1 has only one value
===========================================================================
cz.mff.dpp.args.HelpUtils.printConstraint(java.lang.reflect.AccessibleObject, java.io.PrintWriter):::EXIT144
orig(arg0) has only one value
===========================================================================
cz.mff.dpp.args.HelpUtils.printConstraint(java.lang.reflect.AccessibleObject, java.io.PrintWriter):::EXIT177
===========================================================================
cz.mff.dpp.args.HelpUtils.printConstraint(java.lang.reflect.AccessibleObject, java.io.PrintWriter):::EXIT
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelp(cz.mff.dpp.args.Introspector):::ENTER
arg0 has only one value
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions has only one value
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg0.options has only one value
arg0.objectsWithOption has only one value
arg0.objectsWithArgument has only one value
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelp(cz.mff.dpp.args.Introspector):::EXIT
arg0.target == orig(arg0.target)
arg0.target.getClass().getName() == orig(arg0.target.getClass().getName())
arg0.declaredOptions == orig(arg0.declaredOptions)
arg0.declaredOptions[] == orig(arg0.declaredOptions[])
arg0.declaredOptions.getClass().getName() == orig(arg0.declaredOptions.getClass().getName())
arg0.options == orig(arg0.options)
arg0.objectsWithOption == orig(arg0.objectsWithOption)
arg0.objectsWithArgument == orig(arg0.objectsWithArgument)
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions has only one value
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg0.options has only one value
arg0.objectsWithOption has only one value
arg0.objectsWithArgument has only one value
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelp(cz.mff.dpp.args.Introspector, java.io.PrintWriter):::ENTER
arg0 has only one value
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions has only one value
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg0.options has only one value
arg0.objectsWithOption has only one value
arg0.objectsWithArgument has only one value
arg1 has only one value
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelp(cz.mff.dpp.args.Introspector, java.io.PrintWriter):::EXIT
arg0.target == orig(arg0.target)
arg0.target.getClass().getName() == orig(arg0.target.getClass().getName())
arg0.declaredOptions == orig(arg0.declaredOptions)
arg0.declaredOptions[] == orig(arg0.declaredOptions[])
arg0.declaredOptions.getClass().getName() == orig(arg0.declaredOptions.getClass().getName())
arg0.options == orig(arg0.options)
arg0.objectsWithOption == orig(arg0.objectsWithOption)
arg0.objectsWithArgument == orig(arg0.objectsWithArgument)
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions has only one value
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg0.options has only one value
arg0.objectsWithOption has only one value
arg0.objectsWithArgument has only one value
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelpForOption(cz.mff.dpp.args.Option, java.lang.reflect.AccessibleObject, java.io.PrintWriter):::ENTER
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
arg2 has only one value
===========================================================================
cz.mff.dpp.args.HelpUtils.printHelpForOption(cz.mff.dpp.args.Option, java.lang.reflect.AccessibleObject, java.io.PrintWriter):::EXIT
===========================================================================
cz.mff.dpp.args.Inspector:::OBJECT
this.annotatedObjects != null
this.annotatedObjects.target has only one value
this.annotatedObjects.target != null
this.annotatedObjects.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
this.annotatedObjects.declaredOptions != null
this.annotatedObjects.declaredOptions[] contains no nulls and has only one value, of length 7
this.annotatedObjects.declaredOptions[] elements != null
this.annotatedObjects.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
this.annotatedObjects.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.annotatedObjects.declaredOptions.getClass().getName() == java.util.LinkedList.class
this.annotatedObjects.options != null
this.annotatedObjects.objectsWithOption != null
this.annotatedObjects.objectsWithArgument != null
this.used != null
this.used.usedOptionParams != null
this.used.usedOptionParams.getClass().getName() == java.util.HashMap.class
this.used.usedOptionPosition != null
this.used.usedOptionPosition.getClass().getName() == java.util.HashMap.class
this.used.freeArguments != null
this.used.freeArguments[] == []
this.used.freeArguments[].getClass().getName() == []
this.used.freeArguments.getClass().getName() == java.util.LinkedList.class
this.used.freeArgumentsPosition != null
this.used.freeArgumentsPosition[] == []
this.used.freeArgumentsPosition[].getClass().getName() == []
this.used.freeArgumentsPosition.getClass().getName() == java.util.LinkedList.class
this.used.position one of { 1, 4 }
this.passed == true
size(this.annotatedObjects.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Inspector.Inspector(cz.mff.dpp.args.Introspector, cz.mff.dpp.args.OptionUtils$Used):::ENTER
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg1.usedOptionParams.getClass().getName() == java.util.HashMap.class
arg1.usedOptionPosition.getClass().getName() == java.util.HashMap.class
arg1.freeArguments[] == []
arg1.freeArguments[].getClass().getName() == []
arg1.freeArguments.getClass().getName() == java.util.LinkedList.class
arg1.freeArgumentsPosition[] == []
arg1.freeArgumentsPosition[].getClass().getName() == []
arg1.freeArgumentsPosition.getClass().getName() == java.util.LinkedList.class
arg1.position one of { 1, 4 }
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Inspector.Inspector(cz.mff.dpp.args.Introspector, cz.mff.dpp.args.OptionUtils$Used):::EXIT
arg0.target == orig(arg0.target)
arg0.target.getClass().getName() == orig(arg0.target.getClass().getName())
arg0.declaredOptions == orig(arg0.declaredOptions)
arg0.declaredOptions[] == orig(arg0.declaredOptions[])
arg0.declaredOptions.getClass().getName() == orig(arg0.declaredOptions.getClass().getName())
arg0.options == orig(arg0.options)
arg0.objectsWithOption == orig(arg0.objectsWithOption)
arg0.objectsWithArgument == orig(arg0.objectsWithArgument)
arg1.usedOptionParams == orig(arg1.usedOptionParams)
arg1.usedOptionParams.getClass().getName() == orig(arg1.usedOptionParams.getClass().getName())
arg1.usedOptionPosition == orig(arg1.usedOptionPosition)
arg1.usedOptionPosition.getClass().getName() == orig(arg1.usedOptionPosition.getClass().getName())
arg1.freeArguments == orig(arg1.freeArguments)
arg1.freeArguments[] == orig(arg1.freeArguments[])
arg1.freeArguments.getClass().getName() == orig(arg1.freeArguments.getClass().getName())
arg1.freeArgumentsPosition == orig(arg1.freeArgumentsPosition)
arg1.freeArgumentsPosition[] == orig(arg1.freeArgumentsPosition[])
arg1.freeArgumentsPosition.getClass().getName() == orig(arg1.freeArgumentsPosition.getClass().getName())
arg1.position == orig(arg1.position)
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg1.usedOptionParams.getClass().getName() == java.util.HashMap.class
arg1.usedOptionPosition.getClass().getName() == java.util.HashMap.class
arg1.freeArguments[] == []
arg1.freeArguments[].getClass().getName() == []
arg1.freeArguments.getClass().getName() == java.util.LinkedList.class
arg1.freeArgumentsPosition[] == []
arg1.freeArgumentsPosition[].getClass().getName() == []
arg1.freeArgumentsPosition.getClass().getName() == java.util.LinkedList.class
arg1.position one of { 1, 4 }
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Inspector.check():::ENTER
===========================================================================
cz.mff.dpp.args.Inspector.check():::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Inspector.checkAllRequiredArgumentsUsed():::ENTER
===========================================================================
cz.mff.dpp.args.Inspector.checkAllRequiredArgumentsUsed():::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Inspector.checkAllRequiredOptionsUsed():::ENTER
===========================================================================
cz.mff.dpp.args.Inspector.checkAllRequiredOptionsUsed():::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Inspector.checkCompatibility():::ENTER
===========================================================================
cz.mff.dpp.args.Inspector.checkCompatibility():::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Inspector.checkDependentOptionsUsed(cz.mff.dpp.args.Option):::ENTER
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
cz.mff.dpp.args.Inspector.checkDependentOptionsUsed(cz.mff.dpp.args.Option):::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Inspector.checkIncompatibleOptionsUsed(cz.mff.dpp.args.Option):::ENTER
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
cz.mff.dpp.args.Inspector.checkIncompatibleOptionsUsed(cz.mff.dpp.args.Option):::EXIT
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.usedOptionPosition.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.used.position == orig(this.used.position)
this.passed == orig(this.passed)
===========================================================================
cz.mff.dpp.args.Introspector:::OBJECT
this.target has only one value
this.target != null
this.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
this.declaredOptions != null
this.declaredOptions[] elements != null
this.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.declaredOptions.getClass().getName() == java.util.LinkedList.class
this.options != null
this.objectsWithOption != null
this.objectsWithArgument != null
this.target.getClass().getName() != this.declaredOptions.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.Introspector(java.lang.Object):::ENTER
arg0 has only one value
arg0.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
===========================================================================
cz.mff.dpp.args.Introspector.Introspector(java.lang.Object):::EXIT
this.target.getClass().getName() == orig(arg0.getClass().getName())
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.addAccessibleWithAnnotation(java.lang.reflect.AccessibleObject[]):::ENTER
this.declaredOptions[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2] }
arg0 != null
arg0[] elements != null
size(this.declaredOptions[]) one of { 0, 7 }
size(arg0[]) one of { 0, 7 }
this.target.getClass().getName() != arg0.getClass().getName()
this.declaredOptions.getClass().getName() != arg0.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.addAccessibleWithAnnotation(java.lang.reflect.AccessibleObject[]):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
arg0[] == orig(arg0[])
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0[] elements != null
size(this.declaredOptions[]) == 7
this.target.getClass().getName() != orig(arg0.getClass().getName())
this.declaredOptions.getClass().getName() != orig(arg0.getClass().getName())
size(this.declaredOptions[]) >= orig(size(this.declaredOptions[]))
size(this.declaredOptions[])-1 != orig(size(this.declaredOptions[]))
size(this.declaredOptions[])-1 >= orig(size(this.declaredOptions[]))-1
===========================================================================
cz.mff.dpp.args.Introspector.addFieldsWithAnnotation():::ENTER
this.declaredOptions[] == []
this.declaredOptions[].getClass().getName() == []
===========================================================================
cz.mff.dpp.args.Introspector.addFieldsWithAnnotation():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.addMethodsWithAnnotation():::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.addMethodsWithAnnotation():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.checkOptionAlias(java.lang.String):::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 3
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0 has only one value
arg0.toString == "--port"
size(this.declaredOptions[]) == 3
===========================================================================
cz.mff.dpp.args.Introspector.checkOptionAlias(java.lang.String):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
arg0.toString == orig(arg0.toString)
this.declaredOptions[] contains no nulls and has only one value, of length 3
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.toString == "--port"
size(this.declaredOptions[]) == 3
===========================================================================
cz.mff.dpp.args.Introspector.checkOptionName(java.lang.String):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.Introspector.checkOptionName(java.lang.String):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
arg0.toString == orig(arg0.toString)
===========================================================================
cz.mff.dpp.args.Introspector.getAllOptionNames():::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.getAllOptionNames():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
return.getClass().getName() == java.util.HashMap$KeySet.class
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.getArguments():::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.getArguments():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
return.getClass().getName() == java.util.HashMap$EntrySet.class
size(this.declaredOptions[]) == 7
this.target.getClass().getName() != return.getClass().getName()
this.declaredOptions.getClass().getName() != return.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.getDeclaredOptions():::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.getDeclaredOptions():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == return.getClass().getName()
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
return.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
return.getClass().getName() == java.util.LinkedList.class
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.init():::ENTER
this.declaredOptions[] == []
this.declaredOptions[].getClass().getName() == []
===========================================================================
cz.mff.dpp.args.Introspector.init():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.nameToOption(java.lang.String):::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0 != null
size(this.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Introspector.nameToOption(java.lang.String):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
arg0.toString == orig(arg0.toString)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
return.getClass().getName() == com.sun.proxy.$Proxy2.class
size(this.declaredOptions[]) == 7
this.target.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != return.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.optionToAccesible(cz.mff.dpp.args.Option):::ENTER
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
size(this.declaredOptions[]) == 7
this.target.getClass().getName() != arg0.getClass().getName()
arg0.getClass().getName() in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != arg0.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.optionToAccesible(cz.mff.dpp.args.Option):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
this.declaredOptions[] contains no nulls and has only one value, of length 7
this.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
return != null
size(this.declaredOptions[]) == 7
this.target.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
cz.mff.dpp.args.Introspector.storeAccessible(cz.mff.dpp.args.Option, java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
arg1 != null
size(this.declaredOptions[]) >= 1
this.target.getClass().getName() != arg0.getClass().getName()
arg0.getClass().getName() in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != arg0.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.storeAccessible(cz.mff.dpp.args.Option, java.lang.reflect.AccessibleObject):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions[] == orig(this.declaredOptions[])
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
size(this.declaredOptions[]) >= 1
this.target.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
cz.mff.dpp.args.Introspector.storeOption(cz.mff.dpp.args.Option):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
this.target.getClass().getName() != arg0.getClass().getName()
this.declaredOptions.getClass().getName() != arg0.getClass().getName()
===========================================================================
cz.mff.dpp.args.Introspector.storeOption(cz.mff.dpp.args.Option):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.declaredOptions == orig(this.declaredOptions)
this.declaredOptions.getClass().getName() == orig(this.declaredOptions.getClass().getName())
this.options == orig(this.options)
this.objectsWithOption == orig(this.objectsWithOption)
this.objectsWithArgument == orig(this.objectsWithArgument)
size(this.declaredOptions[])-1 == orig(size(this.declaredOptions[]))
size(this.declaredOptions[]) >= 1
this.target.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in this.declaredOptions[].getClass().getName()
this.declaredOptions.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
cz.mff.dpp.args.Logger:::CLASS
cz.mff.dpp.args.Logger.LOGGER has only one value
cz.mff.dpp.args.Logger.LOGGER != null
===========================================================================
cz.mff.dpp.args.Logger.fine(java.lang.String, java.lang.Object[]):::ENTER
arg0 has only one value
arg0.toString == "Cannot invoke static compare(x,y) for type %s"
arg1.getClass().getName() == java.lang.Object[].class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
size(arg1[]) == 1
===========================================================================
cz.mff.dpp.args.Logger.fine(java.lang.String, java.lang.Object[]):::EXIT
cz.mff.dpp.args.Logger.LOGGER == orig(cz.mff.dpp.args.Logger.LOGGER)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg0.toString == "Cannot invoke static compare(x,y) for type %s"
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
===========================================================================
cz.mff.dpp.args.Logger.info(java.lang.String, java.lang.Object[]):::ENTER
arg0 != null
arg0.toString one of { "Processing option %s", "Setting option %s with %s" }
arg1 != null
arg1.getClass().getName() == java.lang.Object[].class
arg1[] elements != null
size(arg1[]) one of { 1, 2 }
===========================================================================
cz.mff.dpp.args.Logger.info(java.lang.String, java.lang.Object[]):::EXIT
cz.mff.dpp.args.Logger.LOGGER == orig(cz.mff.dpp.args.Logger.LOGGER)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
arg0.toString one of { "Processing option %s", "Setting option %s with %s" }
arg1[] elements != null
===========================================================================
cz.mff.dpp.args.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Object[]):::ENTER
arg0 != null
arg1 != null
arg2 != null
arg2.getClass().getName() == java.lang.Object[].class
arg2[] elements != null
size(arg2[]) one of { 1, 2, 3 }
===========================================================================
cz.mff.dpp.args.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Object[]):::EXIT
cz.mff.dpp.args.Logger.LOGGER == orig(cz.mff.dpp.args.Logger.LOGGER)
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg2[] elements != null
===========================================================================
cz.mff.dpp.args.Logger.severe(java.lang.String, java.lang.Object[]):::ENTER
arg1.getClass().getName() == java.lang.Object[].class
size(arg1[]) one of { 2, 3 }
===========================================================================
cz.mff.dpp.args.Logger.severe(java.lang.String, java.lang.Object[]):::EXIT
cz.mff.dpp.args.Logger.LOGGER == orig(cz.mff.dpp.args.Logger.LOGGER)
arg0.toString == orig(arg0.toString)
arg1[] == orig(arg1[])
===========================================================================
cz.mff.dpp.args.OptionUtils$Used:::OBJECT
this.usedOptionParams != null
this.usedOptionParams.getClass().getName() == java.util.HashMap.class
this.usedOptionPosition != null
this.usedOptionPosition.getClass().getName() == java.util.HashMap.class
this.freeArguments != null
this.freeArguments[] == []
this.freeArguments[].getClass().getName() == []
this.freeArguments.getClass().getName() == java.util.LinkedList.class
this.freeArgumentsPosition != null
this.freeArgumentsPosition[] == []
this.freeArgumentsPosition[].getClass().getName() == []
this.freeArgumentsPosition.getClass().getName() == java.util.LinkedList.class
this.position >= 0
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.Used():::EXIT
this.position == 0
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.addOption(cz.mff.dpp.args.Option, java.util.List):::ENTER
arg0 != null
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
arg1 != null
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.String.class
arg1.getClass().getName() == java.util.LinkedList.class
size(arg1[]) one of { 1, 2, 4 }
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.addOption(cz.mff.dpp.args.Option, java.util.List):::EXIT
this.usedOptionParams == orig(this.usedOptionParams)
this.usedOptionParams.getClass().getName() == orig(this.usedOptionParams.getClass().getName())
this.usedOptionPosition == orig(this.usedOptionPosition)
this.usedOptionPosition.getClass().getName() == orig(this.usedOptionPosition.getClass().getName())
this.freeArguments == orig(this.freeArguments)
this.freeArguments[] == orig(this.freeArguments[])
this.freeArguments.getClass().getName() == orig(this.freeArguments.getClass().getName())
this.freeArgumentsPosition == orig(this.freeArgumentsPosition)
this.freeArgumentsPosition[] == orig(this.freeArgumentsPosition[])
this.freeArgumentsPosition.getClass().getName() == orig(this.freeArgumentsPosition.getClass().getName())
arg1[] == orig(arg1[])
arg1[] elements != null
arg1[].getClass().getName() elements == java.lang.String.class
this.position - orig(this.position) - 1 == 0
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.getNextPosition():::ENTER
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.getNextPosition():::EXIT
this.usedOptionParams == orig(this.usedOptionParams)
this.usedOptionParams.getClass().getName() == orig(this.usedOptionParams.getClass().getName())
this.usedOptionPosition == orig(this.usedOptionPosition)
this.usedOptionPosition.getClass().getName() == orig(this.usedOptionPosition.getClass().getName())
this.freeArguments == orig(this.freeArguments)
this.freeArguments[] == orig(this.freeArguments[])
this.freeArguments.getClass().getName() == orig(this.freeArguments.getClass().getName())
this.freeArgumentsPosition == orig(this.freeArgumentsPosition)
this.freeArgumentsPosition[] == orig(this.freeArgumentsPosition[])
this.freeArgumentsPosition.getClass().getName() == orig(this.freeArgumentsPosition.getClass().getName())
return >= 0
this.position - orig(this.position) - 1 == 0
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.getUsedOptions():::ENTER
this.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.OptionUtils$Used.getUsedOptions():::EXIT
this.usedOptionParams == orig(this.usedOptionParams)
this.usedOptionParams.getClass().getName() == orig(this.usedOptionParams.getClass().getName())
this.usedOptionPosition == orig(this.usedOptionPosition)
this.usedOptionPosition.getClass().getName() == orig(this.usedOptionPosition.getClass().getName())
this.freeArguments == orig(this.freeArguments)
this.freeArguments[] == orig(this.freeArguments[])
this.freeArguments.getClass().getName() == orig(this.freeArguments.getClass().getName())
this.freeArgumentsPosition == orig(this.freeArgumentsPosition)
this.freeArgumentsPosition[] == orig(this.freeArgumentsPosition[])
this.freeArgumentsPosition.getClass().getName() == orig(this.freeArgumentsPosition.getClass().getName())
this.position == orig(this.position)
this.position one of { 1, 4 }
return.getClass().getName() == java.util.HashMap$KeySet.class
===========================================================================
cz.mff.dpp.args.OptionUtils:::CLASS
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX has only one value
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX != null
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString == "-"
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX has only one value
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX != null
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString == "--"
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR has only one value
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR != null
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString == "--"
===========================================================================
cz.mff.dpp.args.OptionUtils.isLongOption(java.lang.String):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.OptionUtils.isLongOption(java.lang.String):::EXIT91
===========================================================================
cz.mff.dpp.args.OptionUtils.isLongOption(java.lang.String):::EXIT91;condition="return == true"
===========================================================================
cz.mff.dpp.args.OptionUtils.isLongOption(java.lang.String):::EXIT
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString)
arg0.toString == orig(arg0.toString)
return == true
===========================================================================
cz.mff.dpp.args.OptionUtils.isLongOption(java.lang.String):::EXIT;condition="return == true"
===========================================================================
cz.mff.dpp.args.OptionUtils.isOption(java.lang.String):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.OptionUtils.isOption(java.lang.String):::EXIT
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString)
arg0.toString == orig(arg0.toString)
return == true
===========================================================================
cz.mff.dpp.args.OptionUtils.isOption(java.lang.String):::EXIT;condition="return == true"
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT69
arg0.toString == "-p"
return == true
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT69;condition="return == true"
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT71
return == false
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT71;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.SIMPLE_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX)
cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString == orig(cz.mff.dpp.args.OptionUtils.LONG_OPTION_PREFIX.toString)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR)
cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString == orig(cz.mff.dpp.args.OptionUtils.OPTION_LIST_TERMINATOR.toString)
arg0.toString == orig(arg0.toString)
(return == true)  ==>  (arg0.toString == "-p")
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT;condition="return == true"
arg0.toString == "-p"
return == true
===========================================================================
cz.mff.dpp.args.OptionUtils.isSimpleOption(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.mff.dpp.args.ParseException:::CLASS
===========================================================================
cz.mff.dpp.args.ParseException:::OBJECT
===========================================================================
cz.mff.dpp.args.ParseException.ParseException(java.lang.Throwable, java.lang.String, java.lang.Object[]):::ENTER
arg1 has only one value
arg1.toString == "Setting %s in %s did not pass the check."
arg2.getClass().getName() == java.lang.Object[].class
size(arg2[]) == 2
===========================================================================
cz.mff.dpp.args.ParseException.ParseException(java.lang.Throwable, java.lang.String, java.lang.Object[]):::EXIT
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg1.toString == "Setting %s in %s did not pass the check."
===========================================================================
cz.mff.dpp.args.Parser:::CLASS
cz.mff.dpp.args.Parser.$assertionsDisabled == false
===========================================================================
cz.mff.dpp.args.Parser:::OBJECT
this.target.getClass().getName() == this.annotatedObjects.target.getClass().getName()
this.annotatedObjects.declaredOptions.getClass().getName() == this.used.freeArguments.getClass().getName()
this.annotatedObjects.declaredOptions.getClass().getName() == this.used.freeArgumentsPosition.getClass().getName()
this.used.usedOptionParams.getClass().getName() == this.used.usedOptionPosition.getClass().getName()
this.target has only one value
this.target != null
this.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
this.annotatedObjects != null
this.annotatedObjects.target has only one value
this.annotatedObjects.target != null
this.annotatedObjects.declaredOptions != null
this.annotatedObjects.declaredOptions[] contains no nulls and has only one value, of length 7
this.annotatedObjects.declaredOptions[] elements != null
this.annotatedObjects.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
this.annotatedObjects.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.annotatedObjects.declaredOptions.getClass().getName() == java.util.LinkedList.class
this.annotatedObjects.options != null
this.annotatedObjects.objectsWithOption != null
this.annotatedObjects.objectsWithArgument != null
this.used != null
this.used.usedOptionParams != null
this.used.usedOptionParams.getClass().getName() == java.util.HashMap.class
this.used.usedOptionPosition != null
this.used.freeArguments != null
this.used.freeArguments[] == []
this.used.freeArguments[].getClass().getName() == []
this.used.freeArgumentsPosition != null
this.used.freeArgumentsPosition[] == []
this.used.freeArgumentsPosition[].getClass().getName() == []
this.used.position >= 0
size(this.annotatedObjects.declaredOptions[]) == 7
this.target.getClass().getName() != this.annotatedObjects.declaredOptions.getClass().getName()
this.target.getClass().getName() != this.used.usedOptionParams.getClass().getName()
this.annotatedObjects.declaredOptions.getClass().getName() != this.used.usedOptionParams.getClass().getName()
===========================================================================
cz.mff.dpp.args.Parser.Parser(java.lang.Object):::ENTER
arg0 has only one value
arg0.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
===========================================================================
cz.mff.dpp.args.Parser.Parser(java.lang.Object):::EXIT
this.target.getClass().getName() == orig(arg0.getClass().getName())
this.used.position == 0
===========================================================================
cz.mff.dpp.args.Parser.check():::ENTER
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.check():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.getFactoryType(java.lang.annotation.Annotation):::ENTER
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
cz.mff.dpp.args.Parser.getFactoryType(java.lang.annotation.Annotation):::EXIT538
===========================================================================
cz.mff.dpp.args.Parser.getFactoryType(java.lang.annotation.Annotation):::EXIT
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
return has only one value
===========================================================================
cz.mff.dpp.args.Parser.getOptionParams(java.lang.reflect.AccessibleObject, cz.mff.dpp.args.Option, java.util.LinkedList):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == com.sun.proxy.$Proxy2.class
arg2 != null
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
size(arg2[]) >= 1
this.target.getClass().getName() != arg1.getClass().getName()
arg1.getClass().getName() in this.annotatedObjects.declaredOptions[].getClass().getName()
this.annotatedObjects.declaredOptions.getClass().getName() != arg1.getClass().getName()
this.used.usedOptionParams.getClass().getName() != arg1.getClass().getName()
===========================================================================
cz.mff.dpp.args.Parser.getOptionParams(java.lang.reflect.AccessibleObject, cz.mff.dpp.args.Option, java.util.LinkedList):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == return.getClass().getName()
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == return.getClass().getName()
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == return.getClass().getName()
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
return.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
return.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
return.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
arg2[] elements != null
arg2[].getClass().getName() elements == java.lang.String.class
return != null
return[] elements != null
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.LinkedList.class
size(return[]) one of { 1, 2, 4 }
this.target.getClass().getName() != return.getClass().getName()
this.target.getClass().getName() != orig(arg1.getClass().getName())
orig(arg1.getClass().getName()) in this.annotatedObjects.declaredOptions[].getClass().getName()
this.used.usedOptionParams.getClass().getName() != return.getClass().getName()
this.used.usedOptionParams.getClass().getName() != orig(arg1.getClass().getName())
return.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
cz.mff.dpp.args.Parser.isOptionParameter(java.lang.String):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.Parser.isOptionParameter(java.lang.String):::EXIT520
===========================================================================
cz.mff.dpp.args.Parser.isOptionParameter(java.lang.String):::EXIT520;condition="return == true"
===========================================================================
cz.mff.dpp.args.Parser.isOptionParameter(java.lang.String):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return == true
===========================================================================
cz.mff.dpp.args.Parser.isOptionParameter(java.lang.String):::EXIT;condition="return == true"
===========================================================================
cz.mff.dpp.args.Parser.parse(java.lang.String[]):::ENTER
this.used.position == 0
arg0.getClass().getName() == java.lang.String[].class
size(arg0[]) one of { 3, 5, 8 }
===========================================================================
cz.mff.dpp.args.Parser.parse(java.lang.String[]):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
arg0[] == orig(arg0[])
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.processArguments():::ENTER
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.processArguments():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.processInputParameters(java.lang.String[]):::ENTER
this.used.position == 0
arg0.getClass().getName() == java.lang.String[].class
size(arg0[]) one of { 3, 5, 8 }
===========================================================================
cz.mff.dpp.args.Parser.processInputParameters(java.lang.String[]):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
arg0[] == orig(arg0[])
this.used.position one of { 1, 4 }
===========================================================================
cz.mff.dpp.args.Parser.processOption(java.lang.String, java.util.LinkedList):::ENTER
arg1[].getClass().getName() elements == java.lang.String.class
===========================================================================
cz.mff.dpp.args.Parser.processOption(java.lang.String, java.util.LinkedList):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
this.used.position >= 1
arg1[].getClass().getName() elements == java.lang.String.class
this.used.position - orig(this.used.position) - 1 == 0
===========================================================================
cz.mff.dpp.args.Parser.set(java.lang.reflect.AccessibleObject, java.util.List, java.lang.annotation.Annotation):::ENTER
this.annotatedObjects.declaredOptions.getClass().getName() == arg1.getClass().getName()
this.used.position >= 1
arg1[].getClass().getName() elements == java.lang.String.class
arg2.getClass().getName() == com.sun.proxy.$Proxy2.class
size(arg1[]) one of { 1, 2, 4 }
this.target.getClass().getName() != arg2.getClass().getName()
arg2.getClass().getName() in this.annotatedObjects.declaredOptions[].getClass().getName()
this.annotatedObjects.declaredOptions.getClass().getName() != arg2.getClass().getName()
this.used.usedOptionParams.getClass().getName() != arg2.getClass().getName()
===========================================================================
cz.mff.dpp.args.Parser.set(java.lang.reflect.AccessibleObject, java.util.List, java.lang.annotation.Annotation):::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(arg1.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArguments.getClass().getName() == orig(arg1.getClass().getName())
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.freeArgumentsPosition.getClass().getName() == orig(arg1.getClass().getName())
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
arg1[] == orig(arg1[])
orig(this.used.freeArguments.getClass().getName()) == orig(arg1.getClass().getName())
orig(this.used.freeArgumentsPosition.getClass().getName()) == orig(arg1.getClass().getName())
this.used.position >= 1
arg1[].getClass().getName() elements == java.lang.String.class
orig(arg1.getClass().getName()) == java.util.LinkedList.class
this.target.getClass().getName() != orig(arg1.getClass().getName())
this.target.getClass().getName() != orig(arg2.getClass().getName())
orig(arg2.getClass().getName()) in this.annotatedObjects.declaredOptions[].getClass().getName()
this.used.usedOptionParams.getClass().getName() != orig(arg1.getClass().getName())
this.used.usedOptionParams.getClass().getName() != orig(arg2.getClass().getName())
orig(arg1.getClass().getName()) != orig(arg2.getClass().getName())
===========================================================================
cz.mff.dpp.args.Parser.usage():::ENTER
this has only one value
this.annotatedObjects has only one value
this.annotatedObjects.declaredOptions has only one value
this.annotatedObjects.options has only one value
this.annotatedObjects.objectsWithOption has only one value
this.annotatedObjects.objectsWithArgument has only one value
this.used has only one value
this.used.usedOptionParams has only one value
this.used.usedOptionPosition has only one value
this.used.freeArguments has only one value
this.used.freeArgumentsPosition has only one value
this.used.position == 4
===========================================================================
cz.mff.dpp.args.Parser.usage():::EXIT
this.target == orig(this.target)
this.target.getClass().getName() == orig(this.target.getClass().getName())
this.target.getClass().getName() == orig(this.annotatedObjects.target.getClass().getName())
this.annotatedObjects == orig(this.annotatedObjects)
this.annotatedObjects.target == orig(this.annotatedObjects.target)
this.annotatedObjects.declaredOptions == orig(this.annotatedObjects.declaredOptions)
this.annotatedObjects.declaredOptions[] == orig(this.annotatedObjects.declaredOptions[])
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.annotatedObjects.declaredOptions.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArguments.getClass().getName())
this.annotatedObjects.declaredOptions.getClass().getName() == orig(this.used.freeArgumentsPosition.getClass().getName())
this.annotatedObjects.options == orig(this.annotatedObjects.options)
this.annotatedObjects.objectsWithOption == orig(this.annotatedObjects.objectsWithOption)
this.annotatedObjects.objectsWithArgument == orig(this.annotatedObjects.objectsWithArgument)
this.used == orig(this.used)
this.used.usedOptionParams == orig(this.used.usedOptionParams)
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionParams.getClass().getName())
this.used.usedOptionParams.getClass().getName() == orig(this.used.usedOptionPosition.getClass().getName())
this.used.usedOptionPosition == orig(this.used.usedOptionPosition)
this.used.freeArguments == orig(this.used.freeArguments)
this.used.freeArguments[] == orig(this.used.freeArguments[])
this.used.freeArgumentsPosition == orig(this.used.freeArgumentsPosition)
this.used.freeArgumentsPosition[] == orig(this.used.freeArgumentsPosition[])
this.used.position == orig(this.used.position)
cz.mff.dpp.args.Parser.$assertionsDisabled == orig(cz.mff.dpp.args.Parser.$assertionsDisabled)
this.annotatedObjects has only one value
this.annotatedObjects.declaredOptions has only one value
this.annotatedObjects.options has only one value
this.annotatedObjects.objectsWithOption has only one value
this.annotatedObjects.objectsWithArgument has only one value
this.used has only one value
this.used.usedOptionParams has only one value
this.used.usedOptionPosition has only one value
this.used.freeArguments has only one value
this.used.freeArgumentsPosition has only one value
this.used.position == 4
===========================================================================
cz.mff.dpp.args.ReflectUtils:::CLASS
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME has only one value
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME != null
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == "valueOf"
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.getArgument(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getArgument(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getConstraint(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getConstraint(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return.getClass().getName() == com.sun.proxy.$Proxy3.class
===========================================================================
cz.mff.dpp.args.ReflectUtils.getConstructor(java.lang.Class, java.lang.Class[]):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == java.lang.Class[].class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[] elements != null
size(arg1[]) == 1
===========================================================================
cz.mff.dpp.args.ReflectUtils.getConstructor(java.lang.Class, java.lang.Class[]):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
arg1[] == orig(arg1[])
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[] elements != null
return != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getGenericType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getGenericType(java.lang.reflect.AccessibleObject):::EXIT590
===========================================================================
cz.mff.dpp.args.ReflectUtils.getGenericType(java.lang.reflect.AccessibleObject):::EXIT603
return has only one value
===========================================================================
cz.mff.dpp.args.ReflectUtils.getGenericType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getMethod(java.lang.Class, java.lang.String, java.lang.Class[]):::ENTER
arg0 != null
arg1 != null
arg1.toString one of { "compare", "compareTo", "valueOf" }
arg2 != null
arg2.getClass().getName() == java.lang.Class[].class
arg2[] elements != null
arg2[] elements are equal
size(arg2[]) one of { 1, 2 }
===========================================================================
cz.mff.dpp.args.ReflectUtils.getMethod(java.lang.Class, java.lang.String, java.lang.Class[]):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg1.toString one of { "compare", "compareTo", "valueOf" }
arg2[] elements != null
arg2[] elements are equal
return != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getOption(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getOption(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return != null
return.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
cz.mff.dpp.args.ReflectUtils.getParameterizedType(java.lang.reflect.Type):::ENTER
arg0.getClass().getName() == sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.class
===========================================================================
cz.mff.dpp.args.ReflectUtils.getParameterizedType(java.lang.reflect.Type):::EXIT624
===========================================================================
cz.mff.dpp.args.ReflectUtils.getParameterizedType(java.lang.reflect.Type):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return has only one value
===========================================================================
cz.mff.dpp.args.ReflectUtils.getType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueType(java.lang.reflect.AccessibleObject):::EXIT378
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueTypeName(java.lang.reflect.AccessibleObject):::ENTER
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueTypeName(java.lang.reflect.AccessibleObject):::EXIT413
===========================================================================
cz.mff.dpp.args.ReflectUtils.getValueTypeName(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
===========================================================================
cz.mff.dpp.args.ReflectUtils.invokeMethod(java.lang.reflect.Method, java.lang.String):::ENTER
===========================================================================
cz.mff.dpp.args.ReflectUtils.invokeMethod(java.lang.reflect.Method, java.lang.String):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
return.getClass().getName() == java.lang.Character.class
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT109
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT109;condition="return == true"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT109;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ReflectUtils.isArrayType(java.lang.reflect.AccessibleObject):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.Class):::ENTER
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.Class):::EXIT437
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.Class):::EXIT437;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.Class):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.reflect.AccessibleObject):::ENTER
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.isEnumType(java.lang.reflect.AccessibleObject):::EXIT;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFieldAssignableFrom(java.lang.Class, java.lang.reflect.Method):::ENTER
arg0 != null
arg1 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFieldAssignableFrom(java.lang.Class, java.lang.reflect.Method):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == true
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFieldAssignableFrom(java.lang.Class, java.lang.reflect.Method):::EXIT;condition="return == true"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFlagType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFlagType(java.lang.reflect.AccessibleObject):::EXIT62
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFlagType(java.lang.reflect.AccessibleObject):::EXIT62;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFlagType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.isFlagType(java.lang.reflect.AccessibleObject):::EXIT;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT158
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT158;condition="return == true"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT158;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSimpleType(java.lang.reflect.AccessibleObject):::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSupportedOption(java.lang.reflect.AccessibleObject):::ENTER
arg0 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSupportedOption(java.lang.reflect.AccessibleObject):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
return == true
===========================================================================
cz.mff.dpp.args.ReflectUtils.isSupportedOption(java.lang.reflect.AccessibleObject):::EXIT;condition="return == true"
===========================================================================
cz.mff.dpp.args.ReflectUtils.valueFromString(java.lang.Class, java.lang.String):::ENTER
arg0 != null
arg1 != null
===========================================================================
cz.mff.dpp.args.ReflectUtils.valueFromString(java.lang.Class, java.lang.String):::EXIT290
===========================================================================
cz.mff.dpp.args.ReflectUtils.valueFromString(java.lang.Class, java.lang.String):::EXIT303
return.getClass().getName() == java.lang.Character.class
orig(arg0) has only one value
===========================================================================
cz.mff.dpp.args.ReflectUtils.valueFromString(java.lang.Class, java.lang.String):::EXIT
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME)
cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString == orig(cz.mff.dpp.args.ReflectUtils.FACTORY_METHOD_NAME.toString)
cz.mff.dpp.args.ReflectUtils.$assertionsDisabled == orig(cz.mff.dpp.args.ReflectUtils.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
return != null
===========================================================================
cz.mff.dpp.args.Tokenizer$1:::OBJECT
this.position >= 0
this.buffer == null
this.options_terminated == false
cz.mff.dpp.args.Tokenizer.this.introspector != null
cz.mff.dpp.args.Tokenizer.this.introspector.target has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.target != null
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions != null
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] contains no nulls and has only one value, of length 7
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] elements != null
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == java.util.LinkedList.class
cz.mff.dpp.args.Tokenizer.this.introspector.options != null
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption != null
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument != null
cz.mff.dpp.args.Tokenizer.this.args != null
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == java.lang.String[].class
cz.mff.dpp.args.Tokenizer.this.args[] elements != null
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() elements == java.lang.String.class
size(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Tokenizer$1.(cz.mff.dpp.args.Tokenizer):::ENTER
cz.mff.dpp.args.Tokenizer.this.introspector.target has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] contains no nulls and has only one value, of length 7
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == java.util.LinkedList.class
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == java.lang.String[].class
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() elements == java.lang.String.class
size(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Tokenizer$1.(cz.mff.dpp.args.Tokenizer):::EXIT
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
this.position == 0
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::ENTER
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT97
return == true
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT97;condition="return == true"
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT99
return == false
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT99;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT;condition="return == true"
return == true
===========================================================================
cz.mff.dpp.args.Tokenizer$1.hasNext():::EXIT;condition="not(return == true)"
return == false
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::ENTER
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT221
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--list-of-ports, -10, -1026, -1027, 1028]
arg0.toString one of { "-10", "-1026", "-1027" }
return == true
orig(this) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 5
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT221;condition="return == true"
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT223
this.position == 3
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--day, monday, -p, 2000, --three-letters, abc, --test-class, test]
arg0.toString == "-p"
return == false
orig(this) has only one value
orig(arg0) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 8
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT223;condition="not(return == true)"
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
arg0.toString == orig(arg0.toString)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (arg0.toString one of { "-10", "-1026", "-1027" })
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].toString == [--list-of-ports, -10, -1026, -1027, 1028])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (return == true)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (size(cz.mff.dpp.args.Tokenizer.this.args[]) == 5)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  ==>  (this.position one of { 2, 3, 4 })
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (arg0.toString == "-p")
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].toString == [--day, monday, -p, 2000, --three-letters, abc, --test-class, test])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (return == false)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (size(cz.mff.dpp.args.Tokenizer.this.args[]) == 8)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  ==>  (orig(arg0) has only one value)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  ==>  (this.position == 3)
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT;condition="return == true"
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--list-of-ports, -10, -1026, -1027, 1028]
arg0.toString one of { "-10", "-1026", "-1027" }
return == true
orig(this) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 5
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isNegativeNumber(java.lang.String):::EXIT;condition="not(return == true)"
this.position == 3
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--day, monday, -p, 2000, --three-letters, abc, --test-class, test]
arg0.toString == "-p"
return == false
orig(this) has only one value
orig(arg0) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 8
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isOption(java.lang.String):::ENTER
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isOption(java.lang.String):::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
arg0.toString == orig(arg0.toString)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (arg0.toString one of { "-10", "-1026", "-1027" })
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].toString == [--list-of-ports, -10, -1026, -1027, 1028])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (return == false)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  <==>  (size(cz.mff.dpp.args.Tokenizer.this.args[]) == 5)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5)  ==>  (this.position one of { 2, 3, 4 })
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (arg0.toString == "-p")
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (cz.mff.dpp.args.Tokenizer.this.args[].toString == [--day, monday, -p, 2000, --three-letters, abc, --test-class, test])
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (return == true)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  <==>  (size(cz.mff.dpp.args.Tokenizer.this.args[]) == 8)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  ==>  (orig(arg0) has only one value)
(cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8)  ==>  (this.position == 3)
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isOption(java.lang.String):::EXIT;condition="return == true"
this.position == 3
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 8
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--day, monday, -p, 2000, --three-letters, abc, --test-class, test]
arg0.toString == "-p"
return == true
orig(this) has only one value
orig(arg0) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 8
===========================================================================
cz.mff.dpp.args.Tokenizer$1.isOption(java.lang.String):::EXIT;condition="not(return == true)"
cz.mff.dpp.args.Tokenizer.this has only one value
cz.mff.dpp.args.Tokenizer.this.introspector has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.options has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption has only one value
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument has only one value
cz.mff.dpp.args.Tokenizer.this.args has only one value
cz.mff.dpp.args.Tokenizer.this.args[] contains no nulls and has only one value, of length 5
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
cz.mff.dpp.args.Tokenizer.this.args[].toString == [--list-of-ports, -10, -1026, -1027, 1028]
arg0.toString one of { "-10", "-1026", "-1027" }
return == false
orig(this) has only one value
size(cz.mff.dpp.args.Tokenizer.this.args[]) == 5
===========================================================================
cz.mff.dpp.args.Tokenizer$1.next():::ENTER
===========================================================================
cz.mff.dpp.args.Tokenizer$1.next():::EXIT
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
this.position >= 1
return != null
this.position - orig(this.position) - 1 == 0
===========================================================================
cz.mff.dpp.args.Tokenizer$1.nextArg():::ENTER
===========================================================================
cz.mff.dpp.args.Tokenizer$1.nextArg():::EXIT
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
this.position >= 1
return != null
this.position - orig(this.position) - 1 == 0
===========================================================================
cz.mff.dpp.args.Tokenizer$1.process(java.lang.String):::ENTER
this.position >= 1
arg0 != null
===========================================================================
cz.mff.dpp.args.Tokenizer$1.process(java.lang.String):::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
arg0.toString == orig(arg0.toString)
this.position >= 1
return != null
===========================================================================
cz.mff.dpp.args.Tokenizer$1.processLongOption(java.lang.String):::ENTER
this.position one of { 1, 5, 7 }
arg0 != null
===========================================================================
cz.mff.dpp.args.Tokenizer$1.processLongOption(java.lang.String):::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
arg0.toString == orig(arg0.toString)
this.position one of { 1, 5, 7 }
return != null
===========================================================================
cz.mff.dpp.args.Tokenizer$1.processSimpleOption(java.lang.String):::ENTER
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer$1.processSimpleOption(java.lang.String):::EXIT
this.position == orig(this.position)
this.buffer == orig(this.buffer)
this.options_terminated == orig(this.options_terminated)
cz.mff.dpp.args.Tokenizer.this == orig(cz.mff.dpp.args.Tokenizer.this)
cz.mff.dpp.args.Tokenizer.this.introspector == orig(cz.mff.dpp.args.Tokenizer.this.introspector)
cz.mff.dpp.args.Tokenizer.this.introspector.target == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target)
cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.target.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions)
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[] == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions[])
cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.introspector.declaredOptions.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.introspector.options == orig(cz.mff.dpp.args.Tokenizer.this.introspector.options)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithOption)
cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument == orig(cz.mff.dpp.args.Tokenizer.this.introspector.objectsWithArgument)
cz.mff.dpp.args.Tokenizer.this.args == orig(cz.mff.dpp.args.Tokenizer.this.args)
cz.mff.dpp.args.Tokenizer.this.args.getClass().getName() == orig(cz.mff.dpp.args.Tokenizer.this.args.getClass().getName())
cz.mff.dpp.args.Tokenizer.this.args[] == orig(cz.mff.dpp.args.Tokenizer.this.args[])
arg0.toString == orig(arg0.toString)
this.position one of { 2, 3, 4 }
cz.mff.dpp.args.Tokenizer.this.args[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
cz.mff.dpp.args.Tokenizer.this.args[].toString one of { [--day, monday, -p, 2000, --three-letters, abc, --test-class, test], [--list-of-ports, -10, -1026, -1027, 1028] }
size(cz.mff.dpp.args.Tokenizer.this.args[]) one of { 5, 8 }
===========================================================================
cz.mff.dpp.args.Tokenizer:::OBJECT
this.introspector != null
this.introspector.target has only one value
this.introspector.target != null
this.introspector.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
this.introspector.declaredOptions != null
this.introspector.declaredOptions[] contains no nulls and has only one value, of length 7
this.introspector.declaredOptions[] elements != null
this.introspector.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
this.introspector.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.introspector.declaredOptions.getClass().getName() == java.util.LinkedList.class
this.introspector.options != null
this.introspector.objectsWithOption != null
this.introspector.objectsWithArgument != null
this.args != null
this.args.getClass().getName() == java.lang.String[].class
this.args[] elements != null
this.args[].getClass().getName() elements == java.lang.String.class
size(this.introspector.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Tokenizer.Tokenizer(cz.mff.dpp.args.Introspector, java.lang.String[]):::ENTER
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
arg1.getClass().getName() == java.lang.String[].class
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Tokenizer.Tokenizer(cz.mff.dpp.args.Introspector, java.lang.String[]):::EXIT
arg0.target == orig(arg0.target)
arg0.target.getClass().getName() == orig(arg0.target.getClass().getName())
arg0.declaredOptions == orig(arg0.declaredOptions)
arg0.declaredOptions[] == orig(arg0.declaredOptions[])
arg0.declaredOptions.getClass().getName() == orig(arg0.declaredOptions.getClass().getName())
arg0.options == orig(arg0.options)
arg0.objectsWithOption == orig(arg0.objectsWithOption)
arg0.objectsWithArgument == orig(arg0.objectsWithArgument)
arg1[] == orig(arg1[])
arg0.target has only one value
arg0.target.getClass().getName() == cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.class
arg0.declaredOptions[] contains no nulls and has only one value, of length 7
arg0.declaredOptions[].getClass().getName() == [com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2, com.sun.proxy.$Proxy2]
arg0.declaredOptions[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
arg0.declaredOptions.getClass().getName() == java.util.LinkedList.class
size(arg0.declaredOptions[]) == 7
===========================================================================
cz.mff.dpp.args.Tokenizer.iterator():::ENTER
===========================================================================
cz.mff.dpp.args.Tokenizer.iterator():::EXIT
this.introspector == orig(this.introspector)
this.introspector.target == orig(this.introspector.target)
this.introspector.target.getClass().getName() == orig(this.introspector.target.getClass().getName())
this.introspector.declaredOptions == orig(this.introspector.declaredOptions)
this.introspector.declaredOptions[] == orig(this.introspector.declaredOptions[])
this.introspector.declaredOptions.getClass().getName() == orig(this.introspector.declaredOptions.getClass().getName())
this.introspector.options == orig(this.introspector.options)
this.introspector.objectsWithOption == orig(this.introspector.objectsWithOption)
this.introspector.objectsWithArgument == orig(this.introspector.objectsWithArgument)
this.args == orig(this.args)
this.args.getClass().getName() == orig(this.args.getClass().getName())
this.args[] == orig(this.args[])
return.getClass().getName() == cz.mff.dpp.args.Tokenizer$1.class
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions:::OBJECT
this has only one value
this.day == null
this.threeLetters == null
this.port == 0.0
this.ports == null
this.days == null
this.someLetters == null
this.testClass == null
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest$ConstraintTestOptions.ConstraintTestOptions():::EXIT
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest$TestClass:::OBJECT
this has only one value
this.value has only one value
this.value.toString == "test"
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest$TestClass.TestClass(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "test"
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest$TestClass.TestClass(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "test"
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
cz.mff.dpp.args.examples.ConstraintTest.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
Exiting Daikon.
