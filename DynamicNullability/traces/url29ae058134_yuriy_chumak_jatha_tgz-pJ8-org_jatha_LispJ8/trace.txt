Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

No return from procedure observed 6 times.  Unmatched entries are ignored!
Unterminated calls:
  org.jatha.Lisp.main(java.lang.String[]) : 1 invocation
  org.jatha.Lisp.Lisp() : 1 invocation
  org.jatha.Lisp.init() : 1 invocation
  org.jatha.compile.LispCompiler.init() : 1 invocation
  org.jatha.compile.LispCompiler.require(java.lang.String) : 1 invocation
  org.jatha.extras.FUNCTION.Register(org.jatha.compile.LispCompiler) : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

missing variables in newEnterExitRel:
  parent = org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::ENTER
  child = org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@66c46700
parent varinfos missing from parent_to_child_map:
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.APROPOS_TAB]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.APROPOS_TAB-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.MAX_LIST_LENGTH_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.MAX_LIST_LENGTH_VALUE-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LENGTH_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LENGTH_VALUE-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LEVEL_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LEVEL_VALUE-1]
rel.parent_to_child_map:
    org.jatha.compile.LispCompiler.this => orig(org.jatha.compile.LispCompiler.this)
    org.jatha.compile.LispCompiler.DEBUG => orig(org.jatha.compile.LispCompiler.DEBUG)
    org.jatha.compile.LispCompiler.PROGN => orig(org.jatha.compile.LispCompiler.PROGN)
    org.jatha.compile.LispCompiler.PROGN.getClass().getName() => orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
    org.jatha.compile.LispCompiler.DEFUN => orig(org.jatha.compile.LispCompiler.DEFUN)
    org.jatha.compile.LispCompiler.DEFUN.getClass().getName() => orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
    org.jatha.compile.LispCompiler.BLOCK => orig(org.jatha.compile.LispCompiler.BLOCK)
    org.jatha.compile.LispCompiler.BLOCK.getClass().getName() => orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
    org.jatha.compile.LispCompiler.this.AND => orig(org.jatha.compile.LispCompiler.this.AND)
    org.jatha.compile.LispCompiler.this.AND.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
    org.jatha.compile.LispCompiler.this.DEFMACRO => orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
    org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
    org.jatha.compile.LispCompiler.this.IF => orig(org.jatha.compile.LispCompiler.this.IF)
    org.jatha.compile.LispCompiler.this.IF.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
    org.jatha.compile.LispCompiler.this.LAMBDA => orig(org.jatha.compile.LispCompiler.this.LAMBDA)
    org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
    org.jatha.compile.LispCompiler.this.LET => orig(org.jatha.compile.LispCompiler.this.LET)
    org.jatha.compile.LispCompiler.this.LET.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
    org.jatha.compile.LispCompiler.this.SET => orig(org.jatha.compile.LispCompiler.this.SET)
    org.jatha.compile.LispCompiler.this.SET.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
    org.jatha.compile.LispCompiler.this.LETREC => orig(org.jatha.compile.LispCompiler.this.LETREC)
    org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
    org.jatha.compile.LispCompiler.this.OR => orig(org.jatha.compile.LispCompiler.this.OR)
    org.jatha.compile.LispCompiler.this.OR.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
    org.jatha.compile.LispCompiler.AMP_REST => orig(org.jatha.compile.LispCompiler.AMP_REST)
    org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() => orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION => orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO => orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
    org.jatha.compile.LispCompiler.this.CONS => orig(org.jatha.compile.LispCompiler.this.CONS)
    org.jatha.compile.LispCompiler.this.CONS.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
    org.jatha.compile.LispCompiler.this.CONS.functionName => orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
    org.jatha.compile.LispCompiler.this.CONS.functionName.toString => orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
    org.jatha.compile.LispCompiler.this.LIST => orig(org.jatha.compile.LispCompiler.this.LIST)
    org.jatha.compile.LispCompiler.this.LIST.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
    org.jatha.compile.LispCompiler.this.LIST.functionName => orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
    org.jatha.compile.LispCompiler.this.LIST.functionName.toString => orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
    org.jatha.compile.LispCompiler.this.SETQ => orig(org.jatha.compile.LispCompiler.this.SETQ)
    org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
    org.jatha.compile.LispCompiler.this.SETQ.functionName => orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
    org.jatha.compile.LispCompiler.this.SETQ.functionName.toString => orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
    org.jatha.compile.LispCompiler.this.SpecialOperators => orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
    org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
    org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP => orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
    org.jatha.compile.LispCompiler.this.f_lisp => orig(org.jatha.compile.LispCompiler.this.f_lisp)
    org.jatha.Lisp.DEBUG => orig(org.jatha.Lisp.DEBUG)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.useConsole => orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
    org.jatha.compile.LispCompiler.this.f_lisp.PARSER => orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
    org.jatha.compile.LispCompiler.this.f_lisp.COMPILER => orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
    org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB => orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
    org.jatha.compile.LispCompiler.this.f_lisp.MACHINE => orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
    org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO => orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
    org.jatha.Lisp.APROPOS_TAB => orig(org.jatha.Lisp.APROPOS_TAB)
    org.jatha.compile.LispCompiler.this.f_lisp.prompt => orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
    org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt => orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName())
    org.jatha.compile.LispCompiler.this.f_lisp.packages => orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
    org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName())
    org.jatha.Lisp.MAX_LIST_LENGTH_VALUE => orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
    org.jatha.Lisp.PRINT_LENGTH_VALUE => orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
    org.jatha.Lisp.PRINT_LEVEL_VALUE => orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
    org.jatha.compile.LispCompiler.this.requires => orig(org.jatha.compile.LispCompiler.this.requires)
    org.jatha.compile.LispCompiler.this.requires.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
    org.jatha.compile.LispCompiler.this.defaultPackages => orig(org.jatha.compile.LispCompiler.this.defaultPackages)
    org.jatha.compile.LispCompiler.this.defaultPackages[..] => orig(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName() => orig(org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName())
    org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
    org.jatha.compile.LispCompiler.this.legalBlocks => orig(org.jatha.compile.LispCompiler.this.legalBlocks)
    org.jatha.compile.LispCompiler.$assertionsDisabled => orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..]) => orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])-1 => orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))-1
child.var_infos:
    this
    org.jatha.compile.LispCompiler.this
    org.jatha.compile.LispCompiler.DEBUG
    org.jatha.compile.LispCompiler.PROGN
    org.jatha.compile.LispCompiler.PROGN.getClass().getName()
    org.jatha.compile.LispCompiler.DEFUN
    org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
    org.jatha.compile.LispCompiler.BLOCK
    org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
    org.jatha.compile.LispCompiler.this.AND
    org.jatha.compile.LispCompiler.this.AND.getClass().getName()
    org.jatha.compile.LispCompiler.this.DEFMACRO
    org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
    org.jatha.compile.LispCompiler.this.IF
    org.jatha.compile.LispCompiler.this.IF.getClass().getName()
    org.jatha.compile.LispCompiler.this.LAMBDA
    org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
    org.jatha.compile.LispCompiler.this.LET
    org.jatha.compile.LispCompiler.this.LET.getClass().getName()
    org.jatha.compile.LispCompiler.this.SET
    org.jatha.compile.LispCompiler.this.SET.getClass().getName()
    org.jatha.compile.LispCompiler.this.LETREC
    org.jatha.compile.LispCompiler.this.LETREC.getClass().getName()
    org.jatha.compile.LispCompiler.this.OR
    org.jatha.compile.LispCompiler.this.OR.getClass().getName()
    org.jatha.compile.LispCompiler.AMP_REST
    org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName()
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName()
    org.jatha.compile.LispCompiler.this.CONS
    org.jatha.compile.LispCompiler.this.CONS.getClass().getName()
    org.jatha.compile.LispCompiler.this.CONS.functionName
    org.jatha.compile.LispCompiler.this.CONS.functionName.toString
    org.jatha.compile.LispCompiler.this.LIST
    org.jatha.compile.LispCompiler.this.LIST.getClass().getName()
    org.jatha.compile.LispCompiler.this.LIST.functionName
    org.jatha.compile.LispCompiler.this.LIST.functionName.toString
    org.jatha.compile.LispCompiler.this.SETQ
    org.jatha.compile.LispCompiler.this.SETQ.getClass().getName()
    org.jatha.compile.LispCompiler.this.SETQ.functionName
    org.jatha.compile.LispCompiler.this.SETQ.functionName.toString
    org.jatha.compile.LispCompiler.this.SpecialOperators
    org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName()
    org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP
    org.jatha.compile.LispCompiler.this.f_lisp
    org.jatha.Lisp.DEBUG
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString
    org.jatha.compile.LispCompiler.this.f_lisp.useConsole
    org.jatha.compile.LispCompiler.this.f_lisp.PARSER
    org.jatha.compile.LispCompiler.this.f_lisp.COMPILER
    org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB
    org.jatha.compile.LispCompiler.this.f_lisp.MACHINE
    org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO
    org.jatha.Lisp.APROPOS_TAB
    org.jatha.compile.LispCompiler.this.f_lisp.prompt
    org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName()
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName()
    org.jatha.compile.LispCompiler.this.f_lisp.packages
    org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName()
    org.jatha.Lisp.MAX_LIST_LENGTH_VALUE
    org.jatha.Lisp.PRINT_LENGTH_VALUE
    org.jatha.Lisp.PRINT_LEVEL_VALUE
    org.jatha.compile.LispCompiler.this.requires
    org.jatha.compile.LispCompiler.this.requires.getClass().getName()
    org.jatha.compile.LispCompiler.this.defaultPackages
    org.jatha.compile.LispCompiler.this.defaultPackages[..]
    org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName()
    org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName()
    org.jatha.compile.LispCompiler.this.legalBlocks
    org.jatha.compile.LispCompiler.$assertionsDisabled
    orig(org.jatha.compile.LispCompiler.this)
    orig(org.jatha.compile.LispCompiler.DEBUG)
    orig(org.jatha.compile.LispCompiler.PROGN)
    orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
    orig(org.jatha.compile.LispCompiler.DEFUN)
    orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
    orig(org.jatha.compile.LispCompiler.BLOCK)
    orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.AND)
    orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
    orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.IF)
    orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LAMBDA)
    orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LET)
    orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.SET)
    orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LETREC)
    orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.OR)
    orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
    orig(org.jatha.compile.LispCompiler.AMP_REST)
    orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
    orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
    orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.CONS)
    orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
    orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.LIST)
    orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
    orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.SETQ)
    orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
    orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
    orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
    orig(org.jatha.compile.LispCompiler.this.f_lisp)
    orig(org.jatha.Lisp.DEBUG)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
    orig(org.jatha.Lisp.APROPOS_TAB)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName())
    orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
    orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
    orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
    orig(org.jatha.compile.LispCompiler.this.requires)
    orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.defaultPackages)
    orig(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    orig(org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.legalBlocks)
    orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])-1
    orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))
    orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))-1
End of diagnostics for newEnterExitRel(org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::ENTER, org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::EXIT)
missing variables in newEnterExitRel:
  parent = org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::ENTER
  child = org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@64308672
parent varinfos missing from parent_to_child_map:
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.APROPOS_TAB]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.APROPOS_TAB-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.MAX_LIST_LENGTH_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.MAX_LIST_LENGTH_VALUE-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LENGTH_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LENGTH_VALUE-1]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LEVEL_VALUE]
   org.jatha.compile.LispCompiler.this.defaultPackages[org.jatha.Lisp.PRINT_LEVEL_VALUE-1]
rel.parent_to_child_map:
    org.jatha.compile.LispCompiler.this => orig(org.jatha.compile.LispCompiler.this)
    org.jatha.compile.LispCompiler.DEBUG => orig(org.jatha.compile.LispCompiler.DEBUG)
    org.jatha.compile.LispCompiler.PROGN => orig(org.jatha.compile.LispCompiler.PROGN)
    org.jatha.compile.LispCompiler.PROGN.getClass().getName() => orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
    org.jatha.compile.LispCompiler.DEFUN => orig(org.jatha.compile.LispCompiler.DEFUN)
    org.jatha.compile.LispCompiler.DEFUN.getClass().getName() => orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
    org.jatha.compile.LispCompiler.BLOCK => orig(org.jatha.compile.LispCompiler.BLOCK)
    org.jatha.compile.LispCompiler.BLOCK.getClass().getName() => orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
    org.jatha.compile.LispCompiler.this.AND => orig(org.jatha.compile.LispCompiler.this.AND)
    org.jatha.compile.LispCompiler.this.AND.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
    org.jatha.compile.LispCompiler.this.DEFMACRO => orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
    org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
    org.jatha.compile.LispCompiler.this.IF => orig(org.jatha.compile.LispCompiler.this.IF)
    org.jatha.compile.LispCompiler.this.IF.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
    org.jatha.compile.LispCompiler.this.LAMBDA => orig(org.jatha.compile.LispCompiler.this.LAMBDA)
    org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
    org.jatha.compile.LispCompiler.this.LET => orig(org.jatha.compile.LispCompiler.this.LET)
    org.jatha.compile.LispCompiler.this.LET.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
    org.jatha.compile.LispCompiler.this.SET => orig(org.jatha.compile.LispCompiler.this.SET)
    org.jatha.compile.LispCompiler.this.SET.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
    org.jatha.compile.LispCompiler.this.LETREC => orig(org.jatha.compile.LispCompiler.this.LETREC)
    org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
    org.jatha.compile.LispCompiler.this.OR => orig(org.jatha.compile.LispCompiler.this.OR)
    org.jatha.compile.LispCompiler.this.OR.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
    org.jatha.compile.LispCompiler.AMP_REST => orig(org.jatha.compile.LispCompiler.AMP_REST)
    org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() => orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION => orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO => orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
    org.jatha.compile.LispCompiler.this.CONS => orig(org.jatha.compile.LispCompiler.this.CONS)
    org.jatha.compile.LispCompiler.this.CONS.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
    org.jatha.compile.LispCompiler.this.CONS.functionName => orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
    org.jatha.compile.LispCompiler.this.CONS.functionName.toString => orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
    org.jatha.compile.LispCompiler.this.LIST => orig(org.jatha.compile.LispCompiler.this.LIST)
    org.jatha.compile.LispCompiler.this.LIST.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
    org.jatha.compile.LispCompiler.this.LIST.functionName => orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
    org.jatha.compile.LispCompiler.this.LIST.functionName.toString => orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
    org.jatha.compile.LispCompiler.this.SETQ => orig(org.jatha.compile.LispCompiler.this.SETQ)
    org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
    org.jatha.compile.LispCompiler.this.SETQ.functionName => orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
    org.jatha.compile.LispCompiler.this.SETQ.functionName.toString => orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
    org.jatha.compile.LispCompiler.this.SpecialOperators => orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
    org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
    org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP => orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
    org.jatha.compile.LispCompiler.this.f_lisp => orig(org.jatha.compile.LispCompiler.this.f_lisp)
    org.jatha.Lisp.DEBUG => orig(org.jatha.Lisp.DEBUG)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString => orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
    org.jatha.compile.LispCompiler.this.f_lisp.useConsole => orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
    org.jatha.compile.LispCompiler.this.f_lisp.PARSER => orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
    org.jatha.compile.LispCompiler.this.f_lisp.COMPILER => orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
    org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB => orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
    org.jatha.compile.LispCompiler.this.f_lisp.MACHINE => orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
    org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO => orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
    org.jatha.Lisp.APROPOS_TAB => orig(org.jatha.Lisp.APROPOS_TAB)
    org.jatha.compile.LispCompiler.this.f_lisp.prompt => orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
    org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt => orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName())
    org.jatha.compile.LispCompiler.this.f_lisp.packages => orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
    org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName())
    org.jatha.Lisp.MAX_LIST_LENGTH_VALUE => orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
    org.jatha.Lisp.PRINT_LENGTH_VALUE => orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
    org.jatha.Lisp.PRINT_LEVEL_VALUE => orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
    org.jatha.compile.LispCompiler.this.requires => orig(org.jatha.compile.LispCompiler.this.requires)
    org.jatha.compile.LispCompiler.this.requires.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
    org.jatha.compile.LispCompiler.this.defaultPackages => orig(org.jatha.compile.LispCompiler.this.defaultPackages)
    org.jatha.compile.LispCompiler.this.defaultPackages[..] => orig(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName() => orig(org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName())
    org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() => orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
    org.jatha.compile.LispCompiler.this.legalBlocks => orig(org.jatha.compile.LispCompiler.this.legalBlocks)
    org.jatha.compile.LispCompiler.$assertionsDisabled => orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..]) => orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])-1 => orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))-1
child.var_infos:
    this
    org.jatha.compile.LispCompiler.this
    org.jatha.compile.LispCompiler.DEBUG
    org.jatha.compile.LispCompiler.PROGN
    org.jatha.compile.LispCompiler.PROGN.getClass().getName()
    org.jatha.compile.LispCompiler.DEFUN
    org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
    org.jatha.compile.LispCompiler.BLOCK
    org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
    org.jatha.compile.LispCompiler.this.AND
    org.jatha.compile.LispCompiler.this.AND.getClass().getName()
    org.jatha.compile.LispCompiler.this.DEFMACRO
    org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
    org.jatha.compile.LispCompiler.this.IF
    org.jatha.compile.LispCompiler.this.IF.getClass().getName()
    org.jatha.compile.LispCompiler.this.LAMBDA
    org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
    org.jatha.compile.LispCompiler.this.LET
    org.jatha.compile.LispCompiler.this.LET.getClass().getName()
    org.jatha.compile.LispCompiler.this.SET
    org.jatha.compile.LispCompiler.this.SET.getClass().getName()
    org.jatha.compile.LispCompiler.this.LETREC
    org.jatha.compile.LispCompiler.this.LETREC.getClass().getName()
    org.jatha.compile.LispCompiler.this.OR
    org.jatha.compile.LispCompiler.this.OR.getClass().getName()
    org.jatha.compile.LispCompiler.AMP_REST
    org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION
    org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName()
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO
    org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName()
    org.jatha.compile.LispCompiler.this.CONS
    org.jatha.compile.LispCompiler.this.CONS.getClass().getName()
    org.jatha.compile.LispCompiler.this.CONS.functionName
    org.jatha.compile.LispCompiler.this.CONS.functionName.toString
    org.jatha.compile.LispCompiler.this.LIST
    org.jatha.compile.LispCompiler.this.LIST.getClass().getName()
    org.jatha.compile.LispCompiler.this.LIST.functionName
    org.jatha.compile.LispCompiler.this.LIST.functionName.toString
    org.jatha.compile.LispCompiler.this.SETQ
    org.jatha.compile.LispCompiler.this.SETQ.getClass().getName()
    org.jatha.compile.LispCompiler.this.SETQ.functionName
    org.jatha.compile.LispCompiler.this.SETQ.functionName.toString
    org.jatha.compile.LispCompiler.this.SpecialOperators
    org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName()
    org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP
    org.jatha.compile.LispCompiler.this.f_lisp
    org.jatha.Lisp.DEBUG
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL
    org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString
    org.jatha.compile.LispCompiler.this.f_lisp.useConsole
    org.jatha.compile.LispCompiler.this.f_lisp.PARSER
    org.jatha.compile.LispCompiler.this.f_lisp.COMPILER
    org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB
    org.jatha.compile.LispCompiler.this.f_lisp.MACHINE
    org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO
    org.jatha.Lisp.APROPOS_TAB
    org.jatha.compile.LispCompiler.this.f_lisp.prompt
    org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName()
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt
    org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName()
    org.jatha.compile.LispCompiler.this.f_lisp.packages
    org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName()
    org.jatha.Lisp.MAX_LIST_LENGTH_VALUE
    org.jatha.Lisp.PRINT_LENGTH_VALUE
    org.jatha.Lisp.PRINT_LEVEL_VALUE
    org.jatha.compile.LispCompiler.this.requires
    org.jatha.compile.LispCompiler.this.requires.getClass().getName()
    org.jatha.compile.LispCompiler.this.defaultPackages
    org.jatha.compile.LispCompiler.this.defaultPackages[..]
    org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName()
    org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName()
    org.jatha.compile.LispCompiler.this.legalBlocks
    org.jatha.compile.LispCompiler.$assertionsDisabled
    orig(org.jatha.compile.LispCompiler.this)
    orig(org.jatha.compile.LispCompiler.DEBUG)
    orig(org.jatha.compile.LispCompiler.PROGN)
    orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
    orig(org.jatha.compile.LispCompiler.DEFUN)
    orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
    orig(org.jatha.compile.LispCompiler.BLOCK)
    orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.AND)
    orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
    orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.IF)
    orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LAMBDA)
    orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LET)
    orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.SET)
    orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LETREC)
    orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.OR)
    orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
    orig(org.jatha.compile.LispCompiler.AMP_REST)
    orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
    orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
    orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.CONS)
    orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
    orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.LIST)
    orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
    orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.SETQ)
    orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
    orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
    orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
    orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
    orig(org.jatha.compile.LispCompiler.this.f_lisp)
    orig(org.jatha.Lisp.DEBUG)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
    orig(org.jatha.Lisp.APROPOS_TAB)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
    orig(org.jatha.compile.LispCompiler.this.f_lisp.packages.getClass().getName())
    orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
    orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
    orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
    orig(org.jatha.compile.LispCompiler.this.requires)
    orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.defaultPackages)
    orig(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    orig(org.jatha.compile.LispCompiler.this.defaultPackages[..].getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
    orig(org.jatha.compile.LispCompiler.this.legalBlocks)
    orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])
    size(org.jatha.compile.LispCompiler.this.defaultPackages[..])-1
    orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))
    orig(size(org.jatha.compile.LispCompiler.this.defaultPackages[..]))-1
End of diagnostics for newEnterExitRel(org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::ENTER, org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::EXIT)
===========================================================================
org.jatha.Lisp:::CLASS
org.jatha.Lisp.DEBUG == false
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
===========================================================================
org.jatha.Lisp:::OBJECT
this == this.PARSER.f_lisp
this == this.COMPILER.f_lisp
this.VERSION_NAME == this.PARSER.f_lisp.VERSION_NAME
this.VERSION_NAME == this.COMPILER.f_lisp.VERSION_NAME
this.VERSION_MAJOR == this.PARSER.f_lisp.VERSION_MAJOR
this.VERSION_MAJOR == this.COMPILER.f_lisp.VERSION_MAJOR
this.VERSION_MINOR == this.PARSER.f_lisp.VERSION_MINOR
this.VERSION_MINOR == this.COMPILER.f_lisp.VERSION_MINOR
this.VERSION_MICRO == this.PARSER.f_lisp.VERSION_MICRO
this.VERSION_MICRO == this.COMPILER.f_lisp.VERSION_MICRO
this.VERSION_TYPE == this.PARSER.f_lisp.VERSION_TYPE
this.VERSION_TYPE == this.COMPILER.f_lisp.VERSION_TYPE
this.VERSION_DATE == this.PARSER.f_lisp.VERSION_DATE
this.VERSION_DATE == this.COMPILER.f_lisp.VERSION_DATE
this.VERSION_URL == this.PARSER.f_lisp.VERSION_URL
this.VERSION_URL == this.COMPILER.f_lisp.VERSION_URL
this.useConsole == this.PARSER.f_lisp.useConsole
this.useConsole == this.COMPILER.f_lisp.useConsole
this.PARSER == this.PARSER.f_lisp.PARSER
this.PARSER == this.COMPILER.f_lisp.PARSER
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.PROGN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.AND.getClass().getName()
this.PARSER.f_lisp == this.COMPILER.f_lisp
this.PARSER.f_lisp.VERSION_NAME == this.COMPILER.f_lisp.VERSION_NAME
this.PARSER.f_lisp.VERSION_MAJOR == this.COMPILER.f_lisp.VERSION_MAJOR
this.PARSER.f_lisp.VERSION_MINOR == this.COMPILER.f_lisp.VERSION_MINOR
this.PARSER.f_lisp.VERSION_MICRO == this.COMPILER.f_lisp.VERSION_MICRO
this.PARSER.f_lisp.VERSION_TYPE == this.COMPILER.f_lisp.VERSION_TYPE
this.PARSER.f_lisp.VERSION_DATE == this.COMPILER.f_lisp.VERSION_DATE
this.PARSER.f_lisp.VERSION_URL == this.COMPILER.f_lisp.VERSION_URL
this.PARSER.f_lisp.useConsole == this.COMPILER.f_lisp.useConsole
this.PARSER.f_lisp.PARSER == this.COMPILER.f_lisp.PARSER
this.PARSER.f_lisp.COMPILER == this.COMPILER
this.PARSER.f_lisp.COMPILER == this.COMPILER.f_lisp.COMPILER
this.PARSER.f_lisp.SYMTAB == this.COMPILER.f_lisp.SYMTAB
this.PARSER.f_lisp.SYMTAB == this.SYMTAB
this.PARSER.f_lisp.MACHINE == this.COMPILER.f_lisp.MACHINE
this.PARSER.f_lisp.MACHINE == this.MACHINE
this.PARSER.f_lisp.SYSTEM_INFO == this.COMPILER.f_lisp.SYSTEM_INFO
this.PARSER.f_lisp.SYSTEM_INFO == this.SYSTEM_INFO
this.PARSER.f_lisp.prompt == this.COMPILER.f_lisp.prompt
this.PARSER.f_lisp.prompt == this.prompt
this.PARSER.f_lisp.prompt.getClass().getName() == this.prompt.getClass().getName()
this.COMPILER == this.COMPILER.f_lisp.COMPILER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.COMPILER.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.DEFMACRO.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.IF.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.LAMBDA.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.LET.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.SET.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.LETREC.getClass().getName()
this.COMPILER.AND.getClass().getName() == this.COMPILER.OR.getClass().getName()
this.COMPILER.f_lisp.SYMTAB == this.SYMTAB
this.COMPILER.f_lisp.MACHINE == this.MACHINE
this.COMPILER.f_lisp.SYSTEM_INFO == this.SYSTEM_INFO
this.COMPILER.f_lisp.prompt == this.prompt
this.COMPILER.f_lisp.prompt.getClass().getName() == this.prompt.getClass().getName()
this.MACHINE.S.f_value == this.MACHINE.E.f_value
this.MACHINE.S.f_value == this.MACHINE.C.f_value
this.MACHINE.S.f_value == this.MACHINE.D.f_value
this.MACHINE.S.f_value == this.MACHINE.X.f_value
this.MACHINE.S.f_value.getClass().getName() == this.MACHINE.E.f_value.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() == this.MACHINE.C.f_value.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() == this.MACHINE.D.f_value.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() == this.MACHINE.X.f_value.getClass().getName()
this has only one value
this.VERSION_NAME has only one value
this.VERSION_NAME != null
this.VERSION_NAME.toString == "Jatha"
this.VERSION_MAJOR == 3
this.VERSION_MINOR == 0
this.VERSION_MICRO == 1
this.VERSION_TYPE has only one value
this.VERSION_TYPE != null
this.VERSION_TYPE.toString == ""
this.VERSION_DATE has only one value
this.VERSION_DATE != null
this.VERSION_DATE.toString == "1 Feb 2014"
this.VERSION_URL has only one value
this.VERSION_URL != null
this.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.useConsole == true
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN != null
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN != null
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN != null
this.PARSER.BackQuoteLevel == 0
this.PARSER.inputReader has only one value
this.PARSER.inputReader != null
this.PARSER.f_caseSensitivity == 1
org.jatha.read.LispParser.f_myParser == null
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable != null
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
org.jatha.read.LispParser.REAL_PATTERN != null
this.PARSER.f_lisp has only one value
this.PARSER.f_lisp != null
this.PARSER.f_lisp.VERSION_NAME has only one value
this.PARSER.f_lisp.VERSION_NAME != null
this.PARSER.f_lisp.VERSION_NAME.toString == "Jatha"
this.PARSER.f_lisp.VERSION_MAJOR == 3
this.PARSER.f_lisp.VERSION_MINOR == 0
this.PARSER.f_lisp.VERSION_MICRO == 1
this.PARSER.f_lisp.VERSION_TYPE has only one value
this.PARSER.f_lisp.VERSION_TYPE != null
this.PARSER.f_lisp.VERSION_TYPE.toString == ""
this.PARSER.f_lisp.VERSION_DATE has only one value
this.PARSER.f_lisp.VERSION_DATE != null
this.PARSER.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
this.PARSER.f_lisp.VERSION_URL has only one value
this.PARSER.f_lisp.VERSION_URL != null
this.PARSER.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.PARSER.f_lisp.useConsole == true
this.PARSER.f_lisp.PARSER has only one value
this.PARSER.f_lisp.PARSER != null
this.PARSER.f_lisp.SYMTAB has only one value
this.PARSER.f_lisp.SYMTAB != null
this.PARSER.f_lisp.SYSTEM_INFO has only one value
this.PARSER.f_lisp.SYSTEM_INFO != null
org.jatha.Lisp.APROPOS_TAB == 30
this.PARSER.f_lisp.userPrompt == null
this.PARSER.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN != null
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN != null
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK != null
this.COMPILER.AND has only one value
this.COMPILER.AND != null
this.COMPILER.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.COMPILER.DEFMACRO has only one value
this.COMPILER.DEFMACRO != null
this.COMPILER.IF has only one value
this.COMPILER.IF != null
this.COMPILER.LAMBDA has only one value
this.COMPILER.LAMBDA != null
this.COMPILER.LET has only one value
this.COMPILER.LET != null
this.COMPILER.SET has only one value
this.COMPILER.SET != null
this.COMPILER.LETREC has only one value
this.COMPILER.LETREC != null
this.COMPILER.OR has only one value
this.COMPILER.OR != null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST != null
this.COMPILER.DUMMY_FUNCTION has only one value
this.COMPILER.DUMMY_FUNCTION != null
this.COMPILER.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
this.COMPILER.DUMMY_MACRO has only one value
this.COMPILER.DUMMY_MACRO != null
this.COMPILER.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
this.COMPILER.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
this.COMPILER.CONS.functionName has only one value
this.COMPILER.CONS.functionName != null
this.COMPILER.CONS.functionName.toString == "CONS"
this.COMPILER.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
this.COMPILER.LIST.functionName has only one value
this.COMPILER.LIST.functionName != null
this.COMPILER.LIST.functionName.toString == "LIST"
this.COMPILER.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
this.COMPILER.SETQ.functionName has only one value
this.COMPILER.SETQ.functionName != null
this.COMPILER.SETQ.functionName.toString == "SETQ"
this.COMPILER.SpecialOperators has only one value
this.COMPILER.SpecialOperators != null
this.COMPILER.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
this.COMPILER.WarnAboutSpecialsP == false
this.COMPILER.f_lisp has only one value
this.COMPILER.f_lisp != null
this.COMPILER.f_lisp.VERSION_NAME has only one value
this.COMPILER.f_lisp.VERSION_NAME != null
this.COMPILER.f_lisp.VERSION_NAME.toString == "Jatha"
this.COMPILER.f_lisp.VERSION_MAJOR == 3
this.COMPILER.f_lisp.VERSION_MINOR == 0
this.COMPILER.f_lisp.VERSION_MICRO == 1
this.COMPILER.f_lisp.VERSION_TYPE has only one value
this.COMPILER.f_lisp.VERSION_TYPE != null
this.COMPILER.f_lisp.VERSION_TYPE.toString == ""
this.COMPILER.f_lisp.VERSION_DATE has only one value
this.COMPILER.f_lisp.VERSION_DATE != null
this.COMPILER.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
this.COMPILER.f_lisp.VERSION_URL has only one value
this.COMPILER.f_lisp.VERSION_URL != null
this.COMPILER.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.COMPILER.f_lisp.useConsole == true
this.COMPILER.f_lisp.PARSER has only one value
this.COMPILER.f_lisp.PARSER != null
this.COMPILER.f_lisp.COMPILER has only one value
this.COMPILER.f_lisp.COMPILER != null
this.COMPILER.f_lisp.SYMTAB has only one value
this.COMPILER.f_lisp.SYMTAB != null
this.COMPILER.f_lisp.MACHINE has only one value
this.COMPILER.f_lisp.MACHINE != null
this.COMPILER.f_lisp.SYSTEM_INFO has only one value
this.COMPILER.f_lisp.SYSTEM_INFO != null
this.COMPILER.f_lisp.userPrompt == null
this.COMPILER.f_lisp.packages == null
this.COMPILER.requires has only one value
this.COMPILER.requires != null
this.COMPILER.requires.getClass().getName() == java.util.HashSet.class
this.COMPILER.defaultPackages has only one value
this.COMPILER.defaultPackages != null
this.COMPILER.defaultPackages[] contains no nulls and has only one value, of length 3
this.COMPILER.defaultPackages[] elements != null
this.COMPILER.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.COMPILER.defaultPackages[].getClass().getName() elements == java.lang.String.class
this.COMPILER.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
this.COMPILER.legalBlocks has only one value
this.COMPILER.legalBlocks != null
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.SYMTAB has only one value
this.SYMTAB != null
org.jatha.util.SymbolTable.$assertionsDisabled == false
org.jatha.machine.SECDMachine.DEBUG == false
this.MACHINE.S has only one value
this.MACHINE.S != null
org.jatha.machine.SECDRegister.count == 1005
this.MACHINE.S.f_name has only one value
this.MACHINE.S.f_name != null
this.MACHINE.S.f_name.toString == "*REGISTER-1001*"
this.MACHINE.S.f_value has only one value
this.MACHINE.S.f_value != null
this.MACHINE.S.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.MACHINE.E has only one value
this.MACHINE.E != null
this.MACHINE.E.f_name has only one value
this.MACHINE.E.f_name != null
this.MACHINE.E.f_name.toString == "*REGISTER-1002*"
this.MACHINE.C has only one value
this.MACHINE.C != null
this.MACHINE.C.f_name has only one value
this.MACHINE.C.f_name != null
this.MACHINE.C.f_name.toString == "*REGISTER-1003*"
this.MACHINE.D has only one value
this.MACHINE.D != null
this.MACHINE.D.f_name has only one value
this.MACHINE.D.f_name != null
this.MACHINE.D.f_name.toString == "*REGISTER-1004*"
this.MACHINE.X has only one value
this.MACHINE.X != null
this.MACHINE.X.f_name has only one value
this.MACHINE.X.f_name != null
this.MACHINE.X.f_name.toString == "*REGISTER-1005*"
this.MACHINE.B has only one value
this.MACHINE.B != null
org.jatha.machine.SECDMachine.BLK has only one value
org.jatha.machine.SECDMachine.BLK != null
org.jatha.machine.SECDMachine.BLK.getClass().getName() == org.jatha.machine.SECDMachine$1.class
org.jatha.machine.SECDMachine.BLK.functionName has only one value
org.jatha.machine.SECDMachine.BLK.functionName != null
org.jatha.machine.SECDMachine.BLK.functionName.toString == "BLK"
org.jatha.machine.SECDMachine.LDNIL has only one value
org.jatha.machine.SECDMachine.LDNIL != null
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == org.jatha.machine.SECDMachine$2.class
org.jatha.machine.SECDMachine.LDNIL.functionName has only one value
org.jatha.machine.SECDMachine.LDNIL.functionName != null
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == "LDNIL"
org.jatha.machine.SECDMachine.LDT has only one value
org.jatha.machine.SECDMachine.LDT != null
org.jatha.machine.SECDMachine.LDT.getClass().getName() == org.jatha.machine.SECDMachine$3.class
org.jatha.machine.SECDMachine.LDT.functionName has only one value
org.jatha.machine.SECDMachine.LDT.functionName != null
org.jatha.machine.SECDMachine.LDT.functionName.toString == "LDT"
org.jatha.machine.SECDMachine.LDC has only one value
org.jatha.machine.SECDMachine.LDC != null
org.jatha.machine.SECDMachine.LDC.getClass().getName() == org.jatha.machine.SECDMachine$4.class
org.jatha.machine.SECDMachine.LDC.functionName has only one value
org.jatha.machine.SECDMachine.LDC.functionName != null
org.jatha.machine.SECDMachine.LDC.functionName.toString == "LDC"
org.jatha.machine.SECDMachine.ST has only one value
org.jatha.machine.SECDMachine.ST != null
org.jatha.machine.SECDMachine.ST.getClass().getName() == org.jatha.machine.SECDMachine$5.class
org.jatha.machine.SECDMachine.ST.functionName has only one value
org.jatha.machine.SECDMachine.ST.functionName != null
org.jatha.machine.SECDMachine.ST.functionName.toString == "ST"
org.jatha.machine.SECDMachine.LDR has only one value
org.jatha.machine.SECDMachine.LDR != null
org.jatha.machine.SECDMachine.LDR.getClass().getName() == org.jatha.machine.SECDMachine$6.class
org.jatha.machine.SECDMachine.LDR.functionName has only one value
org.jatha.machine.SECDMachine.LDR.functionName != null
org.jatha.machine.SECDMachine.LDR.functionName.toString == "LDR"
org.jatha.machine.SECDMachine.LD has only one value
org.jatha.machine.SECDMachine.LD != null
org.jatha.machine.SECDMachine.LD.getClass().getName() == org.jatha.machine.SECDMachine$7.class
org.jatha.machine.SECDMachine.LD.functionName has only one value
org.jatha.machine.SECDMachine.LD.functionName != null
org.jatha.machine.SECDMachine.LD.functionName.toString == "LD"
org.jatha.machine.SECDMachine.LD_GLOBAL has only one value
org.jatha.machine.SECDMachine.LD_GLOBAL != null
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == org.jatha.machine.SECDMachine$8.class
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName has only one value
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName != null
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == "LD_GLOBAL"
org.jatha.machine.SECDMachine.LDF has only one value
org.jatha.machine.SECDMachine.LDF != null
org.jatha.machine.SECDMachine.LDF.getClass().getName() == org.jatha.machine.SECDMachine$9.class
org.jatha.machine.SECDMachine.LDF.functionName has only one value
org.jatha.machine.SECDMachine.LDF.functionName != null
org.jatha.machine.SECDMachine.LDF.functionName.toString == "LDF"
org.jatha.machine.SECDMachine.LDFC has only one value
org.jatha.machine.SECDMachine.LDFC != null
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == org.jatha.machine.SECDMachine$10.class
org.jatha.machine.SECDMachine.LDFC.functionName has only one value
org.jatha.machine.SECDMachine.LDFC.functionName != null
org.jatha.machine.SECDMachine.LDFC.functionName.toString == "LDFC"
org.jatha.machine.SECDMachine.SEL has only one value
org.jatha.machine.SECDMachine.SEL != null
org.jatha.machine.SECDMachine.SEL.getClass().getName() == org.jatha.machine.SECDMachine$11.class
org.jatha.machine.SECDMachine.SEL.functionName has only one value
org.jatha.machine.SECDMachine.SEL.functionName != null
org.jatha.machine.SECDMachine.SEL.functionName.toString == "SEL"
org.jatha.machine.SECDMachine.TEST has only one value
org.jatha.machine.SECDMachine.TEST != null
org.jatha.machine.SECDMachine.TEST.getClass().getName() == org.jatha.machine.SECDMachine$12.class
org.jatha.machine.SECDMachine.TEST.functionName has only one value
org.jatha.machine.SECDMachine.TEST.functionName != null
org.jatha.machine.SECDMachine.TEST.functionName.toString == "TEST"
org.jatha.machine.SECDMachine.JOIN has only one value
org.jatha.machine.SECDMachine.JOIN != null
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == org.jatha.machine.SECDMachine$13.class
org.jatha.machine.SECDMachine.JOIN.functionName has only one value
org.jatha.machine.SECDMachine.JOIN.functionName != null
org.jatha.machine.SECDMachine.JOIN.functionName.toString == "JOIN"
org.jatha.machine.SECDMachine.AP has only one value
org.jatha.machine.SECDMachine.AP != null
org.jatha.machine.SECDMachine.AP.getClass().getName() == org.jatha.machine.SECDMachine$14.class
org.jatha.machine.SECDMachine.AP.functionName has only one value
org.jatha.machine.SECDMachine.AP.functionName != null
org.jatha.machine.SECDMachine.AP.functionName.toString == "AP"
org.jatha.machine.SECDMachine.RAP has only one value
org.jatha.machine.SECDMachine.RAP != null
org.jatha.machine.SECDMachine.RAP.getClass().getName() == org.jatha.machine.SECDMachine$15.class
org.jatha.machine.SECDMachine.RAP.functionName has only one value
org.jatha.machine.SECDMachine.RAP.functionName != null
org.jatha.machine.SECDMachine.RAP.functionName.toString == "RAP"
org.jatha.machine.SECDMachine.RTN has only one value
org.jatha.machine.SECDMachine.RTN != null
org.jatha.machine.SECDMachine.RTN.getClass().getName() == org.jatha.machine.SECDMachine$16.class
org.jatha.machine.SECDMachine.RTN.functionName has only one value
org.jatha.machine.SECDMachine.RTN.functionName != null
org.jatha.machine.SECDMachine.RTN.functionName.toString == "RTN"
org.jatha.machine.SECDMachine.RTN_IF has only one value
org.jatha.machine.SECDMachine.RTN_IF != null
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == org.jatha.machine.SECDMachine$17.class
org.jatha.machine.SECDMachine.RTN_IF.functionName has only one value
org.jatha.machine.SECDMachine.RTN_IF.functionName != null
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == "RTN_IF"
org.jatha.machine.SECDMachine.RTN_IT has only one value
org.jatha.machine.SECDMachine.RTN_IT != null
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == org.jatha.machine.SECDMachine$18.class
org.jatha.machine.SECDMachine.RTN_IT.functionName has only one value
org.jatha.machine.SECDMachine.RTN_IT.functionName != null
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == "RTN_IT"
org.jatha.machine.SECDMachine.DAP has only one value
org.jatha.machine.SECDMachine.DAP != null
org.jatha.machine.SECDMachine.DAP.getClass().getName() == org.jatha.machine.SECDMachine$19.class
org.jatha.machine.SECDMachine.DAP.functionName has only one value
org.jatha.machine.SECDMachine.DAP.functionName != null
org.jatha.machine.SECDMachine.DAP.functionName.toString == "DAP"
org.jatha.machine.SECDMachine.DUM has only one value
org.jatha.machine.SECDMachine.DUM != null
org.jatha.machine.SECDMachine.DUM.getClass().getName() == org.jatha.machine.SECDMachine$20.class
org.jatha.machine.SECDMachine.DUM.functionName has only one value
org.jatha.machine.SECDMachine.DUM.functionName != null
org.jatha.machine.SECDMachine.DUM.functionName.toString == "DUM"
org.jatha.machine.SECDMachine.LIS has only one value
org.jatha.machine.SECDMachine.LIS != null
org.jatha.machine.SECDMachine.LIS.getClass().getName() == org.jatha.machine.SECDMachine$21.class
org.jatha.machine.SECDMachine.LIS.functionName has only one value
org.jatha.machine.SECDMachine.LIS.functionName != null
org.jatha.machine.SECDMachine.LIS.functionName.toString == "LIS"
org.jatha.machine.SECDMachine.SP_BIND has only one value
org.jatha.machine.SECDMachine.SP_BIND != null
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == org.jatha.machine.SECDMachine$22.class
org.jatha.machine.SECDMachine.SP_BIND.functionName has only one value
org.jatha.machine.SECDMachine.SP_BIND.functionName != null
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == "SP_BIND"
org.jatha.machine.SECDMachine.SP_UNBIND has only one value
org.jatha.machine.SECDMachine.SP_UNBIND != null
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == org.jatha.machine.SECDMachine$23.class
org.jatha.machine.SECDMachine.SP_UNBIND.functionName has only one value
org.jatha.machine.SECDMachine.SP_UNBIND.functionName != null
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == "SP_UNBIND"
org.jatha.machine.SECDMachine.STOP has only one value
org.jatha.machine.SECDMachine.STOP != null
org.jatha.machine.SECDMachine.STOP.getClass().getName() == org.jatha.machine.SECDMachine$24.class
org.jatha.machine.SECDMachine.STOP.functionName has only one value
org.jatha.machine.SECDMachine.STOP.functionName != null
org.jatha.machine.SECDMachine.STOP.functionName.toString == "STOP"
this.SYSTEM_INFO has only one value
this.SYSTEM_INFO != null
this.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.userPrompt == null
this.packages == null
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
size(this.COMPILER.defaultPackages[]) == 3
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.DUMMY_FUNCTION.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.DUMMY_MACRO.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.CONS.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.LIST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.requires.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() != this.prompt.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.DUMMY_FUNCTION.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.DUMMY_MACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.CONS.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.LIST.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.requires.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.DUMMY_FUNCTION.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.DUMMY_MACRO.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.CONS.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.LIST.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.AND.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.AND.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.DUMMY_MACRO.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.CONS.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.LIST.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.CONS.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.LIST.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.COMPILER.LIST.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.CONS.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.CONS.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.COMPILER.SETQ.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.LIST.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.LIST.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != this.COMPILER.SpecialOperators.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != this.COMPILER.requires.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.requires.getClass().getName() != this.COMPILER.defaultPackages.getClass().getName()
this.COMPILER.requires.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.requires.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.requires.getClass().getName() != this.prompt.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != this.MACHINE.S.f_value.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != this.prompt.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.BLK.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDNIL.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LDT.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LDC.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.ST.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LDR.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.LD.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.LDF.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.LDFC.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.SEL.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.TEST.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.JOIN.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.AP.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.RAP.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.RTN.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IF.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.RTN_IT.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.DAP.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != org.jatha.machine.SECDMachine.DUM.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != org.jatha.machine.SECDMachine.LIS.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != org.jatha.machine.SECDMachine.SP_BIND.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() != org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName()
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() != org.jatha.machine.SECDMachine.STOP.getClass().getName()
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() != this.prompt.getClass().getName()
org.jatha.machine.SECDMachine.STOP.getClass().getName() != this.prompt.getClass().getName()
===========================================================================
org.jatha.Lisp.initializeConstants():::ENTER
this.PARSER == null
this.COMPILER == null
this.MACHINE == null
this.prompt == null
===========================================================================
org.jatha.Lisp.initializeConstants():::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.VERSION_NAME == orig(this.VERSION_NAME)
this.VERSION_NAME.toString == orig(this.VERSION_NAME.toString)
this.VERSION_MAJOR == orig(this.VERSION_MAJOR)
this.VERSION_MINOR == orig(this.VERSION_MINOR)
this.VERSION_MICRO == orig(this.VERSION_MICRO)
this.VERSION_TYPE == orig(this.VERSION_TYPE)
this.VERSION_TYPE.toString == orig(this.VERSION_TYPE.toString)
this.VERSION_DATE == orig(this.VERSION_DATE)
this.VERSION_DATE.toString == orig(this.VERSION_DATE.toString)
this.VERSION_URL == orig(this.VERSION_URL)
this.VERSION_URL.toString == orig(this.VERSION_URL.toString)
this.useConsole == orig(this.useConsole)
this.PARSER == orig(this.PARSER)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.userPrompt == orig(this.userPrompt)
this.packages == orig(this.packages)
this.PARSER == null
this.COMPILER == null
this.MACHINE == null
this.prompt == null
===========================================================================
org.jatha.Lisp.intern(java.lang.String):::ENTER
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this.PARSER has only one value
this.PARSER != null
this.COMPILER.f_lisp.prompt has only one value
arg0 != null
===========================================================================
org.jatha.Lisp.intern(java.lang.String):::EXIT1200
===========================================================================
org.jatha.Lisp.intern(java.lang.String):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.VERSION_NAME == orig(this.VERSION_NAME)
this.VERSION_NAME == orig(this.PARSER.f_lisp.VERSION_NAME)
this.VERSION_NAME.toString == orig(this.VERSION_NAME.toString)
this.VERSION_MAJOR == orig(this.VERSION_MAJOR)
this.VERSION_MAJOR == orig(this.PARSER.f_lisp.VERSION_MAJOR)
this.VERSION_MINOR == orig(this.VERSION_MINOR)
this.VERSION_MINOR == orig(this.PARSER.f_lisp.VERSION_MINOR)
this.VERSION_MICRO == orig(this.VERSION_MICRO)
this.VERSION_MICRO == orig(this.PARSER.f_lisp.VERSION_MICRO)
this.VERSION_TYPE == orig(this.VERSION_TYPE)
this.VERSION_TYPE == orig(this.PARSER.f_lisp.VERSION_TYPE)
this.VERSION_TYPE.toString == orig(this.VERSION_TYPE.toString)
this.VERSION_DATE == orig(this.VERSION_DATE)
this.VERSION_DATE == orig(this.PARSER.f_lisp.VERSION_DATE)
this.VERSION_DATE.toString == orig(this.VERSION_DATE.toString)
this.VERSION_URL == orig(this.VERSION_URL)
this.VERSION_URL == orig(this.PARSER.f_lisp.VERSION_URL)
this.VERSION_URL.toString == orig(this.VERSION_URL.toString)
this.useConsole == orig(this.useConsole)
this.useConsole == orig(this.PARSER.f_lisp.useConsole)
this.PARSER == orig(this.PARSER)
this.PARSER == orig(this.PARSER.f_lisp.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == return.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
this.PARSER.BackQuoteLevel == orig(this.PARSER.BackQuoteLevel)
this.PARSER.inputReader == orig(this.PARSER.inputReader)
this.PARSER.f_caseSensitivity == orig(this.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.PARSER.f_lisp == orig(this)
this.PARSER.f_lisp == orig(this.PARSER.f_lisp)
this.PARSER.f_lisp.VERSION_NAME.toString == orig(this.PARSER.f_lisp.VERSION_NAME.toString)
this.PARSER.f_lisp.VERSION_TYPE.toString == orig(this.PARSER.f_lisp.VERSION_TYPE.toString)
this.PARSER.f_lisp.VERSION_DATE.toString == orig(this.PARSER.f_lisp.VERSION_DATE.toString)
this.PARSER.f_lisp.VERSION_URL.toString == orig(this.PARSER.f_lisp.VERSION_URL.toString)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.PARSER.f_lisp.userPrompt == orig(this.PARSER.f_lisp.userPrompt)
this.PARSER.f_lisp.packages == orig(this.PARSER.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.COMPILER == orig(this.PARSER.f_lisp.COMPILER)
this.COMPILER == orig(this.COMPILER)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
this.COMPILER.AND == orig(this.COMPILER.AND)
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.AND.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.DEFMACRO.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.IF.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LAMBDA.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.SET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LETREC.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.OR.getClass().getName())
this.COMPILER.DEFMACRO == orig(this.COMPILER.DEFMACRO)
this.COMPILER.IF == orig(this.COMPILER.IF)
this.COMPILER.LAMBDA == orig(this.COMPILER.LAMBDA)
this.COMPILER.LET == orig(this.COMPILER.LET)
this.COMPILER.SET == orig(this.COMPILER.SET)
this.COMPILER.LETREC == orig(this.COMPILER.LETREC)
this.COMPILER.OR == orig(this.COMPILER.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
this.COMPILER.DUMMY_FUNCTION == orig(this.COMPILER.DUMMY_FUNCTION)
this.COMPILER.DUMMY_FUNCTION.getClass().getName() == orig(this.COMPILER.DUMMY_FUNCTION.getClass().getName())
this.COMPILER.DUMMY_MACRO == orig(this.COMPILER.DUMMY_MACRO)
this.COMPILER.DUMMY_MACRO.getClass().getName() == orig(this.COMPILER.DUMMY_MACRO.getClass().getName())
this.COMPILER.CONS == orig(this.COMPILER.CONS)
this.COMPILER.CONS.getClass().getName() == orig(this.COMPILER.CONS.getClass().getName())
this.COMPILER.CONS.functionName == orig(this.COMPILER.CONS.functionName)
this.COMPILER.CONS.functionName.toString == orig(this.COMPILER.CONS.functionName.toString)
this.COMPILER.LIST == orig(this.COMPILER.LIST)
this.COMPILER.LIST.getClass().getName() == orig(this.COMPILER.LIST.getClass().getName())
this.COMPILER.LIST.functionName == orig(this.COMPILER.LIST.functionName)
this.COMPILER.LIST.functionName.toString == orig(this.COMPILER.LIST.functionName.toString)
this.COMPILER.SETQ == orig(this.COMPILER.SETQ)
this.COMPILER.SETQ.getClass().getName() == orig(this.COMPILER.SETQ.getClass().getName())
this.COMPILER.SETQ.functionName == orig(this.COMPILER.SETQ.functionName)
this.COMPILER.SETQ.functionName.toString == orig(this.COMPILER.SETQ.functionName.toString)
this.COMPILER.SpecialOperators == orig(this.COMPILER.SpecialOperators)
this.COMPILER.SpecialOperators.getClass().getName() == orig(this.COMPILER.SpecialOperators.getClass().getName())
this.COMPILER.WarnAboutSpecialsP == orig(this.COMPILER.WarnAboutSpecialsP)
this.COMPILER.f_lisp == orig(this)
this.COMPILER.f_lisp == orig(this.COMPILER.f_lisp)
this.COMPILER.f_lisp.VERSION_NAME == orig(this.COMPILER.f_lisp.VERSION_NAME)
this.COMPILER.f_lisp.VERSION_NAME.toString == orig(this.COMPILER.f_lisp.VERSION_NAME.toString)
this.COMPILER.f_lisp.VERSION_MAJOR == orig(this.COMPILER.f_lisp.VERSION_MAJOR)
this.COMPILER.f_lisp.VERSION_MINOR == orig(this.COMPILER.f_lisp.VERSION_MINOR)
this.COMPILER.f_lisp.VERSION_MICRO == orig(this.COMPILER.f_lisp.VERSION_MICRO)
this.COMPILER.f_lisp.VERSION_TYPE == orig(this.COMPILER.f_lisp.VERSION_TYPE)
this.COMPILER.f_lisp.VERSION_TYPE.toString == orig(this.COMPILER.f_lisp.VERSION_TYPE.toString)
this.COMPILER.f_lisp.VERSION_DATE == orig(this.COMPILER.f_lisp.VERSION_DATE)
this.COMPILER.f_lisp.VERSION_DATE.toString == orig(this.COMPILER.f_lisp.VERSION_DATE.toString)
this.COMPILER.f_lisp.VERSION_URL == orig(this.COMPILER.f_lisp.VERSION_URL)
this.COMPILER.f_lisp.VERSION_URL.toString == orig(this.COMPILER.f_lisp.VERSION_URL.toString)
this.COMPILER.f_lisp.useConsole == orig(this.COMPILER.f_lisp.useConsole)
this.COMPILER.f_lisp.PARSER == orig(this.COMPILER.f_lisp.PARSER)
this.COMPILER.f_lisp.COMPILER == orig(this.COMPILER.f_lisp.COMPILER)
this.COMPILER.f_lisp.SYMTAB == orig(this.COMPILER.f_lisp.SYMTAB)
this.COMPILER.f_lisp.MACHINE == orig(this.COMPILER.f_lisp.MACHINE)
this.COMPILER.f_lisp.SYSTEM_INFO == orig(this.COMPILER.f_lisp.SYSTEM_INFO)
this.COMPILER.f_lisp.prompt == orig(this.COMPILER.f_lisp.prompt)
this.COMPILER.f_lisp.userPrompt == orig(this.COMPILER.f_lisp.userPrompt)
this.COMPILER.f_lisp.packages == orig(this.COMPILER.f_lisp.packages)
this.COMPILER.requires == orig(this.COMPILER.requires)
this.COMPILER.requires.getClass().getName() == orig(this.COMPILER.requires.getClass().getName())
this.COMPILER.defaultPackages == orig(this.COMPILER.defaultPackages)
this.COMPILER.defaultPackages[] == orig(this.COMPILER.defaultPackages[])
this.COMPILER.defaultPackages.getClass().getName() == orig(this.COMPILER.defaultPackages.getClass().getName())
this.COMPILER.legalBlocks == orig(this.COMPILER.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.SYMTAB == orig(this.PARSER.f_lisp.SYMTAB)
this.SYMTAB == orig(this.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.MACHINE == orig(this.PARSER.f_lisp.MACHINE)
this.MACHINE == orig(this.MACHINE)
org.jatha.machine.SECDMachine.DEBUG == orig(org.jatha.machine.SECDMachine.DEBUG)
this.MACHINE.S == orig(this.MACHINE.S)
org.jatha.machine.SECDRegister.count == orig(org.jatha.machine.SECDRegister.count)
this.MACHINE.S.f_name == orig(this.MACHINE.S.f_name)
this.MACHINE.S.f_name.toString == orig(this.MACHINE.S.f_name.toString)
this.MACHINE.S.f_value == orig(this.MACHINE.S.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.E.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.C.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.D.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.X.f_value)
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.S.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.E.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.C.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.D.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.X.f_value.getClass().getName())
this.MACHINE.E == orig(this.MACHINE.E)
this.MACHINE.E.f_name == orig(this.MACHINE.E.f_name)
this.MACHINE.E.f_name.toString == orig(this.MACHINE.E.f_name.toString)
this.MACHINE.C == orig(this.MACHINE.C)
this.MACHINE.C.f_name == orig(this.MACHINE.C.f_name)
this.MACHINE.C.f_name.toString == orig(this.MACHINE.C.f_name.toString)
this.MACHINE.D == orig(this.MACHINE.D)
this.MACHINE.D.f_name == orig(this.MACHINE.D.f_name)
this.MACHINE.D.f_name.toString == orig(this.MACHINE.D.f_name.toString)
this.MACHINE.X == orig(this.MACHINE.X)
this.MACHINE.X.f_name == orig(this.MACHINE.X.f_name)
this.MACHINE.X.f_name.toString == orig(this.MACHINE.X.f_name.toString)
this.MACHINE.B == orig(this.MACHINE.B)
org.jatha.machine.SECDMachine.BLK == orig(org.jatha.machine.SECDMachine.BLK)
org.jatha.machine.SECDMachine.BLK.getClass().getName() == orig(org.jatha.machine.SECDMachine.BLK.getClass().getName())
org.jatha.machine.SECDMachine.BLK.functionName == orig(org.jatha.machine.SECDMachine.BLK.functionName)
org.jatha.machine.SECDMachine.BLK.functionName.toString == orig(org.jatha.machine.SECDMachine.BLK.functionName.toString)
org.jatha.machine.SECDMachine.LDNIL == orig(org.jatha.machine.SECDMachine.LDNIL)
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDNIL.getClass().getName())
org.jatha.machine.SECDMachine.LDNIL.functionName == orig(org.jatha.machine.SECDMachine.LDNIL.functionName)
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == orig(org.jatha.machine.SECDMachine.LDNIL.functionName.toString)
org.jatha.machine.SECDMachine.LDT == orig(org.jatha.machine.SECDMachine.LDT)
org.jatha.machine.SECDMachine.LDT.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDT.getClass().getName())
org.jatha.machine.SECDMachine.LDT.functionName == orig(org.jatha.machine.SECDMachine.LDT.functionName)
org.jatha.machine.SECDMachine.LDT.functionName.toString == orig(org.jatha.machine.SECDMachine.LDT.functionName.toString)
org.jatha.machine.SECDMachine.LDC == orig(org.jatha.machine.SECDMachine.LDC)
org.jatha.machine.SECDMachine.LDC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDC.getClass().getName())
org.jatha.machine.SECDMachine.LDC.functionName == orig(org.jatha.machine.SECDMachine.LDC.functionName)
org.jatha.machine.SECDMachine.LDC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDC.functionName.toString)
org.jatha.machine.SECDMachine.ST == orig(org.jatha.machine.SECDMachine.ST)
org.jatha.machine.SECDMachine.ST.getClass().getName() == orig(org.jatha.machine.SECDMachine.ST.getClass().getName())
org.jatha.machine.SECDMachine.ST.functionName == orig(org.jatha.machine.SECDMachine.ST.functionName)
org.jatha.machine.SECDMachine.ST.functionName.toString == orig(org.jatha.machine.SECDMachine.ST.functionName.toString)
org.jatha.machine.SECDMachine.LDR == orig(org.jatha.machine.SECDMachine.LDR)
org.jatha.machine.SECDMachine.LDR.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDR.getClass().getName())
org.jatha.machine.SECDMachine.LDR.functionName == orig(org.jatha.machine.SECDMachine.LDR.functionName)
org.jatha.machine.SECDMachine.LDR.functionName.toString == orig(org.jatha.machine.SECDMachine.LDR.functionName.toString)
org.jatha.machine.SECDMachine.LD == orig(org.jatha.machine.SECDMachine.LD)
org.jatha.machine.SECDMachine.LD.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD.getClass().getName())
org.jatha.machine.SECDMachine.LD.functionName == orig(org.jatha.machine.SECDMachine.LD.functionName)
org.jatha.machine.SECDMachine.LD.functionName.toString == orig(org.jatha.machine.SECDMachine.LD.functionName.toString)
org.jatha.machine.SECDMachine.LD_GLOBAL == orig(org.jatha.machine.SECDMachine.LD_GLOBAL)
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName())
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName)
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString)
org.jatha.machine.SECDMachine.LDF == orig(org.jatha.machine.SECDMachine.LDF)
org.jatha.machine.SECDMachine.LDF.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDF.getClass().getName())
org.jatha.machine.SECDMachine.LDF.functionName == orig(org.jatha.machine.SECDMachine.LDF.functionName)
org.jatha.machine.SECDMachine.LDF.functionName.toString == orig(org.jatha.machine.SECDMachine.LDF.functionName.toString)
org.jatha.machine.SECDMachine.LDFC == orig(org.jatha.machine.SECDMachine.LDFC)
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDFC.getClass().getName())
org.jatha.machine.SECDMachine.LDFC.functionName == orig(org.jatha.machine.SECDMachine.LDFC.functionName)
org.jatha.machine.SECDMachine.LDFC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDFC.functionName.toString)
org.jatha.machine.SECDMachine.SEL == orig(org.jatha.machine.SECDMachine.SEL)
org.jatha.machine.SECDMachine.SEL.getClass().getName() == orig(org.jatha.machine.SECDMachine.SEL.getClass().getName())
org.jatha.machine.SECDMachine.SEL.functionName == orig(org.jatha.machine.SECDMachine.SEL.functionName)
org.jatha.machine.SECDMachine.SEL.functionName.toString == orig(org.jatha.machine.SECDMachine.SEL.functionName.toString)
org.jatha.machine.SECDMachine.TEST == orig(org.jatha.machine.SECDMachine.TEST)
org.jatha.machine.SECDMachine.TEST.getClass().getName() == orig(org.jatha.machine.SECDMachine.TEST.getClass().getName())
org.jatha.machine.SECDMachine.TEST.functionName == orig(org.jatha.machine.SECDMachine.TEST.functionName)
org.jatha.machine.SECDMachine.TEST.functionName.toString == orig(org.jatha.machine.SECDMachine.TEST.functionName.toString)
org.jatha.machine.SECDMachine.JOIN == orig(org.jatha.machine.SECDMachine.JOIN)
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == orig(org.jatha.machine.SECDMachine.JOIN.getClass().getName())
org.jatha.machine.SECDMachine.JOIN.functionName == orig(org.jatha.machine.SECDMachine.JOIN.functionName)
org.jatha.machine.SECDMachine.JOIN.functionName.toString == orig(org.jatha.machine.SECDMachine.JOIN.functionName.toString)
org.jatha.machine.SECDMachine.AP == orig(org.jatha.machine.SECDMachine.AP)
org.jatha.machine.SECDMachine.AP.getClass().getName() == orig(org.jatha.machine.SECDMachine.AP.getClass().getName())
org.jatha.machine.SECDMachine.AP.functionName == orig(org.jatha.machine.SECDMachine.AP.functionName)
org.jatha.machine.SECDMachine.AP.functionName.toString == orig(org.jatha.machine.SECDMachine.AP.functionName.toString)
org.jatha.machine.SECDMachine.RAP == orig(org.jatha.machine.SECDMachine.RAP)
org.jatha.machine.SECDMachine.RAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.RAP.getClass().getName())
org.jatha.machine.SECDMachine.RAP.functionName == orig(org.jatha.machine.SECDMachine.RAP.functionName)
org.jatha.machine.SECDMachine.RAP.functionName.toString == orig(org.jatha.machine.SECDMachine.RAP.functionName.toString)
org.jatha.machine.SECDMachine.RTN == orig(org.jatha.machine.SECDMachine.RTN)
org.jatha.machine.SECDMachine.RTN.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN.getClass().getName())
org.jatha.machine.SECDMachine.RTN.functionName == orig(org.jatha.machine.SECDMachine.RTN.functionName)
org.jatha.machine.SECDMachine.RTN.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IF == orig(org.jatha.machine.SECDMachine.RTN_IF)
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IF.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IF.functionName == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName)
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IT == orig(org.jatha.machine.SECDMachine.RTN_IT)
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IT.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IT.functionName == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName)
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName.toString)
org.jatha.machine.SECDMachine.DAP == orig(org.jatha.machine.SECDMachine.DAP)
org.jatha.machine.SECDMachine.DAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.DAP.getClass().getName())
org.jatha.machine.SECDMachine.DAP.functionName == orig(org.jatha.machine.SECDMachine.DAP.functionName)
org.jatha.machine.SECDMachine.DAP.functionName.toString == orig(org.jatha.machine.SECDMachine.DAP.functionName.toString)
org.jatha.machine.SECDMachine.DUM == orig(org.jatha.machine.SECDMachine.DUM)
org.jatha.machine.SECDMachine.DUM.getClass().getName() == orig(org.jatha.machine.SECDMachine.DUM.getClass().getName())
org.jatha.machine.SECDMachine.DUM.functionName == orig(org.jatha.machine.SECDMachine.DUM.functionName)
org.jatha.machine.SECDMachine.DUM.functionName.toString == orig(org.jatha.machine.SECDMachine.DUM.functionName.toString)
org.jatha.machine.SECDMachine.LIS == orig(org.jatha.machine.SECDMachine.LIS)
org.jatha.machine.SECDMachine.LIS.getClass().getName() == orig(org.jatha.machine.SECDMachine.LIS.getClass().getName())
org.jatha.machine.SECDMachine.LIS.functionName == orig(org.jatha.machine.SECDMachine.LIS.functionName)
org.jatha.machine.SECDMachine.LIS.functionName.toString == orig(org.jatha.machine.SECDMachine.LIS.functionName.toString)
org.jatha.machine.SECDMachine.SP_BIND == orig(org.jatha.machine.SECDMachine.SP_BIND)
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_BIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_BIND.functionName == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName)
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName.toString)
org.jatha.machine.SECDMachine.SP_UNBIND == orig(org.jatha.machine.SECDMachine.SP_UNBIND)
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_UNBIND.functionName == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName)
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString)
org.jatha.machine.SECDMachine.STOP == orig(org.jatha.machine.SECDMachine.STOP)
org.jatha.machine.SECDMachine.STOP.getClass().getName() == orig(org.jatha.machine.SECDMachine.STOP.getClass().getName())
org.jatha.machine.SECDMachine.STOP.functionName == orig(org.jatha.machine.SECDMachine.STOP.functionName)
org.jatha.machine.SECDMachine.STOP.functionName.toString == orig(org.jatha.machine.SECDMachine.STOP.functionName.toString)
this.SYSTEM_INFO == orig(this.PARSER.f_lisp.SYSTEM_INFO)
this.SYSTEM_INFO == orig(this.SYSTEM_INFO)
this.prompt == orig(this.PARSER.f_lisp.prompt)
this.prompt == orig(this.prompt)
this.prompt.getClass().getName() == orig(this.PARSER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.COMPILER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.prompt.getClass().getName())
this.userPrompt == orig(this.userPrompt)
this.packages == orig(this.packages)
arg0.toString == orig(arg0.toString)
this.PARSER has only one value
this.PARSER != null
this.COMPILER.f_lisp.prompt has only one value
return != null
===========================================================================
org.jatha.Lisp.intern(java.lang.String, org.jatha.dynatype.LispSymbol):::ENTER
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == arg1.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg1.getClass().getName()
this.COMPILER.AND.getClass().getName() == arg1.getClass().getName()
this.COMPILER.f_lisp.prompt has only one value
arg0 != null
arg1 != null
arg1.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != arg1.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != arg1.getClass().getName()
this.COMPILER.CONS.getClass().getName() != arg1.getClass().getName()
this.COMPILER.LIST.getClass().getName() != arg1.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != arg1.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != arg1.getClass().getName()
this.COMPILER.requires.getClass().getName() != arg1.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != arg1.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() != arg1.getClass().getName()
org.jatha.machine.SECDMachine.STOP.getClass().getName() != arg1.getClass().getName()
this.prompt.getClass().getName() != arg1.getClass().getName()
===========================================================================
org.jatha.Lisp.intern(java.lang.String, org.jatha.dynatype.LispSymbol):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.VERSION_NAME == orig(this.VERSION_NAME)
this.VERSION_NAME.toString == orig(this.VERSION_NAME.toString)
this.VERSION_MAJOR == orig(this.VERSION_MAJOR)
this.VERSION_MINOR == orig(this.VERSION_MINOR)
this.VERSION_MICRO == orig(this.VERSION_MICRO)
this.VERSION_TYPE == orig(this.VERSION_TYPE)
this.VERSION_TYPE.toString == orig(this.VERSION_TYPE.toString)
this.VERSION_DATE == orig(this.VERSION_DATE)
this.VERSION_DATE.toString == orig(this.VERSION_DATE.toString)
this.VERSION_URL == orig(this.VERSION_URL)
this.VERSION_URL.toString == orig(this.VERSION_URL.toString)
this.useConsole == orig(this.useConsole)
this.PARSER == orig(this.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == return.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
this.PARSER.BackQuoteLevel == orig(this.PARSER.BackQuoteLevel)
this.PARSER.inputReader == orig(this.PARSER.inputReader)
this.PARSER.f_caseSensitivity == orig(this.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.PARSER.f_lisp == orig(this)
this.PARSER.f_lisp == orig(this.PARSER.f_lisp)
this.PARSER.f_lisp.VERSION_NAME == orig(this.PARSER.f_lisp.VERSION_NAME)
this.PARSER.f_lisp.VERSION_NAME.toString == orig(this.PARSER.f_lisp.VERSION_NAME.toString)
this.PARSER.f_lisp.VERSION_MAJOR == orig(this.PARSER.f_lisp.VERSION_MAJOR)
this.PARSER.f_lisp.VERSION_MINOR == orig(this.PARSER.f_lisp.VERSION_MINOR)
this.PARSER.f_lisp.VERSION_MICRO == orig(this.PARSER.f_lisp.VERSION_MICRO)
this.PARSER.f_lisp.VERSION_TYPE == orig(this.PARSER.f_lisp.VERSION_TYPE)
this.PARSER.f_lisp.VERSION_TYPE.toString == orig(this.PARSER.f_lisp.VERSION_TYPE.toString)
this.PARSER.f_lisp.VERSION_DATE == orig(this.PARSER.f_lisp.VERSION_DATE)
this.PARSER.f_lisp.VERSION_DATE.toString == orig(this.PARSER.f_lisp.VERSION_DATE.toString)
this.PARSER.f_lisp.VERSION_URL == orig(this.PARSER.f_lisp.VERSION_URL)
this.PARSER.f_lisp.VERSION_URL.toString == orig(this.PARSER.f_lisp.VERSION_URL.toString)
this.PARSER.f_lisp.useConsole == orig(this.PARSER.f_lisp.useConsole)
this.PARSER.f_lisp.PARSER == orig(this.PARSER.f_lisp.PARSER)
this.PARSER.f_lisp.COMPILER == orig(this.PARSER.f_lisp.COMPILER)
this.PARSER.f_lisp.SYMTAB == orig(this.PARSER.f_lisp.SYMTAB)
this.PARSER.f_lisp.MACHINE == orig(this.PARSER.f_lisp.MACHINE)
this.PARSER.f_lisp.SYSTEM_INFO == orig(this.PARSER.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.PARSER.f_lisp.prompt == orig(this.PARSER.f_lisp.prompt)
this.PARSER.f_lisp.userPrompt == orig(this.PARSER.f_lisp.userPrompt)
this.PARSER.f_lisp.packages == orig(this.PARSER.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.COMPILER == orig(this.COMPILER)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == return.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
this.COMPILER.AND == orig(this.COMPILER.AND)
this.COMPILER.AND.getClass().getName() == return.getClass().getName()
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.AND.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.DEFMACRO.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.IF.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LAMBDA.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.SET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LETREC.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.OR.getClass().getName())
this.COMPILER.DEFMACRO == orig(this.COMPILER.DEFMACRO)
this.COMPILER.IF == orig(this.COMPILER.IF)
this.COMPILER.LAMBDA == orig(this.COMPILER.LAMBDA)
this.COMPILER.LET == orig(this.COMPILER.LET)
this.COMPILER.SET == orig(this.COMPILER.SET)
this.COMPILER.LETREC == orig(this.COMPILER.LETREC)
this.COMPILER.OR == orig(this.COMPILER.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
this.COMPILER.DUMMY_FUNCTION == orig(this.COMPILER.DUMMY_FUNCTION)
this.COMPILER.DUMMY_FUNCTION.getClass().getName() == orig(this.COMPILER.DUMMY_FUNCTION.getClass().getName())
this.COMPILER.DUMMY_MACRO == orig(this.COMPILER.DUMMY_MACRO)
this.COMPILER.DUMMY_MACRO.getClass().getName() == orig(this.COMPILER.DUMMY_MACRO.getClass().getName())
this.COMPILER.CONS == orig(this.COMPILER.CONS)
this.COMPILER.CONS.getClass().getName() == orig(this.COMPILER.CONS.getClass().getName())
this.COMPILER.CONS.functionName == orig(this.COMPILER.CONS.functionName)
this.COMPILER.CONS.functionName.toString == orig(this.COMPILER.CONS.functionName.toString)
this.COMPILER.LIST == orig(this.COMPILER.LIST)
this.COMPILER.LIST.getClass().getName() == orig(this.COMPILER.LIST.getClass().getName())
this.COMPILER.LIST.functionName == orig(this.COMPILER.LIST.functionName)
this.COMPILER.LIST.functionName.toString == orig(this.COMPILER.LIST.functionName.toString)
this.COMPILER.SETQ == orig(this.COMPILER.SETQ)
this.COMPILER.SETQ.getClass().getName() == orig(this.COMPILER.SETQ.getClass().getName())
this.COMPILER.SETQ.functionName == orig(this.COMPILER.SETQ.functionName)
this.COMPILER.SETQ.functionName.toString == orig(this.COMPILER.SETQ.functionName.toString)
this.COMPILER.SpecialOperators == orig(this.COMPILER.SpecialOperators)
this.COMPILER.SpecialOperators.getClass().getName() == orig(this.COMPILER.SpecialOperators.getClass().getName())
this.COMPILER.WarnAboutSpecialsP == orig(this.COMPILER.WarnAboutSpecialsP)
this.COMPILER.f_lisp == orig(this)
this.COMPILER.f_lisp == orig(this.COMPILER.f_lisp)
this.COMPILER.f_lisp.VERSION_NAME == orig(this.COMPILER.f_lisp.VERSION_NAME)
this.COMPILER.f_lisp.VERSION_NAME.toString == orig(this.COMPILER.f_lisp.VERSION_NAME.toString)
this.COMPILER.f_lisp.VERSION_MAJOR == orig(this.COMPILER.f_lisp.VERSION_MAJOR)
this.COMPILER.f_lisp.VERSION_MINOR == orig(this.COMPILER.f_lisp.VERSION_MINOR)
this.COMPILER.f_lisp.VERSION_MICRO == orig(this.COMPILER.f_lisp.VERSION_MICRO)
this.COMPILER.f_lisp.VERSION_TYPE == orig(this.COMPILER.f_lisp.VERSION_TYPE)
this.COMPILER.f_lisp.VERSION_TYPE.toString == orig(this.COMPILER.f_lisp.VERSION_TYPE.toString)
this.COMPILER.f_lisp.VERSION_DATE == orig(this.COMPILER.f_lisp.VERSION_DATE)
this.COMPILER.f_lisp.VERSION_DATE.toString == orig(this.COMPILER.f_lisp.VERSION_DATE.toString)
this.COMPILER.f_lisp.VERSION_URL == orig(this.COMPILER.f_lisp.VERSION_URL)
this.COMPILER.f_lisp.VERSION_URL.toString == orig(this.COMPILER.f_lisp.VERSION_URL.toString)
this.COMPILER.f_lisp.useConsole == orig(this.COMPILER.f_lisp.useConsole)
this.COMPILER.f_lisp.PARSER == orig(this.COMPILER.f_lisp.PARSER)
this.COMPILER.f_lisp.COMPILER == orig(this.COMPILER.f_lisp.COMPILER)
this.COMPILER.f_lisp.SYMTAB == orig(this.COMPILER.f_lisp.SYMTAB)
this.COMPILER.f_lisp.MACHINE == orig(this.COMPILER.f_lisp.MACHINE)
this.COMPILER.f_lisp.SYSTEM_INFO == orig(this.COMPILER.f_lisp.SYSTEM_INFO)
this.COMPILER.f_lisp.prompt == orig(this.COMPILER.f_lisp.prompt)
this.COMPILER.f_lisp.userPrompt == orig(this.COMPILER.f_lisp.userPrompt)
this.COMPILER.f_lisp.packages == orig(this.COMPILER.f_lisp.packages)
this.COMPILER.requires == orig(this.COMPILER.requires)
this.COMPILER.requires.getClass().getName() == orig(this.COMPILER.requires.getClass().getName())
this.COMPILER.defaultPackages == orig(this.COMPILER.defaultPackages)
this.COMPILER.defaultPackages[] == orig(this.COMPILER.defaultPackages[])
this.COMPILER.defaultPackages.getClass().getName() == orig(this.COMPILER.defaultPackages.getClass().getName())
this.COMPILER.legalBlocks == orig(this.COMPILER.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.SYMTAB == orig(this.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.MACHINE == orig(this.MACHINE)
org.jatha.machine.SECDMachine.DEBUG == orig(org.jatha.machine.SECDMachine.DEBUG)
this.MACHINE.S == orig(this.MACHINE.S)
org.jatha.machine.SECDRegister.count == orig(org.jatha.machine.SECDRegister.count)
this.MACHINE.S.f_name == orig(this.MACHINE.S.f_name)
this.MACHINE.S.f_name.toString == orig(this.MACHINE.S.f_name.toString)
this.MACHINE.S.f_value == orig(this.MACHINE.S.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.E.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.C.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.D.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.X.f_value)
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.S.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.E.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.C.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.D.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.X.f_value.getClass().getName())
this.MACHINE.E == orig(this.MACHINE.E)
this.MACHINE.E.f_name == orig(this.MACHINE.E.f_name)
this.MACHINE.E.f_name.toString == orig(this.MACHINE.E.f_name.toString)
this.MACHINE.C == orig(this.MACHINE.C)
this.MACHINE.C.f_name == orig(this.MACHINE.C.f_name)
this.MACHINE.C.f_name.toString == orig(this.MACHINE.C.f_name.toString)
this.MACHINE.D == orig(this.MACHINE.D)
this.MACHINE.D.f_name == orig(this.MACHINE.D.f_name)
this.MACHINE.D.f_name.toString == orig(this.MACHINE.D.f_name.toString)
this.MACHINE.X == orig(this.MACHINE.X)
this.MACHINE.X.f_name == orig(this.MACHINE.X.f_name)
this.MACHINE.X.f_name.toString == orig(this.MACHINE.X.f_name.toString)
this.MACHINE.B == orig(this.MACHINE.B)
org.jatha.machine.SECDMachine.BLK == orig(org.jatha.machine.SECDMachine.BLK)
org.jatha.machine.SECDMachine.BLK.getClass().getName() == orig(org.jatha.machine.SECDMachine.BLK.getClass().getName())
org.jatha.machine.SECDMachine.BLK.functionName == orig(org.jatha.machine.SECDMachine.BLK.functionName)
org.jatha.machine.SECDMachine.BLK.functionName.toString == orig(org.jatha.machine.SECDMachine.BLK.functionName.toString)
org.jatha.machine.SECDMachine.LDNIL == orig(org.jatha.machine.SECDMachine.LDNIL)
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDNIL.getClass().getName())
org.jatha.machine.SECDMachine.LDNIL.functionName == orig(org.jatha.machine.SECDMachine.LDNIL.functionName)
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == orig(org.jatha.machine.SECDMachine.LDNIL.functionName.toString)
org.jatha.machine.SECDMachine.LDT == orig(org.jatha.machine.SECDMachine.LDT)
org.jatha.machine.SECDMachine.LDT.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDT.getClass().getName())
org.jatha.machine.SECDMachine.LDT.functionName == orig(org.jatha.machine.SECDMachine.LDT.functionName)
org.jatha.machine.SECDMachine.LDT.functionName.toString == orig(org.jatha.machine.SECDMachine.LDT.functionName.toString)
org.jatha.machine.SECDMachine.LDC == orig(org.jatha.machine.SECDMachine.LDC)
org.jatha.machine.SECDMachine.LDC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDC.getClass().getName())
org.jatha.machine.SECDMachine.LDC.functionName == orig(org.jatha.machine.SECDMachine.LDC.functionName)
org.jatha.machine.SECDMachine.LDC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDC.functionName.toString)
org.jatha.machine.SECDMachine.ST == orig(org.jatha.machine.SECDMachine.ST)
org.jatha.machine.SECDMachine.ST.getClass().getName() == orig(org.jatha.machine.SECDMachine.ST.getClass().getName())
org.jatha.machine.SECDMachine.ST.functionName == orig(org.jatha.machine.SECDMachine.ST.functionName)
org.jatha.machine.SECDMachine.ST.functionName.toString == orig(org.jatha.machine.SECDMachine.ST.functionName.toString)
org.jatha.machine.SECDMachine.LDR == orig(org.jatha.machine.SECDMachine.LDR)
org.jatha.machine.SECDMachine.LDR.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDR.getClass().getName())
org.jatha.machine.SECDMachine.LDR.functionName == orig(org.jatha.machine.SECDMachine.LDR.functionName)
org.jatha.machine.SECDMachine.LDR.functionName.toString == orig(org.jatha.machine.SECDMachine.LDR.functionName.toString)
org.jatha.machine.SECDMachine.LD == orig(org.jatha.machine.SECDMachine.LD)
org.jatha.machine.SECDMachine.LD.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD.getClass().getName())
org.jatha.machine.SECDMachine.LD.functionName == orig(org.jatha.machine.SECDMachine.LD.functionName)
org.jatha.machine.SECDMachine.LD.functionName.toString == orig(org.jatha.machine.SECDMachine.LD.functionName.toString)
org.jatha.machine.SECDMachine.LD_GLOBAL == orig(org.jatha.machine.SECDMachine.LD_GLOBAL)
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName())
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName)
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString)
org.jatha.machine.SECDMachine.LDF == orig(org.jatha.machine.SECDMachine.LDF)
org.jatha.machine.SECDMachine.LDF.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDF.getClass().getName())
org.jatha.machine.SECDMachine.LDF.functionName == orig(org.jatha.machine.SECDMachine.LDF.functionName)
org.jatha.machine.SECDMachine.LDF.functionName.toString == orig(org.jatha.machine.SECDMachine.LDF.functionName.toString)
org.jatha.machine.SECDMachine.LDFC == orig(org.jatha.machine.SECDMachine.LDFC)
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDFC.getClass().getName())
org.jatha.machine.SECDMachine.LDFC.functionName == orig(org.jatha.machine.SECDMachine.LDFC.functionName)
org.jatha.machine.SECDMachine.LDFC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDFC.functionName.toString)
org.jatha.machine.SECDMachine.SEL == orig(org.jatha.machine.SECDMachine.SEL)
org.jatha.machine.SECDMachine.SEL.getClass().getName() == orig(org.jatha.machine.SECDMachine.SEL.getClass().getName())
org.jatha.machine.SECDMachine.SEL.functionName == orig(org.jatha.machine.SECDMachine.SEL.functionName)
org.jatha.machine.SECDMachine.SEL.functionName.toString == orig(org.jatha.machine.SECDMachine.SEL.functionName.toString)
org.jatha.machine.SECDMachine.TEST == orig(org.jatha.machine.SECDMachine.TEST)
org.jatha.machine.SECDMachine.TEST.getClass().getName() == orig(org.jatha.machine.SECDMachine.TEST.getClass().getName())
org.jatha.machine.SECDMachine.TEST.functionName == orig(org.jatha.machine.SECDMachine.TEST.functionName)
org.jatha.machine.SECDMachine.TEST.functionName.toString == orig(org.jatha.machine.SECDMachine.TEST.functionName.toString)
org.jatha.machine.SECDMachine.JOIN == orig(org.jatha.machine.SECDMachine.JOIN)
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == orig(org.jatha.machine.SECDMachine.JOIN.getClass().getName())
org.jatha.machine.SECDMachine.JOIN.functionName == orig(org.jatha.machine.SECDMachine.JOIN.functionName)
org.jatha.machine.SECDMachine.JOIN.functionName.toString == orig(org.jatha.machine.SECDMachine.JOIN.functionName.toString)
org.jatha.machine.SECDMachine.AP == orig(org.jatha.machine.SECDMachine.AP)
org.jatha.machine.SECDMachine.AP.getClass().getName() == orig(org.jatha.machine.SECDMachine.AP.getClass().getName())
org.jatha.machine.SECDMachine.AP.functionName == orig(org.jatha.machine.SECDMachine.AP.functionName)
org.jatha.machine.SECDMachine.AP.functionName.toString == orig(org.jatha.machine.SECDMachine.AP.functionName.toString)
org.jatha.machine.SECDMachine.RAP == orig(org.jatha.machine.SECDMachine.RAP)
org.jatha.machine.SECDMachine.RAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.RAP.getClass().getName())
org.jatha.machine.SECDMachine.RAP.functionName == orig(org.jatha.machine.SECDMachine.RAP.functionName)
org.jatha.machine.SECDMachine.RAP.functionName.toString == orig(org.jatha.machine.SECDMachine.RAP.functionName.toString)
org.jatha.machine.SECDMachine.RTN == orig(org.jatha.machine.SECDMachine.RTN)
org.jatha.machine.SECDMachine.RTN.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN.getClass().getName())
org.jatha.machine.SECDMachine.RTN.functionName == orig(org.jatha.machine.SECDMachine.RTN.functionName)
org.jatha.machine.SECDMachine.RTN.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IF == orig(org.jatha.machine.SECDMachine.RTN_IF)
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IF.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IF.functionName == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName)
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IT == orig(org.jatha.machine.SECDMachine.RTN_IT)
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IT.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IT.functionName == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName)
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName.toString)
org.jatha.machine.SECDMachine.DAP == orig(org.jatha.machine.SECDMachine.DAP)
org.jatha.machine.SECDMachine.DAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.DAP.getClass().getName())
org.jatha.machine.SECDMachine.DAP.functionName == orig(org.jatha.machine.SECDMachine.DAP.functionName)
org.jatha.machine.SECDMachine.DAP.functionName.toString == orig(org.jatha.machine.SECDMachine.DAP.functionName.toString)
org.jatha.machine.SECDMachine.DUM == orig(org.jatha.machine.SECDMachine.DUM)
org.jatha.machine.SECDMachine.DUM.getClass().getName() == orig(org.jatha.machine.SECDMachine.DUM.getClass().getName())
org.jatha.machine.SECDMachine.DUM.functionName == orig(org.jatha.machine.SECDMachine.DUM.functionName)
org.jatha.machine.SECDMachine.DUM.functionName.toString == orig(org.jatha.machine.SECDMachine.DUM.functionName.toString)
org.jatha.machine.SECDMachine.LIS == orig(org.jatha.machine.SECDMachine.LIS)
org.jatha.machine.SECDMachine.LIS.getClass().getName() == orig(org.jatha.machine.SECDMachine.LIS.getClass().getName())
org.jatha.machine.SECDMachine.LIS.functionName == orig(org.jatha.machine.SECDMachine.LIS.functionName)
org.jatha.machine.SECDMachine.LIS.functionName.toString == orig(org.jatha.machine.SECDMachine.LIS.functionName.toString)
org.jatha.machine.SECDMachine.SP_BIND == orig(org.jatha.machine.SECDMachine.SP_BIND)
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_BIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_BIND.functionName == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName)
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName.toString)
org.jatha.machine.SECDMachine.SP_UNBIND == orig(org.jatha.machine.SECDMachine.SP_UNBIND)
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_UNBIND.functionName == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName)
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString)
org.jatha.machine.SECDMachine.STOP == orig(org.jatha.machine.SECDMachine.STOP)
org.jatha.machine.SECDMachine.STOP.getClass().getName() == orig(org.jatha.machine.SECDMachine.STOP.getClass().getName())
org.jatha.machine.SECDMachine.STOP.functionName == orig(org.jatha.machine.SECDMachine.STOP.functionName)
org.jatha.machine.SECDMachine.STOP.functionName.toString == orig(org.jatha.machine.SECDMachine.STOP.functionName.toString)
this.SYSTEM_INFO == orig(this.SYSTEM_INFO)
this.prompt == orig(this.prompt)
this.prompt.getClass().getName() == orig(this.PARSER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.COMPILER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.prompt.getClass().getName())
this.userPrompt == orig(this.userPrompt)
this.packages == orig(this.packages)
arg0.toString == orig(arg0.toString)
return == orig(arg1)
return.getClass().getName() == orig(arg1.getClass().getName())
this.COMPILER.f_lisp.prompt has only one value
return != null
return.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.COMPILER.DUMMY_FUNCTION.getClass().getName() != return.getClass().getName()
this.COMPILER.DUMMY_MACRO.getClass().getName() != return.getClass().getName()
this.COMPILER.CONS.getClass().getName() != return.getClass().getName()
this.COMPILER.LIST.getClass().getName() != return.getClass().getName()
this.COMPILER.SETQ.getClass().getName() != return.getClass().getName()
this.COMPILER.SpecialOperators.getClass().getName() != return.getClass().getName()
this.COMPILER.requires.getClass().getName() != return.getClass().getName()
this.COMPILER.defaultPackages.getClass().getName() != return.getClass().getName()
this.MACHINE.S.f_value.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.BLK.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDT.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDC.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.ST.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDR.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LD.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDF.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LDFC.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.SEL.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.TEST.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.JOIN.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.AP.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.RAP.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.RTN.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.DAP.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.DUM.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.LIS.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() != return.getClass().getName()
org.jatha.machine.SECDMachine.STOP.getClass().getName() != return.getClass().getName()
this.prompt.getClass().getName() != return.getClass().getName()
===========================================================================
org.jatha.Lisp.isBuiltinFunction(org.jatha.dynatype.LispValue):::ENTER
arg0.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.Lisp.isBuiltinFunction(org.jatha.dynatype.LispValue):::EXIT1238
===========================================================================
org.jatha.Lisp.isBuiltinFunction(org.jatha.dynatype.LispValue):::EXIT1238;condition="not(return == true)"
===========================================================================
org.jatha.Lisp.isBuiltinFunction(org.jatha.dynatype.LispValue):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
return == false
===========================================================================
org.jatha.Lisp.isBuiltinFunction(org.jatha.dynatype.LispValue):::EXIT;condition="not(return == true)"
===========================================================================
org.jatha.Lisp.makeString(java.lang.String):::ENTER
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.DEFMACRO.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.IF.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LAMBDA.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LET.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.SET.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LETREC.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.OR.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this.PARSER has only one value
this.COMPILER has only one value
this.COMPILER.CONS == null
this.COMPILER.LIST == null
this.COMPILER.SETQ == null
this.MACHINE has only one value
this.prompt == null
arg0 has only one value
arg0.toString == "Jatha> "
===========================================================================
org.jatha.Lisp.makeString(java.lang.String):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.VERSION_NAME == orig(this.VERSION_NAME)
this.VERSION_NAME == orig(this.PARSER.f_lisp.VERSION_NAME)
this.VERSION_NAME == orig(this.COMPILER.f_lisp.VERSION_NAME)
this.VERSION_NAME.toString == orig(this.VERSION_NAME.toString)
this.VERSION_MAJOR == orig(this.VERSION_MAJOR)
this.VERSION_MAJOR == orig(this.PARSER.f_lisp.VERSION_MAJOR)
this.VERSION_MAJOR == orig(this.COMPILER.f_lisp.VERSION_MAJOR)
this.VERSION_MINOR == orig(this.VERSION_MINOR)
this.VERSION_MINOR == orig(this.PARSER.f_lisp.VERSION_MINOR)
this.VERSION_MINOR == orig(this.COMPILER.f_lisp.VERSION_MINOR)
this.VERSION_MICRO == orig(this.VERSION_MICRO)
this.VERSION_MICRO == orig(this.PARSER.f_lisp.VERSION_MICRO)
this.VERSION_MICRO == orig(this.COMPILER.f_lisp.VERSION_MICRO)
this.VERSION_TYPE == orig(this.VERSION_TYPE)
this.VERSION_TYPE == orig(this.PARSER.f_lisp.VERSION_TYPE)
this.VERSION_TYPE == orig(this.COMPILER.f_lisp.VERSION_TYPE)
this.VERSION_TYPE.toString == orig(this.VERSION_TYPE.toString)
this.VERSION_DATE == orig(this.VERSION_DATE)
this.VERSION_DATE == orig(this.PARSER.f_lisp.VERSION_DATE)
this.VERSION_DATE == orig(this.COMPILER.f_lisp.VERSION_DATE)
this.VERSION_DATE.toString == orig(this.VERSION_DATE.toString)
this.VERSION_URL == orig(this.VERSION_URL)
this.VERSION_URL == orig(this.PARSER.f_lisp.VERSION_URL)
this.VERSION_URL == orig(this.COMPILER.f_lisp.VERSION_URL)
this.VERSION_URL.toString == orig(this.VERSION_URL.toString)
this.useConsole == orig(this.useConsole)
this.useConsole == orig(this.PARSER.f_lisp.useConsole)
this.useConsole == orig(this.COMPILER.f_lisp.useConsole)
this.PARSER == orig(this.PARSER)
this.PARSER == orig(this.PARSER.f_lisp.PARSER)
this.PARSER == orig(this.COMPILER.f_lisp.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.DEFMACRO.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.IF.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LAMBDA.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LET.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.SET.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.LETREC.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == this.COMPILER.OR.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.AND.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.DEFMACRO.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.IF.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.LAMBDA.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.LET.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.SET.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.LETREC.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(this.COMPILER.OR.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
this.PARSER.BackQuoteLevel == orig(this.PARSER.BackQuoteLevel)
this.PARSER.inputReader == orig(this.PARSER.inputReader)
this.PARSER.f_caseSensitivity == orig(this.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.PARSER.f_lisp == orig(this)
this.PARSER.f_lisp == orig(this.PARSER.f_lisp)
this.PARSER.f_lisp == orig(this.COMPILER.f_lisp)
this.PARSER.f_lisp.VERSION_NAME.toString == orig(this.PARSER.f_lisp.VERSION_NAME.toString)
this.PARSER.f_lisp.VERSION_TYPE.toString == orig(this.PARSER.f_lisp.VERSION_TYPE.toString)
this.PARSER.f_lisp.VERSION_DATE.toString == orig(this.PARSER.f_lisp.VERSION_DATE.toString)
this.PARSER.f_lisp.VERSION_URL.toString == orig(this.PARSER.f_lisp.VERSION_URL.toString)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.PARSER.f_lisp.userPrompt == orig(this.PARSER.f_lisp.userPrompt)
this.PARSER.f_lisp.packages == orig(this.PARSER.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.COMPILER == orig(this.PARSER.f_lisp.COMPILER)
this.COMPILER == orig(this.COMPILER)
this.COMPILER == orig(this.COMPILER.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
this.COMPILER.AND == orig(this.COMPILER.AND)
this.COMPILER.DEFMACRO == orig(this.COMPILER.DEFMACRO)
this.COMPILER.IF == orig(this.COMPILER.IF)
this.COMPILER.LAMBDA == orig(this.COMPILER.LAMBDA)
this.COMPILER.LET == orig(this.COMPILER.LET)
this.COMPILER.SET == orig(this.COMPILER.SET)
this.COMPILER.LETREC == orig(this.COMPILER.LETREC)
this.COMPILER.OR == orig(this.COMPILER.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
this.COMPILER.DUMMY_FUNCTION == orig(this.COMPILER.DUMMY_FUNCTION)
this.COMPILER.DUMMY_FUNCTION.getClass().getName() == orig(this.COMPILER.DUMMY_FUNCTION.getClass().getName())
this.COMPILER.DUMMY_MACRO == orig(this.COMPILER.DUMMY_MACRO)
this.COMPILER.DUMMY_MACRO.getClass().getName() == orig(this.COMPILER.DUMMY_MACRO.getClass().getName())
this.COMPILER.CONS == orig(this.COMPILER.CONS)
this.COMPILER.LIST == orig(this.COMPILER.LIST)
this.COMPILER.SETQ == orig(this.COMPILER.SETQ)
this.COMPILER.SpecialOperators == orig(this.COMPILER.SpecialOperators)
this.COMPILER.SpecialOperators.getClass().getName() == orig(this.COMPILER.SpecialOperators.getClass().getName())
this.COMPILER.WarnAboutSpecialsP == orig(this.COMPILER.WarnAboutSpecialsP)
this.COMPILER.f_lisp.VERSION_NAME.toString == orig(this.COMPILER.f_lisp.VERSION_NAME.toString)
this.COMPILER.f_lisp.VERSION_TYPE.toString == orig(this.COMPILER.f_lisp.VERSION_TYPE.toString)
this.COMPILER.f_lisp.VERSION_DATE.toString == orig(this.COMPILER.f_lisp.VERSION_DATE.toString)
this.COMPILER.f_lisp.VERSION_URL.toString == orig(this.COMPILER.f_lisp.VERSION_URL.toString)
this.COMPILER.f_lisp.userPrompt == orig(this.COMPILER.f_lisp.userPrompt)
this.COMPILER.f_lisp.packages == orig(this.COMPILER.f_lisp.packages)
this.COMPILER.requires == orig(this.COMPILER.requires)
this.COMPILER.requires.getClass().getName() == orig(this.COMPILER.requires.getClass().getName())
this.COMPILER.defaultPackages == orig(this.COMPILER.defaultPackages)
this.COMPILER.defaultPackages[] == orig(this.COMPILER.defaultPackages[])
this.COMPILER.defaultPackages.getClass().getName() == orig(this.COMPILER.defaultPackages.getClass().getName())
this.COMPILER.legalBlocks == orig(this.COMPILER.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.SYMTAB == orig(this.PARSER.f_lisp.SYMTAB)
this.SYMTAB == orig(this.COMPILER.f_lisp.SYMTAB)
this.SYMTAB == orig(this.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.MACHINE == orig(this.PARSER.f_lisp.MACHINE)
this.MACHINE == orig(this.COMPILER.f_lisp.MACHINE)
this.MACHINE == orig(this.MACHINE)
org.jatha.machine.SECDMachine.DEBUG == orig(org.jatha.machine.SECDMachine.DEBUG)
this.MACHINE.S == orig(this.MACHINE.S)
org.jatha.machine.SECDRegister.count == orig(org.jatha.machine.SECDRegister.count)
this.MACHINE.S.f_name == orig(this.MACHINE.S.f_name)
this.MACHINE.S.f_name.toString == orig(this.MACHINE.S.f_name.toString)
this.MACHINE.S.f_value == orig(this.MACHINE.S.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.E.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.C.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.D.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.X.f_value)
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.S.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.E.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.C.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.D.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.X.f_value.getClass().getName())
this.MACHINE.E == orig(this.MACHINE.E)
this.MACHINE.E.f_name == orig(this.MACHINE.E.f_name)
this.MACHINE.E.f_name.toString == orig(this.MACHINE.E.f_name.toString)
this.MACHINE.C == orig(this.MACHINE.C)
this.MACHINE.C.f_name == orig(this.MACHINE.C.f_name)
this.MACHINE.C.f_name.toString == orig(this.MACHINE.C.f_name.toString)
this.MACHINE.D == orig(this.MACHINE.D)
this.MACHINE.D.f_name == orig(this.MACHINE.D.f_name)
this.MACHINE.D.f_name.toString == orig(this.MACHINE.D.f_name.toString)
this.MACHINE.X == orig(this.MACHINE.X)
this.MACHINE.X.f_name == orig(this.MACHINE.X.f_name)
this.MACHINE.X.f_name.toString == orig(this.MACHINE.X.f_name.toString)
this.MACHINE.B == orig(this.MACHINE.B)
org.jatha.machine.SECDMachine.BLK == orig(org.jatha.machine.SECDMachine.BLK)
org.jatha.machine.SECDMachine.BLK.getClass().getName() == orig(org.jatha.machine.SECDMachine.BLK.getClass().getName())
org.jatha.machine.SECDMachine.BLK.functionName == orig(org.jatha.machine.SECDMachine.BLK.functionName)
org.jatha.machine.SECDMachine.BLK.functionName.toString == orig(org.jatha.machine.SECDMachine.BLK.functionName.toString)
org.jatha.machine.SECDMachine.LDNIL == orig(org.jatha.machine.SECDMachine.LDNIL)
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDNIL.getClass().getName())
org.jatha.machine.SECDMachine.LDNIL.functionName == orig(org.jatha.machine.SECDMachine.LDNIL.functionName)
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == orig(org.jatha.machine.SECDMachine.LDNIL.functionName.toString)
org.jatha.machine.SECDMachine.LDT == orig(org.jatha.machine.SECDMachine.LDT)
org.jatha.machine.SECDMachine.LDT.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDT.getClass().getName())
org.jatha.machine.SECDMachine.LDT.functionName == orig(org.jatha.machine.SECDMachine.LDT.functionName)
org.jatha.machine.SECDMachine.LDT.functionName.toString == orig(org.jatha.machine.SECDMachine.LDT.functionName.toString)
org.jatha.machine.SECDMachine.LDC == orig(org.jatha.machine.SECDMachine.LDC)
org.jatha.machine.SECDMachine.LDC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDC.getClass().getName())
org.jatha.machine.SECDMachine.LDC.functionName == orig(org.jatha.machine.SECDMachine.LDC.functionName)
org.jatha.machine.SECDMachine.LDC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDC.functionName.toString)
org.jatha.machine.SECDMachine.ST == orig(org.jatha.machine.SECDMachine.ST)
org.jatha.machine.SECDMachine.ST.getClass().getName() == orig(org.jatha.machine.SECDMachine.ST.getClass().getName())
org.jatha.machine.SECDMachine.ST.functionName == orig(org.jatha.machine.SECDMachine.ST.functionName)
org.jatha.machine.SECDMachine.ST.functionName.toString == orig(org.jatha.machine.SECDMachine.ST.functionName.toString)
org.jatha.machine.SECDMachine.LDR == orig(org.jatha.machine.SECDMachine.LDR)
org.jatha.machine.SECDMachine.LDR.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDR.getClass().getName())
org.jatha.machine.SECDMachine.LDR.functionName == orig(org.jatha.machine.SECDMachine.LDR.functionName)
org.jatha.machine.SECDMachine.LDR.functionName.toString == orig(org.jatha.machine.SECDMachine.LDR.functionName.toString)
org.jatha.machine.SECDMachine.LD == orig(org.jatha.machine.SECDMachine.LD)
org.jatha.machine.SECDMachine.LD.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD.getClass().getName())
org.jatha.machine.SECDMachine.LD.functionName == orig(org.jatha.machine.SECDMachine.LD.functionName)
org.jatha.machine.SECDMachine.LD.functionName.toString == orig(org.jatha.machine.SECDMachine.LD.functionName.toString)
org.jatha.machine.SECDMachine.LD_GLOBAL == orig(org.jatha.machine.SECDMachine.LD_GLOBAL)
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName())
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName)
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString)
org.jatha.machine.SECDMachine.LDF == orig(org.jatha.machine.SECDMachine.LDF)
org.jatha.machine.SECDMachine.LDF.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDF.getClass().getName())
org.jatha.machine.SECDMachine.LDF.functionName == orig(org.jatha.machine.SECDMachine.LDF.functionName)
org.jatha.machine.SECDMachine.LDF.functionName.toString == orig(org.jatha.machine.SECDMachine.LDF.functionName.toString)
org.jatha.machine.SECDMachine.LDFC == orig(org.jatha.machine.SECDMachine.LDFC)
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDFC.getClass().getName())
org.jatha.machine.SECDMachine.LDFC.functionName == orig(org.jatha.machine.SECDMachine.LDFC.functionName)
org.jatha.machine.SECDMachine.LDFC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDFC.functionName.toString)
org.jatha.machine.SECDMachine.SEL == orig(org.jatha.machine.SECDMachine.SEL)
org.jatha.machine.SECDMachine.SEL.getClass().getName() == orig(org.jatha.machine.SECDMachine.SEL.getClass().getName())
org.jatha.machine.SECDMachine.SEL.functionName == orig(org.jatha.machine.SECDMachine.SEL.functionName)
org.jatha.machine.SECDMachine.SEL.functionName.toString == orig(org.jatha.machine.SECDMachine.SEL.functionName.toString)
org.jatha.machine.SECDMachine.TEST == orig(org.jatha.machine.SECDMachine.TEST)
org.jatha.machine.SECDMachine.TEST.getClass().getName() == orig(org.jatha.machine.SECDMachine.TEST.getClass().getName())
org.jatha.machine.SECDMachine.TEST.functionName == orig(org.jatha.machine.SECDMachine.TEST.functionName)
org.jatha.machine.SECDMachine.TEST.functionName.toString == orig(org.jatha.machine.SECDMachine.TEST.functionName.toString)
org.jatha.machine.SECDMachine.JOIN == orig(org.jatha.machine.SECDMachine.JOIN)
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == orig(org.jatha.machine.SECDMachine.JOIN.getClass().getName())
org.jatha.machine.SECDMachine.JOIN.functionName == orig(org.jatha.machine.SECDMachine.JOIN.functionName)
org.jatha.machine.SECDMachine.JOIN.functionName.toString == orig(org.jatha.machine.SECDMachine.JOIN.functionName.toString)
org.jatha.machine.SECDMachine.AP == orig(org.jatha.machine.SECDMachine.AP)
org.jatha.machine.SECDMachine.AP.getClass().getName() == orig(org.jatha.machine.SECDMachine.AP.getClass().getName())
org.jatha.machine.SECDMachine.AP.functionName == orig(org.jatha.machine.SECDMachine.AP.functionName)
org.jatha.machine.SECDMachine.AP.functionName.toString == orig(org.jatha.machine.SECDMachine.AP.functionName.toString)
org.jatha.machine.SECDMachine.RAP == orig(org.jatha.machine.SECDMachine.RAP)
org.jatha.machine.SECDMachine.RAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.RAP.getClass().getName())
org.jatha.machine.SECDMachine.RAP.functionName == orig(org.jatha.machine.SECDMachine.RAP.functionName)
org.jatha.machine.SECDMachine.RAP.functionName.toString == orig(org.jatha.machine.SECDMachine.RAP.functionName.toString)
org.jatha.machine.SECDMachine.RTN == orig(org.jatha.machine.SECDMachine.RTN)
org.jatha.machine.SECDMachine.RTN.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN.getClass().getName())
org.jatha.machine.SECDMachine.RTN.functionName == orig(org.jatha.machine.SECDMachine.RTN.functionName)
org.jatha.machine.SECDMachine.RTN.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IF == orig(org.jatha.machine.SECDMachine.RTN_IF)
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IF.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IF.functionName == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName)
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IT == orig(org.jatha.machine.SECDMachine.RTN_IT)
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IT.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IT.functionName == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName)
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName.toString)
org.jatha.machine.SECDMachine.DAP == orig(org.jatha.machine.SECDMachine.DAP)
org.jatha.machine.SECDMachine.DAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.DAP.getClass().getName())
org.jatha.machine.SECDMachine.DAP.functionName == orig(org.jatha.machine.SECDMachine.DAP.functionName)
org.jatha.machine.SECDMachine.DAP.functionName.toString == orig(org.jatha.machine.SECDMachine.DAP.functionName.toString)
org.jatha.machine.SECDMachine.DUM == orig(org.jatha.machine.SECDMachine.DUM)
org.jatha.machine.SECDMachine.DUM.getClass().getName() == orig(org.jatha.machine.SECDMachine.DUM.getClass().getName())
org.jatha.machine.SECDMachine.DUM.functionName == orig(org.jatha.machine.SECDMachine.DUM.functionName)
org.jatha.machine.SECDMachine.DUM.functionName.toString == orig(org.jatha.machine.SECDMachine.DUM.functionName.toString)
org.jatha.machine.SECDMachine.LIS == orig(org.jatha.machine.SECDMachine.LIS)
org.jatha.machine.SECDMachine.LIS.getClass().getName() == orig(org.jatha.machine.SECDMachine.LIS.getClass().getName())
org.jatha.machine.SECDMachine.LIS.functionName == orig(org.jatha.machine.SECDMachine.LIS.functionName)
org.jatha.machine.SECDMachine.LIS.functionName.toString == orig(org.jatha.machine.SECDMachine.LIS.functionName.toString)
org.jatha.machine.SECDMachine.SP_BIND == orig(org.jatha.machine.SECDMachine.SP_BIND)
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_BIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_BIND.functionName == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName)
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName.toString)
org.jatha.machine.SECDMachine.SP_UNBIND == orig(org.jatha.machine.SECDMachine.SP_UNBIND)
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_UNBIND.functionName == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName)
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString)
org.jatha.machine.SECDMachine.STOP == orig(org.jatha.machine.SECDMachine.STOP)
org.jatha.machine.SECDMachine.STOP.getClass().getName() == orig(org.jatha.machine.SECDMachine.STOP.getClass().getName())
org.jatha.machine.SECDMachine.STOP.functionName == orig(org.jatha.machine.SECDMachine.STOP.functionName)
org.jatha.machine.SECDMachine.STOP.functionName.toString == orig(org.jatha.machine.SECDMachine.STOP.functionName.toString)
this.SYSTEM_INFO == orig(this.PARSER.f_lisp.SYSTEM_INFO)
this.SYSTEM_INFO == orig(this.COMPILER.f_lisp.SYSTEM_INFO)
this.SYSTEM_INFO == orig(this.SYSTEM_INFO)
this.prompt == orig(this.PARSER.f_lisp.prompt)
this.prompt == orig(this.COMPILER.f_lisp.prompt)
this.prompt == orig(this.prompt)
this.userPrompt == orig(this.userPrompt)
this.packages == orig(this.packages)
arg0.toString == orig(arg0.toString)
this.PARSER has only one value
this.COMPILER has only one value
this.COMPILER.CONS == null
this.COMPILER.LIST == null
this.COMPILER.SETQ == null
this.MACHINE has only one value
this.prompt == null
arg0.toString == "Jatha> "
return has only one value
return.getClass().getName() == org.jatha.dynatype.StandardLispString.class
===========================================================================
org.jatha.Lisp.makeSymbol(java.lang.String):::ENTER
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this.PARSER has only one value
this.PARSER != null
this.COMPILER.f_lisp.prompt has only one value
arg0 != null
===========================================================================
org.jatha.Lisp.makeSymbol(java.lang.String):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.VERSION_NAME == orig(this.VERSION_NAME)
this.VERSION_NAME == orig(this.PARSER.f_lisp.VERSION_NAME)
this.VERSION_NAME.toString == orig(this.VERSION_NAME.toString)
this.VERSION_MAJOR == orig(this.VERSION_MAJOR)
this.VERSION_MAJOR == orig(this.PARSER.f_lisp.VERSION_MAJOR)
this.VERSION_MINOR == orig(this.VERSION_MINOR)
this.VERSION_MINOR == orig(this.PARSER.f_lisp.VERSION_MINOR)
this.VERSION_MICRO == orig(this.VERSION_MICRO)
this.VERSION_MICRO == orig(this.PARSER.f_lisp.VERSION_MICRO)
this.VERSION_TYPE == orig(this.VERSION_TYPE)
this.VERSION_TYPE == orig(this.PARSER.f_lisp.VERSION_TYPE)
this.VERSION_TYPE.toString == orig(this.VERSION_TYPE.toString)
this.VERSION_DATE == orig(this.VERSION_DATE)
this.VERSION_DATE == orig(this.PARSER.f_lisp.VERSION_DATE)
this.VERSION_DATE.toString == orig(this.VERSION_DATE.toString)
this.VERSION_URL == orig(this.VERSION_URL)
this.VERSION_URL == orig(this.PARSER.f_lisp.VERSION_URL)
this.VERSION_URL.toString == orig(this.VERSION_URL.toString)
this.useConsole == orig(this.useConsole)
this.useConsole == orig(this.PARSER.f_lisp.useConsole)
this.PARSER == orig(this.PARSER)
this.PARSER == orig(this.PARSER.f_lisp.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == return.getClass().getName()
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
this.PARSER.BackQuoteLevel == orig(this.PARSER.BackQuoteLevel)
this.PARSER.inputReader == orig(this.PARSER.inputReader)
this.PARSER.f_caseSensitivity == orig(this.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.PARSER.f_lisp == orig(this)
this.PARSER.f_lisp == orig(this.PARSER.f_lisp)
this.PARSER.f_lisp.VERSION_NAME.toString == orig(this.PARSER.f_lisp.VERSION_NAME.toString)
this.PARSER.f_lisp.VERSION_TYPE.toString == orig(this.PARSER.f_lisp.VERSION_TYPE.toString)
this.PARSER.f_lisp.VERSION_DATE.toString == orig(this.PARSER.f_lisp.VERSION_DATE.toString)
this.PARSER.f_lisp.VERSION_URL.toString == orig(this.PARSER.f_lisp.VERSION_URL.toString)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.PARSER.f_lisp.userPrompt == orig(this.PARSER.f_lisp.userPrompt)
this.PARSER.f_lisp.packages == orig(this.PARSER.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.COMPILER == orig(this.PARSER.f_lisp.COMPILER)
this.COMPILER == orig(this.COMPILER)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
this.COMPILER.AND == orig(this.COMPILER.AND)
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.AND.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.DEFMACRO.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.IF.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LAMBDA.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.SET.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.LETREC.getClass().getName())
this.COMPILER.AND.getClass().getName() == orig(this.COMPILER.OR.getClass().getName())
this.COMPILER.DEFMACRO == orig(this.COMPILER.DEFMACRO)
this.COMPILER.IF == orig(this.COMPILER.IF)
this.COMPILER.LAMBDA == orig(this.COMPILER.LAMBDA)
this.COMPILER.LET == orig(this.COMPILER.LET)
this.COMPILER.SET == orig(this.COMPILER.SET)
this.COMPILER.LETREC == orig(this.COMPILER.LETREC)
this.COMPILER.OR == orig(this.COMPILER.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
this.COMPILER.DUMMY_FUNCTION == orig(this.COMPILER.DUMMY_FUNCTION)
this.COMPILER.DUMMY_FUNCTION.getClass().getName() == orig(this.COMPILER.DUMMY_FUNCTION.getClass().getName())
this.COMPILER.DUMMY_MACRO == orig(this.COMPILER.DUMMY_MACRO)
this.COMPILER.DUMMY_MACRO.getClass().getName() == orig(this.COMPILER.DUMMY_MACRO.getClass().getName())
this.COMPILER.CONS == orig(this.COMPILER.CONS)
this.COMPILER.CONS.getClass().getName() == orig(this.COMPILER.CONS.getClass().getName())
this.COMPILER.CONS.functionName == orig(this.COMPILER.CONS.functionName)
this.COMPILER.CONS.functionName.toString == orig(this.COMPILER.CONS.functionName.toString)
this.COMPILER.LIST == orig(this.COMPILER.LIST)
this.COMPILER.LIST.getClass().getName() == orig(this.COMPILER.LIST.getClass().getName())
this.COMPILER.LIST.functionName == orig(this.COMPILER.LIST.functionName)
this.COMPILER.LIST.functionName.toString == orig(this.COMPILER.LIST.functionName.toString)
this.COMPILER.SETQ == orig(this.COMPILER.SETQ)
this.COMPILER.SETQ.getClass().getName() == orig(this.COMPILER.SETQ.getClass().getName())
this.COMPILER.SETQ.functionName == orig(this.COMPILER.SETQ.functionName)
this.COMPILER.SETQ.functionName.toString == orig(this.COMPILER.SETQ.functionName.toString)
this.COMPILER.SpecialOperators == orig(this.COMPILER.SpecialOperators)
this.COMPILER.SpecialOperators.getClass().getName() == orig(this.COMPILER.SpecialOperators.getClass().getName())
this.COMPILER.WarnAboutSpecialsP == orig(this.COMPILER.WarnAboutSpecialsP)
this.COMPILER.f_lisp == orig(this)
this.COMPILER.f_lisp == orig(this.COMPILER.f_lisp)
this.COMPILER.f_lisp.VERSION_NAME == orig(this.COMPILER.f_lisp.VERSION_NAME)
this.COMPILER.f_lisp.VERSION_NAME.toString == orig(this.COMPILER.f_lisp.VERSION_NAME.toString)
this.COMPILER.f_lisp.VERSION_MAJOR == orig(this.COMPILER.f_lisp.VERSION_MAJOR)
this.COMPILER.f_lisp.VERSION_MINOR == orig(this.COMPILER.f_lisp.VERSION_MINOR)
this.COMPILER.f_lisp.VERSION_MICRO == orig(this.COMPILER.f_lisp.VERSION_MICRO)
this.COMPILER.f_lisp.VERSION_TYPE == orig(this.COMPILER.f_lisp.VERSION_TYPE)
this.COMPILER.f_lisp.VERSION_TYPE.toString == orig(this.COMPILER.f_lisp.VERSION_TYPE.toString)
this.COMPILER.f_lisp.VERSION_DATE == orig(this.COMPILER.f_lisp.VERSION_DATE)
this.COMPILER.f_lisp.VERSION_DATE.toString == orig(this.COMPILER.f_lisp.VERSION_DATE.toString)
this.COMPILER.f_lisp.VERSION_URL == orig(this.COMPILER.f_lisp.VERSION_URL)
this.COMPILER.f_lisp.VERSION_URL.toString == orig(this.COMPILER.f_lisp.VERSION_URL.toString)
this.COMPILER.f_lisp.useConsole == orig(this.COMPILER.f_lisp.useConsole)
this.COMPILER.f_lisp.PARSER == orig(this.COMPILER.f_lisp.PARSER)
this.COMPILER.f_lisp.COMPILER == orig(this.COMPILER.f_lisp.COMPILER)
this.COMPILER.f_lisp.SYMTAB == orig(this.COMPILER.f_lisp.SYMTAB)
this.COMPILER.f_lisp.MACHINE == orig(this.COMPILER.f_lisp.MACHINE)
this.COMPILER.f_lisp.SYSTEM_INFO == orig(this.COMPILER.f_lisp.SYSTEM_INFO)
this.COMPILER.f_lisp.prompt == orig(this.COMPILER.f_lisp.prompt)
this.COMPILER.f_lisp.userPrompt == orig(this.COMPILER.f_lisp.userPrompt)
this.COMPILER.f_lisp.packages == orig(this.COMPILER.f_lisp.packages)
this.COMPILER.requires == orig(this.COMPILER.requires)
this.COMPILER.requires.getClass().getName() == orig(this.COMPILER.requires.getClass().getName())
this.COMPILER.defaultPackages == orig(this.COMPILER.defaultPackages)
this.COMPILER.defaultPackages[] == orig(this.COMPILER.defaultPackages[])
this.COMPILER.defaultPackages.getClass().getName() == orig(this.COMPILER.defaultPackages.getClass().getName())
this.COMPILER.legalBlocks == orig(this.COMPILER.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.SYMTAB == orig(this.PARSER.f_lisp.SYMTAB)
this.SYMTAB == orig(this.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.MACHINE == orig(this.PARSER.f_lisp.MACHINE)
this.MACHINE == orig(this.MACHINE)
org.jatha.machine.SECDMachine.DEBUG == orig(org.jatha.machine.SECDMachine.DEBUG)
this.MACHINE.S == orig(this.MACHINE.S)
org.jatha.machine.SECDRegister.count == orig(org.jatha.machine.SECDRegister.count)
this.MACHINE.S.f_name == orig(this.MACHINE.S.f_name)
this.MACHINE.S.f_name.toString == orig(this.MACHINE.S.f_name.toString)
this.MACHINE.S.f_value == orig(this.MACHINE.S.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.E.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.C.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.D.f_value)
this.MACHINE.S.f_value == orig(this.MACHINE.X.f_value)
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.S.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.E.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.C.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.D.f_value.getClass().getName())
this.MACHINE.S.f_value.getClass().getName() == orig(this.MACHINE.X.f_value.getClass().getName())
this.MACHINE.E == orig(this.MACHINE.E)
this.MACHINE.E.f_name == orig(this.MACHINE.E.f_name)
this.MACHINE.E.f_name.toString == orig(this.MACHINE.E.f_name.toString)
this.MACHINE.C == orig(this.MACHINE.C)
this.MACHINE.C.f_name == orig(this.MACHINE.C.f_name)
this.MACHINE.C.f_name.toString == orig(this.MACHINE.C.f_name.toString)
this.MACHINE.D == orig(this.MACHINE.D)
this.MACHINE.D.f_name == orig(this.MACHINE.D.f_name)
this.MACHINE.D.f_name.toString == orig(this.MACHINE.D.f_name.toString)
this.MACHINE.X == orig(this.MACHINE.X)
this.MACHINE.X.f_name == orig(this.MACHINE.X.f_name)
this.MACHINE.X.f_name.toString == orig(this.MACHINE.X.f_name.toString)
this.MACHINE.B == orig(this.MACHINE.B)
org.jatha.machine.SECDMachine.BLK == orig(org.jatha.machine.SECDMachine.BLK)
org.jatha.machine.SECDMachine.BLK.getClass().getName() == orig(org.jatha.machine.SECDMachine.BLK.getClass().getName())
org.jatha.machine.SECDMachine.BLK.functionName == orig(org.jatha.machine.SECDMachine.BLK.functionName)
org.jatha.machine.SECDMachine.BLK.functionName.toString == orig(org.jatha.machine.SECDMachine.BLK.functionName.toString)
org.jatha.machine.SECDMachine.LDNIL == orig(org.jatha.machine.SECDMachine.LDNIL)
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDNIL.getClass().getName())
org.jatha.machine.SECDMachine.LDNIL.functionName == orig(org.jatha.machine.SECDMachine.LDNIL.functionName)
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == orig(org.jatha.machine.SECDMachine.LDNIL.functionName.toString)
org.jatha.machine.SECDMachine.LDT == orig(org.jatha.machine.SECDMachine.LDT)
org.jatha.machine.SECDMachine.LDT.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDT.getClass().getName())
org.jatha.machine.SECDMachine.LDT.functionName == orig(org.jatha.machine.SECDMachine.LDT.functionName)
org.jatha.machine.SECDMachine.LDT.functionName.toString == orig(org.jatha.machine.SECDMachine.LDT.functionName.toString)
org.jatha.machine.SECDMachine.LDC == orig(org.jatha.machine.SECDMachine.LDC)
org.jatha.machine.SECDMachine.LDC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDC.getClass().getName())
org.jatha.machine.SECDMachine.LDC.functionName == orig(org.jatha.machine.SECDMachine.LDC.functionName)
org.jatha.machine.SECDMachine.LDC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDC.functionName.toString)
org.jatha.machine.SECDMachine.ST == orig(org.jatha.machine.SECDMachine.ST)
org.jatha.machine.SECDMachine.ST.getClass().getName() == orig(org.jatha.machine.SECDMachine.ST.getClass().getName())
org.jatha.machine.SECDMachine.ST.functionName == orig(org.jatha.machine.SECDMachine.ST.functionName)
org.jatha.machine.SECDMachine.ST.functionName.toString == orig(org.jatha.machine.SECDMachine.ST.functionName.toString)
org.jatha.machine.SECDMachine.LDR == orig(org.jatha.machine.SECDMachine.LDR)
org.jatha.machine.SECDMachine.LDR.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDR.getClass().getName())
org.jatha.machine.SECDMachine.LDR.functionName == orig(org.jatha.machine.SECDMachine.LDR.functionName)
org.jatha.machine.SECDMachine.LDR.functionName.toString == orig(org.jatha.machine.SECDMachine.LDR.functionName.toString)
org.jatha.machine.SECDMachine.LD == orig(org.jatha.machine.SECDMachine.LD)
org.jatha.machine.SECDMachine.LD.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD.getClass().getName())
org.jatha.machine.SECDMachine.LD.functionName == orig(org.jatha.machine.SECDMachine.LD.functionName)
org.jatha.machine.SECDMachine.LD.functionName.toString == orig(org.jatha.machine.SECDMachine.LD.functionName.toString)
org.jatha.machine.SECDMachine.LD_GLOBAL == orig(org.jatha.machine.SECDMachine.LD_GLOBAL)
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName())
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName)
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString)
org.jatha.machine.SECDMachine.LDF == orig(org.jatha.machine.SECDMachine.LDF)
org.jatha.machine.SECDMachine.LDF.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDF.getClass().getName())
org.jatha.machine.SECDMachine.LDF.functionName == orig(org.jatha.machine.SECDMachine.LDF.functionName)
org.jatha.machine.SECDMachine.LDF.functionName.toString == orig(org.jatha.machine.SECDMachine.LDF.functionName.toString)
org.jatha.machine.SECDMachine.LDFC == orig(org.jatha.machine.SECDMachine.LDFC)
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDFC.getClass().getName())
org.jatha.machine.SECDMachine.LDFC.functionName == orig(org.jatha.machine.SECDMachine.LDFC.functionName)
org.jatha.machine.SECDMachine.LDFC.functionName.toString == orig(org.jatha.machine.SECDMachine.LDFC.functionName.toString)
org.jatha.machine.SECDMachine.SEL == orig(org.jatha.machine.SECDMachine.SEL)
org.jatha.machine.SECDMachine.SEL.getClass().getName() == orig(org.jatha.machine.SECDMachine.SEL.getClass().getName())
org.jatha.machine.SECDMachine.SEL.functionName == orig(org.jatha.machine.SECDMachine.SEL.functionName)
org.jatha.machine.SECDMachine.SEL.functionName.toString == orig(org.jatha.machine.SECDMachine.SEL.functionName.toString)
org.jatha.machine.SECDMachine.TEST == orig(org.jatha.machine.SECDMachine.TEST)
org.jatha.machine.SECDMachine.TEST.getClass().getName() == orig(org.jatha.machine.SECDMachine.TEST.getClass().getName())
org.jatha.machine.SECDMachine.TEST.functionName == orig(org.jatha.machine.SECDMachine.TEST.functionName)
org.jatha.machine.SECDMachine.TEST.functionName.toString == orig(org.jatha.machine.SECDMachine.TEST.functionName.toString)
org.jatha.machine.SECDMachine.JOIN == orig(org.jatha.machine.SECDMachine.JOIN)
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == orig(org.jatha.machine.SECDMachine.JOIN.getClass().getName())
org.jatha.machine.SECDMachine.JOIN.functionName == orig(org.jatha.machine.SECDMachine.JOIN.functionName)
org.jatha.machine.SECDMachine.JOIN.functionName.toString == orig(org.jatha.machine.SECDMachine.JOIN.functionName.toString)
org.jatha.machine.SECDMachine.AP == orig(org.jatha.machine.SECDMachine.AP)
org.jatha.machine.SECDMachine.AP.getClass().getName() == orig(org.jatha.machine.SECDMachine.AP.getClass().getName())
org.jatha.machine.SECDMachine.AP.functionName == orig(org.jatha.machine.SECDMachine.AP.functionName)
org.jatha.machine.SECDMachine.AP.functionName.toString == orig(org.jatha.machine.SECDMachine.AP.functionName.toString)
org.jatha.machine.SECDMachine.RAP == orig(org.jatha.machine.SECDMachine.RAP)
org.jatha.machine.SECDMachine.RAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.RAP.getClass().getName())
org.jatha.machine.SECDMachine.RAP.functionName == orig(org.jatha.machine.SECDMachine.RAP.functionName)
org.jatha.machine.SECDMachine.RAP.functionName.toString == orig(org.jatha.machine.SECDMachine.RAP.functionName.toString)
org.jatha.machine.SECDMachine.RTN == orig(org.jatha.machine.SECDMachine.RTN)
org.jatha.machine.SECDMachine.RTN.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN.getClass().getName())
org.jatha.machine.SECDMachine.RTN.functionName == orig(org.jatha.machine.SECDMachine.RTN.functionName)
org.jatha.machine.SECDMachine.RTN.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IF == orig(org.jatha.machine.SECDMachine.RTN_IF)
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IF.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IF.functionName == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName)
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IF.functionName.toString)
org.jatha.machine.SECDMachine.RTN_IT == orig(org.jatha.machine.SECDMachine.RTN_IT)
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IT.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IT.functionName == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName)
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == orig(org.jatha.machine.SECDMachine.RTN_IT.functionName.toString)
org.jatha.machine.SECDMachine.DAP == orig(org.jatha.machine.SECDMachine.DAP)
org.jatha.machine.SECDMachine.DAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.DAP.getClass().getName())
org.jatha.machine.SECDMachine.DAP.functionName == orig(org.jatha.machine.SECDMachine.DAP.functionName)
org.jatha.machine.SECDMachine.DAP.functionName.toString == orig(org.jatha.machine.SECDMachine.DAP.functionName.toString)
org.jatha.machine.SECDMachine.DUM == orig(org.jatha.machine.SECDMachine.DUM)
org.jatha.machine.SECDMachine.DUM.getClass().getName() == orig(org.jatha.machine.SECDMachine.DUM.getClass().getName())
org.jatha.machine.SECDMachine.DUM.functionName == orig(org.jatha.machine.SECDMachine.DUM.functionName)
org.jatha.machine.SECDMachine.DUM.functionName.toString == orig(org.jatha.machine.SECDMachine.DUM.functionName.toString)
org.jatha.machine.SECDMachine.LIS == orig(org.jatha.machine.SECDMachine.LIS)
org.jatha.machine.SECDMachine.LIS.getClass().getName() == orig(org.jatha.machine.SECDMachine.LIS.getClass().getName())
org.jatha.machine.SECDMachine.LIS.functionName == orig(org.jatha.machine.SECDMachine.LIS.functionName)
org.jatha.machine.SECDMachine.LIS.functionName.toString == orig(org.jatha.machine.SECDMachine.LIS.functionName.toString)
org.jatha.machine.SECDMachine.SP_BIND == orig(org.jatha.machine.SECDMachine.SP_BIND)
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_BIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_BIND.functionName == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName)
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_BIND.functionName.toString)
org.jatha.machine.SECDMachine.SP_UNBIND == orig(org.jatha.machine.SECDMachine.SP_UNBIND)
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_UNBIND.functionName == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName)
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == orig(org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString)
org.jatha.machine.SECDMachine.STOP == orig(org.jatha.machine.SECDMachine.STOP)
org.jatha.machine.SECDMachine.STOP.getClass().getName() == orig(org.jatha.machine.SECDMachine.STOP.getClass().getName())
org.jatha.machine.SECDMachine.STOP.functionName == orig(org.jatha.machine.SECDMachine.STOP.functionName)
org.jatha.machine.SECDMachine.STOP.functionName.toString == orig(org.jatha.machine.SECDMachine.STOP.functionName.toString)
this.SYSTEM_INFO == orig(this.PARSER.f_lisp.SYSTEM_INFO)
this.SYSTEM_INFO == orig(this.SYSTEM_INFO)
this.prompt == orig(this.PARSER.f_lisp.prompt)
this.prompt == orig(this.prompt)
this.prompt.getClass().getName() == orig(this.PARSER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.COMPILER.f_lisp.prompt.getClass().getName())
this.prompt.getClass().getName() == orig(this.prompt.getClass().getName())
this.userPrompt == orig(this.userPrompt)
this.packages == orig(this.packages)
arg0.toString == orig(arg0.toString)
this.PARSER has only one value
this.PARSER != null
this.COMPILER.f_lisp.prompt has only one value
return != null
===========================================================================
org.jatha.LispProcessor:::OBJECT
===========================================================================
org.jatha.LispProcessor.LispProcessor():::EXIT
===========================================================================
org.jatha.LispProcessor.cons(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::ENTER
arg0 has only one value
arg0.getClass().getName() == org.jatha.dynatype.StandardLispT.class
arg1 has only one value
arg1.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
===========================================================================
org.jatha.LispProcessor.cons(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::EXIT
return.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.LispProcessor.string(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.LispProcessor.string(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
return != null
return.getClass().getName() == org.jatha.dynatype.StandardLispString.class
===========================================================================
org.jatha.LispProcessor.symbol(java.lang.String):::ENTER
===========================================================================
org.jatha.LispProcessor.symbol(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
return.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
===========================================================================
org.jatha.compile.LispCompiler$1$1:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$10:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$10.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$10.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$11:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$11.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$11.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$12:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$12.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$12.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$1.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$1.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$2:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$2.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$2.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$3:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$3.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$3.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$4:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$4.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$4.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$5:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$5.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$5.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$6:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$6.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$6.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$7:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$7.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$7.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$8:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$8.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$8.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1$9:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$9.(org.jatha.compile.LispCompiler$1):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler$1.this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1$9.(org.jatha.compile.LispCompiler$1):::EXIT
org.jatha.compile.LispCompiler$1.this == orig(org.jatha.compile.LispCompiler$1.this)
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$1:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.this.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == null
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == null
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt == null
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$10:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "NOT"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$10.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "NOT"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$10.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
org.jatha.compile.LispCompiler.this.LIST.functionName == orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
org.jatha.compile.LispCompiler.this.SETQ.functionName == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "NOT"
===========================================================================
org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == null
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == null
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt == null
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$1.(org.jatha.compile.LispCompiler):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$2:::OBJECT
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp == null
org.jatha.Lisp.DEBUG == false
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages == null
org.jatha.compile.LispCompiler.this.legalBlocks == null
org.jatha.compile.LispCompiler.$assertionsDisabled == false
===========================================================================
org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::ENTER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.this.AND == null
org.jatha.compile.LispCompiler.this.DEFMACRO == null
org.jatha.compile.LispCompiler.this.IF == null
org.jatha.compile.LispCompiler.this.LAMBDA == null
org.jatha.compile.LispCompiler.this.LET == null
org.jatha.compile.LispCompiler.this.SET == null
org.jatha.compile.LispCompiler.this.LETREC == null
org.jatha.compile.LispCompiler.this.OR == null
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == null
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == null
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators == null
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp == null
org.jatha.Lisp.DEBUG == false
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages == null
org.jatha.compile.LispCompiler.this.legalBlocks == null
org.jatha.compile.LispCompiler.$assertionsDisabled == false
===========================================================================
org.jatha.compile.LispCompiler$2.(org.jatha.compile.LispCompiler):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
===========================================================================
org.jatha.compile.LispCompiler$3:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.minNumberOfArgs == 1
this.maxNumberOfArgs == 9223372036854775807L
this.functionName has only one value
this.functionName.toString == "REQUIRE"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$3.(org.jatha.compile.LispCompiler, java.lang.String, long):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "REQUIRE"
arg2 == 1
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$3.(org.jatha.compile.LispCompiler, java.lang.String, long):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "REQUIRE"
===========================================================================
org.jatha.compile.LispCompiler$4:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "CONS"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$4.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS == null
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "CONS"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$4.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "CONS"
===========================================================================
org.jatha.compile.LispCompiler$5:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.minNumberOfArgs == 0
this.maxNumberOfArgs == 9223372036854775807L
this.functionName has only one value
this.functionName.toString == "LIST"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$5.(org.jatha.compile.LispCompiler, java.lang.String, long):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST == null
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "LIST"
arg2 == 0
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$5.(org.jatha.compile.LispCompiler, java.lang.String, long):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "LIST"
===========================================================================
org.jatha.compile.LispCompiler$6:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "SETQ"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$6.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ == null
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "SETQ"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$6.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
org.jatha.compile.LispCompiler.this.LIST.functionName == orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "SETQ"
===========================================================================
org.jatha.compile.LispCompiler$7:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "EXIT"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$7.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "EXIT"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$7.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
org.jatha.compile.LispCompiler.this.LIST.functionName == orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
org.jatha.compile.LispCompiler.this.SETQ.functionName == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "EXIT"
===========================================================================
org.jatha.compile.LispCompiler$8:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "EQ"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$8.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "EQ"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$8.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
org.jatha.compile.LispCompiler.this.LIST.functionName == orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
org.jatha.compile.LispCompiler.this.SETQ.functionName == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "EQ"
===========================================================================
org.jatha.compile.LispCompiler$9:::OBJECT
this has only one value
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.functionName has only one value
this.functionName.toString == "EQL"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$9.(org.jatha.compile.LispCompiler, java.lang.String):::ENTER
org.jatha.compile.LispCompiler.this has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.AND has only one value
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DEFMACRO has only one value
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.IF has only one value
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LAMBDA has only one value
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LET has only one value
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.SET has only one value
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.LETREC has only one value
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.OR has only one value
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION has only one value
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
org.jatha.compile.LispCompiler.this.DUMMY_MACRO has only one value
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
org.jatha.compile.LispCompiler.this.CONS has only one value
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
org.jatha.compile.LispCompiler.this.CONS.functionName has only one value
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == "CONS"
org.jatha.compile.LispCompiler.this.LIST has only one value
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
org.jatha.compile.LispCompiler.this.LIST.functionName has only one value
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == "LIST"
org.jatha.compile.LispCompiler.this.SETQ has only one value
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
org.jatha.compile.LispCompiler.this.SETQ.functionName has only one value
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == "SETQ"
org.jatha.compile.LispCompiler.this.SpecialOperators has only one value
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == false
org.jatha.compile.LispCompiler.this.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == "Jatha"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == 3
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == 0
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == 1
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == ""
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL has only one value
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == true
org.jatha.compile.LispCompiler.this.f_lisp.PARSER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB has only one value
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE has only one value
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.compile.LispCompiler.this.f_lisp.prompt has only one value
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == null
org.jatha.compile.LispCompiler.this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
org.jatha.compile.LispCompiler.this.requires has only one value
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == java.util.HashSet.class
org.jatha.compile.LispCompiler.this.defaultPackages has only one value
org.jatha.compile.LispCompiler.this.defaultPackages[] contains no nulls and has only one value, of length 3
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.jatha.compile.LispCompiler.this.defaultPackages[].getClass().getName() elements == java.lang.String.class
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
org.jatha.compile.LispCompiler.this.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg1 has only one value
arg1.toString == "EQL"
size(org.jatha.compile.LispCompiler.this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler$9.(org.jatha.compile.LispCompiler, java.lang.String):::EXIT
org.jatha.compile.LispCompiler.this == orig(org.jatha.compile.LispCompiler.this)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.this.AND == orig(org.jatha.compile.LispCompiler.this.AND)
org.jatha.compile.LispCompiler.this.AND.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.AND.getClass().getName())
org.jatha.compile.LispCompiler.this.DEFMACRO == orig(org.jatha.compile.LispCompiler.this.DEFMACRO)
org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.IF == orig(org.jatha.compile.LispCompiler.this.IF)
org.jatha.compile.LispCompiler.this.IF.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.IF.getClass().getName())
org.jatha.compile.LispCompiler.this.LAMBDA == orig(org.jatha.compile.LispCompiler.this.LAMBDA)
org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.this.LET == orig(org.jatha.compile.LispCompiler.this.LET)
org.jatha.compile.LispCompiler.this.LET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LET.getClass().getName())
org.jatha.compile.LispCompiler.this.SET == orig(org.jatha.compile.LispCompiler.this.SET)
org.jatha.compile.LispCompiler.this.SET.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SET.getClass().getName())
org.jatha.compile.LispCompiler.this.LETREC == orig(org.jatha.compile.LispCompiler.this.LETREC)
org.jatha.compile.LispCompiler.this.LETREC.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.this.OR == orig(org.jatha.compile.LispCompiler.this.OR)
org.jatha.compile.LispCompiler.this.OR.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION)
org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_FUNCTION.getClass().getName())
org.jatha.compile.LispCompiler.this.DUMMY_MACRO == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO)
org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.DUMMY_MACRO.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS == orig(org.jatha.compile.LispCompiler.this.CONS)
org.jatha.compile.LispCompiler.this.CONS.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.CONS.getClass().getName())
org.jatha.compile.LispCompiler.this.CONS.functionName == orig(org.jatha.compile.LispCompiler.this.CONS.functionName)
org.jatha.compile.LispCompiler.this.CONS.functionName.toString == orig(org.jatha.compile.LispCompiler.this.CONS.functionName.toString)
org.jatha.compile.LispCompiler.this.LIST == orig(org.jatha.compile.LispCompiler.this.LIST)
org.jatha.compile.LispCompiler.this.LIST.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.LIST.getClass().getName())
org.jatha.compile.LispCompiler.this.LIST.functionName == orig(org.jatha.compile.LispCompiler.this.LIST.functionName)
org.jatha.compile.LispCompiler.this.LIST.functionName.toString == orig(org.jatha.compile.LispCompiler.this.LIST.functionName.toString)
org.jatha.compile.LispCompiler.this.SETQ == orig(org.jatha.compile.LispCompiler.this.SETQ)
org.jatha.compile.LispCompiler.this.SETQ.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SETQ.getClass().getName())
org.jatha.compile.LispCompiler.this.SETQ.functionName == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName)
org.jatha.compile.LispCompiler.this.SETQ.functionName.toString == orig(org.jatha.compile.LispCompiler.this.SETQ.functionName.toString)
org.jatha.compile.LispCompiler.this.SpecialOperators == orig(org.jatha.compile.LispCompiler.this.SpecialOperators)
org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.SpecialOperators.getClass().getName())
org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP == orig(org.jatha.compile.LispCompiler.this.WarnAboutSpecialsP)
org.jatha.compile.LispCompiler.this.f_lisp == orig(org.jatha.compile.LispCompiler.this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_NAME.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MAJOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MINOR)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_MICRO)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_TYPE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_DATE.toString)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL)
org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString == orig(org.jatha.compile.LispCompiler.this.f_lisp.VERSION_URL.toString)
org.jatha.compile.LispCompiler.this.f_lisp.useConsole == orig(org.jatha.compile.LispCompiler.this.f_lisp.useConsole)
org.jatha.compile.LispCompiler.this.f_lisp.PARSER == orig(org.jatha.compile.LispCompiler.this.f_lisp.PARSER)
org.jatha.compile.LispCompiler.this.f_lisp.COMPILER == orig(org.jatha.compile.LispCompiler.this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYMTAB)
org.jatha.compile.LispCompiler.this.f_lisp.MACHINE == orig(org.jatha.compile.LispCompiler.this.f_lisp.MACHINE)
org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO == orig(org.jatha.compile.LispCompiler.this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.compile.LispCompiler.this.f_lisp.prompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt)
org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.f_lisp.prompt.getClass().getName())
org.jatha.compile.LispCompiler.this.f_lisp.userPrompt == orig(org.jatha.compile.LispCompiler.this.f_lisp.userPrompt)
org.jatha.compile.LispCompiler.this.f_lisp.packages == orig(org.jatha.compile.LispCompiler.this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.compile.LispCompiler.this.requires == orig(org.jatha.compile.LispCompiler.this.requires)
org.jatha.compile.LispCompiler.this.requires.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.requires.getClass().getName())
org.jatha.compile.LispCompiler.this.defaultPackages == orig(org.jatha.compile.LispCompiler.this.defaultPackages)
org.jatha.compile.LispCompiler.this.defaultPackages[] == orig(org.jatha.compile.LispCompiler.this.defaultPackages[])
org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName() == orig(org.jatha.compile.LispCompiler.this.defaultPackages.getClass().getName())
org.jatha.compile.LispCompiler.this.legalBlocks == orig(org.jatha.compile.LispCompiler.this.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
arg1.toString == orig(arg1.toString)
arg1.toString == "EQL"
===========================================================================
org.jatha.compile.LispCompiler:::CLASS
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN != null
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN != null
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK != null
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST != null
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
===========================================================================
org.jatha.compile.LispCompiler:::OBJECT
this has only one value
this.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
this.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
this.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
this.CONS.functionName has only one value
this.CONS.functionName != null
this.CONS.functionName.toString == "CONS"
this.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
this.LIST.functionName has only one value
this.LIST.functionName != null
this.LIST.functionName.toString == "LIST"
this.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
this.SETQ.functionName has only one value
this.SETQ.functionName != null
this.SETQ.functionName.toString == "SETQ"
this.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
this.WarnAboutSpecialsP == false
this.f_lisp has only one value
this.f_lisp != null
org.jatha.Lisp.DEBUG == false
this.f_lisp.VERSION_NAME has only one value
this.f_lisp.VERSION_NAME != null
this.f_lisp.VERSION_NAME.toString == "Jatha"
this.f_lisp.VERSION_MAJOR == 3
this.f_lisp.VERSION_MINOR == 0
this.f_lisp.VERSION_MICRO == 1
this.f_lisp.VERSION_TYPE has only one value
this.f_lisp.VERSION_TYPE != null
this.f_lisp.VERSION_TYPE.toString == ""
this.f_lisp.VERSION_DATE has only one value
this.f_lisp.VERSION_DATE != null
this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
this.f_lisp.VERSION_URL has only one value
this.f_lisp.VERSION_URL != null
this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.f_lisp.useConsole == true
this.f_lisp.PARSER has only one value
this.f_lisp.PARSER != null
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN != null
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN != null
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN != null
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.PARSER.BackQuoteLevel == 0
this.f_lisp.PARSER.inputReader has only one value
this.f_lisp.PARSER.inputReader != null
this.f_lisp.PARSER.f_caseSensitivity == 1
org.jatha.read.LispParser.f_myParser == null
this.f_lisp.PARSER.f_lisp has only one value
this.f_lisp.PARSER.f_lisp != null
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable != null
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
org.jatha.read.LispParser.REAL_PATTERN != null
this.f_lisp.COMPILER.AND has only one value
this.f_lisp.COMPILER.AND != null
this.f_lisp.COMPILER.AND.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.DEFMACRO has only one value
this.f_lisp.COMPILER.DEFMACRO != null
this.f_lisp.COMPILER.DEFMACRO.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.IF has only one value
this.f_lisp.COMPILER.IF != null
this.f_lisp.COMPILER.IF.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.LAMBDA has only one value
this.f_lisp.COMPILER.LAMBDA != null
this.f_lisp.COMPILER.LAMBDA.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.LET has only one value
this.f_lisp.COMPILER.LET != null
this.f_lisp.COMPILER.LET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.SET has only one value
this.f_lisp.COMPILER.SET != null
this.f_lisp.COMPILER.SET.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.LETREC has only one value
this.f_lisp.COMPILER.LETREC != null
this.f_lisp.COMPILER.LETREC.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.OR has only one value
this.f_lisp.COMPILER.OR != null
this.f_lisp.COMPILER.OR.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
this.f_lisp.COMPILER.DUMMY_FUNCTION has only one value
this.f_lisp.COMPILER.DUMMY_FUNCTION != null
this.f_lisp.COMPILER.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
this.f_lisp.COMPILER.DUMMY_MACRO has only one value
this.f_lisp.COMPILER.DUMMY_MACRO != null
this.f_lisp.COMPILER.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
this.f_lisp.COMPILER.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
this.f_lisp.COMPILER.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
this.f_lisp.COMPILER.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
this.f_lisp.COMPILER.SpecialOperators has only one value
this.f_lisp.COMPILER.SpecialOperators != null
this.f_lisp.COMPILER.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
this.f_lisp.COMPILER.WarnAboutSpecialsP == false
this.f_lisp.COMPILER.f_lisp has only one value
this.f_lisp.COMPILER.f_lisp != null
this.f_lisp.COMPILER.requires has only one value
this.f_lisp.COMPILER.requires != null
this.f_lisp.COMPILER.requires.getClass().getName() == java.util.HashSet.class
this.f_lisp.COMPILER.defaultPackages has only one value
this.f_lisp.COMPILER.defaultPackages != null
this.f_lisp.COMPILER.defaultPackages[] contains no nulls and has only one value, of length 3
this.f_lisp.COMPILER.defaultPackages[] elements != null
this.f_lisp.COMPILER.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.f_lisp.COMPILER.defaultPackages[].getClass().getName() elements == java.lang.String.class
this.f_lisp.COMPILER.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
this.f_lisp.COMPILER.legalBlocks has only one value
this.f_lisp.COMPILER.legalBlocks != null
org.jatha.compile.LispCompiler.$assertionsDisabled == false
this.f_lisp.SYMTAB has only one value
this.f_lisp.SYMTAB != null
org.jatha.util.SymbolTable.$assertionsDisabled == false
org.jatha.machine.SECDMachine.DEBUG == false
this.f_lisp.MACHINE.S has only one value
this.f_lisp.MACHINE.S != null
this.f_lisp.MACHINE.E has only one value
this.f_lisp.MACHINE.E != null
this.f_lisp.MACHINE.C has only one value
this.f_lisp.MACHINE.C != null
this.f_lisp.MACHINE.D has only one value
this.f_lisp.MACHINE.D != null
this.f_lisp.MACHINE.X has only one value
this.f_lisp.MACHINE.X != null
this.f_lisp.MACHINE.B has only one value
this.f_lisp.MACHINE.B != null
org.jatha.machine.SECDMachine.BLK has only one value
org.jatha.machine.SECDMachine.BLK != null
org.jatha.machine.SECDMachine.BLK.getClass().getName() == org.jatha.machine.SECDMachine$1.class
org.jatha.machine.SECDMachine.LDNIL has only one value
org.jatha.machine.SECDMachine.LDNIL != null
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == org.jatha.machine.SECDMachine$2.class
org.jatha.machine.SECDMachine.LDT has only one value
org.jatha.machine.SECDMachine.LDT != null
org.jatha.machine.SECDMachine.LDT.getClass().getName() == org.jatha.machine.SECDMachine$3.class
org.jatha.machine.SECDMachine.LDC has only one value
org.jatha.machine.SECDMachine.LDC != null
org.jatha.machine.SECDMachine.LDC.getClass().getName() == org.jatha.machine.SECDMachine$4.class
org.jatha.machine.SECDMachine.ST has only one value
org.jatha.machine.SECDMachine.ST != null
org.jatha.machine.SECDMachine.ST.getClass().getName() == org.jatha.machine.SECDMachine$5.class
org.jatha.machine.SECDMachine.LDR has only one value
org.jatha.machine.SECDMachine.LDR != null
org.jatha.machine.SECDMachine.LDR.getClass().getName() == org.jatha.machine.SECDMachine$6.class
org.jatha.machine.SECDMachine.LD has only one value
org.jatha.machine.SECDMachine.LD != null
org.jatha.machine.SECDMachine.LD.getClass().getName() == org.jatha.machine.SECDMachine$7.class
org.jatha.machine.SECDMachine.LD_GLOBAL has only one value
org.jatha.machine.SECDMachine.LD_GLOBAL != null
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == org.jatha.machine.SECDMachine$8.class
org.jatha.machine.SECDMachine.LDF has only one value
org.jatha.machine.SECDMachine.LDF != null
org.jatha.machine.SECDMachine.LDF.getClass().getName() == org.jatha.machine.SECDMachine$9.class
org.jatha.machine.SECDMachine.LDFC has only one value
org.jatha.machine.SECDMachine.LDFC != null
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == org.jatha.machine.SECDMachine$10.class
org.jatha.machine.SECDMachine.SEL has only one value
org.jatha.machine.SECDMachine.SEL != null
org.jatha.machine.SECDMachine.SEL.getClass().getName() == org.jatha.machine.SECDMachine$11.class
org.jatha.machine.SECDMachine.TEST has only one value
org.jatha.machine.SECDMachine.TEST != null
org.jatha.machine.SECDMachine.TEST.getClass().getName() == org.jatha.machine.SECDMachine$12.class
org.jatha.machine.SECDMachine.JOIN has only one value
org.jatha.machine.SECDMachine.JOIN != null
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == org.jatha.machine.SECDMachine$13.class
org.jatha.machine.SECDMachine.AP has only one value
org.jatha.machine.SECDMachine.AP != null
org.jatha.machine.SECDMachine.AP.getClass().getName() == org.jatha.machine.SECDMachine$14.class
org.jatha.machine.SECDMachine.RAP has only one value
org.jatha.machine.SECDMachine.RAP != null
org.jatha.machine.SECDMachine.RAP.getClass().getName() == org.jatha.machine.SECDMachine$15.class
org.jatha.machine.SECDMachine.RTN has only one value
org.jatha.machine.SECDMachine.RTN != null
org.jatha.machine.SECDMachine.RTN.getClass().getName() == org.jatha.machine.SECDMachine$16.class
org.jatha.machine.SECDMachine.RTN_IF has only one value
org.jatha.machine.SECDMachine.RTN_IF != null
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == org.jatha.machine.SECDMachine$17.class
org.jatha.machine.SECDMachine.RTN_IT has only one value
org.jatha.machine.SECDMachine.RTN_IT != null
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == org.jatha.machine.SECDMachine$18.class
org.jatha.machine.SECDMachine.DAP has only one value
org.jatha.machine.SECDMachine.DAP != null
org.jatha.machine.SECDMachine.DAP.getClass().getName() == org.jatha.machine.SECDMachine$19.class
org.jatha.machine.SECDMachine.DUM has only one value
org.jatha.machine.SECDMachine.DUM != null
org.jatha.machine.SECDMachine.DUM.getClass().getName() == org.jatha.machine.SECDMachine$20.class
org.jatha.machine.SECDMachine.LIS has only one value
org.jatha.machine.SECDMachine.LIS != null
org.jatha.machine.SECDMachine.LIS.getClass().getName() == org.jatha.machine.SECDMachine$21.class
org.jatha.machine.SECDMachine.SP_BIND has only one value
org.jatha.machine.SECDMachine.SP_BIND != null
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == org.jatha.machine.SECDMachine$22.class
org.jatha.machine.SECDMachine.SP_UNBIND has only one value
org.jatha.machine.SECDMachine.SP_UNBIND != null
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == org.jatha.machine.SECDMachine$23.class
org.jatha.machine.SECDMachine.STOP has only one value
org.jatha.machine.SECDMachine.STOP != null
org.jatha.machine.SECDMachine.STOP.getClass().getName() == org.jatha.machine.SECDMachine$24.class
this.f_lisp.SYSTEM_INFO has only one value
this.f_lisp.SYSTEM_INFO != null
org.jatha.Lisp.APROPOS_TAB == 30
this.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.f_lisp.userPrompt == null
this.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
this.requires has only one value
this.requires != null
this.requires.getClass().getName() == java.util.HashSet.class
this.defaultPackages has only one value
this.defaultPackages != null
this.defaultPackages[] contains no nulls and has only one value, of length 3
this.defaultPackages[] elements != null
this.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.defaultPackages[].getClass().getName() elements == java.lang.String.class
this.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
this.legalBlocks has only one value
this.legalBlocks != null
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
size(this.f_lisp.COMPILER.defaultPackages[]) == 3
size(this.defaultPackages[]) == 3
===========================================================================
org.jatha.compile.LispCompiler.LispCompiler(org.jatha.Lisp):::ENTER
arg0 has only one value
org.jatha.Lisp.DEBUG == false
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER has only one value
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
arg0.PARSER.BackQuoteLevel == 0
arg0.PARSER.inputReader has only one value
arg0.PARSER.f_caseSensitivity == 1
org.jatha.read.LispParser.f_myParser == null
arg0.PARSER.f_lisp has only one value
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
arg0.COMPILER == null
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.BLOCK has only one value
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.AMP_REST has only one value
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.$assertionsDisabled == false
arg0.SYMTAB has only one value
org.jatha.util.SymbolTable.$assertionsDisabled == false
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
===========================================================================
org.jatha.compile.LispCompiler.LispCompiler(org.jatha.Lisp):::EXIT
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
arg0.VERSION_NAME == orig(arg0.VERSION_NAME)
arg0.VERSION_NAME.toString == orig(arg0.VERSION_NAME.toString)
arg0.VERSION_MAJOR == orig(arg0.VERSION_MAJOR)
arg0.VERSION_MINOR == orig(arg0.VERSION_MINOR)
arg0.VERSION_MICRO == orig(arg0.VERSION_MICRO)
arg0.VERSION_TYPE == orig(arg0.VERSION_TYPE)
arg0.VERSION_TYPE.toString == orig(arg0.VERSION_TYPE.toString)
arg0.VERSION_DATE == orig(arg0.VERSION_DATE)
arg0.VERSION_DATE.toString == orig(arg0.VERSION_DATE.toString)
arg0.VERSION_URL == orig(arg0.VERSION_URL)
arg0.VERSION_URL.toString == orig(arg0.VERSION_URL.toString)
arg0.useConsole == orig(arg0.useConsole)
arg0.PARSER == orig(arg0.PARSER)
arg0.PARSER.BackQuoteLevel == orig(arg0.PARSER.BackQuoteLevel)
arg0.PARSER.inputReader == orig(arg0.PARSER.inputReader)
arg0.PARSER.f_caseSensitivity == orig(arg0.PARSER.f_caseSensitivity)
arg0.PARSER.f_lisp == orig(arg0.PARSER.f_lisp)
arg0.COMPILER == orig(arg0.COMPILER)
arg0.SYMTAB == orig(arg0.SYMTAB)
arg0.MACHINE == orig(arg0.MACHINE)
arg0.SYSTEM_INFO == orig(arg0.SYSTEM_INFO)
arg0.prompt == orig(arg0.prompt)
arg0.userPrompt == orig(arg0.userPrompt)
arg0.packages == orig(arg0.packages)
this.AND has only one value
this.DEFMACRO has only one value
this.IF has only one value
this.LAMBDA has only one value
this.LET has only one value
this.SET has only one value
this.LETREC has only one value
this.OR has only one value
this.DUMMY_FUNCTION has only one value
this.DUMMY_MACRO has only one value
this.CONS == null
this.LIST == null
this.SETQ == null
this.SpecialOperators has only one value
this.f_lisp.COMPILER == null
this.f_lisp.MACHINE == null
this.f_lisp.prompt == null
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER has only one value
arg0.PARSER.BackQuoteLevel == 0
arg0.PARSER.inputReader has only one value
arg0.PARSER.f_caseSensitivity == 1
arg0.PARSER.f_lisp has only one value
arg0.COMPILER == null
arg0.SYMTAB has only one value
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
===========================================================================
org.jatha.compile.LispCompiler.Register(org.jatha.compile.LispPrimitive):::ENTER
this.AND has only one value
this.DEFMACRO has only one value
this.IF has only one value
this.LAMBDA has only one value
this.LET has only one value
this.SET has only one value
this.LETREC has only one value
this.OR has only one value
this.DUMMY_FUNCTION has only one value
this.DUMMY_MACRO has only one value
this.SpecialOperators has only one value
this.f_lisp.COMPILER has only one value
this.f_lisp.MACHINE has only one value
this.f_lisp.prompt has only one value
===========================================================================
org.jatha.compile.LispCompiler.Register(org.jatha.compile.LispPrimitive):::EXIT
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
this.AND == orig(this.AND)
this.AND.getClass().getName() == orig(this.AND.getClass().getName())
this.DEFMACRO == orig(this.DEFMACRO)
this.DEFMACRO.getClass().getName() == orig(this.DEFMACRO.getClass().getName())
this.IF == orig(this.IF)
this.IF.getClass().getName() == orig(this.IF.getClass().getName())
this.LAMBDA == orig(this.LAMBDA)
this.LAMBDA.getClass().getName() == orig(this.LAMBDA.getClass().getName())
this.LET == orig(this.LET)
this.LET.getClass().getName() == orig(this.LET.getClass().getName())
this.SET == orig(this.SET)
this.SET.getClass().getName() == orig(this.SET.getClass().getName())
this.LETREC == orig(this.LETREC)
this.LETREC.getClass().getName() == orig(this.LETREC.getClass().getName())
this.OR == orig(this.OR)
this.OR.getClass().getName() == orig(this.OR.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
this.DUMMY_FUNCTION == orig(this.DUMMY_FUNCTION)
this.DUMMY_FUNCTION.getClass().getName() == orig(this.DUMMY_FUNCTION.getClass().getName())
this.DUMMY_MACRO == orig(this.DUMMY_MACRO)
this.DUMMY_MACRO.getClass().getName() == orig(this.DUMMY_MACRO.getClass().getName())
this.CONS == orig(this.CONS)
this.CONS.getClass().getName() == orig(this.CONS.getClass().getName())
this.CONS.functionName == orig(this.CONS.functionName)
this.CONS.functionName.toString == orig(this.CONS.functionName.toString)
this.LIST == orig(this.LIST)
this.LIST.getClass().getName() == orig(this.LIST.getClass().getName())
this.LIST.functionName == orig(this.LIST.functionName)
this.LIST.functionName.toString == orig(this.LIST.functionName.toString)
this.SETQ == orig(this.SETQ)
this.SETQ.getClass().getName() == orig(this.SETQ.getClass().getName())
this.SETQ.functionName == orig(this.SETQ.functionName)
this.SETQ.functionName.toString == orig(this.SETQ.functionName.toString)
this.SpecialOperators == orig(this.SpecialOperators)
this.SpecialOperators.getClass().getName() == orig(this.SpecialOperators.getClass().getName())
this.WarnAboutSpecialsP == orig(this.WarnAboutSpecialsP)
this.f_lisp == orig(this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.f_lisp.VERSION_NAME == orig(this.f_lisp.VERSION_NAME)
this.f_lisp.VERSION_NAME.toString == orig(this.f_lisp.VERSION_NAME.toString)
this.f_lisp.VERSION_MAJOR == orig(this.f_lisp.VERSION_MAJOR)
this.f_lisp.VERSION_MINOR == orig(this.f_lisp.VERSION_MINOR)
this.f_lisp.VERSION_MICRO == orig(this.f_lisp.VERSION_MICRO)
this.f_lisp.VERSION_TYPE == orig(this.f_lisp.VERSION_TYPE)
this.f_lisp.VERSION_TYPE.toString == orig(this.f_lisp.VERSION_TYPE.toString)
this.f_lisp.VERSION_DATE == orig(this.f_lisp.VERSION_DATE)
this.f_lisp.VERSION_DATE.toString == orig(this.f_lisp.VERSION_DATE.toString)
this.f_lisp.VERSION_URL == orig(this.f_lisp.VERSION_URL)
this.f_lisp.VERSION_URL.toString == orig(this.f_lisp.VERSION_URL.toString)
this.f_lisp.useConsole == orig(this.f_lisp.useConsole)
this.f_lisp.PARSER == orig(this.f_lisp.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
this.f_lisp.PARSER.BackQuoteLevel == orig(this.f_lisp.PARSER.BackQuoteLevel)
this.f_lisp.PARSER.inputReader == orig(this.f_lisp.PARSER.inputReader)
this.f_lisp.PARSER.f_caseSensitivity == orig(this.f_lisp.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
this.f_lisp.PARSER.f_lisp == orig(this.f_lisp.PARSER.f_lisp)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.f_lisp.COMPILER == orig(this.f_lisp.COMPILER)
this.f_lisp.COMPILER.AND == orig(this.f_lisp.COMPILER.AND)
this.f_lisp.COMPILER.AND.getClass().getName() == orig(this.f_lisp.COMPILER.AND.getClass().getName())
this.f_lisp.COMPILER.DEFMACRO == orig(this.f_lisp.COMPILER.DEFMACRO)
this.f_lisp.COMPILER.DEFMACRO.getClass().getName() == orig(this.f_lisp.COMPILER.DEFMACRO.getClass().getName())
this.f_lisp.COMPILER.IF == orig(this.f_lisp.COMPILER.IF)
this.f_lisp.COMPILER.IF.getClass().getName() == orig(this.f_lisp.COMPILER.IF.getClass().getName())
this.f_lisp.COMPILER.LAMBDA == orig(this.f_lisp.COMPILER.LAMBDA)
this.f_lisp.COMPILER.LAMBDA.getClass().getName() == orig(this.f_lisp.COMPILER.LAMBDA.getClass().getName())
this.f_lisp.COMPILER.LET == orig(this.f_lisp.COMPILER.LET)
this.f_lisp.COMPILER.LET.getClass().getName() == orig(this.f_lisp.COMPILER.LET.getClass().getName())
this.f_lisp.COMPILER.SET == orig(this.f_lisp.COMPILER.SET)
this.f_lisp.COMPILER.SET.getClass().getName() == orig(this.f_lisp.COMPILER.SET.getClass().getName())
this.f_lisp.COMPILER.LETREC == orig(this.f_lisp.COMPILER.LETREC)
this.f_lisp.COMPILER.LETREC.getClass().getName() == orig(this.f_lisp.COMPILER.LETREC.getClass().getName())
this.f_lisp.COMPILER.OR == orig(this.f_lisp.COMPILER.OR)
this.f_lisp.COMPILER.OR.getClass().getName() == orig(this.f_lisp.COMPILER.OR.getClass().getName())
this.f_lisp.COMPILER.DUMMY_FUNCTION == orig(this.f_lisp.COMPILER.DUMMY_FUNCTION)
this.f_lisp.COMPILER.DUMMY_FUNCTION.getClass().getName() == orig(this.f_lisp.COMPILER.DUMMY_FUNCTION.getClass().getName())
this.f_lisp.COMPILER.DUMMY_MACRO == orig(this.f_lisp.COMPILER.DUMMY_MACRO)
this.f_lisp.COMPILER.DUMMY_MACRO.getClass().getName() == orig(this.f_lisp.COMPILER.DUMMY_MACRO.getClass().getName())
this.f_lisp.COMPILER.CONS == orig(this.f_lisp.COMPILER.CONS)
this.f_lisp.COMPILER.CONS.getClass().getName() == orig(this.f_lisp.COMPILER.CONS.getClass().getName())
this.f_lisp.COMPILER.LIST == orig(this.f_lisp.COMPILER.LIST)
this.f_lisp.COMPILER.LIST.getClass().getName() == orig(this.f_lisp.COMPILER.LIST.getClass().getName())
this.f_lisp.COMPILER.SETQ == orig(this.f_lisp.COMPILER.SETQ)
this.f_lisp.COMPILER.SETQ.getClass().getName() == orig(this.f_lisp.COMPILER.SETQ.getClass().getName())
this.f_lisp.COMPILER.SpecialOperators == orig(this.f_lisp.COMPILER.SpecialOperators)
this.f_lisp.COMPILER.SpecialOperators.getClass().getName() == orig(this.f_lisp.COMPILER.SpecialOperators.getClass().getName())
this.f_lisp.COMPILER.WarnAboutSpecialsP == orig(this.f_lisp.COMPILER.WarnAboutSpecialsP)
this.f_lisp.COMPILER.f_lisp == orig(this.f_lisp.COMPILER.f_lisp)
this.f_lisp.COMPILER.requires == orig(this.f_lisp.COMPILER.requires)
this.f_lisp.COMPILER.requires.getClass().getName() == orig(this.f_lisp.COMPILER.requires.getClass().getName())
this.f_lisp.COMPILER.defaultPackages == orig(this.f_lisp.COMPILER.defaultPackages)
this.f_lisp.COMPILER.defaultPackages[] == orig(this.f_lisp.COMPILER.defaultPackages[])
this.f_lisp.COMPILER.defaultPackages.getClass().getName() == orig(this.f_lisp.COMPILER.defaultPackages.getClass().getName())
this.f_lisp.COMPILER.legalBlocks == orig(this.f_lisp.COMPILER.legalBlocks)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.f_lisp.SYMTAB == orig(this.f_lisp.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.f_lisp.MACHINE == orig(this.f_lisp.MACHINE)
org.jatha.machine.SECDMachine.DEBUG == orig(org.jatha.machine.SECDMachine.DEBUG)
this.f_lisp.MACHINE.S == orig(this.f_lisp.MACHINE.S)
this.f_lisp.MACHINE.E == orig(this.f_lisp.MACHINE.E)
this.f_lisp.MACHINE.C == orig(this.f_lisp.MACHINE.C)
this.f_lisp.MACHINE.D == orig(this.f_lisp.MACHINE.D)
this.f_lisp.MACHINE.X == orig(this.f_lisp.MACHINE.X)
this.f_lisp.MACHINE.B == orig(this.f_lisp.MACHINE.B)
org.jatha.machine.SECDMachine.BLK == orig(org.jatha.machine.SECDMachine.BLK)
org.jatha.machine.SECDMachine.BLK.getClass().getName() == orig(org.jatha.machine.SECDMachine.BLK.getClass().getName())
org.jatha.machine.SECDMachine.LDNIL == orig(org.jatha.machine.SECDMachine.LDNIL)
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDNIL.getClass().getName())
org.jatha.machine.SECDMachine.LDT == orig(org.jatha.machine.SECDMachine.LDT)
org.jatha.machine.SECDMachine.LDT.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDT.getClass().getName())
org.jatha.machine.SECDMachine.LDC == orig(org.jatha.machine.SECDMachine.LDC)
org.jatha.machine.SECDMachine.LDC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDC.getClass().getName())
org.jatha.machine.SECDMachine.ST == orig(org.jatha.machine.SECDMachine.ST)
org.jatha.machine.SECDMachine.ST.getClass().getName() == orig(org.jatha.machine.SECDMachine.ST.getClass().getName())
org.jatha.machine.SECDMachine.LDR == orig(org.jatha.machine.SECDMachine.LDR)
org.jatha.machine.SECDMachine.LDR.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDR.getClass().getName())
org.jatha.machine.SECDMachine.LD == orig(org.jatha.machine.SECDMachine.LD)
org.jatha.machine.SECDMachine.LD.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD.getClass().getName())
org.jatha.machine.SECDMachine.LD_GLOBAL == orig(org.jatha.machine.SECDMachine.LD_GLOBAL)
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == orig(org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName())
org.jatha.machine.SECDMachine.LDF == orig(org.jatha.machine.SECDMachine.LDF)
org.jatha.machine.SECDMachine.LDF.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDF.getClass().getName())
org.jatha.machine.SECDMachine.LDFC == orig(org.jatha.machine.SECDMachine.LDFC)
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == orig(org.jatha.machine.SECDMachine.LDFC.getClass().getName())
org.jatha.machine.SECDMachine.SEL == orig(org.jatha.machine.SECDMachine.SEL)
org.jatha.machine.SECDMachine.SEL.getClass().getName() == orig(org.jatha.machine.SECDMachine.SEL.getClass().getName())
org.jatha.machine.SECDMachine.TEST == orig(org.jatha.machine.SECDMachine.TEST)
org.jatha.machine.SECDMachine.TEST.getClass().getName() == orig(org.jatha.machine.SECDMachine.TEST.getClass().getName())
org.jatha.machine.SECDMachine.JOIN == orig(org.jatha.machine.SECDMachine.JOIN)
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == orig(org.jatha.machine.SECDMachine.JOIN.getClass().getName())
org.jatha.machine.SECDMachine.AP == orig(org.jatha.machine.SECDMachine.AP)
org.jatha.machine.SECDMachine.AP.getClass().getName() == orig(org.jatha.machine.SECDMachine.AP.getClass().getName())
org.jatha.machine.SECDMachine.RAP == orig(org.jatha.machine.SECDMachine.RAP)
org.jatha.machine.SECDMachine.RAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.RAP.getClass().getName())
org.jatha.machine.SECDMachine.RTN == orig(org.jatha.machine.SECDMachine.RTN)
org.jatha.machine.SECDMachine.RTN.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IF == orig(org.jatha.machine.SECDMachine.RTN_IF)
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IF.getClass().getName())
org.jatha.machine.SECDMachine.RTN_IT == orig(org.jatha.machine.SECDMachine.RTN_IT)
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == orig(org.jatha.machine.SECDMachine.RTN_IT.getClass().getName())
org.jatha.machine.SECDMachine.DAP == orig(org.jatha.machine.SECDMachine.DAP)
org.jatha.machine.SECDMachine.DAP.getClass().getName() == orig(org.jatha.machine.SECDMachine.DAP.getClass().getName())
org.jatha.machine.SECDMachine.DUM == orig(org.jatha.machine.SECDMachine.DUM)
org.jatha.machine.SECDMachine.DUM.getClass().getName() == orig(org.jatha.machine.SECDMachine.DUM.getClass().getName())
org.jatha.machine.SECDMachine.LIS == orig(org.jatha.machine.SECDMachine.LIS)
org.jatha.machine.SECDMachine.LIS.getClass().getName() == orig(org.jatha.machine.SECDMachine.LIS.getClass().getName())
org.jatha.machine.SECDMachine.SP_BIND == orig(org.jatha.machine.SECDMachine.SP_BIND)
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_BIND.getClass().getName())
org.jatha.machine.SECDMachine.SP_UNBIND == orig(org.jatha.machine.SECDMachine.SP_UNBIND)
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == orig(org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName())
org.jatha.machine.SECDMachine.STOP == orig(org.jatha.machine.SECDMachine.STOP)
org.jatha.machine.SECDMachine.STOP.getClass().getName() == orig(org.jatha.machine.SECDMachine.STOP.getClass().getName())
this.f_lisp.SYSTEM_INFO == orig(this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.f_lisp.prompt == orig(this.f_lisp.prompt)
this.f_lisp.prompt.getClass().getName() == orig(this.f_lisp.prompt.getClass().getName())
this.f_lisp.userPrompt == orig(this.f_lisp.userPrompt)
this.f_lisp.packages == orig(this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.requires == orig(this.requires)
this.requires.getClass().getName() == orig(this.requires.getClass().getName())
this.defaultPackages == orig(this.defaultPackages)
this.defaultPackages[] == orig(this.defaultPackages[])
this.defaultPackages.getClass().getName() == orig(this.defaultPackages.getClass().getName())
this.legalBlocks == orig(this.legalBlocks)
arg0.functionName == orig(arg0.functionName)
arg0.functionName.toString == orig(arg0.functionName.toString)
this.AND has only one value
this.DEFMACRO has only one value
this.IF has only one value
this.LAMBDA has only one value
this.LET has only one value
this.SET has only one value
this.LETREC has only one value
this.OR has only one value
this.DUMMY_FUNCTION has only one value
this.DUMMY_MACRO has only one value
this.SpecialOperators has only one value
this.f_lisp.COMPILER has only one value
this.f_lisp.MACHINE has only one value
this.f_lisp.prompt has only one value
===========================================================================
org.jatha.compile.LispCompiler.initializeConstants():::ENTER
this.AND == null
this.DEFMACRO == null
this.IF == null
this.LAMBDA == null
this.LET == null
this.SET == null
this.LETREC == null
this.OR == null
this.DUMMY_FUNCTION == null
this.DUMMY_MACRO == null
this.CONS == null
this.LIST == null
this.SETQ == null
this.SpecialOperators == null
this.f_lisp.COMPILER == null
this.f_lisp.MACHINE == null
this.f_lisp.prompt == null
===========================================================================
org.jatha.compile.LispCompiler.initializeConstants():::EXIT
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.DEFUN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
org.jatha.compile.LispCompiler.BLOCK.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
org.jatha.compile.LispCompiler.AMP_REST.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
this.CONS == orig(this.CONS)
this.LIST == orig(this.LIST)
this.SETQ == orig(this.SETQ)
this.WarnAboutSpecialsP == orig(this.WarnAboutSpecialsP)
this.f_lisp == orig(this.f_lisp)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.f_lisp.VERSION_NAME == orig(this.f_lisp.VERSION_NAME)
this.f_lisp.VERSION_NAME.toString == orig(this.f_lisp.VERSION_NAME.toString)
this.f_lisp.VERSION_MAJOR == orig(this.f_lisp.VERSION_MAJOR)
this.f_lisp.VERSION_MINOR == orig(this.f_lisp.VERSION_MINOR)
this.f_lisp.VERSION_MICRO == orig(this.f_lisp.VERSION_MICRO)
this.f_lisp.VERSION_TYPE == orig(this.f_lisp.VERSION_TYPE)
this.f_lisp.VERSION_TYPE.toString == orig(this.f_lisp.VERSION_TYPE.toString)
this.f_lisp.VERSION_DATE == orig(this.f_lisp.VERSION_DATE)
this.f_lisp.VERSION_DATE.toString == orig(this.f_lisp.VERSION_DATE.toString)
this.f_lisp.VERSION_URL == orig(this.f_lisp.VERSION_URL)
this.f_lisp.VERSION_URL.toString == orig(this.f_lisp.VERSION_URL.toString)
this.f_lisp.useConsole == orig(this.f_lisp.useConsole)
this.f_lisp.PARSER == orig(this.f_lisp.PARSER)
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
this.f_lisp.PARSER.BackQuoteLevel == orig(this.f_lisp.PARSER.BackQuoteLevel)
this.f_lisp.PARSER.inputReader == orig(this.f_lisp.PARSER.inputReader)
this.f_lisp.PARSER.f_caseSensitivity == orig(this.f_lisp.PARSER.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
this.f_lisp.PARSER.f_lisp == orig(this.f_lisp.PARSER.f_lisp)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
this.f_lisp.COMPILER == orig(this.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
this.f_lisp.SYMTAB == orig(this.f_lisp.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.f_lisp.MACHINE == orig(this.f_lisp.MACHINE)
this.f_lisp.SYSTEM_INFO == orig(this.f_lisp.SYSTEM_INFO)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.f_lisp.prompt == orig(this.f_lisp.prompt)
this.f_lisp.userPrompt == orig(this.f_lisp.userPrompt)
this.f_lisp.packages == orig(this.f_lisp.packages)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.requires == orig(this.requires)
this.requires.getClass().getName() == orig(this.requires.getClass().getName())
this.defaultPackages == orig(this.defaultPackages)
this.defaultPackages[] == orig(this.defaultPackages[])
this.defaultPackages.getClass().getName() == orig(this.defaultPackages.getClass().getName())
this.legalBlocks == orig(this.legalBlocks)
this.AND has only one value
this.DEFMACRO has only one value
this.IF has only one value
this.LAMBDA has only one value
this.LET has only one value
this.SET has only one value
this.LETREC has only one value
this.OR has only one value
this.DUMMY_FUNCTION has only one value
this.DUMMY_MACRO has only one value
this.CONS == null
this.LIST == null
this.SETQ == null
this.SpecialOperators has only one value
this.f_lisp.COMPILER == null
this.f_lisp.MACHINE == null
this.f_lisp.prompt == null
===========================================================================
org.jatha.compile.LispPrimitive:::OBJECT
this.functionName != null
===========================================================================
org.jatha.compile.LispPrimitive0:::OBJECT
this.functionName != null
===========================================================================
org.jatha.compile.LispPrimitive0.LispPrimitive0(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.compile.LispPrimitive0.LispPrimitive0(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.jatha.compile.LispPrimitive1:::OBJECT
this.functionName.toString one of { "EVAL", "FUNCTION", "NOT" }
===========================================================================
org.jatha.compile.LispPrimitive1.LispPrimitive1(java.lang.String):::ENTER
arg0.toString one of { "EVAL", "FUNCTION", "NOT" }
===========================================================================
org.jatha.compile.LispPrimitive1.LispPrimitive1(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "EVAL", "FUNCTION", "NOT" }
===========================================================================
org.jatha.compile.LispPrimitive2:::OBJECT
===========================================================================
org.jatha.compile.LispPrimitive2.LispPrimitive2(java.lang.String):::ENTER
===========================================================================
org.jatha.compile.LispPrimitive2.LispPrimitive2(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.jatha.compile.LispPrimitive.LispFunctionNameString():::ENTER
===========================================================================
org.jatha.compile.LispPrimitive.LispFunctionNameString():::EXIT
this.functionName == orig(this.functionName)
this.functionName.toString == orig(this.functionName.toString)
===========================================================================
org.jatha.compile.LispPrimitive.LispPrimitive(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.compile.LispPrimitive.LispPrimitive(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.jatha.compile.LispPrimitiveC:::OBJECT
this.minNumberOfArgs one of { 0, 1, 2 }
this.maxNumberOfArgs == 9223372036854775807L
this.functionName.toString one of { "APPLY", "LIST", "REQUIRE" }
===========================================================================
org.jatha.compile.LispPrimitiveC.LispPrimitiveC(java.lang.String, long):::ENTER
arg0.toString one of { "APPLY", "LIST", "REQUIRE" }
arg1 one of { 0, 1, 2 }
===========================================================================
org.jatha.compile.LispPrimitiveC.LispPrimitiveC(java.lang.String, long):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "APPLY", "LIST", "REQUIRE" }
===========================================================================
org.jatha.dynatype.StandardLispAtom:::OBJECT
===========================================================================
org.jatha.dynatype.StandardLispAtom.StandardLispAtom():::EXIT
===========================================================================
org.jatha.dynatype.StandardLispCharacter:::OBJECT
this.value one of { 10, 32, 58 }
===========================================================================
org.jatha.dynatype.StandardLispCharacter.StandardLispCharacter(char):::ENTER
arg0 one of { 10, 32, 58 }
===========================================================================
org.jatha.dynatype.StandardLispCharacter.StandardLispCharacter(char):::EXIT
this.value == orig(arg0)
===========================================================================
org.jatha.dynatype.StandardLispCons:::CLASS
org.jatha.dynatype.StandardLispCons.DEBUG == false
===========================================================================
org.jatha.dynatype.StandardLispCons:::OBJECT
this.carCell has only one value
this.carCell.getClass().getName() == org.jatha.dynatype.StandardLispT.class
this.cdrCell has only one value
this.cdrCell.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
===========================================================================
org.jatha.dynatype.StandardLispCons.StandardLispCons(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::ENTER
arg0 has only one value
arg0.getClass().getName() == org.jatha.dynatype.StandardLispT.class
arg1 has only one value
arg1.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
===========================================================================
org.jatha.dynatype.StandardLispCons.StandardLispCons(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::EXIT
this.carCell == orig(arg0)
this.carCell.getClass().getName() == orig(arg0.getClass().getName())
this.cdrCell == orig(arg1)
this.cdrCell.getClass().getName() == orig(arg1.getClass().getName())
===========================================================================
org.jatha.dynatype.StandardLispConstant:::CLASS
org.jatha.dynatype.StandardLispSymbol.randomname == 1100
===========================================================================
org.jatha.dynatype.StandardLispConstant:::OBJECT
this has only one value
this.f_function == null
this.f_name has only one value
this.f_name.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.f_value == null
this.f_isExternalInPackage == false
this.f_isSpecial == false
this.f_specialCount == 0
this.f_documentation has only one value
this.f_documentation.getClass().getName() == java.util.HashMap.class
===========================================================================
org.jatha.dynatype.StandardLispConstant.StandardLispConstant(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "T"
===========================================================================
org.jatha.dynatype.StandardLispConstant.StandardLispConstant(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "T"
===========================================================================
org.jatha.dynatype.StandardLispFunction:::OBJECT
this.f_isBuiltin == false
this.f_symbol == null
this.f_code.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.dynatype.StandardLispFunction.StandardLispFunction(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::ENTER
arg0 == null
arg1.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.dynatype.StandardLispFunction.StandardLispFunction(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::EXIT
===========================================================================
org.jatha.dynatype.StandardLispList:::OBJECT
===========================================================================
org.jatha.dynatype.StandardLispList.StandardLispList():::EXIT
===========================================================================
org.jatha.dynatype.StandardLispMacro:::OBJECT
this has only one value
this.f_isBuiltin == false
this.f_symbol == null
this.f_code has only one value
this.f_code.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.dynatype.StandardLispMacro.StandardLispMacro(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::ENTER
arg0 == null
arg1 has only one value
arg1.getClass().getName() == org.jatha.dynatype.StandardLispCons.class
===========================================================================
org.jatha.dynatype.StandardLispMacro.StandardLispMacro(org.jatha.dynatype.LispValue, org.jatha.dynatype.LispValue):::EXIT
this.f_code == orig(arg1)
===========================================================================
org.jatha.dynatype.StandardLispNIL:::OBJECT
this has only one value
this.name == null
this.value == null
this.plist == null
this.function == null
===========================================================================
org.jatha.dynatype.StandardLispNIL.StandardLispNIL():::EXIT
===========================================================================
org.jatha.dynatype.StandardLispString:::OBJECT
this.str != null
===========================================================================
org.jatha.dynatype.StandardLispString.StandardLispString(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.dynatype.StandardLispString.StandardLispString(java.lang.String):::EXIT
this.str == orig(arg0)
arg0.toString == orig(arg0.toString)
===========================================================================
org.jatha.dynatype.StandardLispString.getValue():::ENTER
===========================================================================
org.jatha.dynatype.StandardLispString.getValue():::EXIT
this.str == return
this.str.toString == orig(this.str.toString)
return == orig(this.str)
return != null
===========================================================================
org.jatha.dynatype.StandardLispSymbol:::CLASS
org.jatha.dynatype.StandardLispSymbol.randomname == 1100
===========================================================================
org.jatha.dynatype.StandardLispSymbol:::OBJECT
this.f_name != null
this.f_name.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.f_value == null
this.f_isExternalInPackage == false
this.f_isSpecial == false
this.f_specialCount == 0
this.f_documentation != null
this.f_documentation.getClass().getName() == java.util.HashMap.class
this.f_function.getClass().getName() != this.f_name.getClass().getName()
this.f_function.getClass().getName() != this.f_documentation.getClass().getName()
===========================================================================
org.jatha.dynatype.StandardLispSymbol.StandardLispSymbol(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.dynatype.StandardLispSymbol.StandardLispSymbol(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.f_function == null
this.f_name.getClass().getName() != this.f_documentation.getClass().getName()
===========================================================================
org.jatha.dynatype.StandardLispSymbol.StandardLispSymbol(org.jatha.dynatype.LispString):::ENTER
arg0 != null
arg0.getClass().getName() == org.jatha.dynatype.StandardLispString.class
===========================================================================
org.jatha.dynatype.StandardLispSymbol.StandardLispSymbol(org.jatha.dynatype.LispString):::EXIT
this.f_name == orig(arg0)
this.f_name.getClass().getName() == orig(arg0.getClass().getName())
this.f_function == null
this.f_name.getClass().getName() != this.f_documentation.getClass().getName()
===========================================================================
org.jatha.dynatype.StandardLispSymbol.setf_symbol_function(org.jatha.dynatype.LispValue):::ENTER
this.f_function == null
this.f_name.getClass().getName() != this.f_documentation.getClass().getName()
this.f_name.getClass().getName() != arg0.getClass().getName()
this.f_documentation.getClass().getName() != arg0.getClass().getName()
===========================================================================
org.jatha.dynatype.StandardLispSymbol.setf_symbol_function(org.jatha.dynatype.LispValue):::EXIT242
===========================================================================
org.jatha.dynatype.StandardLispSymbol.setf_symbol_function(org.jatha.dynatype.LispValue):::EXIT
org.jatha.dynatype.StandardLispSymbol.randomname == orig(org.jatha.dynatype.StandardLispSymbol.randomname)
this.f_function == return
this.f_function.getClass().getName() == return.getClass().getName()
this.f_name == orig(this.f_name)
this.f_name.getClass().getName() == orig(this.f_name.getClass().getName())
this.f_value == orig(this.f_value)
this.f_isExternalInPackage == orig(this.f_isExternalInPackage)
this.f_isSpecial == orig(this.f_isSpecial)
this.f_specialCount == orig(this.f_specialCount)
this.f_documentation == orig(this.f_documentation)
this.f_documentation.getClass().getName() == orig(this.f_documentation.getClass().getName())
return == orig(arg0)
return.getClass().getName() == orig(arg0.getClass().getName())
this.f_name.getClass().getName() != this.f_documentation.getClass().getName()
this.f_name.getClass().getName() != return.getClass().getName()
this.f_documentation.getClass().getName() != return.getClass().getName()
===========================================================================
org.jatha.dynatype.StandardLispSymbol.toStringSimple():::ENTER
this.f_function == null
===========================================================================
org.jatha.dynatype.StandardLispSymbol.toStringSimple():::EXIT
org.jatha.dynatype.StandardLispSymbol.randomname == orig(org.jatha.dynatype.StandardLispSymbol.randomname)
this.f_function == orig(this.f_function)
this.f_name == orig(this.f_name)
this.f_name.getClass().getName() == orig(this.f_name.getClass().getName())
this.f_value == orig(this.f_value)
this.f_isExternalInPackage == orig(this.f_isExternalInPackage)
this.f_isSpecial == orig(this.f_isSpecial)
this.f_specialCount == orig(this.f_specialCount)
this.f_documentation == orig(this.f_documentation)
this.f_documentation.getClass().getName() == orig(this.f_documentation.getClass().getName())
this.f_function == null
return != null
===========================================================================
org.jatha.dynatype.StandardLispT:::CLASS
org.jatha.dynatype.StandardLispSymbol.randomname == 1100
===========================================================================
org.jatha.dynatype.StandardLispT:::OBJECT
this has only one value
this.f_function == null
this.f_name has only one value
this.f_name.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.f_value has only one value
this.f_value.getClass().getName() == org.jatha.dynatype.StandardLispT.class
this.f_isExternalInPackage == false
this.f_isSpecial == false
this.f_specialCount == 0
this.f_documentation has only one value
this.f_documentation.getClass().getName() == java.util.HashMap.class
===========================================================================
org.jatha.dynatype.StandardLispT.StandardLispT():::EXIT
===========================================================================
org.jatha.dynatype.StandardLispValue:::OBJECT
===========================================================================
org.jatha.dynatype.StandardLispValue.StandardLispValue():::EXIT
===========================================================================
org.jatha.dynatype.StandardLispValue.compareTo(org.jatha.dynatype.LispValue):::ENTER
this.getClass().getName() == arg0.getClass().getName()
this.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
arg0 != null
===========================================================================
org.jatha.dynatype.StandardLispValue.compareTo(org.jatha.dynatype.LispValue):::EXIT
===========================================================================
org.jatha.exception.LispException:::OBJECT
this has only one value
===========================================================================
org.jatha.exception.LispException.LispException(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "Can't load required FUNCTION module."
===========================================================================
org.jatha.exception.LispException.LispException(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "Can't load required FUNCTION module."
===========================================================================
org.jatha.extras.FUNCTION$1:::OBJECT
this.val$compiler == this.val$compiler.f_lisp.COMPILER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == this.val$compiler.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
this has only one value
this.val$compiler has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
this.val$compiler.AND has only one value
this.val$compiler.DEFMACRO has only one value
this.val$compiler.IF has only one value
this.val$compiler.LAMBDA has only one value
this.val$compiler.LET has only one value
this.val$compiler.SET has only one value
this.val$compiler.LETREC has only one value
this.val$compiler.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
this.val$compiler.DUMMY_FUNCTION has only one value
this.val$compiler.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
this.val$compiler.DUMMY_MACRO has only one value
this.val$compiler.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
this.val$compiler.CONS has only one value
this.val$compiler.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
this.val$compiler.CONS.functionName has only one value
this.val$compiler.CONS.functionName.toString == "CONS"
this.val$compiler.LIST has only one value
this.val$compiler.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
this.val$compiler.LIST.functionName has only one value
this.val$compiler.LIST.functionName.toString == "LIST"
this.val$compiler.SETQ has only one value
this.val$compiler.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
this.val$compiler.SETQ.functionName has only one value
this.val$compiler.SETQ.functionName.toString == "SETQ"
this.val$compiler.SpecialOperators has only one value
this.val$compiler.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
this.val$compiler.WarnAboutSpecialsP == false
this.val$compiler.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
this.val$compiler.f_lisp.VERSION_NAME has only one value
this.val$compiler.f_lisp.VERSION_NAME.toString == "Jatha"
this.val$compiler.f_lisp.VERSION_MAJOR == 3
this.val$compiler.f_lisp.VERSION_MINOR == 0
this.val$compiler.f_lisp.VERSION_MICRO == 1
this.val$compiler.f_lisp.VERSION_TYPE has only one value
this.val$compiler.f_lisp.VERSION_TYPE.toString == ""
this.val$compiler.f_lisp.VERSION_DATE has only one value
this.val$compiler.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
this.val$compiler.f_lisp.VERSION_URL has only one value
this.val$compiler.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.val$compiler.f_lisp.useConsole == true
this.val$compiler.f_lisp.PARSER has only one value
this.val$compiler.f_lisp.SYMTAB has only one value
this.val$compiler.f_lisp.MACHINE has only one value
this.val$compiler.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
this.val$compiler.f_lisp.prompt has only one value
this.val$compiler.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
this.val$compiler.f_lisp.userPrompt == null
this.val$compiler.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
this.val$compiler.requires has only one value
this.val$compiler.requires.getClass().getName() == java.util.HashSet.class
this.val$compiler.defaultPackages has only one value
this.val$compiler.defaultPackages[] contains no nulls and has only one value, of length 3
this.val$compiler.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.val$compiler.defaultPackages[].getClass().getName() elements == java.lang.String.class
this.val$compiler.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
this.val$compiler.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
this.functionName has only one value
this.functionName.toString == "EVAL"
size(this.val$compiler.defaultPackages[]) == 3
===========================================================================
org.jatha.extras.FUNCTION$1.(org.jatha.extras.FUNCTION, java.lang.String, org.jatha.compile.LispCompiler):::ENTER
arg2 == arg2.f_lisp.COMPILER
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.DEFUN.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.BLOCK.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.compile.LispCompiler.AMP_REST.getClass().getName()
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
arg1 has only one value
arg1.toString == "EVAL"
arg2 has only one value
org.jatha.compile.LispCompiler.DEBUG == false
org.jatha.compile.LispCompiler.PROGN has only one value
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.compile.LispCompiler.DEFUN has only one value
org.jatha.compile.LispCompiler.BLOCK has only one value
arg2.AND has only one value
arg2.DEFMACRO has only one value
arg2.IF has only one value
arg2.LAMBDA has only one value
arg2.LET has only one value
arg2.SET has only one value
arg2.LETREC has only one value
arg2.OR has only one value
org.jatha.compile.LispCompiler.AMP_REST has only one value
arg2.DUMMY_FUNCTION has only one value
arg2.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
arg2.DUMMY_MACRO has only one value
arg2.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
arg2.CONS has only one value
arg2.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
arg2.CONS.functionName has only one value
arg2.CONS.functionName.toString == "CONS"
arg2.LIST has only one value
arg2.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
arg2.LIST.functionName has only one value
arg2.LIST.functionName.toString == "LIST"
arg2.SETQ has only one value
arg2.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
arg2.SETQ.functionName has only one value
arg2.SETQ.functionName.toString == "SETQ"
arg2.SpecialOperators has only one value
arg2.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
arg2.WarnAboutSpecialsP == false
arg2.f_lisp has only one value
org.jatha.Lisp.DEBUG == false
arg2.f_lisp.VERSION_NAME has only one value
arg2.f_lisp.VERSION_NAME.toString == "Jatha"
arg2.f_lisp.VERSION_MAJOR == 3
arg2.f_lisp.VERSION_MINOR == 0
arg2.f_lisp.VERSION_MICRO == 1
arg2.f_lisp.VERSION_TYPE has only one value
arg2.f_lisp.VERSION_TYPE.toString == ""
arg2.f_lisp.VERSION_DATE has only one value
arg2.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
arg2.f_lisp.VERSION_URL has only one value
arg2.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg2.f_lisp.useConsole == true
arg2.f_lisp.PARSER has only one value
arg2.f_lisp.SYMTAB has only one value
arg2.f_lisp.MACHINE has only one value
arg2.f_lisp.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
arg2.f_lisp.prompt has only one value
arg2.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
arg2.f_lisp.userPrompt == null
arg2.f_lisp.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
arg2.requires has only one value
arg2.requires.getClass().getName() == java.util.HashSet.class
arg2.defaultPackages has only one value
arg2.defaultPackages[] contains no nulls and has only one value, of length 3
arg2.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2.defaultPackages[].getClass().getName() elements == java.lang.String.class
arg2.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
arg2.legalBlocks has only one value
org.jatha.compile.LispCompiler.$assertionsDisabled == false
size(arg2.defaultPackages[]) == 3
===========================================================================
org.jatha.extras.FUNCTION$1.(org.jatha.extras.FUNCTION, java.lang.String, org.jatha.compile.LispCompiler):::EXIT
this.val$compiler == arg2.f_lisp.COMPILER
this.val$compiler == orig(arg2)
this.val$compiler == orig(arg2.f_lisp.COMPILER)
org.jatha.compile.LispCompiler.DEBUG == orig(org.jatha.compile.LispCompiler.DEBUG)
org.jatha.compile.LispCompiler.PROGN == orig(org.jatha.compile.LispCompiler.PROGN)
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.AND.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.DEFMACRO.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.IF.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LAMBDA.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.SET.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.LETREC.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == arg2.OR.getClass().getName()
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.PROGN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.DEFUN.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.BLOCK.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.AND.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.DEFMACRO.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.IF.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.LAMBDA.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.LET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.SET.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.LETREC.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(arg2.OR.getClass().getName())
org.jatha.compile.LispCompiler.PROGN.getClass().getName() == orig(org.jatha.compile.LispCompiler.AMP_REST.getClass().getName())
org.jatha.compile.LispCompiler.DEFUN == orig(org.jatha.compile.LispCompiler.DEFUN)
org.jatha.compile.LispCompiler.BLOCK == orig(org.jatha.compile.LispCompiler.BLOCK)
this.val$compiler.AND == arg2.AND
this.val$compiler.DEFMACRO == arg2.DEFMACRO
this.val$compiler.IF == arg2.IF
this.val$compiler.LAMBDA == arg2.LAMBDA
this.val$compiler.LET == arg2.LET
this.val$compiler.SET == arg2.SET
this.val$compiler.LETREC == arg2.LETREC
this.val$compiler.OR == arg2.OR
org.jatha.compile.LispCompiler.AMP_REST == orig(org.jatha.compile.LispCompiler.AMP_REST)
this.val$compiler.DUMMY_FUNCTION == arg2.DUMMY_FUNCTION
this.val$compiler.DUMMY_FUNCTION.getClass().getName() == arg2.DUMMY_FUNCTION.getClass().getName()
this.val$compiler.DUMMY_MACRO == arg2.DUMMY_MACRO
this.val$compiler.DUMMY_MACRO.getClass().getName() == arg2.DUMMY_MACRO.getClass().getName()
this.val$compiler.CONS == arg2.CONS
this.val$compiler.CONS.getClass().getName() == arg2.CONS.getClass().getName()
this.val$compiler.CONS.functionName == arg2.CONS.functionName
this.val$compiler.LIST == arg2.LIST
this.val$compiler.LIST.getClass().getName() == arg2.LIST.getClass().getName()
this.val$compiler.LIST.functionName == arg2.LIST.functionName
this.val$compiler.SETQ == arg2.SETQ
this.val$compiler.SETQ.getClass().getName() == arg2.SETQ.getClass().getName()
this.val$compiler.SETQ.functionName == arg2.SETQ.functionName
this.val$compiler.SpecialOperators == arg2.SpecialOperators
this.val$compiler.SpecialOperators.getClass().getName() == arg2.SpecialOperators.getClass().getName()
this.val$compiler.WarnAboutSpecialsP == arg2.WarnAboutSpecialsP
this.val$compiler.f_lisp == arg2.f_lisp
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
this.val$compiler.f_lisp.VERSION_NAME == arg2.f_lisp.VERSION_NAME
this.val$compiler.f_lisp.VERSION_MAJOR == arg2.f_lisp.VERSION_MAJOR
this.val$compiler.f_lisp.VERSION_MINOR == arg2.f_lisp.VERSION_MINOR
this.val$compiler.f_lisp.VERSION_MICRO == arg2.f_lisp.VERSION_MICRO
this.val$compiler.f_lisp.VERSION_TYPE == arg2.f_lisp.VERSION_TYPE
this.val$compiler.f_lisp.VERSION_DATE == arg2.f_lisp.VERSION_DATE
this.val$compiler.f_lisp.VERSION_URL == arg2.f_lisp.VERSION_URL
this.val$compiler.f_lisp.useConsole == arg2.f_lisp.useConsole
this.val$compiler.f_lisp.PARSER == arg2.f_lisp.PARSER
this.val$compiler.f_lisp.SYMTAB == arg2.f_lisp.SYMTAB
this.val$compiler.f_lisp.MACHINE == arg2.f_lisp.MACHINE
this.val$compiler.f_lisp.SYSTEM_INFO == arg2.f_lisp.SYSTEM_INFO
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
this.val$compiler.f_lisp.prompt == arg2.f_lisp.prompt
this.val$compiler.f_lisp.prompt.getClass().getName() == arg2.f_lisp.prompt.getClass().getName()
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.val$compiler.requires == arg2.requires
this.val$compiler.requires.getClass().getName() == arg2.requires.getClass().getName()
this.val$compiler.defaultPackages == arg2.defaultPackages
this.val$compiler.defaultPackages.getClass().getName() == arg2.defaultPackages.getClass().getName()
this.val$compiler.legalBlocks == arg2.legalBlocks
org.jatha.compile.LispCompiler.$assertionsDisabled == orig(org.jatha.compile.LispCompiler.$assertionsDisabled)
org.jatha.extras.FUNCTION.this == orig(org.jatha.extras.FUNCTION.this)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName())
this.functionName == orig(arg1)
arg1.toString == orig(arg1.toString)
arg2.AND == orig(arg2.AND)
arg2.DEFMACRO == orig(arg2.DEFMACRO)
arg2.IF == orig(arg2.IF)
arg2.LAMBDA == orig(arg2.LAMBDA)
arg2.LET == orig(arg2.LET)
arg2.SET == orig(arg2.SET)
arg2.LETREC == orig(arg2.LETREC)
arg2.OR == orig(arg2.OR)
arg2.DUMMY_FUNCTION == orig(arg2.DUMMY_FUNCTION)
arg2.DUMMY_FUNCTION.getClass().getName() == orig(arg2.DUMMY_FUNCTION.getClass().getName())
arg2.DUMMY_MACRO == orig(arg2.DUMMY_MACRO)
arg2.DUMMY_MACRO.getClass().getName() == orig(arg2.DUMMY_MACRO.getClass().getName())
arg2.CONS == orig(arg2.CONS)
arg2.CONS.getClass().getName() == orig(arg2.CONS.getClass().getName())
arg2.CONS.functionName == orig(arg2.CONS.functionName)
arg2.CONS.functionName.toString == orig(arg2.CONS.functionName.toString)
arg2.LIST == orig(arg2.LIST)
arg2.LIST.getClass().getName() == orig(arg2.LIST.getClass().getName())
arg2.LIST.functionName == orig(arg2.LIST.functionName)
arg2.LIST.functionName.toString == orig(arg2.LIST.functionName.toString)
arg2.SETQ == orig(arg2.SETQ)
arg2.SETQ.getClass().getName() == orig(arg2.SETQ.getClass().getName())
arg2.SETQ.functionName == orig(arg2.SETQ.functionName)
arg2.SETQ.functionName.toString == orig(arg2.SETQ.functionName.toString)
arg2.SpecialOperators == orig(arg2.SpecialOperators)
arg2.SpecialOperators.getClass().getName() == orig(arg2.SpecialOperators.getClass().getName())
arg2.WarnAboutSpecialsP == orig(arg2.WarnAboutSpecialsP)
arg2.f_lisp == orig(arg2.f_lisp)
arg2.f_lisp.VERSION_NAME == orig(arg2.f_lisp.VERSION_NAME)
arg2.f_lisp.VERSION_NAME.toString == orig(arg2.f_lisp.VERSION_NAME.toString)
arg2.f_lisp.VERSION_MAJOR == orig(arg2.f_lisp.VERSION_MAJOR)
arg2.f_lisp.VERSION_MINOR == orig(arg2.f_lisp.VERSION_MINOR)
arg2.f_lisp.VERSION_MICRO == orig(arg2.f_lisp.VERSION_MICRO)
arg2.f_lisp.VERSION_TYPE == orig(arg2.f_lisp.VERSION_TYPE)
arg2.f_lisp.VERSION_TYPE.toString == orig(arg2.f_lisp.VERSION_TYPE.toString)
arg2.f_lisp.VERSION_DATE == orig(arg2.f_lisp.VERSION_DATE)
arg2.f_lisp.VERSION_DATE.toString == orig(arg2.f_lisp.VERSION_DATE.toString)
arg2.f_lisp.VERSION_URL == orig(arg2.f_lisp.VERSION_URL)
arg2.f_lisp.VERSION_URL.toString == orig(arg2.f_lisp.VERSION_URL.toString)
arg2.f_lisp.useConsole == orig(arg2.f_lisp.useConsole)
arg2.f_lisp.PARSER == orig(arg2.f_lisp.PARSER)
arg2.f_lisp.SYMTAB == orig(arg2.f_lisp.SYMTAB)
arg2.f_lisp.MACHINE == orig(arg2.f_lisp.MACHINE)
arg2.f_lisp.SYSTEM_INFO == orig(arg2.f_lisp.SYSTEM_INFO)
arg2.f_lisp.prompt == orig(arg2.f_lisp.prompt)
arg2.f_lisp.prompt.getClass().getName() == orig(arg2.f_lisp.prompt.getClass().getName())
arg2.f_lisp.userPrompt == orig(arg2.f_lisp.userPrompt)
arg2.f_lisp.packages == orig(arg2.f_lisp.packages)
arg2.requires == orig(arg2.requires)
arg2.requires.getClass().getName() == orig(arg2.requires.getClass().getName())
arg2.defaultPackages == orig(arg2.defaultPackages)
arg2.defaultPackages[] == orig(arg2.defaultPackages[])
arg2.defaultPackages.getClass().getName() == orig(arg2.defaultPackages.getClass().getName())
arg2.legalBlocks == orig(arg2.legalBlocks)
arg1.toString == "EVAL"
arg2.AND has only one value
arg2.DEFMACRO has only one value
arg2.IF has only one value
arg2.LAMBDA has only one value
arg2.LET has only one value
arg2.SET has only one value
arg2.LETREC has only one value
arg2.OR has only one value
arg2.DUMMY_FUNCTION has only one value
arg2.DUMMY_FUNCTION.getClass().getName() == org.jatha.dynatype.StandardLispFunction.class
arg2.DUMMY_MACRO has only one value
arg2.DUMMY_MACRO.getClass().getName() == org.jatha.dynatype.StandardLispMacro.class
arg2.CONS has only one value
arg2.CONS.getClass().getName() == org.jatha.compile.LispCompiler$4.class
arg2.CONS.functionName has only one value
arg2.CONS.functionName.toString == "CONS"
arg2.LIST has only one value
arg2.LIST.getClass().getName() == org.jatha.compile.LispCompiler$5.class
arg2.LIST.functionName has only one value
arg2.LIST.functionName.toString == "LIST"
arg2.SETQ has only one value
arg2.SETQ.getClass().getName() == org.jatha.compile.LispCompiler$6.class
arg2.SETQ.functionName has only one value
arg2.SETQ.functionName.toString == "SETQ"
arg2.SpecialOperators has only one value
arg2.SpecialOperators.getClass().getName() == org.jatha.compile.LispCompiler$1.class
arg2.WarnAboutSpecialsP == false
arg2.f_lisp has only one value
arg2.f_lisp.VERSION_NAME has only one value
arg2.f_lisp.VERSION_NAME.toString == "Jatha"
arg2.f_lisp.VERSION_MAJOR == 3
arg2.f_lisp.VERSION_MINOR == 0
arg2.f_lisp.VERSION_MICRO == 1
arg2.f_lisp.VERSION_TYPE has only one value
arg2.f_lisp.VERSION_TYPE.toString == ""
arg2.f_lisp.VERSION_DATE has only one value
arg2.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
arg2.f_lisp.VERSION_URL has only one value
arg2.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg2.f_lisp.useConsole == true
arg2.f_lisp.PARSER has only one value
arg2.f_lisp.SYMTAB has only one value
arg2.f_lisp.MACHINE has only one value
arg2.f_lisp.SYSTEM_INFO has only one value
arg2.f_lisp.prompt has only one value
arg2.f_lisp.prompt.getClass().getName() == org.jatha.dynatype.StandardLispString.class
arg2.f_lisp.userPrompt == null
arg2.f_lisp.packages == null
arg2.requires has only one value
arg2.requires.getClass().getName() == java.util.HashSet.class
arg2.defaultPackages has only one value
arg2.defaultPackages[] contains no nulls and has only one value, of length 3
arg2.defaultPackages[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
arg2.defaultPackages[].getClass().getName() elements == java.lang.String.class
arg2.defaultPackages.getClass().getName() == org.jatha.compile.LispCompiler$2.class
arg2.legalBlocks has only one value
size(arg2.defaultPackages[]) == 3
===========================================================================
org.jatha.extras.FUNCTION$2:::OBJECT
this has only one value
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
this.functionName has only one value
this.functionName.toString == "FUNCTION"
===========================================================================
org.jatha.extras.FUNCTION$2.(org.jatha.extras.FUNCTION, java.lang.String):::ENTER
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
arg1 has only one value
arg1.toString == "FUNCTION"
===========================================================================
org.jatha.extras.FUNCTION$2.(org.jatha.extras.FUNCTION, java.lang.String):::EXIT
org.jatha.extras.FUNCTION.this == orig(org.jatha.extras.FUNCTION.this)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName())
this.functionName == orig(arg1)
arg1.toString == orig(arg1.toString)
arg1.toString == "FUNCTION"
===========================================================================
org.jatha.extras.FUNCTION$3:::OBJECT
this has only one value
this.val$EVAL has only one value
this.val$EVAL.getClass().getName() == org.jatha.extras.FUNCTION$1.class
this.val$EVAL.functionName has only one value
this.val$EVAL.functionName.toString == "EVAL"
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
this.minNumberOfArgs == 2
this.maxNumberOfArgs == 9223372036854775807L
this.functionName has only one value
this.functionName.toString == "APPLY"
===========================================================================
org.jatha.extras.FUNCTION$3.(org.jatha.extras.FUNCTION, java.lang.String, long, org.jatha.compile.LispPrimitive):::ENTER
org.jatha.extras.FUNCTION.this has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET has only one value
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
arg1 has only one value
arg1.toString == "APPLY"
arg2 == 2
arg3 has only one value
arg3.getClass().getName() == org.jatha.extras.FUNCTION$1.class
arg3.functionName has only one value
arg3.functionName.toString == "EVAL"
===========================================================================
org.jatha.extras.FUNCTION$3.(org.jatha.extras.FUNCTION, java.lang.String, long, org.jatha.compile.LispPrimitive):::EXIT
this.val$EVAL == orig(arg3)
this.val$EVAL.getClass().getName() == orig(arg3.getClass().getName())
this.val$EVAL.functionName == arg3.functionName
org.jatha.extras.FUNCTION.this == orig(org.jatha.extras.FUNCTION.this)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET)
org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName() == orig(org.jatha.extras.FUNCTION.this.UTF8_CHARSET.getClass().getName())
this.minNumberOfArgs == orig(arg2)
this.functionName == orig(arg1)
arg1.toString == orig(arg1.toString)
arg3.functionName == orig(arg3.functionName)
arg3.functionName.toString == orig(arg3.functionName.toString)
arg1.toString == "APPLY"
arg3.functionName has only one value
arg3.functionName.toString == "EVAL"
===========================================================================
org.jatha.extras.FUNCTION:::OBJECT
this has only one value
this.UTF8_CHARSET has only one value
this.UTF8_CHARSET.getClass().getName() == sun.nio.cs.UTF_8.class
===========================================================================
org.jatha.extras.FUNCTION.FUNCTION():::EXIT
===========================================================================
org.jatha.machine.SECDMachine$1:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "BLK"
===========================================================================
org.jatha.machine.SECDMachine$10:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDFC"
===========================================================================
org.jatha.machine.SECDMachine$10.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDFC"
===========================================================================
org.jatha.machine.SECDMachine$10.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDFC"
===========================================================================
org.jatha.machine.SECDMachine$11:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "SEL"
===========================================================================
org.jatha.machine.SECDMachine$11.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "SEL"
===========================================================================
org.jatha.machine.SECDMachine$11.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "SEL"
===========================================================================
org.jatha.machine.SECDMachine$12:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "TEST"
===========================================================================
org.jatha.machine.SECDMachine$12.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "TEST"
===========================================================================
org.jatha.machine.SECDMachine$12.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "TEST"
===========================================================================
org.jatha.machine.SECDMachine$13:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "JOIN"
===========================================================================
org.jatha.machine.SECDMachine$13.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "JOIN"
===========================================================================
org.jatha.machine.SECDMachine$13.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "JOIN"
===========================================================================
org.jatha.machine.SECDMachine$14:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "AP"
===========================================================================
org.jatha.machine.SECDMachine$14.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "AP"
===========================================================================
org.jatha.machine.SECDMachine$14.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "AP"
===========================================================================
org.jatha.machine.SECDMachine$15:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "RAP"
===========================================================================
org.jatha.machine.SECDMachine$15.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "RAP"
===========================================================================
org.jatha.machine.SECDMachine$15.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "RAP"
===========================================================================
org.jatha.machine.SECDMachine$16:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "RTN"
===========================================================================
org.jatha.machine.SECDMachine$16.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "RTN"
===========================================================================
org.jatha.machine.SECDMachine$16.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "RTN"
===========================================================================
org.jatha.machine.SECDMachine$17:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "RTN_IF"
===========================================================================
org.jatha.machine.SECDMachine$17.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "RTN_IF"
===========================================================================
org.jatha.machine.SECDMachine$17.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "RTN_IF"
===========================================================================
org.jatha.machine.SECDMachine$18:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "RTN_IT"
===========================================================================
org.jatha.machine.SECDMachine$18.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "RTN_IT"
===========================================================================
org.jatha.machine.SECDMachine$18.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "RTN_IT"
===========================================================================
org.jatha.machine.SECDMachine$19:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "DAP"
===========================================================================
org.jatha.machine.SECDMachine$19.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "DAP"
===========================================================================
org.jatha.machine.SECDMachine$19.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "DAP"
===========================================================================
org.jatha.machine.SECDMachine$1.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "BLK"
===========================================================================
org.jatha.machine.SECDMachine$1.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "BLK"
===========================================================================
org.jatha.machine.SECDMachine$2:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDNIL"
===========================================================================
org.jatha.machine.SECDMachine$20:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "DUM"
===========================================================================
org.jatha.machine.SECDMachine$20.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "DUM"
===========================================================================
org.jatha.machine.SECDMachine$20.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "DUM"
===========================================================================
org.jatha.machine.SECDMachine$21:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LIS"
===========================================================================
org.jatha.machine.SECDMachine$21.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LIS"
===========================================================================
org.jatha.machine.SECDMachine$21.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LIS"
===========================================================================
org.jatha.machine.SECDMachine$22:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "SP_BIND"
===========================================================================
org.jatha.machine.SECDMachine$22.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "SP_BIND"
===========================================================================
org.jatha.machine.SECDMachine$22.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "SP_BIND"
===========================================================================
org.jatha.machine.SECDMachine$23:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "SP_UNBIND"
===========================================================================
org.jatha.machine.SECDMachine$23.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "SP_UNBIND"
===========================================================================
org.jatha.machine.SECDMachine$23.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "SP_UNBIND"
===========================================================================
org.jatha.machine.SECDMachine$24:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "STOP"
===========================================================================
org.jatha.machine.SECDMachine$24.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "STOP"
===========================================================================
org.jatha.machine.SECDMachine$24.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "STOP"
===========================================================================
org.jatha.machine.SECDMachine$2.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDNIL"
===========================================================================
org.jatha.machine.SECDMachine$2.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDNIL"
===========================================================================
org.jatha.machine.SECDMachine$3:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDT"
===========================================================================
org.jatha.machine.SECDMachine$3.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDT"
===========================================================================
org.jatha.machine.SECDMachine$3.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDT"
===========================================================================
org.jatha.machine.SECDMachine$4:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDC"
===========================================================================
org.jatha.machine.SECDMachine$4.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDC"
===========================================================================
org.jatha.machine.SECDMachine$4.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDC"
===========================================================================
org.jatha.machine.SECDMachine$5:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "ST"
===========================================================================
org.jatha.machine.SECDMachine$5.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "ST"
===========================================================================
org.jatha.machine.SECDMachine$5.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "ST"
===========================================================================
org.jatha.machine.SECDMachine$6:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDR"
===========================================================================
org.jatha.machine.SECDMachine$6.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDR"
===========================================================================
org.jatha.machine.SECDMachine$6.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDR"
===========================================================================
org.jatha.machine.SECDMachine$7:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LD"
===========================================================================
org.jatha.machine.SECDMachine$7.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LD"
===========================================================================
org.jatha.machine.SECDMachine$7.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LD"
===========================================================================
org.jatha.machine.SECDMachine$8:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LD_GLOBAL"
===========================================================================
org.jatha.machine.SECDMachine$8.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LD_GLOBAL"
===========================================================================
org.jatha.machine.SECDMachine$8.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LD_GLOBAL"
===========================================================================
org.jatha.machine.SECDMachine$9:::OBJECT
this has only one value
this.functionName has only one value
this.functionName.toString == "LDF"
===========================================================================
org.jatha.machine.SECDMachine$9.(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "LDF"
===========================================================================
org.jatha.machine.SECDMachine$9.(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "LDF"
===========================================================================
org.jatha.machine.SECDMachine:::CLASS
org.jatha.machine.SECDMachine.DEBUG == false
org.jatha.machine.SECDMachine.BLK has only one value
org.jatha.machine.SECDMachine.BLK.getClass().getName() == org.jatha.machine.SECDMachine$1.class
org.jatha.machine.SECDMachine.BLK.functionName has only one value
org.jatha.machine.SECDMachine.BLK.functionName.toString == "BLK"
org.jatha.machine.SECDMachine.LDNIL has only one value
org.jatha.machine.SECDMachine.LDNIL.getClass().getName() == org.jatha.machine.SECDMachine$2.class
org.jatha.machine.SECDMachine.LDNIL.functionName has only one value
org.jatha.machine.SECDMachine.LDNIL.functionName.toString == "LDNIL"
org.jatha.machine.SECDMachine.LDT has only one value
org.jatha.machine.SECDMachine.LDT.getClass().getName() == org.jatha.machine.SECDMachine$3.class
org.jatha.machine.SECDMachine.LDT.functionName has only one value
org.jatha.machine.SECDMachine.LDT.functionName.toString == "LDT"
org.jatha.machine.SECDMachine.LDC has only one value
org.jatha.machine.SECDMachine.LDC.getClass().getName() == org.jatha.machine.SECDMachine$4.class
org.jatha.machine.SECDMachine.LDC.functionName has only one value
org.jatha.machine.SECDMachine.LDC.functionName.toString == "LDC"
org.jatha.machine.SECDMachine.ST has only one value
org.jatha.machine.SECDMachine.ST.getClass().getName() == org.jatha.machine.SECDMachine$5.class
org.jatha.machine.SECDMachine.ST.functionName has only one value
org.jatha.machine.SECDMachine.ST.functionName.toString == "ST"
org.jatha.machine.SECDMachine.LDR has only one value
org.jatha.machine.SECDMachine.LDR.getClass().getName() == org.jatha.machine.SECDMachine$6.class
org.jatha.machine.SECDMachine.LDR.functionName has only one value
org.jatha.machine.SECDMachine.LDR.functionName.toString == "LDR"
org.jatha.machine.SECDMachine.LD has only one value
org.jatha.machine.SECDMachine.LD.getClass().getName() == org.jatha.machine.SECDMachine$7.class
org.jatha.machine.SECDMachine.LD.functionName has only one value
org.jatha.machine.SECDMachine.LD.functionName.toString == "LD"
org.jatha.machine.SECDMachine.LD_GLOBAL has only one value
org.jatha.machine.SECDMachine.LD_GLOBAL.getClass().getName() == org.jatha.machine.SECDMachine$8.class
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName has only one value
org.jatha.machine.SECDMachine.LD_GLOBAL.functionName.toString == "LD_GLOBAL"
org.jatha.machine.SECDMachine.LDF has only one value
org.jatha.machine.SECDMachine.LDF.getClass().getName() == org.jatha.machine.SECDMachine$9.class
org.jatha.machine.SECDMachine.LDF.functionName has only one value
org.jatha.machine.SECDMachine.LDF.functionName.toString == "LDF"
org.jatha.machine.SECDMachine.LDFC has only one value
org.jatha.machine.SECDMachine.LDFC.getClass().getName() == org.jatha.machine.SECDMachine$10.class
org.jatha.machine.SECDMachine.LDFC.functionName has only one value
org.jatha.machine.SECDMachine.LDFC.functionName.toString == "LDFC"
org.jatha.machine.SECDMachine.SEL has only one value
org.jatha.machine.SECDMachine.SEL.getClass().getName() == org.jatha.machine.SECDMachine$11.class
org.jatha.machine.SECDMachine.SEL.functionName has only one value
org.jatha.machine.SECDMachine.SEL.functionName.toString == "SEL"
org.jatha.machine.SECDMachine.TEST has only one value
org.jatha.machine.SECDMachine.TEST.getClass().getName() == org.jatha.machine.SECDMachine$12.class
org.jatha.machine.SECDMachine.TEST.functionName has only one value
org.jatha.machine.SECDMachine.TEST.functionName.toString == "TEST"
org.jatha.machine.SECDMachine.JOIN has only one value
org.jatha.machine.SECDMachine.JOIN.getClass().getName() == org.jatha.machine.SECDMachine$13.class
org.jatha.machine.SECDMachine.JOIN.functionName has only one value
org.jatha.machine.SECDMachine.JOIN.functionName.toString == "JOIN"
org.jatha.machine.SECDMachine.AP has only one value
org.jatha.machine.SECDMachine.AP.getClass().getName() == org.jatha.machine.SECDMachine$14.class
org.jatha.machine.SECDMachine.AP.functionName has only one value
org.jatha.machine.SECDMachine.AP.functionName.toString == "AP"
org.jatha.machine.SECDMachine.RAP has only one value
org.jatha.machine.SECDMachine.RAP.getClass().getName() == org.jatha.machine.SECDMachine$15.class
org.jatha.machine.SECDMachine.RAP.functionName has only one value
org.jatha.machine.SECDMachine.RAP.functionName.toString == "RAP"
org.jatha.machine.SECDMachine.RTN has only one value
org.jatha.machine.SECDMachine.RTN.getClass().getName() == org.jatha.machine.SECDMachine$16.class
org.jatha.machine.SECDMachine.RTN.functionName has only one value
org.jatha.machine.SECDMachine.RTN.functionName.toString == "RTN"
org.jatha.machine.SECDMachine.RTN_IF has only one value
org.jatha.machine.SECDMachine.RTN_IF.getClass().getName() == org.jatha.machine.SECDMachine$17.class
org.jatha.machine.SECDMachine.RTN_IF.functionName has only one value
org.jatha.machine.SECDMachine.RTN_IF.functionName.toString == "RTN_IF"
org.jatha.machine.SECDMachine.RTN_IT has only one value
org.jatha.machine.SECDMachine.RTN_IT.getClass().getName() == org.jatha.machine.SECDMachine$18.class
org.jatha.machine.SECDMachine.RTN_IT.functionName has only one value
org.jatha.machine.SECDMachine.RTN_IT.functionName.toString == "RTN_IT"
org.jatha.machine.SECDMachine.DAP has only one value
org.jatha.machine.SECDMachine.DAP.getClass().getName() == org.jatha.machine.SECDMachine$19.class
org.jatha.machine.SECDMachine.DAP.functionName has only one value
org.jatha.machine.SECDMachine.DAP.functionName.toString == "DAP"
org.jatha.machine.SECDMachine.DUM has only one value
org.jatha.machine.SECDMachine.DUM.getClass().getName() == org.jatha.machine.SECDMachine$20.class
org.jatha.machine.SECDMachine.DUM.functionName has only one value
org.jatha.machine.SECDMachine.DUM.functionName.toString == "DUM"
org.jatha.machine.SECDMachine.LIS has only one value
org.jatha.machine.SECDMachine.LIS.getClass().getName() == org.jatha.machine.SECDMachine$21.class
org.jatha.machine.SECDMachine.LIS.functionName has only one value
org.jatha.machine.SECDMachine.LIS.functionName.toString == "LIS"
org.jatha.machine.SECDMachine.SP_BIND has only one value
org.jatha.machine.SECDMachine.SP_BIND.getClass().getName() == org.jatha.machine.SECDMachine$22.class
org.jatha.machine.SECDMachine.SP_BIND.functionName has only one value
org.jatha.machine.SECDMachine.SP_BIND.functionName.toString == "SP_BIND"
org.jatha.machine.SECDMachine.SP_UNBIND has only one value
org.jatha.machine.SECDMachine.SP_UNBIND.getClass().getName() == org.jatha.machine.SECDMachine$23.class
org.jatha.machine.SECDMachine.SP_UNBIND.functionName has only one value
org.jatha.machine.SECDMachine.SP_UNBIND.functionName.toString == "SP_UNBIND"
org.jatha.machine.SECDMachine.STOP has only one value
org.jatha.machine.SECDMachine.STOP.getClass().getName() == org.jatha.machine.SECDMachine$24.class
org.jatha.machine.SECDMachine.STOP.functionName has only one value
org.jatha.machine.SECDMachine.STOP.functionName.toString == "STOP"
===========================================================================
org.jatha.machine.SECDMachine:::OBJECT
this has only one value
this.S has only one value
org.jatha.machine.SECDRegister.count == 1005
this.S.f_name has only one value
this.S.f_name.toString == "*REGISTER-1001*"
this.S.f_value has only one value
this.S.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.E has only one value
this.E.f_name has only one value
this.E.f_name.toString == "*REGISTER-1002*"
this.E.f_value has only one value
this.E.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.C has only one value
this.C.f_name has only one value
this.C.f_name.toString == "*REGISTER-1003*"
this.C.f_value has only one value
this.C.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.D has only one value
this.D.f_name has only one value
this.D.f_name.toString == "*REGISTER-1004*"
this.D.f_value has only one value
this.D.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.X has only one value
this.X.f_name has only one value
this.X.f_name.toString == "*REGISTER-1005*"
this.X.f_value has only one value
this.X.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
this.B has only one value
===========================================================================
org.jatha.machine.SECDMachine.SECDMachine():::EXIT
===========================================================================
org.jatha.machine.SECDRegister:::CLASS
===========================================================================
org.jatha.machine.SECDRegister:::OBJECT
this.f_name != null
this.f_value.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
===========================================================================
org.jatha.machine.SECDRegister.SECDRegister(java.lang.String):::ENTER
===========================================================================
org.jatha.machine.SECDRegister.SECDRegister(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
this.f_value has only one value
===========================================================================
org.jatha.machine.SECDRegister.assign(org.jatha.dynatype.LispValue):::ENTER
this.f_value == null
arg0 has only one value
arg0.getClass().getName() == org.jatha.dynatype.StandardLispNIL.class
===========================================================================
org.jatha.machine.SECDRegister.assign(org.jatha.dynatype.LispValue):::EXIT
org.jatha.machine.SECDRegister.count == orig(org.jatha.machine.SECDRegister.count)
this.f_name == orig(this.f_name)
this.f_name.toString == orig(this.f_name.toString)
this.f_value has only one value
===========================================================================
org.jatha.machine.SECDop:::OBJECT
this.functionName != null
===========================================================================
org.jatha.machine.SECDop.SECDop(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.machine.SECDop.SECDop(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
org.jatha.read.LispParser:::CLASS
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.f_myParser == null
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
org.jatha.Lisp.DEBUG == false
org.jatha.Lisp.APROPOS_TAB == 30
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
===========================================================================
org.jatha.read.LispParser:::OBJECT
this has only one value
this.BackQuoteLevel == 0
this.inputReader has only one value
this.f_caseSensitivity == 1
this.f_lisp has only one value
this.f_lisp.VERSION_NAME has only one value
this.f_lisp.VERSION_NAME.toString == "Jatha"
this.f_lisp.VERSION_MAJOR == 3
this.f_lisp.VERSION_MINOR == 0
this.f_lisp.VERSION_MICRO == 1
this.f_lisp.VERSION_TYPE has only one value
this.f_lisp.VERSION_TYPE.toString == ""
this.f_lisp.VERSION_DATE has only one value
this.f_lisp.VERSION_DATE.toString == "1 Feb 2014"
this.f_lisp.VERSION_URL has only one value
this.f_lisp.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
this.f_lisp.useConsole == true
this.f_lisp.PARSER == null
this.f_lisp.COMPILER == null
this.f_lisp.SYMTAB has only one value
org.jatha.util.SymbolTable.$assertionsDisabled == false
this.f_lisp.MACHINE == null
this.f_lisp.SYSTEM_INFO has only one value
this.f_lisp.prompt == null
this.f_lisp.userPrompt == null
this.f_lisp.packages == null
===========================================================================
org.jatha.read.LispParser.LispParser(org.jatha.Lisp, java.io.Reader):::ENTER
arg0 has only one value
org.jatha.Lisp.DEBUG == false
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER == null
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.f_myParser == null
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
arg0.COMPILER == null
arg0.SYMTAB has only one value
org.jatha.util.SymbolTable.$assertionsDisabled == false
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
arg1 has only one value
arg1.getClass().getName() == java.io.InputStreamReader.class
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
===========================================================================
org.jatha.read.LispParser.LispParser(org.jatha.Lisp, java.io.Reader):::EXIT
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
arg0.VERSION_NAME == orig(arg0.VERSION_NAME)
arg0.VERSION_NAME.toString == orig(arg0.VERSION_NAME.toString)
arg0.VERSION_MAJOR == orig(arg0.VERSION_MAJOR)
arg0.VERSION_MINOR == orig(arg0.VERSION_MINOR)
arg0.VERSION_MICRO == orig(arg0.VERSION_MICRO)
arg0.VERSION_TYPE == orig(arg0.VERSION_TYPE)
arg0.VERSION_TYPE.toString == orig(arg0.VERSION_TYPE.toString)
arg0.VERSION_DATE == orig(arg0.VERSION_DATE)
arg0.VERSION_DATE.toString == orig(arg0.VERSION_DATE.toString)
arg0.VERSION_URL == orig(arg0.VERSION_URL)
arg0.VERSION_URL.toString == orig(arg0.VERSION_URL.toString)
arg0.useConsole == orig(arg0.useConsole)
arg0.PARSER == orig(arg0.PARSER)
arg0.COMPILER == orig(arg0.COMPILER)
arg0.SYMTAB == orig(arg0.SYMTAB)
arg0.MACHINE == orig(arg0.MACHINE)
arg0.SYSTEM_INFO == orig(arg0.SYSTEM_INFO)
arg0.prompt == orig(arg0.prompt)
arg0.userPrompt == orig(arg0.userPrompt)
arg0.packages == orig(arg0.packages)
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER == null
arg0.COMPILER == null
arg0.SYMTAB has only one value
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
===========================================================================
org.jatha.read.LispParser.LispParser(org.jatha.Lisp, java.io.Reader, int):::ENTER
arg0 has only one value
org.jatha.Lisp.DEBUG == false
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER == null
org.jatha.read.LispParser.COMMA_FN has only one value
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_ATSIGN_FN has only one value
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.COMMA_DOT_FN has only one value
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
org.jatha.read.LispParser.f_myParser == null
org.jatha.read.LispParser.terminatorLookupTable has only one value
org.jatha.read.LispParser.terminatorLookupTable[] == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.jatha.read.LispParser.REAL_PATTERN has only one value
arg0.COMPILER == null
arg0.SYMTAB has only one value
org.jatha.util.SymbolTable.$assertionsDisabled == false
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
org.jatha.Lisp.APROPOS_TAB == 30
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == 100000
org.jatha.Lisp.PRINT_LENGTH_VALUE == 512
org.jatha.Lisp.PRINT_LEVEL_VALUE == 15
arg1 has only one value
arg1.getClass().getName() == java.io.InputStreamReader.class
arg2 == 1
size(org.jatha.read.LispParser.terminatorLookupTable[]) == 256
===========================================================================
org.jatha.read.LispParser.LispParser(org.jatha.Lisp, java.io.Reader, int):::EXIT
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
arg0.VERSION_NAME == orig(arg0.VERSION_NAME)
arg0.VERSION_NAME.toString == orig(arg0.VERSION_NAME.toString)
arg0.VERSION_MAJOR == orig(arg0.VERSION_MAJOR)
arg0.VERSION_MINOR == orig(arg0.VERSION_MINOR)
arg0.VERSION_MICRO == orig(arg0.VERSION_MICRO)
arg0.VERSION_TYPE == orig(arg0.VERSION_TYPE)
arg0.VERSION_TYPE.toString == orig(arg0.VERSION_TYPE.toString)
arg0.VERSION_DATE == orig(arg0.VERSION_DATE)
arg0.VERSION_DATE.toString == orig(arg0.VERSION_DATE.toString)
arg0.VERSION_URL == orig(arg0.VERSION_URL)
arg0.VERSION_URL.toString == orig(arg0.VERSION_URL.toString)
arg0.useConsole == orig(arg0.useConsole)
arg0.PARSER == orig(arg0.PARSER)
arg0.COMPILER == orig(arg0.COMPILER)
arg0.SYMTAB == orig(arg0.SYMTAB)
arg0.MACHINE == orig(arg0.MACHINE)
arg0.SYSTEM_INFO == orig(arg0.SYSTEM_INFO)
arg0.prompt == orig(arg0.prompt)
arg0.userPrompt == orig(arg0.userPrompt)
arg0.packages == orig(arg0.packages)
arg0.VERSION_NAME has only one value
arg0.VERSION_NAME.toString == "Jatha"
arg0.VERSION_MAJOR == 3
arg0.VERSION_MINOR == 0
arg0.VERSION_MICRO == 1
arg0.VERSION_TYPE has only one value
arg0.VERSION_TYPE.toString == ""
arg0.VERSION_DATE has only one value
arg0.VERSION_DATE.toString == "1 Feb 2014"
arg0.VERSION_URL has only one value
arg0.VERSION_URL.toString == "https://github.com/yuriy-chumak/jatha"
arg0.useConsole == true
arg0.PARSER == null
arg0.COMPILER == null
arg0.SYMTAB has only one value
arg0.MACHINE == null
arg0.SYSTEM_INFO has only one value
arg0.prompt == null
arg0.userPrompt == null
arg0.packages == null
===========================================================================
org.jatha.read.LispParser.isComma(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isComma(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 44)
===========================================================================
org.jatha.read.LispParser.isComma(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 44
===========================================================================
org.jatha.read.LispParser.isComma(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isDoubleQuote(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isDoubleQuote(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 34)
===========================================================================
org.jatha.read.LispParser.isDoubleQuote(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 34
===========================================================================
org.jatha.read.LispParser.isDoubleQuote(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isLparen(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isLparen(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 40)
===========================================================================
org.jatha.read.LispParser.isLparen(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 40
===========================================================================
org.jatha.read.LispParser.isLparen(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isQuote(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isQuote(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 39)
===========================================================================
org.jatha.read.LispParser.isQuote(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 39
===========================================================================
org.jatha.read.LispParser.isQuote(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isRparen(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isRparen(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 41)
===========================================================================
org.jatha.read.LispParser.isRparen(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 41
===========================================================================
org.jatha.read.LispParser.isRparen(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isSemicolon(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isSemicolon(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
(return == true)  ==>  (orig(arg0) == 59)
===========================================================================
org.jatha.read.LispParser.isSemicolon(char):::EXIT;condition="return == true"
return == true
orig(arg0) == 59
===========================================================================
org.jatha.read.LispParser.isSemicolon(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.isSpace(char):::ENTER
===========================================================================
org.jatha.read.LispParser.isSpace(char):::EXIT
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
===========================================================================
org.jatha.read.LispParser.isSpace(char):::EXIT;condition="return == true"
return == true
===========================================================================
org.jatha.read.LispParser.isSpace(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.jatha.read.LispParser.setCaseSensitivity(int):::ENTER
arg0 == 1
===========================================================================
org.jatha.read.LispParser.setCaseSensitivity(int):::EXIT
org.jatha.read.LispParser.COMMA_FN == orig(org.jatha.read.LispParser.COMMA_FN)
org.jatha.read.LispParser.COMMA_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_ATSIGN_FN == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN)
org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_ATSIGN_FN.getClass().getName())
org.jatha.read.LispParser.COMMA_DOT_FN == orig(org.jatha.read.LispParser.COMMA_DOT_FN)
org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName() == orig(org.jatha.read.LispParser.COMMA_DOT_FN.getClass().getName())
this.BackQuoteLevel == orig(this.BackQuoteLevel)
this.inputReader == orig(this.inputReader)
this.f_caseSensitivity == orig(this.f_caseSensitivity)
org.jatha.read.LispParser.f_myParser == orig(org.jatha.read.LispParser.f_myParser)
org.jatha.read.LispParser.terminatorLookupTable == orig(org.jatha.read.LispParser.terminatorLookupTable)
org.jatha.read.LispParser.terminatorLookupTable[] == orig(org.jatha.read.LispParser.terminatorLookupTable[])
org.jatha.read.LispParser.REAL_PATTERN == orig(org.jatha.read.LispParser.REAL_PATTERN)
org.jatha.Lisp.DEBUG == orig(org.jatha.Lisp.DEBUG)
org.jatha.Lisp.APROPOS_TAB == orig(org.jatha.Lisp.APROPOS_TAB)
org.jatha.Lisp.MAX_LIST_LENGTH_VALUE == orig(org.jatha.Lisp.MAX_LIST_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LENGTH_VALUE == orig(org.jatha.Lisp.PRINT_LENGTH_VALUE)
org.jatha.Lisp.PRINT_LEVEL_VALUE == orig(org.jatha.Lisp.PRINT_LEVEL_VALUE)
this.f_lisp == orig(this.f_lisp)
this.f_lisp.VERSION_NAME == orig(this.f_lisp.VERSION_NAME)
this.f_lisp.VERSION_NAME.toString == orig(this.f_lisp.VERSION_NAME.toString)
this.f_lisp.VERSION_MAJOR == orig(this.f_lisp.VERSION_MAJOR)
this.f_lisp.VERSION_MINOR == orig(this.f_lisp.VERSION_MINOR)
this.f_lisp.VERSION_MICRO == orig(this.f_lisp.VERSION_MICRO)
this.f_lisp.VERSION_TYPE == orig(this.f_lisp.VERSION_TYPE)
this.f_lisp.VERSION_TYPE.toString == orig(this.f_lisp.VERSION_TYPE.toString)
this.f_lisp.VERSION_DATE == orig(this.f_lisp.VERSION_DATE)
this.f_lisp.VERSION_DATE.toString == orig(this.f_lisp.VERSION_DATE.toString)
this.f_lisp.VERSION_URL == orig(this.f_lisp.VERSION_URL)
this.f_lisp.VERSION_URL.toString == orig(this.f_lisp.VERSION_URL.toString)
this.f_lisp.useConsole == orig(this.f_lisp.useConsole)
this.f_lisp.PARSER == orig(this.f_lisp.PARSER)
this.f_lisp.COMPILER == orig(this.f_lisp.COMPILER)
this.f_lisp.SYMTAB == orig(this.f_lisp.SYMTAB)
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
this.f_lisp.MACHINE == orig(this.f_lisp.MACHINE)
this.f_lisp.SYSTEM_INFO == orig(this.f_lisp.SYSTEM_INFO)
this.f_lisp.prompt == orig(this.f_lisp.prompt)
this.f_lisp.userPrompt == orig(this.f_lisp.userPrompt)
this.f_lisp.packages == orig(this.f_lisp.packages)
===========================================================================
org.jatha.util.SymbolTable:::CLASS
org.jatha.util.SymbolTable.$assertionsDisabled == false
===========================================================================
org.jatha.util.SymbolTable:::OBJECT
this has only one value
===========================================================================
org.jatha.util.SymbolTable.SymbolTable():::EXIT
===========================================================================
org.jatha.util.SymbolTable.get(java.lang.String):::ENTER
arg0 != null
===========================================================================
org.jatha.util.SymbolTable.get(java.lang.String):::EXIT
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return == null
===========================================================================
org.jatha.util.SymbolTable.put(java.lang.String, org.jatha.dynatype.LispSymbol):::ENTER
arg0 != null
arg1 != null
arg1.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
===========================================================================
org.jatha.util.SymbolTable.put(java.lang.String, org.jatha.dynatype.LispSymbol):::EXIT
org.jatha.util.SymbolTable.$assertionsDisabled == orig(org.jatha.util.SymbolTable.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
return != null
return.getClass().getName() == org.jatha.dynatype.StandardLispSymbol.class
Exiting Daikon.
