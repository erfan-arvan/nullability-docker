Daikon version 5.8.20, released May 14, 2024; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

missing variables in newEnterExitRel:
  parent = reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::ENTER
  child = reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::EXIT
  parent.var_infos = [Ldaikon.VarInfo;@35fd987b
parent varinfos missing from parent_to_child_map:
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.ARPProtocol.this.iface.index]
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.ARPProtocol.this.iface.index-1]
   arg1.src.addr[reso.ip.ARPProtocol.this.iface.index]
   arg1.src.addr[reso.ip.ARPProtocol.this.iface.index-1]
   arg1.dst.addr[reso.ip.ARPProtocol.this.iface.index]
   arg1.dst.addr[reso.ip.ARPProtocol.this.iface.index-1]
   arg2.addr[reso.ip.ARPProtocol.this.iface.index]
   arg2.addr[reso.ip.ARPProtocol.this.iface.index-1]
   reso.ip.IPAddress.ANY.addr[reso.ip.ARPProtocol.this.iface.index]
   reso.ip.IPAddress.ANY.addr[reso.ip.ARPProtocol.this.iface.index-1]
   reso.ip.IPAddress.BROADCAST.addr[reso.ip.ARPProtocol.this.iface.index]
   reso.ip.IPAddress.BROADCAST.addr[reso.ip.ARPProtocol.this.iface.index-1]
   reso.ip.IPAddress.LOCALHOST.addr[reso.ip.ARPProtocol.this.iface.index]
   reso.ip.IPAddress.LOCALHOST.addr[reso.ip.ARPProtocol.this.iface.index-1]
   arg3.addr.addr[reso.ip.ARPProtocol.this.iface.index]
   arg3.addr.addr[reso.ip.ARPProtocol.this.iface.index-1]
   arg3.listeners.listeners[reso.ip.ARPProtocol.this.iface.index]
   arg3.listeners.listeners[reso.ip.ARPProtocol.this.iface.index-1]
   arg3.attrListeners.listeners[reso.ip.ARPProtocol.this.iface.index]
   arg3.attrListeners.listeners[reso.ip.ARPProtocol.this.iface.index-1]
   arg3.node.ifaces[reso.ip.ARPProtocol.this.iface.index]
   arg3.node.ifaces[reso.ip.ARPProtocol.this.iface.index-1]
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.ARPProtocol.this.adapter.index]
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.ARPProtocol.this.adapter.index-1]
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.Datagram.protocols.nextProtocolNumber]
   reso.ip.ARPProtocol.this.adapter.listeners[reso.ip.Datagram.protocols.nextProtocolNumber-1]
   reso.ip.ARPProtocol.this.adapter.listeners[arg1.ttl]
   reso.ip.ARPProtocol.this.adapter.listeners[arg1.ttl-1]
   reso.ip.ARPProtocol.this.adapter.listeners[arg1.protocol]
   reso.ip.ARPProtocol.this.adapter.listeners[arg1.protocol-1]
   reso.ip.ARPProtocol.this.adapter.listeners[arg3.link.SPEED_OF_LIGHT]
   reso.ip.ARPProtocol.this.adapter.listeners[arg3.link.SPEED_OF_LIGHT-1]
   reso.ip.ARPProtocol.this.adapter.listeners[arg3.index]
   reso.ip.ARPProtocol.this.adapter.listeners[arg3.index-1]
   arg1.src.addr[reso.ip.ARPProtocol.this.adapter.index]
   arg1.src.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   arg1.dst.addr[reso.ip.ARPProtocol.this.adapter.index]
   arg1.dst.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   arg2.addr[reso.ip.ARPProtocol.this.adapter.index]
   arg2.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   reso.ip.IPAddress.ANY.addr[reso.ip.ARPProtocol.this.adapter.index]
   reso.ip.IPAddress.ANY.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   reso.ip.IPAddress.BROADCAST.addr[reso.ip.ARPProtocol.this.adapter.index]
   reso.ip.IPAddress.BROADCAST.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   reso.ip.IPAddress.LOCALHOST.addr[reso.ip.ARPProtocol.this.adapter.index]
   reso.ip.IPAddress.LOCALHOST.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   arg3.addr.addr[reso.ip.ARPProtocol.this.adapter.index]
   arg3.addr.addr[reso.ip.ARPProtocol.this.adapter.index-1]
   arg3.listeners.listeners[reso.ip.ARPProtocol.this.adapter.index]
   arg3.listeners.listeners[reso.ip.ARPProtocol.this.adapter.index-1]
   arg3.attrListeners.listeners[reso.ip.ARPProtocol.this.adapter.index]
   arg3.attrListeners.listeners[reso.ip.ARPProtocol.this.adapter.index-1]
   arg3.node.ifaces[reso.ip.ARPProtocol.this.adapter.index]
   arg3.node.ifaces[reso.ip.ARPProtocol.this.adapter.index-1]
rel.parent_to_child_map:
    reso.ip.ARPProtocol.this => orig(reso.ip.ARPProtocol.this)
    reso.ip.ARPProtocol.this.tableARP => orig(reso.ip.ARPProtocol.this.tableARP)
    reso.ip.ARPProtocol.this.tableARP.getClass().getName() => orig(reso.ip.ARPProtocol.this.tableARP.getClass().getName())
    reso.ip.ARPProtocol.this.pendingARPTasks => orig(reso.ip.ARPProtocol.this.pendingARPTasks)
    reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName() => orig(reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName())
    reso.ip.ARPProtocol.this.iface => orig(reso.ip.ARPProtocol.this.iface)
    reso.ip.ARPProtocol.this.iface.addr => orig(reso.ip.ARPProtocol.this.iface.addr)
    reso.ip.ARPProtocol.this.iface.link => orig(reso.ip.ARPProtocol.this.iface.link)
    reso.ip.ARPProtocol.this.iface.listeners => orig(reso.ip.ARPProtocol.this.iface.listeners)
    reso.ip.ARPProtocol.this.iface.attrs => orig(reso.ip.ARPProtocol.this.iface.attrs)
    reso.ip.ARPProtocol.this.iface.attrListeners => orig(reso.ip.ARPProtocol.this.iface.attrListeners)
    reso.ip.ARPProtocol.this.iface.index => orig(reso.ip.ARPProtocol.this.iface.index)
    reso.ip.ARPProtocol.this.iface.type => orig(reso.ip.ARPProtocol.this.iface.type)
    reso.ip.ARPProtocol.this.iface.type.toString => orig(reso.ip.ARPProtocol.this.iface.type.toString)
    reso.ip.ARPProtocol.this.iface.node => orig(reso.ip.ARPProtocol.this.iface.node)
    reso.ip.ARPProtocol.this.iface.node.getClass().getName() => orig(reso.ip.ARPProtocol.this.iface.node.getClass().getName())
    reso.common.AbstractInterface.$assertionsDisabled => orig(reso.common.AbstractInterface.$assertionsDisabled)
    reso.ip.ARPProtocol.this.adapter => orig(reso.ip.ARPProtocol.this.adapter)
    reso.ip.ARPProtocol.this.adapter.ip => orig(reso.ip.ARPProtocol.this.adapter.ip)
    reso.ip.ARPProtocol.this.adapter.iface => orig(reso.ip.ARPProtocol.this.adapter.iface)
    reso.ip.ARPProtocol.this.adapter.arp => orig(reso.ip.ARPProtocol.this.adapter.arp)
    reso.ip.ARPProtocol.this.adapter.addresses => orig(reso.ip.ARPProtocol.this.adapter.addresses)
    reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName() => orig(reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName())
    reso.ip.ARPProtocol.this.adapter.listeners => orig(reso.ip.ARPProtocol.this.adapter.listeners)
    reso.ip.ARPProtocol.this.adapter.listeners[..] => orig(reso.ip.ARPProtocol.this.adapter.listeners[..])
    reso.ip.ARPProtocol.this.adapter.listeners[..].getClass().getName() => orig(reso.ip.ARPProtocol.this.adapter.listeners[..].getClass().getName())
    reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() => orig(reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName())
    reso.ip.ARPProtocol.this.adapter.attrs => orig(reso.ip.ARPProtocol.this.adapter.attrs)
    reso.ip.ARPProtocol.this.adapter.attrListeners => orig(reso.ip.ARPProtocol.this.adapter.attrListeners)
    reso.ip.ARPProtocol.this.adapter.index => orig(reso.ip.ARPProtocol.this.adapter.index)
    reso.ip.ARPProtocol.this.adapter.type => orig(reso.ip.ARPProtocol.this.adapter.type)
    reso.ip.ARPProtocol.this.adapter.type.toString => orig(reso.ip.ARPProtocol.this.adapter.type.toString)
    reso.ip.ARPProtocol.this.adapter.node => orig(reso.ip.ARPProtocol.this.adapter.node)
    reso.ip.ARPProtocol.this.adapter.node.getClass().getName() => orig(reso.ip.ARPProtocol.this.adapter.node.getClass().getName())
    arg1 => orig(arg1)
    reso.ip.Datagram.protocols => orig(reso.ip.Datagram.protocols)
    reso.ip.Datagram.protocols.nextProtocolNumber => orig(reso.ip.Datagram.protocols.nextProtocolNumber)
    reso.ip.Datagram.protocols.protocolsByName => orig(reso.ip.Datagram.protocols.protocolsByName)
    reso.ip.Datagram.protocols.protocolsByName.getClass().getName() => orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
    reso.ip.Datagram.protocols.protocolsByNumber => orig(reso.ip.Datagram.protocols.protocolsByNumber)
    reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName() => orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
    arg1.src => orig(arg1.src)
    arg1.src.addr => orig(arg1.src.addr)
    arg1.src.addr[..] => orig(arg1.src.addr[..])
    reso.ip.IPAddress.ANY => orig(reso.ip.IPAddress.ANY)
    reso.ip.IPAddress.BROADCAST => orig(reso.ip.IPAddress.BROADCAST)
    reso.ip.IPAddress.LOCALHOST => orig(reso.ip.IPAddress.LOCALHOST)
    arg1.dst => orig(arg1.dst)
    arg1.dst.addr => orig(arg1.dst.addr)
    arg1.dst.addr[..] => orig(arg1.dst.addr[..])
    arg1.ttl => orig(arg1.ttl)
    arg1.payload => orig(arg1.payload)
    arg1.payload.getClass().getName() => orig(arg1.payload.getClass().getName())
    arg1.protocol => orig(arg1.protocol)
    arg2 => orig(arg2)
    arg2.addr => orig(arg2.addr)
    arg2.addr[..] => orig(arg2.addr[..])
    reso.ip.IPAddress.ANY.addr => orig(reso.ip.IPAddress.ANY.addr)
    reso.ip.IPAddress.ANY.addr[..] => orig(reso.ip.IPAddress.ANY.addr[..])
    reso.ip.IPAddress.BROADCAST.addr => orig(reso.ip.IPAddress.BROADCAST.addr)
    reso.ip.IPAddress.BROADCAST.addr[..] => orig(reso.ip.IPAddress.BROADCAST.addr[..])
    reso.ip.IPAddress.LOCALHOST.addr => orig(reso.ip.IPAddress.LOCALHOST.addr)
    reso.ip.IPAddress.LOCALHOST.addr[..] => orig(reso.ip.IPAddress.LOCALHOST.addr[..])
    arg3 => orig(arg3)
    arg3.addr => orig(arg3.addr)
    reso.ethernet.EthernetAddress.BROADCAST => orig(reso.ethernet.EthernetAddress.BROADCAST)
    arg3.addr.addr => orig(arg3.addr.addr)
    arg3.addr.addr[..] => orig(arg3.addr.addr[..])
    arg3.link => orig(arg3.link)
    arg3.link.SPEED_OF_LIGHT => orig(arg3.link.SPEED_OF_LIGHT)
    arg3.link.iface1 => orig(arg3.link.iface1)
    arg3.link.iface1.getClass().getName() => orig(arg3.link.iface1.getClass().getName())
    arg3.link.iface2 => orig(arg3.link.iface2)
    arg3.link.iface2.getClass().getName() => orig(arg3.link.iface2.getClass().getName())
    arg3.link.length => orig(arg3.link.length)
    arg3.listeners => orig(arg3.listeners)
    arg3.listeners.listeners => orig(arg3.listeners.listeners)
    arg3.listeners.listeners[..] => orig(arg3.listeners.listeners[..])
    arg3.listeners.listeners[..].getClass().getName() => orig(arg3.listeners.listeners[..].getClass().getName())
    arg3.listeners.listeners.getClass().getName() => orig(arg3.listeners.listeners.getClass().getName())
    arg3.attrs => orig(arg3.attrs)
    arg3.attrListeners => orig(arg3.attrListeners)
    arg3.attrListeners.listeners => orig(arg3.attrListeners.listeners)
    arg3.attrListeners.listeners[..] => orig(arg3.attrListeners.listeners[..])
    arg3.attrListeners.listeners[..].getClass().getName() => orig(arg3.attrListeners.listeners[..].getClass().getName())
    arg3.attrListeners.listeners.getClass().getName() => orig(arg3.attrListeners.listeners.getClass().getName())
    arg3.index => orig(arg3.index)
    arg3.type => orig(arg3.type)
    arg3.type.toString => orig(arg3.type.toString)
    arg3.node => orig(arg3.node)
    arg3.node.getClass().getName() => orig(arg3.node.getClass().getName())
    arg3.node.ifaces => orig(arg3.node.ifaces)
    arg3.node.ifaces[..] => orig(arg3.node.ifaces[..])
    arg3.node.ifaces[..].getClass().getName() => orig(arg3.node.ifaces[..].getClass().getName())
    arg3.node.ifaces.getClass().getName() => orig(arg3.node.ifaces.getClass().getName())
    arg3.node.ifacesByType => orig(arg3.node.ifacesByType)
    arg3.node.ifacesByType.getClass().getName() => orig(arg3.node.ifacesByType.getClass().getName())
    arg3.node.ifacesByName => orig(arg3.node.ifacesByName)
    arg3.node.ifacesByName.getClass().getName() => orig(arg3.node.ifacesByName.getClass().getName())
    arg3.node.name => orig(arg3.node.name)
    arg3.node.name.toString => orig(arg3.node.name.toString)
    arg3.node.network => orig(arg3.node.network)
    size(reso.ip.ARPProtocol.this.adapter.listeners[..]) => orig(size(reso.ip.ARPProtocol.this.adapter.listeners[..]))
    size(reso.ip.ARPProtocol.this.adapter.listeners[..])-1 => orig(size(reso.ip.ARPProtocol.this.adapter.listeners[..]))-1
    size(arg1.src.addr[..]) => orig(size(arg1.src.addr[..]))
    size(arg1.src.addr[..])-1 => orig(size(arg1.src.addr[..]))-1
    size(arg1.dst.addr[..]) => orig(size(arg1.dst.addr[..]))
    size(arg1.dst.addr[..])-1 => orig(size(arg1.dst.addr[..]))-1
    size(arg2.addr[..]) => orig(size(arg2.addr[..]))
    size(arg2.addr[..])-1 => orig(size(arg2.addr[..]))-1
    size(reso.ip.IPAddress.ANY.addr[..]) => orig(size(reso.ip.IPAddress.ANY.addr[..]))
    size(reso.ip.IPAddress.ANY.addr[..])-1 => orig(size(reso.ip.IPAddress.ANY.addr[..]))-1
    size(reso.ip.IPAddress.BROADCAST.addr[..]) => orig(size(reso.ip.IPAddress.BROADCAST.addr[..]))
    size(reso.ip.IPAddress.BROADCAST.addr[..])-1 => orig(size(reso.ip.IPAddress.BROADCAST.addr[..]))-1
    size(reso.ip.IPAddress.LOCALHOST.addr[..]) => orig(size(reso.ip.IPAddress.LOCALHOST.addr[..]))
    size(reso.ip.IPAddress.LOCALHOST.addr[..])-1 => orig(size(reso.ip.IPAddress.LOCALHOST.addr[..]))-1
    size(arg3.addr.addr[..]) => orig(size(arg3.addr.addr[..]))
    size(arg3.addr.addr[..])-1 => orig(size(arg3.addr.addr[..]))-1
    size(arg3.listeners.listeners[..]) => orig(size(arg3.listeners.listeners[..]))
    size(arg3.listeners.listeners[..])-1 => orig(size(arg3.listeners.listeners[..]))-1
    size(arg3.attrListeners.listeners[..]) => orig(size(arg3.attrListeners.listeners[..]))
    size(arg3.attrListeners.listeners[..])-1 => orig(size(arg3.attrListeners.listeners[..]))-1
    size(arg3.node.ifaces[..]) => orig(size(arg3.node.ifaces[..]))
    size(arg3.node.ifaces[..])-1 => orig(size(arg3.node.ifaces[..]))-1
child.var_infos:
    this
    this.datagram
    reso.ip.Datagram.protocols
    reso.ip.Datagram.protocols.nextProtocolNumber
    reso.ip.Datagram.protocols.protocolsByName
    reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
    reso.ip.Datagram.protocols.protocolsByNumber
    reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
    this.datagram.src
    this.datagram.src.addr
    this.datagram.src.addr[..]
    reso.ip.IPAddress.ANY
    reso.ip.IPAddress.BROADCAST
    reso.ip.IPAddress.LOCALHOST
    this.datagram.dst
    this.datagram.dst.addr
    this.datagram.dst.addr[..]
    this.datagram.ttl
    this.datagram.payload
    this.datagram.payload.getClass().getName()
    this.datagram.protocol
    this.gateway
    this.gateway.addr
    this.gateway.addr[..]
    reso.ip.IPAddress.ANY.addr
    reso.ip.IPAddress.ANY.addr[..]
    reso.ip.IPAddress.BROADCAST.addr
    reso.ip.IPAddress.BROADCAST.addr[..]
    reso.ip.IPAddress.LOCALHOST.addr
    reso.ip.IPAddress.LOCALHOST.addr[..]
    this.iface
    this.iface.addr
    reso.ethernet.EthernetAddress.BROADCAST
    this.iface.addr.addr
    this.iface.addr.addr[..]
    this.iface.link
    this.iface.link.SPEED_OF_LIGHT
    this.iface.link.iface1
    this.iface.link.iface1.getClass().getName()
    this.iface.link.iface2
    this.iface.link.iface2.getClass().getName()
    this.iface.link.length
    this.iface.listeners
    this.iface.listeners.listeners
    this.iface.listeners.listeners[..]
    this.iface.listeners.listeners[..].getClass().getName()
    this.iface.listeners.listeners.getClass().getName()
    this.iface.attrs
    this.iface.attrListeners
    this.iface.attrListeners.listeners
    this.iface.attrListeners.listeners[..]
    this.iface.attrListeners.listeners[..].getClass().getName()
    this.iface.attrListeners.listeners.getClass().getName()
    this.iface.index
    this.iface.type
    this.iface.type.toString
    this.iface.node
    this.iface.node.getClass().getName()
    this.iface.node.ifaces
    this.iface.node.ifaces[..]
    this.iface.node.ifaces[..].getClass().getName()
    this.iface.node.ifaces.getClass().getName()
    this.iface.node.ifacesByType
    this.iface.node.ifacesByType.getClass().getName()
    this.iface.node.ifacesByName
    this.iface.node.ifacesByName.getClass().getName()
    this.iface.node.name
    this.iface.node.name.toString
    this.iface.node.network
    reso.common.AbstractInterface.$assertionsDisabled
    reso.ip.ARPProtocol.this
    reso.ip.ARPProtocol.this.tableARP
    reso.ip.ARPProtocol.this.tableARP.getClass().getName()
    reso.ip.ARPProtocol.this.pendingARPTasks
    reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName()
    reso.ip.ARPProtocol.this.iface
    reso.ip.ARPProtocol.this.iface.addr
    reso.ip.ARPProtocol.this.iface.link
    reso.ip.ARPProtocol.this.iface.listeners
    reso.ip.ARPProtocol.this.iface.attrs
    reso.ip.ARPProtocol.this.iface.attrListeners
    reso.ip.ARPProtocol.this.iface.index
    reso.ip.ARPProtocol.this.iface.type
    reso.ip.ARPProtocol.this.iface.type.toString
    reso.ip.ARPProtocol.this.iface.node
    reso.ip.ARPProtocol.this.iface.node.getClass().getName()
    reso.ip.ARPProtocol.this.adapter
    reso.ip.ARPProtocol.this.adapter.ip
    reso.ip.ARPProtocol.this.adapter.iface
    reso.ip.ARPProtocol.this.adapter.arp
    reso.ip.ARPProtocol.this.adapter.addresses
    reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
    reso.ip.ARPProtocol.this.adapter.listeners
    reso.ip.ARPProtocol.this.adapter.listeners[..]
    reso.ip.ARPProtocol.this.adapter.listeners[..].getClass().getName()
    reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName()
    reso.ip.ARPProtocol.this.adapter.attrs
    reso.ip.ARPProtocol.this.adapter.attrListeners
    reso.ip.ARPProtocol.this.adapter.index
    reso.ip.ARPProtocol.this.adapter.type
    reso.ip.ARPProtocol.this.adapter.type.toString
    reso.ip.ARPProtocol.this.adapter.node
    reso.ip.ARPProtocol.this.adapter.node.getClass().getName()
    arg1
    arg1.src
    arg1.src.addr
    arg1.src.addr[..]
    arg1.dst
    arg1.dst.addr
    arg1.dst.addr[..]
    arg1.ttl
    arg1.payload
    arg1.payload.getClass().getName()
    arg1.protocol
    arg2
    arg2.addr
    arg2.addr[..]
    arg3
    arg3.addr
    arg3.addr.addr
    arg3.addr.addr[..]
    arg3.link
    arg3.link.SPEED_OF_LIGHT
    arg3.link.iface1
    arg3.link.iface1.getClass().getName()
    arg3.link.iface2
    arg3.link.iface2.getClass().getName()
    arg3.link.length
    arg3.listeners
    arg3.listeners.listeners
    arg3.listeners.listeners[..]
    arg3.listeners.listeners[..].getClass().getName()
    arg3.listeners.listeners.getClass().getName()
    arg3.attrs
    arg3.attrListeners
    arg3.attrListeners.listeners
    arg3.attrListeners.listeners[..]
    arg3.attrListeners.listeners[..].getClass().getName()
    arg3.attrListeners.listeners.getClass().getName()
    arg3.index
    arg3.type
    arg3.type.toString
    arg3.node
    arg3.node.getClass().getName()
    arg3.node.ifaces
    arg3.node.ifaces[..]
    arg3.node.ifaces[..].getClass().getName()
    arg3.node.ifaces.getClass().getName()
    arg3.node.ifacesByType
    arg3.node.ifacesByType.getClass().getName()
    arg3.node.ifacesByName
    arg3.node.ifacesByName.getClass().getName()
    arg3.node.name
    arg3.node.name.toString
    arg3.node.network
    orig(reso.ip.ARPProtocol.this)
    orig(reso.ip.ARPProtocol.this.tableARP)
    orig(reso.ip.ARPProtocol.this.tableARP.getClass().getName())
    orig(reso.ip.ARPProtocol.this.pendingARPTasks)
    orig(reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName())
    orig(reso.ip.ARPProtocol.this.iface)
    orig(reso.ip.ARPProtocol.this.iface.addr)
    orig(reso.ip.ARPProtocol.this.iface.link)
    orig(reso.ip.ARPProtocol.this.iface.listeners)
    orig(reso.ip.ARPProtocol.this.iface.attrs)
    orig(reso.ip.ARPProtocol.this.iface.attrListeners)
    orig(reso.ip.ARPProtocol.this.iface.index)
    orig(reso.ip.ARPProtocol.this.iface.type)
    orig(reso.ip.ARPProtocol.this.iface.type.toString)
    orig(reso.ip.ARPProtocol.this.iface.node)
    orig(reso.ip.ARPProtocol.this.iface.node.getClass().getName())
    orig(reso.common.AbstractInterface.$assertionsDisabled)
    orig(reso.ip.ARPProtocol.this.adapter)
    orig(reso.ip.ARPProtocol.this.adapter.ip)
    orig(reso.ip.ARPProtocol.this.adapter.iface)
    orig(reso.ip.ARPProtocol.this.adapter.arp)
    orig(reso.ip.ARPProtocol.this.adapter.addresses)
    orig(reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName())
    orig(reso.ip.ARPProtocol.this.adapter.listeners)
    orig(reso.ip.ARPProtocol.this.adapter.listeners[..])
    orig(reso.ip.ARPProtocol.this.adapter.listeners[..].getClass().getName())
    orig(reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName())
    orig(reso.ip.ARPProtocol.this.adapter.attrs)
    orig(reso.ip.ARPProtocol.this.adapter.attrListeners)
    orig(reso.ip.ARPProtocol.this.adapter.index)
    orig(reso.ip.ARPProtocol.this.adapter.type)
    orig(reso.ip.ARPProtocol.this.adapter.type.toString)
    orig(reso.ip.ARPProtocol.this.adapter.node)
    orig(reso.ip.ARPProtocol.this.adapter.node.getClass().getName())
    orig(arg1)
    orig(reso.ip.Datagram.protocols)
    orig(reso.ip.Datagram.protocols.nextProtocolNumber)
    orig(reso.ip.Datagram.protocols.protocolsByName)
    orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
    orig(reso.ip.Datagram.protocols.protocolsByNumber)
    orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
    orig(arg1.src)
    orig(arg1.src.addr)
    orig(arg1.src.addr[..])
    orig(reso.ip.IPAddress.ANY)
    orig(reso.ip.IPAddress.BROADCAST)
    orig(reso.ip.IPAddress.LOCALHOST)
    orig(arg1.dst)
    orig(arg1.dst.addr)
    orig(arg1.dst.addr[..])
    orig(arg1.ttl)
    orig(arg1.payload)
    orig(arg1.payload.getClass().getName())
    orig(arg1.protocol)
    orig(arg2)
    orig(arg2.addr)
    orig(arg2.addr[..])
    orig(reso.ip.IPAddress.ANY.addr)
    orig(reso.ip.IPAddress.ANY.addr[..])
    orig(reso.ip.IPAddress.BROADCAST.addr)
    orig(reso.ip.IPAddress.BROADCAST.addr[..])
    orig(reso.ip.IPAddress.LOCALHOST.addr)
    orig(reso.ip.IPAddress.LOCALHOST.addr[..])
    orig(arg3)
    orig(arg3.addr)
    orig(reso.ethernet.EthernetAddress.BROADCAST)
    orig(arg3.addr.addr)
    orig(arg3.addr.addr[..])
    orig(arg3.link)
    orig(arg3.link.SPEED_OF_LIGHT)
    orig(arg3.link.iface1)
    orig(arg3.link.iface1.getClass().getName())
    orig(arg3.link.iface2)
    orig(arg3.link.iface2.getClass().getName())
    orig(arg3.link.length)
    orig(arg3.listeners)
    orig(arg3.listeners.listeners)
    orig(arg3.listeners.listeners[..])
    orig(arg3.listeners.listeners[..].getClass().getName())
    orig(arg3.listeners.listeners.getClass().getName())
    orig(arg3.attrs)
    orig(arg3.attrListeners)
    orig(arg3.attrListeners.listeners)
    orig(arg3.attrListeners.listeners[..])
    orig(arg3.attrListeners.listeners[..].getClass().getName())
    orig(arg3.attrListeners.listeners.getClass().getName())
    orig(arg3.index)
    orig(arg3.type)
    orig(arg3.type.toString)
    orig(arg3.node)
    orig(arg3.node.getClass().getName())
    orig(arg3.node.ifaces)
    orig(arg3.node.ifaces[..])
    orig(arg3.node.ifaces[..].getClass().getName())
    orig(arg3.node.ifaces.getClass().getName())
    orig(arg3.node.ifacesByType)
    orig(arg3.node.ifacesByType.getClass().getName())
    orig(arg3.node.ifacesByName)
    orig(arg3.node.ifacesByName.getClass().getName())
    orig(arg3.node.name)
    orig(arg3.node.name.toString)
    orig(arg3.node.network)
    size(this.datagram.src.addr[..])
    size(this.datagram.src.addr[..])-1
    size(this.datagram.dst.addr[..])
    size(this.datagram.dst.addr[..])-1
    size(this.gateway.addr[..])
    size(this.gateway.addr[..])-1
    size(reso.ip.IPAddress.ANY.addr[..])
    size(reso.ip.IPAddress.ANY.addr[..])-1
    size(reso.ip.IPAddress.BROADCAST.addr[..])
    size(reso.ip.IPAddress.BROADCAST.addr[..])-1
    size(reso.ip.IPAddress.LOCALHOST.addr[..])
    size(reso.ip.IPAddress.LOCALHOST.addr[..])-1
    size(this.iface.addr.addr[..])
    size(this.iface.addr.addr[..])-1
    size(this.iface.listeners.listeners[..])
    size(this.iface.listeners.listeners[..])-1
    size(this.iface.attrListeners.listeners[..])
    size(this.iface.attrListeners.listeners[..])-1
    size(this.iface.node.ifaces[..])
    size(this.iface.node.ifaces[..])-1
    size(reso.ip.ARPProtocol.this.adapter.listeners[..])
    size(reso.ip.ARPProtocol.this.adapter.listeners[..])-1
    size(arg1.src.addr[..])
    size(arg1.src.addr[..])-1
    size(arg1.dst.addr[..])
    size(arg1.dst.addr[..])-1
    size(arg2.addr[..])
    size(arg2.addr[..])-1
    size(arg3.addr.addr[..])
    size(arg3.addr.addr[..])-1
    size(arg3.listeners.listeners[..])
    size(arg3.listeners.listeners[..])-1
    size(arg3.attrListeners.listeners[..])
    size(arg3.attrListeners.listeners[..])-1
    size(arg3.node.ifaces[..])
    size(arg3.node.ifaces[..])-1
    orig(size(reso.ip.ARPProtocol.this.adapter.listeners[..]))
    orig(size(reso.ip.ARPProtocol.this.adapter.listeners[..]))-1
    orig(size(arg1.src.addr[..]))
    orig(size(arg1.src.addr[..]))-1
    orig(size(arg1.dst.addr[..]))
    orig(size(arg1.dst.addr[..]))-1
    orig(size(arg2.addr[..]))
    orig(size(arg2.addr[..]))-1
    orig(size(reso.ip.IPAddress.ANY.addr[..]))
    orig(size(reso.ip.IPAddress.ANY.addr[..]))-1
    orig(size(reso.ip.IPAddress.BROADCAST.addr[..]))
    orig(size(reso.ip.IPAddress.BROADCAST.addr[..]))-1
    orig(size(reso.ip.IPAddress.LOCALHOST.addr[..]))
    orig(size(reso.ip.IPAddress.LOCALHOST.addr[..]))-1
    orig(size(arg3.addr.addr[..]))
    orig(size(arg3.addr.addr[..]))-1
    orig(size(arg3.listeners.listeners[..]))
    orig(size(arg3.listeners.listeners[..]))-1
    orig(size(arg3.attrListeners.listeners[..]))
    orig(size(arg3.attrListeners.listeners[..]))-1
    orig(size(arg3.node.ifaces[..]))
    orig(size(arg3.node.ifaces[..]))-1
End of diagnostics for newEnterExitRel(reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::ENTER, reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::EXIT)
===========================================================================
reso.common.AbstractApplication:::OBJECT
this.host != null
this.host.listeners != null
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.listeners.getClass().getName() == java.util.ArrayList.class
this.host.apps != null
this.host.apps[] elements != null
this.host.apps.getClass().getName() == java.util.ArrayList.class
this.host.ifaces != null
this.host.ifaces[] elements != null
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.host.ifacesByType != null
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName != null
this.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.host.name != null
this.host.name.toString one of { "H1", "H2", "R1" }
this.host.network.scheduler has only one value
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.name != null
size(this.host.apps[]) one of { 0, 1, 2 }
size(this.host.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractApplication.AbstractApplication(reso.common.Host, java.lang.String):::ENTER
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
size(arg0.apps[]) one of { 0, 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractApplication.AbstractApplication(reso.common.Host, java.lang.String):::EXIT
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.apps.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg0.network.scheduler == orig(arg0.network.scheduler)
arg0.network.scheduler.getClass().getName() == orig(arg0.network.scheduler.getClass().getName())
arg0.network.nodes == orig(arg0.network.nodes)
arg0.network.nodes.getClass().getName() == orig(arg0.network.nodes.getClass().getName())
arg1.toString == orig(arg1.toString)
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
size(arg0.apps[]) one of { 0, 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractApplication.getHost():::ENTER
===========================================================================
reso.common.AbstractApplication.getHost():::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.apps.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifaces.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.ifacesByName.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.host.network.nodes.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listeners.getClass().getName() == java.util.ArrayList.class
return.apps.getClass().getName() == java.util.ArrayList.class
return.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
return.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
return.ifaces.getClass().getName() == java.util.ArrayList.class
return.ifacesByType.getClass().getName() == java.util.TreeMap.class
return.ifacesByName.getClass().getName() == java.util.TreeMap.class
return.name.toString one of { "H1", "H2", "R1" }
return.network.scheduler has only one value
return.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
return.network.nodes has only one value
return.network.nodes.getClass().getName() == java.util.TreeMap.class
size(return.apps[]) one of { 0, 1, 2 }
size(return.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractHardwareInterface:::CLASS
reso.common.AbstractInterface.$assertionsDisabled == false
===========================================================================
reso.common.AbstractHardwareInterface:::OBJECT
this.getClass().getName() == this.link.iface1.getClass().getName()
this.link.iface1.getClass().getName() == this.link.iface2.getClass().getName()
this.listeners.listeners.getClass().getName() == this.attrListeners.listeners.getClass().getName()
this.listeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.link.SPEED_OF_LIGHT == 200000000
this.link.iface1 != null
this.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.link.iface2 != null
this.link.length one of { 0.0, 5000000.0 }
this.listeners != null
this.listeners.listeners != null
this.listeners.listeners[] elements != null
this.listeners.listeners.getClass().getName() == java.util.ArrayList.class
this.attrs != null
this.attrListeners != null
this.attrListeners.listeners != null
this.attrListeners.listeners[] elements != null
this.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.attrListeners.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
this.index one of { -1, 0, 1 }
this.type has only one value
this.type != null
this.type.toString == "eth"
this.node != null
this.node.ifaces != null
this.node.ifaces[] elements != null
this.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.node.ifacesByType != null
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName != null
this.node.name != null
this.node.name.toString one of { "H1", "H2", "R1" }
this.node.network.scheduler has only one value
this.node.network.scheduler != null
this.node.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.node.network.nodes has only one value
this.node.network.nodes != null
this.node.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.listeners.listeners[]) one of { 0, 1, 2 }
size(this.attrListeners.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 0, 1, 2 }
this.getClass().getName() != this.listeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.getClass().getName() != this.node.network.nodes.getClass().getName()
this.link.iface1.getClass().getName() != this.listeners.listeners.getClass().getName()
this.link.iface1.getClass().getName() != this.node.getClass().getName()
this.link.iface1.getClass().getName() in this.node.ifaces[].getClass().getName()
this.link.iface1.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.link.iface1.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.link.iface1.getClass().getName() != this.node.network.nodes.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.AbstractHardwareInterface(reso.common.Node, java.lang.String):::ENTER
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
reso.common.Network.nextEthernetID == 0
arg1 has only one value
arg1.toString == "eth"
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractHardwareInterface.AbstractHardwareInterface(reso.common.Node, java.lang.String):::EXIT
this.listeners.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
this.type == orig(arg1)
this.node == orig(arg0)
this.node.getClass().getName() == orig(arg0.getClass().getName())
this.node.ifaces == arg0.ifaces
this.node.ifaces.getClass().getName() == arg0.ifaces.getClass().getName()
this.node.ifacesByType == arg0.ifacesByType
this.node.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.ifacesByName == arg0.ifacesByName
this.node.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.name == arg0.name
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg1.toString == orig(arg1.toString)
this.link == null
this.listeners.listeners[] == []
this.listeners.listeners[].getClass().getName() == []
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.ifaces[] elements has only one value
this.node.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.node.network == null
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
arg1.toString == "eth"
size(this.node.ifaces[]) one of { 0, 1 }
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.AbstractHardwareInterface.addListener(reso.common.MessageListener):::ENTER
this.link.iface1 has only one value
this.link.iface2 has only one value
this.link.length == 5000000.0
this.listeners.listeners[] elements has only one value
this.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.listeners.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
this.attrListeners.listeners[] elements has only one value
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
size(this.listeners.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.addListener(reso.common.MessageListener):::EXIT
this.link == orig(this.link)
this.link.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
this.link.iface1 == orig(this.link.iface1)
this.link.iface1.getClass().getName() == orig(this.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface1.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface2.getClass().getName())
this.link.iface2 == orig(this.link.iface2)
this.link.length == orig(this.link.length)
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
this.node.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
size(this.listeners.listeners[])-1 == orig(size(this.listeners.listeners[]))
this.link.iface1 has only one value
this.link.iface2 has only one value
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[] elements has only one value
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.node.ifaces[]) one of { 1, 2 }
orig(arg0.getClass().getName()) in this.listeners.listeners[].getClass().getName()
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.connectTo(reso.common.Link):::ENTER
this.getClass().getName() == arg0.iface1.getClass().getName()
this.getClass().getName() == arg0.iface2.getClass().getName()
this.link == null
this.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
arg0.SPEED_OF_LIGHT == 200000000
arg0.length == 0.0
size(this.listeners.listeners[]) == 1
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.connectTo(reso.common.Link):::EXIT
this.link == orig(arg0)
this.link.SPEED_OF_LIGHT == arg0.SPEED_OF_LIGHT
this.link.iface1 == arg0.iface1
this.link.iface1.getClass().getName() == arg0.iface1.getClass().getName()
this.link.iface2 == arg0.iface2
this.link.iface2.getClass().getName() == arg0.iface1.getClass().getName()
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
arg0.SPEED_OF_LIGHT == orig(arg0.SPEED_OF_LIGHT)
arg0.iface1 == orig(arg0.iface1)
arg0.iface1.getClass().getName() == arg0.iface2.getClass().getName()
arg0.iface1.getClass().getName() == orig(this.getClass().getName())
arg0.iface1.getClass().getName() == orig(arg0.iface1.getClass().getName())
arg0.iface1.getClass().getName() == orig(arg0.iface2.getClass().getName())
arg0.iface2 == orig(arg0.iface2)
arg0.length == orig(arg0.length)
this.link.length == 0.0
this.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
arg0.SPEED_OF_LIGHT == 200000000
arg0.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
arg0.length == 0.0
size(this.listeners.listeners[]) == 1
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
arg0.iface1.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.getLink():::ENTER
this.link != null
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.AbstractHardwareInterface.getLink():::EXIT
this.link == return
this.link.SPEED_OF_LIGHT == return.SPEED_OF_LIGHT
this.link.iface1 == return.iface1
this.link.iface1.getClass().getName() == return.iface1.getClass().getName()
this.link.iface2 == return.iface2
this.link.iface2.getClass().getName() == return.iface1.getClass().getName()
this.link.length == return.length
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
return == orig(this.link)
return.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
return.iface1 == orig(this.link.iface1)
return.iface1.getClass().getName() == return.iface2.getClass().getName()
return.iface1.getClass().getName() == orig(this.getClass().getName())
return.iface1.getClass().getName() == orig(this.link.iface1.getClass().getName())
return.iface1.getClass().getName() == orig(this.link.iface2.getClass().getName())
return.iface2 == orig(this.link.iface2)
return.length == orig(this.link.length)
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
return != null
return.SPEED_OF_LIGHT == 200000000
return.iface1 != null
return.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
return.iface2 != null
return.length == 5000000.0
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.listeners.listeners.getClass().getName() != return.iface1.getClass().getName()
this.node.getClass().getName() != return.iface1.getClass().getName()
return.iface1.getClass().getName() in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != return.iface1.getClass().getName()
this.node.network.scheduler.getClass().getName() != return.iface1.getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.isConnected():::ENTER
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.isConnected():::EXIT
this.link == orig(this.link)
this.link.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
this.link.iface1 == orig(this.link.iface1)
this.link.iface1.getClass().getName() == orig(this.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface1.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface2.getClass().getName())
this.link.iface2 == orig(this.link.iface2)
this.link.length == orig(this.link.length)
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
(this.link != null)  <==>  (return == true)
(this.link != null)  ==>  (size(this.listeners.listeners[]) one of { 1, 2 })
(this.link != null)  ==>  (this.link.iface1.getClass().getName() != this.listeners.listeners.getClass().getName())
(this.link != null)  ==>  (this.link.iface1.getClass().getName() != this.node.getClass().getName())
(this.link != null)  ==>  (this.link.iface1.getClass().getName() != this.node.ifacesByType.getClass().getName())
(this.link != null)  ==>  (this.link.iface1.getClass().getName() != this.node.network.scheduler.getClass().getName())
(this.link != null)  ==>  (this.link.iface1.getClass().getName() == orig(this.getClass().getName()))
(this.link != null)  ==>  (this.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class)
(this.link != null)  ==>  (this.link.iface1.getClass().getName() in this.node.ifaces[].getClass().getName())
(this.link != null)  ==>  (this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] })
(this.link == null)  <==>  (return == false)
(this.link == null)  ==>  (size(this.listeners.listeners[]) == 1)
(this.link == null)  ==>  (this.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter])
(this.link == null)  ==>  (this.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class)
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.listeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != orig(this.getClass().getName())
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.network.scheduler.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractHardwareInterface.isConnected():::EXIT;condition="return == true"
this.link.iface2.getClass().getName() == orig(this.getClass().getName())
orig(this.getClass().getName()) == orig(this.link.iface1.getClass().getName())
orig(this.getClass().getName()) == orig(this.link.iface2.getClass().getName())
this.link != null
return == true
===========================================================================
reso.common.AbstractHardwareInterface.isConnected():::EXIT;condition="not(return == true)"
this.link == null
this.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
return == false
size(this.listeners.listeners[]) == 1
===========================================================================
reso.common.AbstractHardwareInterface.toListeners(reso.common.Message):::ENTER
this.link != null
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0 != null
arg0.getClass().getName() == reso.ethernet.EthernetFrame.class
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.link.iface1.getClass().getName() != arg0.getClass().getName()
this.listeners.listeners.getClass().getName() != arg0.getClass().getName()
this.node.getClass().getName() != arg0.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.getClass().getName()
===========================================================================
reso.common.AbstractHardwareInterface.toListeners(reso.common.Message):::EXIT
this.link == orig(this.link)
this.link.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
this.link.iface1 == orig(this.link.iface1)
this.link.iface1.getClass().getName() == orig(this.getClass().getName())
this.link.iface2 == orig(this.link.iface2)
this.link.iface2.getClass().getName() == orig(this.getClass().getName())
this.link.length == orig(this.link.length)
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
orig(this.getClass().getName()) == orig(this.link.iface2.getClass().getName())
this.link != null
this.link.length == 5000000.0
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
orig(this.getClass().getName()) == reso.ethernet.EthernetInterface.class
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.listeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.listeners.listeners.getClass().getName() != orig(arg0.getClass().getName())
this.node.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != orig(arg0.getClass().getName())
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.ifacesByType.getClass().getName() != orig(arg0.getClass().getName())
this.node.network.scheduler.getClass().getName() != orig(this.getClass().getName())
this.node.network.scheduler.getClass().getName() != orig(arg0.getClass().getName())
orig(this.getClass().getName()) != orig(arg0.getClass().getName())
===========================================================================
reso.common.AbstractInterface:::CLASS
reso.common.AbstractInterface.$assertionsDisabled == false
===========================================================================
reso.common.AbstractInterface:::OBJECT
this.attrs != null
this.attrListeners != null
this.attrListeners.listeners != null
this.attrListeners.listeners[] elements != null
this.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.attrListeners.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
this.attrListeners.listeners.getClass().getName() == java.util.ArrayList.class
this.index one of { -1, 0, 1 }
this.type != null
this.type.toString one of { "eth", "lo" }
this.node != null
this.node.ifaces != null
this.node.ifaces[] elements != null
this.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.node.ifaces.getClass().getName() == java.util.ArrayList.class
this.node.ifacesByType != null
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName != null
this.node.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.node.name != null
this.node.name.toString one of { "H1", "H2", "R1" }
this.node.network.scheduler has only one value
this.node.network.scheduler != null
this.node.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.node.network.nodes has only one value
this.node.network.nodes != null
this.node.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.attrListeners.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 0, 1, 2 }
===========================================================================
reso.common.AbstractInterface.AbstractInterface(reso.common.Node, java.lang.String):::ENTER
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
reso.common.Network.nextEthernetID == 0
arg1.toString one of { "eth", "lo" }
size(arg0.ifaces[]) one of { 0, 1, 2 }
arg0.getClass().getName() != arg0.ifaces.getClass().getName()
arg0.getClass().getName() != arg0.ifacesByType.getClass().getName()
arg0.ifaces.getClass().getName() != arg0.ifacesByType.getClass().getName()
===========================================================================
reso.common.AbstractInterface.AbstractInterface(reso.common.Node, java.lang.String):::EXIT
this.attrListeners.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
this.type == orig(arg1)
this.node == orig(arg0)
this.node.getClass().getName() == orig(arg0.getClass().getName())
this.node.ifaces == arg0.ifaces
this.node.ifaces.getClass().getName() == arg0.ifaces.getClass().getName()
this.node.ifacesByType == arg0.ifacesByType
this.node.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.ifacesByName == arg0.ifacesByName
this.node.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.name == arg0.name
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg1.toString == orig(arg1.toString)
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.network == null
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
arg1.toString one of { "eth", "lo" }
size(arg0.ifaces[]) one of { 0, 1, 2 }
this.node.getClass().getName() != arg0.ifaces.getClass().getName()
this.node.getClass().getName() != arg0.ifacesByType.getClass().getName()
arg0.ifaces.getClass().getName() != arg0.ifacesByType.getClass().getName()
===========================================================================
reso.common.AbstractInterface.addAttrListener(reso.common.InterfaceAttrListener):::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
arg0.getClass().getName() == reso.ip.IPEthernetAdapter.class
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractInterface.addAttrListener(reso.common.InterfaceAttrListener):::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
size(this.attrListeners.listeners[])-1 == orig(size(this.attrListeners.listeners[]))
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
orig(arg0.getClass().getName()) in this.attrListeners.listeners[].getClass().getName()
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractInterface.defineAttribute(java.lang.String, java.lang.Object, boolean):::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.network == null
arg0 != null
arg0.toString one of { "metric", "state" }
arg1 != null
arg2 == false
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != arg1.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != arg1.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != arg1.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg1.getClass().getName()
===========================================================================
reso.common.AbstractInterface.defineAttribute(java.lang.String, java.lang.Object, boolean):::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.network == null
arg0.toString one of { "metric", "state" }
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.attrListeners.listeners.getClass().getName() != orig(arg1.getClass().getName())
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != orig(arg1.getClass().getName())
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.ifacesByType.getClass().getName() != orig(arg1.getClass().getName())
===========================================================================
reso.common.AbstractInterface.getAttribute(java.lang.String):::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0 has only one value
arg0 != null
arg0.toString == "state"
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() in this.node.ifaces[].getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
===========================================================================
reso.common.AbstractInterface.getAttribute(java.lang.String):::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
arg0.toString == orig(arg0.toString)
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0.toString == "state"
return has only one value
return != null
return.getClass().getName() == java.lang.Boolean.class
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != return.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != return.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.ifacesByType.getClass().getName() != return.getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.network.scheduler.getClass().getName() != return.getClass().getName()
this.node.network.scheduler.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.getIndex():::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractInterface.getIndex():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == return
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
return == orig(this.index)
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
return one of { 0, 1 }
size(this.node.ifaces[]) one of { 1, 2 }
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
===========================================================================
reso.common.AbstractInterface.getName():::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.attrListeners.listeners[] elements has only one value
this.index one of { 0, 1 }
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.getClass().getName() != this.node.network.nodes.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
===========================================================================
reso.common.AbstractInterface.getName():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
this.node.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.attrListeners.listeners[] elements has only one value
this.index one of { 0, 1 }
return != null
return.toString one of { "eth0", "eth1", "lo0" }
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.network.scheduler.getClass().getName() != orig(this.getClass().getName())
this.node.network.nodes.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.getNode():::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.type has only one value
this.type.toString == "eth"
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.getClass().getName() != this.node.network.nodes.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
===========================================================================
reso.common.AbstractInterface.getNode():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == return.ifaces.getClass().getName()
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == return
this.node.getClass().getName() == return.getClass().getName()
this.node.ifaces == return.ifaces
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == return.ifaces.getClass().getName()
this.node.ifacesByType == return.ifacesByType
this.node.ifacesByType.getClass().getName() == return.ifacesByType.getClass().getName()
this.node.ifacesByName == return.ifacesByName
this.node.ifacesByName.getClass().getName() == return.ifacesByType.getClass().getName()
this.node.name == return.name
this.node.name.toString == orig(this.node.name.toString)
this.node.network == return.network
this.node.network.scheduler == return.network.scheduler
this.node.network.scheduler.getClass().getName() == return.network.scheduler.getClass().getName()
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == return.network.nodes
this.node.network.nodes.getClass().getName() == return.network.nodes.getClass().getName()
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
return == orig(this.node)
return.getClass().getName() == orig(this.node.getClass().getName())
return.ifaces == orig(this.node.ifaces)
return.ifaces.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
return.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
return.ifacesByType == orig(this.node.ifacesByType)
return.ifacesByType.getClass().getName() == return.ifacesByName.getClass().getName()
return.ifacesByType.getClass().getName() == return.network.nodes.getClass().getName()
return.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
return.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
return.ifacesByName == orig(this.node.ifacesByName)
return.name == orig(this.node.name)
return.network == orig(this.node.network)
return.network.scheduler == orig(this.node.network.scheduler)
return.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
return.network.nodes == orig(this.node.network.nodes)
return.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.type has only one value
this.type.toString == "eth"
return != null
return.ifaces != null
return.ifaces[] elements != null
return.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
return.ifaces.getClass().getName() == java.util.ArrayList.class
return.ifacesByType != null
return.ifacesByType.getClass().getName() == java.util.TreeMap.class
return.ifacesByName != null
return.name != null
return.name.toString one of { "H1", "H2", "R1" }
return.network.scheduler has only one value
return.network.scheduler != null
return.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
return.network.nodes has only one value
return.network.nodes != null
return.network.nodes.getClass().getName() == java.util.TreeMap.class
size(return.ifaces[]) one of { 0, 1, 2 }
return.getClass().getName() != return.ifaces.getClass().getName()
return.getClass().getName() != return.ifacesByType.getClass().getName()
return.getClass().getName() != return.network.scheduler.getClass().getName()
return.getClass().getName() != return.network.nodes.getClass().getName()
return.getClass().getName() != orig(this.getClass().getName())
return.ifaces.getClass().getName() != return.ifacesByType.getClass().getName()
return.ifaces.getClass().getName() != return.network.scheduler.getClass().getName()
return.ifaces.getClass().getName() != return.network.nodes.getClass().getName()
return.ifaces.getClass().getName() != orig(this.getClass().getName())
return.ifacesByType.getClass().getName() != return.network.scheduler.getClass().getName()
return.ifacesByType.getClass().getName() != orig(this.getClass().getName())
return.network.scheduler.getClass().getName() != return.network.nodes.getClass().getName()
return.network.scheduler.getClass().getName() != orig(this.getClass().getName())
return.network.nodes.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.getType():::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() in this.node.ifaces[].getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
===========================================================================
reso.common.AbstractInterface.getType():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == return
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
return == orig(this.type)
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network == null
return has only one value
return.toString == "eth"
size(this.node.ifaces[]) one of { 1, 2 }
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.isActive():::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.getClass().getName() == reso.ethernet.EthernetInterface.class
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() in this.node.ifaces[].getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
===========================================================================
reso.common.AbstractInterface.isActive():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.type has only one value
this.type.toString == "eth"
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
return == true
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
orig(this.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
this.node.network.scheduler.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.isActive():::EXIT;condition="return == true"
===========================================================================
reso.common.AbstractInterface.setIndex(int):::ENTER
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.network == null
arg0 one of { 0, 1 }
this.getClass().getName() != this.attrListeners.listeners.getClass().getName()
this.getClass().getName() != this.node.getClass().getName()
this.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.index < arg0
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
===========================================================================
reso.common.AbstractInterface.setIndex(int):::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.attrListeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.index == orig(arg0)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index one of { 0, 1 }
this.node.network == null
this.attrListeners.listeners.getClass().getName() != this.node.getClass().getName()
this.attrListeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.attrListeners.listeners.getClass().getName() != orig(this.getClass().getName())
this.index > orig(this.index)
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != orig(this.getClass().getName())
this.node.ifacesByType.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.AbstractInterface.toString():::ENTER
this.attrListeners.listeners[] elements has only one value
this.index == 0
this.type has only one value
this.type.toString == "eth"
this.node.getClass().getName() == reso.ip.IPHost.class
this.node.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.node.name.toString one of { "H1", "H2" }
this.node.network has only one value
size(this.node.ifaces[]) == 1
===========================================================================
reso.common.AbstractInterface.toString():::EXIT
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.ifacesByName.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
this.node.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.attrListeners.listeners[] elements has only one value
this.index == 0
this.type has only one value
this.type.toString == "eth"
this.node.getClass().getName() == reso.ip.IPHost.class
this.node.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.node.name.toString one of { "H1", "H2" }
this.node.network has only one value
return.toString == "eth0"
size(this.node.ifaces[]) == 1
===========================================================================
reso.common.AbstractMessage:::OBJECT
this.getClass().getName() == reso.ethernet.EthernetFrame.class
===========================================================================
reso.common.AbstractMessage.AbstractMessage():::EXIT
===========================================================================
reso.common.AbstractMessageWithPayload:::OBJECT
this.payload != null
this.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
this.protocol == 1
===========================================================================
reso.common.AbstractMessageWithPayload.AbstractMessageWithPayload(int, reso.common.Message):::ENTER
arg0 == 1
arg1.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
===========================================================================
reso.common.AbstractMessageWithPayload.AbstractMessageWithPayload(int, reso.common.Message):::EXIT
===========================================================================
reso.common.AbstractMessageWithPayload.getPayload():::ENTER
===========================================================================
reso.common.AbstractMessageWithPayload.getPayload():::EXIT
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.protocol == orig(this.protocol)
return.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
===========================================================================
reso.common.AbstractMessageWithPayload.getProtocol():::ENTER
===========================================================================
reso.common.AbstractMessageWithPayload.getProtocol():::EXIT
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.protocol == orig(this.protocol)
return == 1
===========================================================================
reso.common.EventMessageSend:::OBJECT
this.msg != null
this.msg.getClass().getName() == reso.ethernet.EthernetFrame.class
this.src != null
this.src.getClass().getName() == reso.ethernet.EthernetInterface.class
this.dst != null
this.dst.getClass().getName() == reso.common.Link.class
===========================================================================
reso.common.EventMessageSend.EventMessageSend(double, reso.common.Message, reso.common.HardwareInterface, reso.common.MessageListener):::ENTER
arg1 != null
arg1.getClass().getName() == reso.ethernet.EthernetFrame.class
arg2 != null
arg2.getClass().getName() == reso.ethernet.EthernetInterface.class
arg3 != null
arg3.getClass().getName() == reso.common.Link.class
===========================================================================
reso.common.EventMessageSend.EventMessageSend(double, reso.common.Message, reso.common.HardwareInterface, reso.common.MessageListener):::EXIT
===========================================================================
reso.common.EventMessageSend.run():::ENTER
===========================================================================
reso.common.EventMessageSend.run():::EXIT
this.msg == orig(this.msg)
this.msg.getClass().getName() == orig(this.msg.getClass().getName())
this.src == orig(this.src)
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.dst == orig(this.dst)
this.dst.getClass().getName() == orig(this.dst.getClass().getName())
this.time == orig(this.time)
===========================================================================
reso.common.Host:::OBJECT
this.listeners.getClass().getName() == this.apps.getClass().getName()
this.listeners.getClass().getName() == this.ifaces.getClass().getName()
this.ifacesByType.getClass().getName() == this.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() == this.network.nodes.getClass().getName()
this.listeners != null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.ArrayList.class
this.apps != null
this.apps[] elements != null
this.ifaces != null
this.ifaces[] elements != null
this.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.ifacesByType != null
this.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ifacesByName != null
this.name != null
this.name.toString one of { "H1", "H2", "R1" }
this.network.scheduler has only one value
this.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
this.network.scheduler.time == 0.0
reso.common.Network.nextEthernetID == 0
this.network.nodes has only one value
this.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ifaces[]) one of { 0, 1 }
this.listeners.getClass().getName() != this.ifacesByType.getClass().getName()
this.listeners.getClass().getName() != this.network.scheduler.getClass().getName()
this.listeners.getClass().getName() != this.network.nodes.getClass().getName()
this.ifacesByType.getClass().getName() != this.network.scheduler.getClass().getName()
this.network.scheduler.getClass().getName() != this.network.nodes.getClass().getName()
===========================================================================
reso.common.Host.Host(java.lang.String):::ENTER
arg0.toString one of { "H1", "H2", "R1" }
===========================================================================
reso.common.Host.Host(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
this.apps[] == []
this.apps[].getClass().getName() == []
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.network == null
arg0.toString one of { "H1", "H2", "R1" }
===========================================================================
reso.common.Host.addApplication(reso.common.AbstractApplication):::ENTER
this == arg0.host
this.listeners == arg0.host.listeners
this.listeners.getClass().getName() == arg0.host.listeners.getClass().getName()
this.listeners.getClass().getName() == arg0.host.apps.getClass().getName()
this.listeners.getClass().getName() == arg0.host.ifaces.getClass().getName()
this.apps == arg0.host.apps
this.ifaces == arg0.host.ifaces
this.ifacesByType == arg0.host.ifacesByType
this.ifacesByType.getClass().getName() == arg0.host.ifacesByType.getClass().getName()
this.ifacesByType.getClass().getName() == arg0.host.ifacesByName.getClass().getName()
this.ifacesByName == arg0.host.ifacesByName
this.name == arg0.host.name
this.network == arg0.host.network
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.host.name.toString one of { "H1", "H2", "R1" }
size(this.apps[]) one of { 0, 1, 2 }
size(arg0.host.apps[]) one of { 0, 1, 2 }
size(arg0.host.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.Host.addApplication(reso.common.AbstractApplication):::EXIT
this.listeners == arg0.host.listeners
this.listeners == orig(this.listeners)
this.listeners == orig(arg0.host.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == arg0.host.listeners.getClass().getName()
this.listeners.getClass().getName() == arg0.host.apps.getClass().getName()
this.listeners.getClass().getName() == arg0.host.ifaces.getClass().getName()
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.host.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.host.apps.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.host.ifaces.getClass().getName())
this.apps == arg0.host.apps
this.apps == orig(this.apps)
this.apps == orig(arg0.host.apps)
this.ifaces == arg0.host.ifaces
this.ifaces == orig(this.ifaces)
this.ifaces == orig(arg0.host.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByType == arg0.host.ifacesByType
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType == orig(arg0.host.ifacesByType)
this.ifacesByType.getClass().getName() == arg0.host.ifacesByType.getClass().getName()
this.ifacesByType.getClass().getName() == arg0.host.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByName.getClass().getName())
this.ifacesByName == arg0.host.ifacesByName
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName == orig(arg0.host.ifacesByName)
this.name == arg0.host.name
this.name == orig(this.name)
this.name == orig(arg0.host.name)
this.name.toString == orig(this.name.toString)
this.network == arg0.host.network
this.network == orig(this.network)
this.network == orig(arg0.host.network)
this.network.scheduler == orig(this.network.scheduler)
this.network.scheduler.getClass().getName() == orig(this.network.scheduler.getClass().getName())
this.network.scheduler.time == orig(this.network.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == orig(this.network.nodes)
this.network.nodes.getClass().getName() == orig(this.network.nodes.getClass().getName())
arg0.host == orig(this)
arg0.host == orig(arg0.host)
arg0.host.listeners[] == orig(arg0.host.listeners[])
arg0.host.ifaces[] == orig(arg0.host.ifaces[])
arg0.host.name.toString == orig(arg0.host.name.toString)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
size(this.apps[])-1 == orig(size(this.apps[]))
size(arg0.host.apps[])-1 == orig(size(arg0.host.apps[]))
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.host.name.toString one of { "H1", "H2", "R1" }
size(this.apps[]) one of { 1, 2, 3 }
size(arg0.host.apps[]) one of { 1, 2, 3 }
size(arg0.host.ifaces[]) one of { 0, 1 }
orig(arg0.getClass().getName()) in this.apps[].getClass().getName()
orig(arg0.getClass().getName()) in arg0.host.apps[].getClass().getName()
===========================================================================
reso.common.Host.start():::ENTER
this.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.name.toString one of { "H1", "H2" }
this.network has only one value
size(this.apps[]) one of { 2, 3 }
size(this.ifaces[]) == 1
===========================================================================
reso.common.Host.start():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.apps == orig(this.apps)
this.apps[] == orig(this.apps[])
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.network.nodes.getClass().getName())
this.ifacesByName == orig(this.ifacesByName)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == orig(this.network)
this.network.scheduler == orig(this.network.scheduler)
this.network.scheduler.getClass().getName() == orig(this.network.scheduler.getClass().getName())
this.network.scheduler.time == orig(this.network.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == orig(this.network.nodes)
this.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.name.toString one of { "H1", "H2" }
this.network has only one value
size(this.apps[]) one of { 2, 3 }
size(this.ifaces[]) == 1
===========================================================================
reso.common.Link:::OBJECT
this.SPEED_OF_LIGHT == 200000000
this.iface1 != null
this.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.iface2 != null
this.iface2.getClass().getName() == reso.ethernet.EthernetInterface.class
this.length one of { 0.0, 5000000.0 }
===========================================================================
reso.common.Link.Link(reso.common.HardwareInterface, reso.common.HardwareInterface, double):::ENTER
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
arg1.getClass().getName() == reso.ethernet.EthernetInterface.class
arg2 == 5000000.0
===========================================================================
reso.common.Link.Link(reso.common.HardwareInterface, reso.common.HardwareInterface, double):::EXIT
this.length == 5000000.0
===========================================================================
reso.common.Link.getPropagationDelay():::ENTER
this.length == 5000000.0
===========================================================================
reso.common.Link.getPropagationDelay():::EXIT
this.SPEED_OF_LIGHT == orig(this.SPEED_OF_LIGHT)
this.iface1 == orig(this.iface1)
this.iface1.getClass().getName() == orig(this.iface1.getClass().getName())
this.iface2 == orig(this.iface2)
this.iface2.getClass().getName() == orig(this.iface2.getClass().getName())
this.length == orig(this.length)
this.length == 5000000.0
return == 0.025
===========================================================================
reso.common.Link.isConnectedTo(reso.common.HardwareInterface):::ENTER
this.length == 0.0
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
===========================================================================
reso.common.Link.isConnectedTo(reso.common.HardwareInterface):::EXIT
this.SPEED_OF_LIGHT == orig(this.SPEED_OF_LIGHT)
this.iface1 == orig(this.iface1)
this.iface1.getClass().getName() == orig(this.iface1.getClass().getName())
this.iface2 == orig(this.iface2)
this.iface2.getClass().getName() == orig(this.iface2.getClass().getName())
this.length == orig(this.length)
this.length == 0.0
return == true
===========================================================================
reso.common.Link.isConnectedTo(reso.common.HardwareInterface):::EXIT;condition="return == true"
===========================================================================
reso.common.Link.receive(reso.common.HardwareInterface, reso.common.Message):::ENTER
this.length == 5000000.0
arg0 != null
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
arg1 != null
arg1.getClass().getName() == reso.ethernet.EthernetFrame.class
===========================================================================
reso.common.Link.receive(reso.common.HardwareInterface, reso.common.Message):::EXIT
this.SPEED_OF_LIGHT == orig(this.SPEED_OF_LIGHT)
this.iface1 == orig(this.iface1)
this.iface1.getClass().getName() == orig(this.iface1.getClass().getName())
this.iface2 == orig(this.iface2)
this.iface2.getClass().getName() == orig(this.iface2.getClass().getName())
this.length == orig(this.length)
this.length == 5000000.0
===========================================================================
reso.common.Link.send(reso.common.HardwareInterface, reso.common.Message):::ENTER
this.length == 5000000.0
arg0 != null
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
arg1 != null
arg1.getClass().getName() == reso.ethernet.EthernetFrame.class
===========================================================================
reso.common.Link.send(reso.common.HardwareInterface, reso.common.Message):::EXIT
this.SPEED_OF_LIGHT == orig(this.SPEED_OF_LIGHT)
this.iface1 == orig(this.iface1)
this.iface1.getClass().getName() == orig(this.iface1.getClass().getName())
this.iface2 == orig(this.iface2)
this.iface2.getClass().getName() == orig(this.iface2.getClass().getName())
this.length == orig(this.length)
this.length == 5000000.0
===========================================================================
reso.common.ListenerList:::OBJECT
this.listeners != null
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.ArrayList.class
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
reso.common.ListenerList.ListenerList():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
reso.common.ListenerList.addListener(java.lang.Object):::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != arg0.getClass().getName()
===========================================================================
reso.common.ListenerList.addListener(java.lang.Object):::EXIT
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
size(this.listeners[]) one of { 1, 2 }
orig(arg0.getClass().getName()) in this.listeners[].getClass().getName()
this.listeners.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
reso.common.ListenerList.getListeners():::ENTER
this.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
size(this.listeners[]) one of { 1, 2 }
===========================================================================
reso.common.ListenerList.getListeners():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
return != null
return.getClass().getName() == java.util.ArrayList.class
size(this.listeners[]) one of { 1, 2 }
===========================================================================
reso.common.Network:::CLASS
reso.common.Network.nextEthernetID == 0
===========================================================================
reso.common.Network:::OBJECT
this has only one value
this.scheduler has only one value
this.scheduler != null
this.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
this.nodes has only one value
this.nodes != null
this.nodes.getClass().getName() == java.util.TreeMap.class
this.scheduler.getClass().getName() != this.nodes.getClass().getName()
===========================================================================
reso.common.Network.Network(reso.scheduler.AbstractScheduler):::ENTER
arg0 has only one value
arg0.getClass().getName() == reso.scheduler.Scheduler.class
arg0.time == 0.0
===========================================================================
reso.common.Network.Network(reso.scheduler.AbstractScheduler):::EXIT
this.scheduler == orig(arg0)
this.scheduler.getClass().getName() == orig(arg0.getClass().getName())
this.scheduler.time == arg0.time
arg0.time == orig(arg0.time)
arg0.time == 0.0
===========================================================================
reso.common.Network.addNode(reso.common.Node):::ENTER
this.nodes.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.nodes.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.scheduler.time == 0.0
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
size(arg0.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.Network.addNode(reso.common.Node):::EXIT
this.scheduler == arg0.network.scheduler
this.scheduler == orig(this.scheduler)
this.scheduler.getClass().getName() == arg0.network.scheduler.getClass().getName()
this.scheduler.getClass().getName() == orig(this.scheduler.getClass().getName())
this.scheduler.time == orig(this.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.nodes == arg0.network.nodes
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.nodes.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.nodes.getClass().getName() == arg0.network.nodes.getClass().getName()
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
this.nodes.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
this.nodes.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(this)
this.scheduler.time == 0.0
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network has only one value
size(arg0.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.Network.getScheduler():::ENTER
===========================================================================
reso.common.Network.getScheduler():::EXIT
this.scheduler == return
this.scheduler.getClass().getName() == return.getClass().getName()
this.scheduler.time == return.time
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.nodes == orig(this.nodes)
this.nodes.getClass().getName() == orig(this.nodes.getClass().getName())
return == orig(this.scheduler)
return.getClass().getName() == orig(this.scheduler.getClass().getName())
return.time == orig(this.scheduler.time)
return has only one value
return != null
return.getClass().getName() == reso.scheduler.Scheduler.class
this.nodes.getClass().getName() != return.getClass().getName()
===========================================================================
reso.common.Node:::OBJECT
this.ifacesByType.getClass().getName() == this.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() == this.network.nodes.getClass().getName()
this.ifaces != null
this.ifaces[] elements != null
this.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ifaces.getClass().getName() == java.util.ArrayList.class
this.ifacesByType != null
this.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ifacesByName != null
this.name != null
this.name.toString one of { "H1", "H2", "R1" }
this.network.scheduler has only one value
this.network.scheduler != null
this.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.network.nodes has only one value
this.network.nodes != null
this.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ifaces[]) one of { 0, 1, 2 }
this.getClass().getName() != this.ifaces.getClass().getName()
this.getClass().getName() != this.ifacesByType.getClass().getName()
this.getClass().getName() != this.network.scheduler.getClass().getName()
this.getClass().getName() != this.network.nodes.getClass().getName()
this.ifaces.getClass().getName() != this.ifacesByType.getClass().getName()
this.ifaces.getClass().getName() != this.network.scheduler.getClass().getName()
this.ifaces.getClass().getName() != this.network.nodes.getClass().getName()
this.ifacesByType.getClass().getName() != this.network.scheduler.getClass().getName()
this.network.scheduler.getClass().getName() != this.network.nodes.getClass().getName()
===========================================================================
reso.common.Node.Node(java.lang.String):::ENTER
arg0.toString one of { "H1", "H2", "R1" }
===========================================================================
reso.common.Node.Node(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.network == null
arg0.toString one of { "H1", "H2", "R1" }
===========================================================================
reso.common.Node.addInterface(reso.common.HardwareInterface):::ENTER
this.ifaces[] elements has only one value
this.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.network == null
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
size(this.ifaces[]) one of { 0, 1 }
===========================================================================
reso.common.Node.addInterface(reso.common.HardwareInterface):::EXIT
this.ifaces == orig(this.ifaces)
this.ifaces.getClass().getName() == orig(this.ifaces.getClass().getName())
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByName == orig(this.ifacesByName)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == orig(this.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
size(this.ifaces[])-1 == orig(size(this.ifaces[]))
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network == null
size(this.ifaces[]) one of { 1, 2 }
orig(arg0.getClass().getName()) in this.ifaces[].getClass().getName()
===========================================================================
reso.common.Node.getInterfaceByName(java.lang.String):::ENTER
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network has only one value
this.network.scheduler.time == 0.0
arg0.toString one of { "eth0", "eth1" }
size(this.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.Node.getInterfaceByName(java.lang.String):::EXIT
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifaces.getClass().getName() == orig(this.ifaces.getClass().getName())
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.network.nodes.getClass().getName())
this.ifacesByName == orig(this.ifacesByName)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == orig(this.network)
this.network.scheduler == orig(this.network.scheduler)
this.network.scheduler.getClass().getName() == orig(this.network.scheduler.getClass().getName())
this.network.scheduler.time == orig(this.network.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == orig(this.network.nodes)
arg0.toString == orig(arg0.toString)
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network has only one value
this.network.scheduler.time == 0.0
arg0.toString one of { "eth0", "eth1" }
return.getClass().getName() == reso.ethernet.EthernetInterface.class
size(this.ifaces[]) one of { 1, 2 }
return.getClass().getName() in this.ifaces[].getClass().getName()
===========================================================================
reso.common.Node.getNetwork():::ENTER
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network has only one value
this.network != null
size(this.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.Node.getNetwork():::EXIT
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifaces.getClass().getName() == orig(this.ifaces.getClass().getName())
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == return.nodes.getClass().getName()
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.network.nodes.getClass().getName())
this.ifacesByName == orig(this.ifacesByName)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == return
this.network.scheduler == return.scheduler
this.network.scheduler.getClass().getName() == return.scheduler.getClass().getName()
this.network.scheduler.time == return.scheduler.time
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == return.nodes
return == orig(this.network)
return.scheduler == orig(this.network.scheduler)
return.scheduler.getClass().getName() == orig(this.network.scheduler.getClass().getName())
return.scheduler.time == orig(this.network.scheduler.time)
return.nodes == orig(this.network.nodes)
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
return has only one value
return != null
return.scheduler has only one value
return.scheduler != null
return.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
return.nodes has only one value
return.nodes != null
size(this.ifaces[]) one of { 1, 2 }
this.ifaces.getClass().getName() != return.scheduler.getClass().getName()
this.ifaces.getClass().getName() != orig(this.getClass().getName())
this.ifacesByType.getClass().getName() != return.scheduler.getClass().getName()
this.ifacesByType.getClass().getName() != orig(this.getClass().getName())
return.scheduler.getClass().getName() != orig(this.getClass().getName())
===========================================================================
reso.common.Node.setNetwork(reso.common.Network):::ENTER
this.ifacesByType.getClass().getName() == arg0.nodes.getClass().getName()
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network == null
arg0 has only one value
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
arg0.nodes has only one value
size(this.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.Node.setNetwork(reso.common.Network):::EXIT
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifaces.getClass().getName() == orig(this.ifaces.getClass().getName())
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == arg0.nodes.getClass().getName()
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(arg0.nodes.getClass().getName())
this.ifacesByName == orig(this.ifacesByName)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == orig(arg0)
this.network.scheduler == arg0.scheduler
this.network.scheduler.getClass().getName() == arg0.scheduler.getClass().getName()
this.network.scheduler.time == arg0.scheduler.time
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == arg0.nodes
arg0.scheduler == orig(arg0.scheduler)
arg0.scheduler.getClass().getName() == orig(arg0.scheduler.getClass().getName())
arg0.scheduler.time == orig(arg0.scheduler.time)
arg0.nodes == orig(arg0.nodes)
this.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.network has only one value
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
arg0.nodes has only one value
size(this.ifaces[]) one of { 1, 2 }
===========================================================================
reso.common.ProtocolTable:::OBJECT
this.protocolsByName.getClass().getName() == this.protocolsByNumber.getClass().getName()
this.nextProtocolNumber one of { 0, 1, 2 }
this.protocolsByName.getClass().getName() == java.util.HashMap.class
===========================================================================
reso.common.ProtocolTable.ProtocolTable():::EXIT
this.nextProtocolNumber == 0
===========================================================================
reso.common.ProtocolTable.allocateProtocolNumber(java.lang.String):::ENTER
this has only one value
this.nextProtocolNumber one of { 0, 1 }
this.protocolsByName has only one value
this.protocolsByNumber has only one value
arg0.toString one of { "ICMP", "PING-PONG" }
===========================================================================
reso.common.ProtocolTable.allocateProtocolNumber(java.lang.String):::EXIT
this.protocolsByName == orig(this.protocolsByName)
this.protocolsByName.getClass().getName() == orig(this.protocolsByName.getClass().getName())
this.protocolsByName.getClass().getName() == orig(this.protocolsByNumber.getClass().getName())
this.protocolsByNumber == orig(this.protocolsByNumber)
arg0.toString == orig(arg0.toString)
return == orig(this.nextProtocolNumber)
this.nextProtocolNumber one of { 1, 2 }
this.protocolsByName has only one value
this.protocolsByNumber has only one value
arg0.toString one of { "ICMP", "PING-PONG" }
return one of { 0, 1 }
===========================================================================
reso.ethernet.EthernetAddress:::CLASS
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
===========================================================================
reso.ethernet.EthernetAddress:::OBJECT
this.addr != null
size(this.addr[]) == 6
===========================================================================
reso.ethernet.EthernetAddress.EthernetAddress(int, int, int, int, int, int):::ENTER
arg0 one of { 0, 255 }
arg1 one of { 38, 255 }
arg2 one of { 145, 187, 255 }
arg3 one of { 78, 159, 255 }
arg4 one of { 169, 252, 255 }
arg0 % arg2 == 0
arg0 % arg3 == 0
arg0 % arg4 == 0
arg0 % arg5 == 0
===========================================================================
reso.ethernet.EthernetAddress.EthernetAddress(int, int, int, int, int, int):::EXIT
===========================================================================
reso.ethernet.EthernetAddress.equals(java.lang.Object):::ENTER
this == arg0
arg0 != null
arg0.getClass().getName() == reso.ethernet.EthernetAddress.class
===========================================================================
reso.ethernet.EthernetAddress.equals(java.lang.Object):::EXIT64
===========================================================================
reso.ethernet.EthernetAddress.equals(java.lang.Object):::EXIT64;condition="return == true"
===========================================================================
reso.ethernet.EthernetAddress.equals(java.lang.Object):::EXIT
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
return == true
===========================================================================
reso.ethernet.EthernetAddress.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
reso.ethernet.EthernetAddress.getBroadcast():::EXIT
return has only one value
return.addr has only one value
return.addr[] == [-1, -1, -1, -1, -1, -1]
return.addr[] elements == -1
size(return.addr[]) == 6
===========================================================================
reso.ethernet.EthernetAddress.getByAddress(int, int, int, int, int, int):::ENTER
arg0 == 0
arg1 == 38
arg2 one of { 145, 187 }
arg3 one of { 78, 159 }
arg4 one of { 169, 252 }
===========================================================================
reso.ethernet.EthernetAddress.getByAddress(int, int, int, int, int, int):::EXIT
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
size(return.addr[]) == 6
orig(arg0) in return.addr[]
orig(arg1) in return.addr[]
orig(arg5) in return.addr[]
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::ENTER
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT40
return == false
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT40;condition="not(return == true)"
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT41
reso.ethernet.EthernetAddress.BROADCAST == orig(this)
this.addr has only one value
this.addr[] == [-1, -1, -1, -1, -1, -1]
this.addr[] elements == -1
return == true
orig(this) has only one value
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT41;condition="return == true"
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (reso.ethernet.EthernetAddress.BROADCAST == orig(this))
(return == true)  ==>  (this.addr has only one value)
(return == true)  ==>  (this.addr[] == [-1, -1, -1, -1, -1, -1])
(return == true)  ==>  (this.addr[] elements == -1)
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT;condition="return == true"
reso.ethernet.EthernetAddress.BROADCAST == orig(this)
this.addr has only one value
this.addr[] == [-1, -1, -1, -1, -1, -1]
this.addr[] elements == -1
return == true
orig(this) has only one value
===========================================================================
reso.ethernet.EthernetAddress.isBroadcast():::EXIT;condition="not(return == true)"
return == false
===========================================================================
reso.ethernet.EthernetAddress.toString():::ENTER
this.addr[] one of { [-1, -1, -1, -1, -1, -1], [0, 38, -111, -97, -87, 104], [0, 38, -69, 78, -4, 40] }
===========================================================================
reso.ethernet.EthernetAddress.toString():::EXIT
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
this.addr[] one of { [-1, -1, -1, -1, -1, -1], [0, 38, -111, -97, -87, 104], [0, 38, -69, 78, -4, 40] }
return.toString one of { "0:26:91:9f:a9:68", "0:26:bb:4e:fc:28", "ff:ff:ff:ff:ff:ff" }
===========================================================================
reso.ethernet.EthernetFrame:::CLASS
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName() == java.util.HashMap.class
===========================================================================
reso.ethernet.EthernetFrame:::OBJECT
this.src != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
this.src.addr != null
this.dst != null
this.dst.addr != null
this.protocol one of { 0, 1 }
this.payload != null
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(this.src.addr[]) == 6
size(this.dst.addr[]) == 6
===========================================================================
reso.ethernet.EthernetFrame.EthernetFrame(reso.ethernet.EthernetAddress, reso.ethernet.EthernetAddress, int, reso.common.Message):::ENTER
arg0 != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
arg0.addr != null
arg1 != null
arg1.addr != null
arg2 one of { 0, 1 }
arg3 != null
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg0.addr[]) == 6
size(arg1.addr[]) == 6
===========================================================================
reso.ethernet.EthernetFrame.EthernetFrame(reso.ethernet.EthernetAddress, reso.ethernet.EthernetAddress, int, reso.common.Message):::EXIT
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
arg0.addr != null
arg1.addr != null
size(arg0.addr[]) == 6
size(arg1.addr[]) == 6
===========================================================================
reso.ethernet.EthernetFrame.toString():::ENTER
this.src has only one value
this.src.addr has only one value
this.src.addr[] == [0, 38, -111, -97, -87, 104]
this.dst.addr[] one of { [-1, -1, -1, -1, -1, -1], [0, 38, -69, 78, -4, 40] }
===========================================================================
reso.ethernet.EthernetFrame.toString():::EXIT
reso.ethernet.EthernetFrame.protocols == orig(reso.ethernet.EthernetFrame.protocols)
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == orig(reso.ethernet.EthernetFrame.protocols.nextProtocolNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByName == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName)
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByNumber == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName())
this.src == orig(this.src)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.src.addr == orig(this.src.addr)
this.src.addr[] == orig(this.src.addr[])
this.dst == orig(this.dst)
this.dst.addr == orig(this.dst.addr)
this.dst.addr[] == orig(this.dst.addr[])
this.protocol == orig(this.protocol)
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.src has only one value
this.src.addr has only one value
this.src.addr[] == [0, 38, -111, -97, -87, 104]
this.dst.addr[] one of { [-1, -1, -1, -1, -1, -1], [0, 38, -69, 78, -4, 40] }
===========================================================================
reso.ethernet.EthernetInterface:::CLASS
reso.common.AbstractInterface.$assertionsDisabled == false
===========================================================================
reso.ethernet.EthernetInterface:::OBJECT
this.link.iface1.getClass().getName() == this.link.iface2.getClass().getName()
this.listeners.listeners.getClass().getName() == this.attrListeners.listeners.getClass().getName()
this.listeners.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.addr != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
this.addr.addr != null
this.link.SPEED_OF_LIGHT == 200000000
this.link.iface1 != null
this.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.link.iface2 != null
this.link.length == 5000000.0
this.listeners != null
this.listeners.listeners != null
this.listeners.listeners[] elements != null
this.listeners.listeners.getClass().getName() == java.util.ArrayList.class
this.attrs != null
this.attrListeners != null
this.attrListeners.listeners != null
this.attrListeners.listeners[] elements != null
this.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.attrListeners.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
this.index one of { -1, 0, 1 }
this.type has only one value
this.type != null
this.type.toString == "eth"
this.node != null
this.node.ifaces != null
this.node.ifaces[] elements != null
this.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.node.ifacesByType != null
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName != null
this.node.name != null
this.node.name.toString one of { "H1", "H2", "R1" }
this.node.network.scheduler has only one value
this.node.network.scheduler != null
this.node.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.node.network.nodes has only one value
this.node.network.nodes != null
this.node.network.nodes.getClass().getName() == java.util.TreeMap.class
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(this.addr.addr[]) == 6
size(this.listeners.listeners[]) one of { 0, 1, 2 }
size(this.attrListeners.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 0, 1, 2 }
this.link.iface1.getClass().getName() != this.listeners.listeners.getClass().getName()
this.link.iface1.getClass().getName() != this.node.getClass().getName()
this.link.iface1.getClass().getName() in this.node.ifaces[].getClass().getName()
this.link.iface1.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.link.iface1.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.link.iface1.getClass().getName() != this.node.network.nodes.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.listeners.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
===========================================================================
reso.ethernet.EthernetInterface.EthernetInterface(reso.common.Host, reso.ethernet.EthernetAddress):::ENTER
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
reso.common.Network.nextEthernetID == 0
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(arg0.apps[]) == 1
size(arg0.ifaces[]) one of { 0, 1 }
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg1.addr[]) == 6
===========================================================================
reso.ethernet.EthernetInterface.EthernetInterface(reso.common.Host, reso.ethernet.EthernetAddress):::EXIT
this.addr == orig(arg1)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr.addr == arg1.addr
this.listeners.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.attrListeners.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.node.ifaces == arg0.ifaces
this.node.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.node.ifacesByType == arg0.ifacesByType
this.node.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.ifacesByName == arg0.ifacesByName
this.node.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.node.name == arg0.name
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
this.link == null
this.listeners.listeners[] == []
this.listeners.listeners[].getClass().getName() == []
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index == -1
this.node.ifaces[] elements has only one value
this.node.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.node.network == null
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
size(this.node.ifaces[]) one of { 0, 1 }
size(arg0.apps[]) == 1
size(arg0.ifaces[]) one of { 0, 1 }
size(arg1.addr[]) == 6
===========================================================================
reso.ethernet.EthernetInterface.receive(reso.ethernet.EthernetFrame):::ENTER
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
this.link != null
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0 != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg0.src != null
arg0.src.addr != null
arg0.dst != null
arg0.dst.addr != null
arg0.protocol one of { 0, 1 }
arg0.payload != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.link.iface1.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ethernet.EthernetInterface.receive(reso.ethernet.EthernetFrame):::EXIT42
===========================================================================
reso.ethernet.EthernetInterface.receive(reso.ethernet.EthernetFrame):::EXIT
this.addr == orig(this.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr.addr == orig(this.addr.addr)
this.addr.addr[] == orig(this.addr.addr[])
this.link == orig(this.link)
this.link.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
this.link.iface1 == orig(this.link.iface1)
this.link.iface1.getClass().getName() == orig(this.link.iface1.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface2.getClass().getName())
this.link.iface2 == orig(this.link.iface2)
this.link.length == orig(this.link.length)
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
reso.ethernet.EthernetFrame.protocols == orig(reso.ethernet.EthernetFrame.protocols)
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == orig(reso.ethernet.EthernetFrame.protocols.nextProtocolNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByName == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName)
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByNumber == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber)
arg0.src == orig(arg0.src)
arg0.src.addr == orig(arg0.src.addr)
arg0.src.addr[] == orig(arg0.src.addr[])
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
arg0.protocol == orig(arg0.protocol)
arg0.payload == orig(arg0.payload)
arg0.payload.getClass().getName() == orig(arg0.payload.getClass().getName())
this.link != null
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg0.src != null
arg0.src.addr != null
arg0.dst != null
arg0.dst.addr != null
arg0.protocol one of { 0, 1 }
arg0.payload != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.link.iface1.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ethernet.EthernetInterface.send(reso.ethernet.EthernetFrame):::ENTER
this.addr == arg0.src
this.addr.addr == arg0.src.addr
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
this.link != null
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0 != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg0.dst != null
arg0.dst.addr != null
arg0.protocol one of { 0, 1 }
arg0.payload != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.link.iface1.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ethernet.EthernetInterface.send(reso.ethernet.EthernetFrame):::EXIT49
===========================================================================
reso.ethernet.EthernetInterface.send(reso.ethernet.EthernetFrame):::EXIT
this.addr == arg0.src
this.addr == orig(this.addr)
this.addr == orig(arg0.src)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.addr.addr == arg0.src.addr
this.addr.addr == orig(this.addr.addr)
this.addr.addr == orig(arg0.src.addr)
this.addr.addr[] == orig(this.addr.addr[])
this.link == orig(this.link)
this.link.SPEED_OF_LIGHT == orig(this.link.SPEED_OF_LIGHT)
this.link.iface1 == orig(this.link.iface1)
this.link.iface1.getClass().getName() == orig(this.link.iface1.getClass().getName())
this.link.iface1.getClass().getName() == orig(this.link.iface2.getClass().getName())
this.link.iface2 == orig(this.link.iface2)
this.link.length == orig(this.link.length)
this.listeners == orig(this.listeners)
this.listeners.listeners == orig(this.listeners.listeners)
this.listeners.listeners[] == orig(this.listeners.listeners[])
this.listeners.listeners.getClass().getName() == orig(this.listeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
reso.ethernet.EthernetFrame.protocols == orig(reso.ethernet.EthernetFrame.protocols)
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == orig(reso.ethernet.EthernetFrame.protocols.nextProtocolNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByName == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName)
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByNumber == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber)
arg0.src.addr[] == orig(arg0.src.addr[])
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
arg0.protocol == orig(arg0.protocol)
arg0.payload == orig(arg0.payload)
arg0.payload.getClass().getName() == orig(arg0.payload.getClass().getName())
this.link != null
this.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg0.dst != null
arg0.dst.addr != null
arg0.protocol one of { 0, 1 }
arg0.payload != null
size(this.listeners.listeners[]) one of { 1, 2 }
size(this.attrListeners.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.link.iface1.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.examples.pingpong.AppReceiver:::OBJECT
this has only one value
this.ip has only one value
this.ip.host has only one value
this.ip.host.listeners has only one value
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.listeners.getClass().getName() == java.util.ArrayList.class
this.ip.host.apps has only one value
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver] }
this.ip.host.apps.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifaces has only one value
this.ip.host.ifaces[] contains no nulls and has only one value, of length 1
this.ip.host.ifaces[] elements has only one value
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifacesByType has only one value
this.ip.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ip.host.ifacesByName has only one value
this.ip.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.ip.host.name has only one value
this.ip.host.name.toString == "H2"
this.ip.host.network has only one value
this.ip.fib has only one value
this.ip.fib.routes has only one value
this.ip.fib.routes.getClass().getName() == java.util.HashMap.class
this.ip.rawListeners has only one value
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.listeners has only one value
this.ip.ifaces has only one value
this.ip.ifaces[] contains no nulls and has only one value, of length 2
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.ip.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.ifacesByName has only one value
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.ip.forwarding == false
this.host has only one value
this.host.listeners has only one value
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.listeners.getClass().getName() == java.util.ArrayList.class
this.host.apps has only one value
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver] }
this.host.apps.getClass().getName() == java.util.ArrayList.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 1
this.host.ifaces[] elements has only one value
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.host.ifacesByType has only one value
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName has only one value
this.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.host.name has only one value
this.host.name.toString == "H2"
this.host.network has only one value
this.host.network.scheduler has only one value
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.name has only one value
this.name.toString == "receiver"
size(this.ip.host.apps[]) one of { 1, 2 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.host.apps[]) one of { 1, 2 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.AppReceiver.AppReceiver(reso.ip.IPHost):::ENTER
arg0 has only one value
arg0.ip has only one value
arg0.ip.host has only one value
arg0.ip.fib has only one value
arg0.ip.rawListeners has only one value
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ip.listeners has only one value
arg0.ip.ifaces has only one value
arg0.ip.ifaces[] contains no nulls and has only one value, of length 2
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ip.ifacesByName has only one value
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 1
arg0.apps[] elements has only one value
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H2"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) == 1
size(arg0.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.AppReceiver.AppReceiver(reso.ip.IPHost):::EXIT
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.ip == orig(arg0.ip)
arg0.ip.host == orig(arg0.ip.host)
arg0.ip.fib == orig(arg0.ip.fib)
arg0.ip.rawListeners == orig(arg0.ip.rawListeners)
arg0.ip.rawListeners[] == orig(arg0.ip.rawListeners[])
arg0.ip.rawListeners.getClass().getName() == orig(arg0.ip.rawListeners.getClass().getName())
arg0.ip.listeners == orig(arg0.ip.listeners)
arg0.ip.ifaces == orig(arg0.ip.ifaces)
arg0.ip.ifaces[] == orig(arg0.ip.ifaces[])
arg0.ip.ifaces.getClass().getName() == orig(arg0.ip.ifaces.getClass().getName())
arg0.ip.ifacesByName == orig(arg0.ip.ifacesByName)
arg0.ip.ifacesByName.getClass().getName() == orig(arg0.ip.ifacesByName.getClass().getName())
arg0.ip.forwarding == orig(arg0.ip.forwarding)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.apps.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg0.network.scheduler == orig(arg0.network.scheduler)
arg0.network.scheduler.getClass().getName() == orig(arg0.network.scheduler.getClass().getName())
arg0.network.nodes == orig(arg0.network.nodes)
arg0.network.nodes.getClass().getName() == orig(arg0.network.nodes.getClass().getName())
this.ip.host.apps[] contains no nulls and has only one value, of length 1
this.ip.host.apps[] elements has only one value
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.ip has only one value
arg0.ip.host has only one value
arg0.ip.fib has only one value
arg0.ip.rawListeners has only one value
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ip.listeners has only one value
arg0.ip.ifaces has only one value
arg0.ip.ifaces[] contains no nulls and has only one value, of length 2
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ip.ifacesByName has only one value
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 1
arg0.apps[] elements has only one value
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H2"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ip.host.apps[]) == 1
size(this.host.apps[]) == 1
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) == 1
size(arg0.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.AppReceiver.start():::ENTER
this.ip.host.apps[] contains no nulls and has only one value, of length 2
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver]
this.host.apps[] contains no nulls and has only one value, of length 2
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver]
size(this.ip.host.apps[]) == 2
size(this.host.apps[]) == 2
===========================================================================
reso.examples.pingpong.AppReceiver.start():::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.apps.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifaces.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.ifacesByName.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.host.network.nodes.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.ip.host.apps[] contains no nulls and has only one value, of length 2
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver]
this.host.apps[] contains no nulls and has only one value, of length 2
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver]
size(this.ip.host.apps[]) == 2
size(this.host.apps[]) == 2
===========================================================================
reso.examples.pingpong.AppSender:::OBJECT
this has only one value
this.ip has only one value
this.ip.host has only one value
this.ip.host.listeners has only one value
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.listeners.getClass().getName() == java.util.ArrayList.class
this.ip.host.apps has only one value
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ip.host.apps.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifaces has only one value
this.ip.host.ifaces[] contains no nulls and has only one value, of length 1
this.ip.host.ifaces[] elements has only one value
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifacesByType has only one value
this.ip.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ip.host.ifacesByName has only one value
this.ip.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.ip.host.name has only one value
this.ip.host.name.toString == "H1"
this.ip.host.network has only one value
this.ip.fib has only one value
this.ip.fib.routes has only one value
this.ip.fib.routes.getClass().getName() == java.util.HashMap.class
this.ip.rawListeners has only one value
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.listeners has only one value
this.ip.ifaces has only one value
this.ip.ifaces[] contains no nulls and has only one value, of length 2
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.ip.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.ifacesByName has only one value
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.ip.forwarding == false
this.dst has only one value
this.dst.addr has only one value
this.dst.addr[] == [64, 40, -127, -126]
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
this.num == 5
this.host has only one value
this.host.listeners has only one value
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.listeners.getClass().getName() == java.util.ArrayList.class
this.host.apps has only one value
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.apps.getClass().getName() == java.util.ArrayList.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 1
this.host.ifaces[] elements has only one value
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.host.ifacesByType has only one value
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName has only one value
this.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.host.name has only one value
this.host.name.toString == "H1"
this.host.network has only one value
this.host.network.scheduler has only one value
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.name has only one value
this.name.toString == "sender"
size(this.ip.host.apps[]) one of { 1, 3 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.dst.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(this.host.apps[]) one of { 1, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.AppSender.AppSender(reso.ip.IPHost, reso.ip.IPAddress, int):::ENTER
arg0 has only one value
arg0.ip has only one value
arg0.ip.host has only one value
arg0.ip.fib has only one value
arg0.ip.rawListeners has only one value
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ip.listeners has only one value
arg0.ip.ifaces has only one value
arg0.ip.ifaces[] contains no nulls and has only one value, of length 2
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ip.ifacesByName has only one value
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 1
arg0.apps[] elements has only one value
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H1"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
arg1 has only one value
arg1.addr has only one value
arg1.addr[] == [64, 40, -127, -126]
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg2 == 5
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) == 1
size(arg0.ifaces[]) == 1
size(arg1.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.examples.pingpong.AppSender.AppSender(reso.ip.IPHost, reso.ip.IPAddress, int):::EXIT
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.ip == orig(arg0.ip)
arg0.ip.host == orig(arg0.ip.host)
arg0.ip.fib == orig(arg0.ip.fib)
arg0.ip.rawListeners == orig(arg0.ip.rawListeners)
arg0.ip.rawListeners[] == orig(arg0.ip.rawListeners[])
arg0.ip.rawListeners.getClass().getName() == orig(arg0.ip.rawListeners.getClass().getName())
arg0.ip.listeners == orig(arg0.ip.listeners)
arg0.ip.ifaces == orig(arg0.ip.ifaces)
arg0.ip.ifaces[] == orig(arg0.ip.ifaces[])
arg0.ip.ifaces.getClass().getName() == orig(arg0.ip.ifaces.getClass().getName())
arg0.ip.ifacesByName == orig(arg0.ip.ifacesByName)
arg0.ip.ifacesByName.getClass().getName() == orig(arg0.ip.ifacesByName.getClass().getName())
arg0.ip.forwarding == orig(arg0.ip.forwarding)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.apps.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg0.network.scheduler == orig(arg0.network.scheduler)
arg0.network.scheduler.getClass().getName() == orig(arg0.network.scheduler.getClass().getName())
arg0.network.nodes == orig(arg0.network.nodes)
arg0.network.nodes.getClass().getName() == orig(arg0.network.nodes.getClass().getName())
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
this.ip.host.apps[] contains no nulls and has only one value, of length 1
this.ip.host.apps[] elements has only one value
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.ip has only one value
arg0.ip.host has only one value
arg0.ip.fib has only one value
arg0.ip.rawListeners has only one value
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ip.listeners has only one value
arg0.ip.ifaces has only one value
arg0.ip.ifaces[] contains no nulls and has only one value, of length 2
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ip.ifacesByName has only one value
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 1
arg0.apps[] elements has only one value
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H1"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
arg1.addr has only one value
arg1.addr[] == [64, 40, -127, -126]
size(this.ip.host.apps[]) == 1
size(this.host.apps[]) == 1
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) == 1
size(arg0.ifaces[]) == 1
size(arg1.addr[]) == 4
===========================================================================
reso.examples.pingpong.AppSender.start():::ENTER
this.ip.host.apps[] contains no nulls and has only one value, of length 3
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
size(this.ip.host.apps[]) == 3
size(this.host.apps[]) == 3
===========================================================================
reso.examples.pingpong.AppSender.start():::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.dst == orig(this.dst)
this.dst.addr == orig(this.dst.addr)
this.dst.addr[] == orig(this.dst.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.num == orig(this.num)
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.apps.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifaces.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.ifacesByName.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.host.network.nodes.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.ip.host.apps[] contains no nulls and has only one value, of length 3
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
size(this.ip.host.apps[]) == 3
size(this.host.apps[]) == 3
===========================================================================
reso.examples.pingpong.PingPongMessage:::OBJECT
this.num >= 0
===========================================================================
reso.examples.pingpong.PingPongMessage.PingPongMessage(int):::ENTER
===========================================================================
reso.examples.pingpong.PingPongMessage.PingPongMessage(int):::EXIT
this.num == orig(arg0)
===========================================================================
reso.examples.pingpong.PingPongMessage.toString():::ENTER
this.num one of { 0, 2, 4 }
===========================================================================
reso.examples.pingpong.PingPongMessage.toString():::EXIT
this.num == orig(this.num)
this.num one of { 0, 2, 4 }
return.toString one of { "PingPong [num=0]", "PingPong [num=2]", "PingPong [num=4]" }
===========================================================================
reso.examples.pingpong.PingPongProtocol:::CLASS
reso.examples.pingpong.PingPongProtocol.IP_PROTO_PINGPONG == 1
===========================================================================
reso.examples.pingpong.PingPongProtocol:::OBJECT
this.host.ip.rawListeners.getClass().getName() == this.host.listeners.getClass().getName()
this.host.ip.ifaces.getClass().getName() == this.host.listeners.getClass().getName()
this.host.listeners.getClass().getName() == this.host.apps.getClass().getName()
this.host.listeners.getClass().getName() == this.host.ifaces.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.ifacesByName.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.network.nodes.getClass().getName()
this.host != null
this.host.ip != null
this.host.ip.host != null
this.host.ip.fib != null
this.host.ip.rawListeners != null
this.host.ip.rawListeners[] == []
this.host.ip.rawListeners[].getClass().getName() == []
this.host.ip.listeners != null
this.host.ip.ifaces != null
this.host.ip.ifaces[] elements != null
this.host.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.host.ip.ifacesByName != null
this.host.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.host.ip.forwarding == false
this.host.listeners != null
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.listeners.getClass().getName() == java.util.ArrayList.class
this.host.apps != null
this.host.apps[] elements != null
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces != null
this.host.ifaces[] elements != null
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifacesByType != null
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName != null
this.host.name != null
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.host.network != null
this.host.network.scheduler has only one value
this.host.network.scheduler != null
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes != null
size(this.host.ip.ifaces[]) == 2
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
this.host.ip.ifacesByName.getClass().getName() != this.host.listeners.getClass().getName()
this.host.ip.ifacesByName.getClass().getName() != this.host.ifacesByType.getClass().getName()
this.host.ip.ifacesByName.getClass().getName() != this.host.network.scheduler.getClass().getName()
this.host.listeners.getClass().getName() != this.host.ifacesByType.getClass().getName()
this.host.listeners.getClass().getName() != this.host.network.scheduler.getClass().getName()
this.host.ifacesByType.getClass().getName() != this.host.network.scheduler.getClass().getName()
===========================================================================
reso.examples.pingpong.PingPongProtocol.PingPongProtocol(reso.ip.IPHost):::ENTER
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.network.nodes.getClass().getName()
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2" }
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
arg0.network.nodes has only one value
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) one of { 2, 3 }
size(arg0.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.PingPongProtocol.PingPongProtocol(reso.ip.IPHost):::EXIT
this.host == orig(arg0)
this.host.ip == arg0.ip
this.host.ip.host == arg0.ip.host
this.host.ip.fib == arg0.ip.fib
this.host.ip.rawListeners == arg0.ip.rawListeners
this.host.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ip.listeners == arg0.ip.listeners
this.host.ip.ifaces == arg0.ip.ifaces
this.host.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ip.ifacesByName == arg0.ip.ifacesByName
this.host.ip.ifacesByName.getClass().getName() == arg0.ip.ifacesByName.getClass().getName()
this.host.ip.forwarding == arg0.ip.forwarding
this.host.listeners == arg0.listeners
this.host.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.host.apps == arg0.apps
this.host.apps.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ifaces == arg0.ifaces
this.host.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ifacesByType == arg0.ifacesByType
this.host.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.ifacesByName == arg0.ifacesByName
this.host.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.name == arg0.name
this.host.network == arg0.network
this.host.network.scheduler == arg0.network.scheduler
this.host.network.scheduler.getClass().getName() == arg0.network.scheduler.getClass().getName()
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == arg0.network.nodes
this.host.network.nodes.getClass().getName() == arg0.ifacesByType.getClass().getName()
arg0.ip == orig(arg0.ip)
arg0.ip.host == orig(arg0.ip.host)
arg0.ip.fib == orig(arg0.ip.fib)
arg0.ip.rawListeners == orig(arg0.ip.rawListeners)
arg0.ip.rawListeners[] == orig(arg0.ip.rawListeners[])
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.listeners == orig(arg0.ip.listeners)
arg0.ip.ifaces == orig(arg0.ip.ifaces)
arg0.ip.ifaces[] == orig(arg0.ip.ifaces[])
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifacesByName == orig(arg0.ip.ifacesByName)
arg0.ip.ifacesByName.getClass().getName() == orig(arg0.ip.ifacesByName.getClass().getName())
arg0.ip.forwarding == orig(arg0.ip.forwarding)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.listeners.getClass().getName() == orig(arg0.ip.rawListeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ip.ifaces.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.network.nodes.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.network.nodes.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg0.network.scheduler == orig(arg0.network.scheduler)
arg0.network.scheduler.getClass().getName() == orig(arg0.network.scheduler.getClass().getName())
arg0.network.nodes == orig(arg0.network.nodes)
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2" }
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.network.nodes has only one value
size(arg0.ip.ifaces[]) == 2
size(arg0.apps[]) one of { 2, 3 }
size(arg0.ifaces[]) == 1
===========================================================================
reso.examples.pingpong.PingPongProtocol.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::ENTER
this.host.ip.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
arg0.getClass().getName() == reso.ip.IPEthernetAdapter.class
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl == 254
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
arg0.getClass().getName() in this.host.ip.ifaces[].getClass().getName()
===========================================================================
reso.examples.pingpong.PingPongProtocol.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::EXIT
reso.examples.pingpong.PingPongProtocol.IP_PROTO_PINGPONG == orig(reso.examples.pingpong.PingPongProtocol.IP_PROTO_PINGPONG)
this.host == orig(this.host)
this.host.ip == orig(this.host.ip)
this.host.ip.host == orig(this.host.ip.host)
this.host.ip.fib == orig(this.host.ip.fib)
this.host.ip.rawListeners == orig(this.host.ip.rawListeners)
this.host.ip.rawListeners[] == orig(this.host.ip.rawListeners[])
this.host.ip.listeners == orig(this.host.ip.listeners)
this.host.ip.ifaces == orig(this.host.ip.ifaces)
this.host.ip.ifaces[] == orig(this.host.ip.ifaces[])
this.host.ip.ifacesByName == orig(this.host.ip.ifacesByName)
this.host.ip.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.host.ip.forwarding == orig(this.host.ip.forwarding)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.ip.rawListeners.getClass().getName())
this.host.listeners.getClass().getName() == orig(this.host.ip.ifaces.getClass().getName())
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.listeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.listeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(this.host.ip.ifacesByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg1.src == orig(arg1.src)
arg1.src.addr == orig(arg1.src.addr)
arg1.src.addr[] == orig(arg1.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
arg1.dst == orig(arg1.dst)
arg1.dst.addr == orig(arg1.dst.addr)
arg1.dst.addr[] == orig(arg1.dst.addr[])
arg1.ttl == orig(arg1.ttl)
arg1.payload == orig(arg1.payload)
arg1.payload.getClass().getName() == orig(arg1.payload.getClass().getName())
arg1.protocol == orig(arg1.protocol)
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl == 254
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
orig(arg0.getClass().getName()) in this.host.ip.ifaces[].getClass().getName()
===========================================================================
reso.examples.static_routing.AppSniffer:::OBJECT
this has only one value
this.ifNames has only one value
this.ifNames != null
this.ifNames.getClass().getName() == java.lang.String[].class
this.ifNames[] contains no nulls and has only one value, of length 1
this.ifNames[] elements has only one value
this.ifNames[] elements != null
this.ifNames[].getClass().getName() == [java.lang.String]
this.ifNames[].getClass().getName() elements == java.lang.String.class
this.ifNames[].toString == [eth0]
this.ifNames[].toString elements == "eth0"
this.host has only one value
this.host != null
this.host.listeners has only one value
this.host.listeners != null
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.listeners.getClass().getName() == java.util.ArrayList.class
this.host.apps has only one value
this.host.apps != null
this.host.apps[] elements != null
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.apps.getClass().getName() == java.util.ArrayList.class
this.host.ifaces has only one value
this.host.ifaces != null
this.host.ifaces[] contains no nulls and has only one value, of length 1
this.host.ifaces[] elements has only one value
this.host.ifaces[] elements != null
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.host.ifacesByType has only one value
this.host.ifacesByType != null
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName has only one value
this.host.ifacesByName != null
this.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.host.name has only one value
this.host.name != null
this.host.name.toString == "H1"
this.host.network has only one value
this.host.network != null
this.host.network.scheduler has only one value
this.host.network.scheduler != null
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes != null
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.name has only one value
this.name != null
this.name.toString == "sniffer"
size(this.ifNames[]) == 1
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.examples.static_routing.AppSniffer.AppSniffer(reso.common.Host, java.lang.String[]):::ENTER
arg0 has only one value
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 2
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender]
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H1"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
arg1 has only one value
arg1.getClass().getName() == java.lang.String[].class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].toString == [eth0]
arg1[].toString elements == "eth0"
size(arg0.apps[]) == 2
size(arg0.ifaces[]) == 1
size(arg1[]) == 1
===========================================================================
reso.examples.static_routing.AppSniffer.AppSniffer(reso.common.Host, java.lang.String[]):::EXIT
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.apps.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
arg0.network.scheduler == orig(arg0.network.scheduler)
arg0.network.scheduler.getClass().getName() == orig(arg0.network.scheduler.getClass().getName())
arg0.network.nodes == orig(arg0.network.nodes)
arg0.network.nodes.getClass().getName() == orig(arg0.network.nodes.getClass().getName())
arg1[] == orig(arg1[])
this.host.apps[] contains no nulls and has only one value, of length 2
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender]
arg0.listeners has only one value
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps has only one value
arg0.apps[] contains no nulls and has only one value, of length 2
arg0.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender]
arg0.apps.getClass().getName() == java.util.ArrayList.class
arg0.ifaces has only one value
arg0.ifaces[] contains no nulls and has only one value, of length 1
arg0.ifaces[] elements has only one value
arg0.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
arg0.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByType has only one value
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.ifacesByName has only one value
arg0.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.name has only one value
arg0.name.toString == "H1"
arg0.network has only one value
arg0.network.scheduler has only one value
arg0.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.network.nodes has only one value
arg0.network.nodes.getClass().getName() == java.util.TreeMap.class
arg1[] contains no nulls and has only one value, of length 1
arg1[] elements has only one value
arg1[].toString == [eth0]
arg1[].toString elements == "eth0"
size(this.host.apps[]) == 2
size(arg0.apps[]) == 2
size(arg0.ifaces[]) == 1
===========================================================================
reso.examples.static_routing.AppSniffer.receive(reso.common.HardwareInterface, reso.common.Message):::ENTER
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
arg0 has only one value
arg0.getClass().getName() == reso.ethernet.EthernetInterface.class
arg1.getClass().getName() == reso.ethernet.EthernetFrame.class
size(this.host.apps[]) == 3
===========================================================================
reso.examples.static_routing.AppSniffer.receive(reso.common.HardwareInterface, reso.common.Message):::EXIT
this.ifNames == orig(this.ifNames)
this.ifNames.getClass().getName() == orig(this.ifNames.getClass().getName())
this.ifNames[] == orig(this.ifNames[])
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.apps.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifaces.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.ifacesByName.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.host.network.nodes.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
size(this.host.apps[]) == 3
===========================================================================
reso.examples.static_routing.AppSniffer.start():::ENTER
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
size(this.host.apps[]) == 3
===========================================================================
reso.examples.static_routing.AppSniffer.start():::EXIT
this.ifNames == orig(this.ifNames)
this.ifNames.getClass().getName() == orig(this.ifNames.getClass().getName())
this.ifNames[] == orig(this.ifNames[])
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.listeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.apps.getClass().getName() == orig(this.host.apps.getClass().getName())
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifaces.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.ifacesByName.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.host.network.nodes.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.host.apps[] contains no nulls and has only one value, of length 3
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer]
size(this.host.apps[]) == 3
===========================================================================
reso.examples.static_routing.Demo.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
reso.examples.static_routing.Demo.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
reso.ip.ARPMessage$Type:::CLASS
reso.ip.ARPMessage$Type.REQUEST has only one value
reso.ip.ARPMessage$Type.RESPONSE has only one value
reso.ip.ARPMessage$Type.$VALUES has only one value
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == reso.ip.ARPMessage$Type[].class
reso.ip.ARPMessage$Type.$VALUES[] contains no nulls and has only one value, of length 2
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() == [reso.ip.ARPMessage.Type, reso.ip.ARPMessage.Type]
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() elements == reso.ip.ARPMessage.Type.class
size(reso.ip.ARPMessage$Type.$VALUES[]) == 2
===========================================================================
reso.ip.ARPMessage$Type:::OBJECT
===========================================================================
reso.ip.ARPMessage$Type.Type(java.lang.String, int):::ENTER
arg0.toString one of { "REQUEST", "RESPONSE" }
arg1 one of { 0, 1 }
===========================================================================
reso.ip.ARPMessage$Type.Type(java.lang.String, int):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString one of { "REQUEST", "RESPONSE" }
===========================================================================
reso.ip.ARPMessage$Type.values():::ENTER
===========================================================================
reso.ip.ARPMessage$Type.values():::EXIT
reso.ip.ARPMessage$Type.REQUEST == orig(reso.ip.ARPMessage$Type.REQUEST)
reso.ip.ARPMessage$Type.RESPONSE == orig(reso.ip.ARPMessage$Type.RESPONSE)
reso.ip.ARPMessage$Type.$VALUES == orig(reso.ip.ARPMessage$Type.$VALUES)
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == return.getClass().getName()
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == orig(reso.ip.ARPMessage$Type.$VALUES.getClass().getName())
reso.ip.ARPMessage$Type.$VALUES[] == orig(reso.ip.ARPMessage$Type.$VALUES[])
return has only one value
return[] contains no nulls and has only one value, of length 2
size(return[]) == 2
reso.ip.ARPMessage$Type.REQUEST in return[]
reso.ip.ARPMessage$Type.RESPONSE in return[]
===========================================================================
reso.ip.ARPMessage:::OBJECT
this.type != null
reso.ip.ARPMessage$Type.REQUEST has only one value
reso.ip.ARPMessage$Type.REQUEST != null
reso.ip.ARPMessage$Type.RESPONSE has only one value
reso.ip.ARPMessage$Type.RESPONSE != null
reso.ip.ARPMessage$Type.$VALUES has only one value
reso.ip.ARPMessage$Type.$VALUES != null
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == reso.ip.ARPMessage$Type[].class
reso.ip.ARPMessage$Type.$VALUES[] contains no nulls and has only one value, of length 2
reso.ip.ARPMessage$Type.$VALUES[] elements != null
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() == [reso.ip.ARPMessage.Type, reso.ip.ARPMessage.Type]
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() elements == reso.ip.ARPMessage.Type.class
this.ipAddr != null
this.ipAddr.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(reso.ip.ARPMessage$Type.$VALUES[]) == 2
size(this.ipAddr.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(this.ethAddr.addr[]) == 6
===========================================================================
reso.ip.ARPMessage.ARPMessage(reso.ip.ARPMessage$Type, reso.ip.IPAddress, reso.ethernet.EthernetAddress):::ENTER
reso.ip.ARPMessage$Type.REQUEST has only one value
reso.ip.ARPMessage$Type.RESPONSE has only one value
reso.ip.ARPMessage$Type.$VALUES has only one value
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == reso.ip.ARPMessage$Type[].class
reso.ip.ARPMessage$Type.$VALUES[] contains no nulls and has only one value, of length 2
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() == [reso.ip.ARPMessage.Type, reso.ip.ARPMessage.Type]
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() elements == reso.ip.ARPMessage.Type.class
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(reso.ip.ARPMessage$Type.$VALUES[]) == 2
size(arg1.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg2.addr[]) == 6
===========================================================================
reso.ip.ARPMessage.ARPMessage(reso.ip.ARPMessage$Type, reso.ip.IPAddress, reso.ethernet.EthernetAddress):::EXIT
this.type == orig(arg0)
reso.ip.ARPMessage$Type.REQUEST == orig(reso.ip.ARPMessage$Type.REQUEST)
reso.ip.ARPMessage$Type.RESPONSE == orig(reso.ip.ARPMessage$Type.RESPONSE)
reso.ip.ARPMessage$Type.$VALUES == orig(reso.ip.ARPMessage$Type.$VALUES)
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == orig(reso.ip.ARPMessage$Type.$VALUES.getClass().getName())
reso.ip.ARPMessage$Type.$VALUES[] == orig(reso.ip.ARPMessage$Type.$VALUES[])
this.ipAddr == orig(arg1)
this.ipAddr.addr == arg1.addr
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.ethAddr == orig(arg2)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.ethAddr.addr == arg2.addr
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
arg2.addr == orig(arg2.addr)
arg2.addr[] == orig(arg2.addr[])
size(arg1.addr[]) == 4
size(arg2.addr[]) == 6
===========================================================================
reso.ip.ARPMessage.request(reso.ip.IPAddress):::ENTER
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.ARPMessage.request(reso.ip.IPAddress):::EXIT
arg0.addr == return.ipAddr.addr
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
return.type == reso.ip.ARPMessage$Type.REQUEST
return.ipAddr == orig(arg0)
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ip.ARPMessage$Type.REQUEST has only one value
reso.ip.ARPMessage$Type.RESPONSE has only one value
reso.ip.ARPMessage$Type.$VALUES has only one value
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == reso.ip.ARPMessage$Type[].class
reso.ip.ARPMessage$Type.$VALUES[] contains no nulls and has only one value, of length 2
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() == [reso.ip.ARPMessage.Type, reso.ip.ARPMessage.Type]
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() elements == reso.ip.ARPMessage.Type.class
return.ethAddr == null
reso.ethernet.EthernetAddress.BROADCAST has only one value
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ip.ARPMessage$Type.$VALUES[]) == 2
size(return.ipAddr.addr[]) == 4
===========================================================================
reso.ip.ARPMessage.response(reso.ip.IPAddress, reso.ethernet.EthernetAddress):::ENTER
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg1.addr[]) == 6
===========================================================================
reso.ip.ARPMessage.response(reso.ip.IPAddress, reso.ethernet.EthernetAddress):::EXIT
arg0.addr == return.ipAddr.addr
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
arg1.addr == return.ethAddr.addr
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
return.type == reso.ip.ARPMessage$Type.RESPONSE
return.ipAddr == orig(arg0)
return.ethAddr == orig(arg1)
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
reso.ip.ARPMessage$Type.REQUEST has only one value
reso.ip.ARPMessage$Type.RESPONSE has only one value
reso.ip.ARPMessage$Type.$VALUES has only one value
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == reso.ip.ARPMessage$Type[].class
reso.ip.ARPMessage$Type.$VALUES[] contains no nulls and has only one value, of length 2
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() == [reso.ip.ARPMessage.Type, reso.ip.ARPMessage.Type]
reso.ip.ARPMessage$Type.$VALUES[].getClass().getName() elements == reso.ip.ARPMessage.Type.class
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg1.addr[]) == 6
size(reso.ip.ARPMessage$Type.$VALUES[]) == 2
size(return.ipAddr.addr[]) == 4
size(return.ethAddr.addr[]) == 6
===========================================================================
reso.ip.ARPMessage.toString():::ENTER
this.ipAddr.addr[] one of { [64, 40, -128, -127], [64, 40, -128, -126] }
this.ethAddr.addr has only one value
this.ethAddr.addr[] == [0, 38, -111, -97, -87, 104]
===========================================================================
reso.ip.ARPMessage.toString():::EXIT
this.type == orig(this.type)
reso.ip.ARPMessage$Type.REQUEST == orig(reso.ip.ARPMessage$Type.REQUEST)
reso.ip.ARPMessage$Type.RESPONSE == orig(reso.ip.ARPMessage$Type.RESPONSE)
reso.ip.ARPMessage$Type.$VALUES == orig(reso.ip.ARPMessage$Type.$VALUES)
reso.ip.ARPMessage$Type.$VALUES.getClass().getName() == orig(reso.ip.ARPMessage$Type.$VALUES.getClass().getName())
reso.ip.ARPMessage$Type.$VALUES[] == orig(reso.ip.ARPMessage$Type.$VALUES[])
this.ipAddr == orig(this.ipAddr)
this.ipAddr.addr == orig(this.ipAddr.addr)
this.ipAddr.addr[] == orig(this.ipAddr.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.ethAddr == orig(this.ethAddr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
this.ethAddr.addr == orig(this.ethAddr.addr)
this.ethAddr.addr[] == orig(this.ethAddr.addr[])
this.ipAddr.addr[] one of { [64, 40, -128, -127], [64, 40, -128, -126] }
this.ethAddr.addr has only one value
this.ethAddr.addr[] == [0, 38, -111, -97, -87, 104]
return.toString one of { "type=REQUEST, ip=192.168.0.1", "type=RESPONSE, ip=192.168.0.2, MAC=0:26:91:9f:a9:68" }
===========================================================================
reso.ip.ARPProtocol$TaskSendFrame:::OBJECT
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.ARPProtocol.this.tableARP.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName()
this.iface == reso.ip.ARPProtocol.this.iface
this.iface == reso.ip.ARPProtocol.this.adapter.iface
this.iface.addr == reso.ip.ARPProtocol.this.iface.addr
this.iface.link == reso.ip.ARPProtocol.this.iface.link
this.iface.link.iface1.getClass().getName() == this.iface.link.iface2.getClass().getName()
this.iface.listeners == reso.ip.ARPProtocol.this.iface.listeners
this.iface.listeners.listeners.getClass().getName() == this.iface.attrListeners.listeners.getClass().getName()
this.iface.listeners.listeners.getClass().getName() == this.iface.node.ifaces.getClass().getName()
this.iface.listeners.listeners.getClass().getName() == reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName()
this.iface.attrs == reso.ip.ARPProtocol.this.iface.attrs
this.iface.attrListeners == reso.ip.ARPProtocol.this.iface.attrListeners
this.iface.index == reso.ip.ARPProtocol.this.iface.index
this.iface.index == reso.ip.ARPProtocol.this.adapter.index
this.iface.type == reso.ip.ARPProtocol.this.iface.type
this.iface.type == reso.ip.ARPProtocol.this.adapter.type
this.iface.node == reso.ip.ARPProtocol.this.iface.node
this.iface.node == reso.ip.ARPProtocol.this.adapter.node
this.iface.node.getClass().getName() == reso.ip.ARPProtocol.this.iface.node.getClass().getName()
this.iface.node.getClass().getName() == reso.ip.ARPProtocol.this.adapter.node.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() == this.iface.node.ifacesByName.getClass().getName()
reso.ip.ARPProtocol.this == reso.ip.ARPProtocol.this.adapter.arp
this.datagram != null
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
this.datagram.src != null
this.datagram.src.addr != null
this.datagram.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
this.datagram.dst != null
this.datagram.dst.addr != null
this.datagram.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
this.datagram.ttl one of { 254, 255 }
this.datagram.payload != null
this.datagram.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
this.datagram.protocol == 1
this.gateway != null
this.gateway.addr != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
this.iface != null
this.iface.addr != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
this.iface.addr.addr != null
this.iface.link != null
this.iface.link.SPEED_OF_LIGHT == 200000000
this.iface.link.iface1 != null
this.iface.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.iface.link.iface2 != null
this.iface.link.length == 5000000.0
this.iface.listeners != null
this.iface.listeners.listeners != null
this.iface.listeners.listeners[] elements != null
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.listeners.listeners.getClass().getName() == java.util.ArrayList.class
this.iface.attrs != null
this.iface.attrListeners != null
this.iface.attrListeners.listeners != null
this.iface.attrListeners.listeners[] elements != null
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.iface.index one of { 0, 1 }
this.iface.type has only one value
this.iface.type != null
this.iface.type.toString == "eth"
this.iface.node != null
this.iface.node.ifaces != null
this.iface.node.ifaces[] elements != null
this.iface.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.iface.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.iface.node.ifacesByType != null
this.iface.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.iface.node.ifacesByName != null
this.iface.node.name != null
this.iface.node.name.toString one of { "H1", "H2", "R1" }
this.iface.node.network has only one value
this.iface.node.network != null
reso.common.AbstractInterface.$assertionsDisabled == false
reso.ip.ARPProtocol.this.tableARP != null
reso.ip.ARPProtocol.this.pendingARPTasks != null
reso.ip.ARPProtocol.this.iface.type.toString == "eth"
reso.ip.ARPProtocol.this.adapter != null
reso.ip.ARPProtocol.this.adapter.ip != null
reso.ip.ARPProtocol.this.adapter.arp != null
reso.ip.ARPProtocol.this.adapter.addresses != null
reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName() == java.util.TreeSet.class
reso.ip.ARPProtocol.this.adapter.listeners != null
reso.ip.ARPProtocol.this.adapter.listeners[] elements != null
reso.ip.ARPProtocol.this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ip.ARPProtocol.this.adapter.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
reso.ip.ARPProtocol.this.adapter.attrs != null
reso.ip.ARPProtocol.this.adapter.attrListeners != null
reso.ip.ARPProtocol.this.adapter.type.toString == "eth"
size(this.datagram.src.addr[]) == 4
size(this.datagram.dst.addr[]) == 4
size(this.gateway.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(this.iface.addr.addr[]) == 6
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.iface.node.ifaces[]) one of { 1, 2 }
size(reso.ip.ARPProtocol.this.adapter.listeners[]) == 1
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != this.datagram.payload.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != this.iface.link.iface1.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != this.iface.listeners.listeners.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != this.iface.node.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
this.datagram.payload.getClass().getName() != this.iface.link.iface1.getClass().getName()
this.datagram.payload.getClass().getName() != this.iface.listeners.listeners.getClass().getName()
this.datagram.payload.getClass().getName() != this.iface.node.getClass().getName()
this.datagram.payload.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.datagram.payload.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.iface.listeners.listeners.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.iface.node.getClass().getName()
this.iface.link.iface1.getClass().getName() in this.iface.node.ifaces[].getClass().getName()
this.iface.link.iface1.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.iface.link.iface1.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
this.iface.listeners.listeners.getClass().getName() != this.iface.node.getClass().getName()
this.iface.listeners.listeners.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.iface.listeners.listeners.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
this.iface.node.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.iface.node.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName()
===========================================================================
reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::ENTER
reso.ip.ARPProtocol.this == reso.ip.ARPProtocol.this.adapter.arp
reso.ip.ARPProtocol.this.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
reso.ip.ARPProtocol.this.iface == arg3
reso.ip.ARPProtocol.this.iface.addr == arg3.addr
reso.ip.ARPProtocol.this.iface.link == arg3.link
reso.ip.ARPProtocol.this.iface.listeners == arg3.listeners
reso.ip.ARPProtocol.this.iface.attrs == arg3.attrs
reso.ip.ARPProtocol.this.iface.attrListeners == arg3.attrListeners
reso.ip.ARPProtocol.this.iface.index == arg3.index
reso.ip.ARPProtocol.this.iface.type == arg3.type
reso.ip.ARPProtocol.this.iface.node == arg3.node
reso.ip.ARPProtocol.this.iface.node.getClass().getName() == arg3.node.getClass().getName()
reso.ip.ARPProtocol.this.adapter.iface == arg3
reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() == arg3.listeners.listeners.getClass().getName()
reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() == arg3.attrListeners.listeners.getClass().getName()
reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() == arg3.node.ifaces.getClass().getName()
reso.ip.ARPProtocol.this.adapter.index == arg3.index
reso.ip.ARPProtocol.this.adapter.type == arg3.type
reso.ip.ARPProtocol.this.adapter.node == arg3.node
reso.ip.ARPProtocol.this.adapter.node.getClass().getName() == arg3.node.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
arg3.link.iface1.getClass().getName() == arg3.link.iface2.getClass().getName()
arg3.node.ifacesByType.getClass().getName() == arg3.node.ifacesByName.getClass().getName()
reso.ip.ARPProtocol.this.iface.type.toString == "eth"
reso.common.AbstractInterface.$assertionsDisabled == false
reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName() == java.util.TreeSet.class
reso.ip.ARPProtocol.this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ip.ARPProtocol.this.adapter.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() == java.util.ArrayList.class
reso.ip.ARPProtocol.this.adapter.type.toString == "eth"
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl one of { 254, 255 }
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
arg3.link.SPEED_OF_LIGHT == 200000000
arg3.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
arg3.link.length == 5000000.0
arg3.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg3.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg3.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg3.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg3.index one of { 0, 1 }
arg3.type has only one value
arg3.type.toString == "eth"
arg3.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg3.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg3.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg3.node.name.toString one of { "H1", "H2", "R1" }
arg3.node.network has only one value
size(reso.ip.ARPProtocol.this.adapter.listeners[]) == 1
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
size(arg2.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg3.addr.addr[]) == 6
size(arg3.listeners.listeners[]) == 1
size(arg3.attrListeners.listeners[]) == 1
size(arg3.node.ifaces[]) one of { 1, 2 }
arg3.link.iface1.getClass().getName() in arg3.node.ifaces[].getClass().getName()
===========================================================================
reso.ip.ARPProtocol$TaskSendFrame.TaskSendFrame(reso.ip.ARPProtocol, reso.ip.Datagram, reso.ip.IPAddress, reso.ethernet.EthernetInterface):::EXIT
this.datagram == orig(arg1)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.ARPProtocol.this.tableARP.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
this.datagram.src == arg1.src
this.datagram.src.addr == arg1.src.addr
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
this.datagram.dst == arg1.dst
this.datagram.dst.addr == arg1.dst.addr
this.datagram.ttl == arg1.ttl
this.datagram.payload == arg1.payload
this.datagram.payload.getClass().getName() == arg1.payload.getClass().getName()
this.datagram.protocol == arg1.protocol
this.gateway == orig(arg2)
this.gateway.addr == arg2.addr
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.iface == orig(reso.ip.ARPProtocol.this.iface)
this.iface == orig(reso.ip.ARPProtocol.this.adapter.iface)
this.iface == orig(arg3)
this.iface.addr == arg3.addr
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == arg3.addr.addr
this.iface.link == arg3.link
this.iface.link.SPEED_OF_LIGHT == arg3.link.SPEED_OF_LIGHT
this.iface.link.iface1 == arg3.link.iface1
this.iface.link.iface1.getClass().getName() == arg3.link.iface1.getClass().getName()
this.iface.link.iface2 == arg3.link.iface2
this.iface.link.iface2.getClass().getName() == arg3.link.iface1.getClass().getName()
this.iface.link.length == arg3.link.length
this.iface.listeners == arg3.listeners
this.iface.listeners.listeners == arg3.listeners.listeners
this.iface.listeners.listeners.getClass().getName() == arg3.listeners.listeners.getClass().getName()
this.iface.attrs == arg3.attrs
this.iface.attrListeners == arg3.attrListeners
this.iface.attrListeners.listeners == arg3.attrListeners.listeners
this.iface.attrListeners.listeners.getClass().getName() == arg3.listeners.listeners.getClass().getName()
this.iface.index == arg3.index
this.iface.type == arg3.type
this.iface.node == arg3.node
this.iface.node.getClass().getName() == arg3.node.getClass().getName()
this.iface.node.ifaces == arg3.node.ifaces
this.iface.node.ifaces.getClass().getName() == arg3.listeners.listeners.getClass().getName()
this.iface.node.ifacesByType == arg3.node.ifacesByType
this.iface.node.ifacesByType.getClass().getName() == arg3.node.ifacesByType.getClass().getName()
this.iface.node.ifacesByName == arg3.node.ifacesByName
this.iface.node.ifacesByName.getClass().getName() == arg3.node.ifacesByType.getClass().getName()
this.iface.node.name == arg3.node.name
this.iface.node.network == arg3.node.network
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
reso.ip.ARPProtocol.this == orig(reso.ip.ARPProtocol.this)
reso.ip.ARPProtocol.this.tableARP == orig(reso.ip.ARPProtocol.this.tableARP)
reso.ip.ARPProtocol.this.pendingARPTasks == orig(reso.ip.ARPProtocol.this.pendingARPTasks)
reso.ip.ARPProtocol.this.iface.addr == arg3.addr
reso.ip.ARPProtocol.this.iface.link == arg3.link
reso.ip.ARPProtocol.this.iface.listeners == arg3.listeners
reso.ip.ARPProtocol.this.iface.attrs == arg3.attrs
reso.ip.ARPProtocol.this.iface.attrListeners == arg3.attrListeners
reso.ip.ARPProtocol.this.iface.index == arg3.index
reso.ip.ARPProtocol.this.iface.type == arg3.type
reso.ip.ARPProtocol.this.iface.type.toString == orig(reso.ip.ARPProtocol.this.iface.type.toString)
reso.ip.ARPProtocol.this.iface.node == arg3.node
reso.ip.ARPProtocol.this.iface.node.getClass().getName() == arg3.node.getClass().getName()
reso.ip.ARPProtocol.this.adapter == orig(reso.ip.ARPProtocol.this.adapter)
reso.ip.ARPProtocol.this.adapter.ip == orig(reso.ip.ARPProtocol.this.adapter.ip)
reso.ip.ARPProtocol.this.adapter.arp == orig(reso.ip.ARPProtocol.this)
reso.ip.ARPProtocol.this.adapter.addresses == orig(reso.ip.ARPProtocol.this.adapter.addresses)
reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName())
reso.ip.ARPProtocol.this.adapter.listeners == orig(reso.ip.ARPProtocol.this.adapter.listeners)
reso.ip.ARPProtocol.this.adapter.listeners[] == orig(reso.ip.ARPProtocol.this.adapter.listeners[])
reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName() == arg3.listeners.listeners.getClass().getName()
reso.ip.ARPProtocol.this.adapter.attrs == orig(reso.ip.ARPProtocol.this.adapter.attrs)
reso.ip.ARPProtocol.this.adapter.attrListeners == orig(reso.ip.ARPProtocol.this.adapter.attrListeners)
reso.ip.ARPProtocol.this.adapter.index == arg3.index
reso.ip.ARPProtocol.this.adapter.type == arg3.type
reso.ip.ARPProtocol.this.adapter.type.toString == orig(reso.ip.ARPProtocol.this.adapter.type.toString)
reso.ip.ARPProtocol.this.adapter.node == arg3.node
reso.ip.ARPProtocol.this.adapter.node.getClass().getName() == arg3.node.getClass().getName()
arg1.src == orig(arg1.src)
arg1.src.addr == orig(arg1.src.addr)
arg1.src.addr[] == orig(arg1.src.addr[])
arg1.dst == orig(arg1.dst)
arg1.dst.addr == orig(arg1.dst.addr)
arg1.dst.addr[] == orig(arg1.dst.addr[])
arg1.ttl == orig(arg1.ttl)
arg1.payload == orig(arg1.payload)
arg1.payload.getClass().getName() == orig(arg1.payload.getClass().getName())
arg1.protocol == orig(arg1.protocol)
arg2.addr == orig(arg2.addr)
arg2.addr[] == orig(arg2.addr[])
arg3.addr == orig(reso.ip.ARPProtocol.this.iface.addr)
arg3.addr == orig(arg3.addr)
arg3.addr.addr == orig(arg3.addr.addr)
arg3.addr.addr[] == orig(arg3.addr.addr[])
arg3.link == orig(reso.ip.ARPProtocol.this.iface.link)
arg3.link == orig(arg3.link)
arg3.link.SPEED_OF_LIGHT == orig(arg3.link.SPEED_OF_LIGHT)
arg3.link.iface1 == orig(arg3.link.iface1)
arg3.link.iface1.getClass().getName() == arg3.link.iface2.getClass().getName()
arg3.link.iface1.getClass().getName() == orig(arg3.link.iface1.getClass().getName())
arg3.link.iface1.getClass().getName() == orig(arg3.link.iface2.getClass().getName())
arg3.link.iface2 == orig(arg3.link.iface2)
arg3.link.length == orig(arg3.link.length)
arg3.listeners == orig(reso.ip.ARPProtocol.this.iface.listeners)
arg3.listeners == orig(arg3.listeners)
arg3.listeners.listeners == orig(arg3.listeners.listeners)
arg3.listeners.listeners[] == orig(arg3.listeners.listeners[])
arg3.listeners.listeners.getClass().getName() == arg3.attrListeners.listeners.getClass().getName()
arg3.listeners.listeners.getClass().getName() == arg3.node.ifaces.getClass().getName()
arg3.listeners.listeners.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName())
arg3.listeners.listeners.getClass().getName() == orig(arg3.listeners.listeners.getClass().getName())
arg3.listeners.listeners.getClass().getName() == orig(arg3.attrListeners.listeners.getClass().getName())
arg3.listeners.listeners.getClass().getName() == orig(arg3.node.ifaces.getClass().getName())
arg3.attrs == orig(reso.ip.ARPProtocol.this.iface.attrs)
arg3.attrs == orig(arg3.attrs)
arg3.attrListeners == orig(reso.ip.ARPProtocol.this.iface.attrListeners)
arg3.attrListeners == orig(arg3.attrListeners)
arg3.attrListeners.listeners == orig(arg3.attrListeners.listeners)
arg3.attrListeners.listeners[] == orig(arg3.attrListeners.listeners[])
arg3.index == orig(reso.ip.ARPProtocol.this.iface.index)
arg3.index == orig(reso.ip.ARPProtocol.this.adapter.index)
arg3.index == orig(arg3.index)
arg3.type == orig(reso.ip.ARPProtocol.this.iface.type)
arg3.type == orig(reso.ip.ARPProtocol.this.adapter.type)
arg3.type == orig(arg3.type)
arg3.type.toString == orig(arg3.type.toString)
arg3.node == orig(reso.ip.ARPProtocol.this.iface.node)
arg3.node == orig(reso.ip.ARPProtocol.this.adapter.node)
arg3.node == orig(arg3.node)
arg3.node.getClass().getName() == orig(reso.ip.ARPProtocol.this.iface.node.getClass().getName())
arg3.node.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.node.getClass().getName())
arg3.node.getClass().getName() == orig(arg3.node.getClass().getName())
arg3.node.ifaces == orig(arg3.node.ifaces)
arg3.node.ifaces[] == orig(arg3.node.ifaces[])
arg3.node.ifacesByType == orig(arg3.node.ifacesByType)
arg3.node.ifacesByType.getClass().getName() == arg3.node.ifacesByName.getClass().getName()
arg3.node.ifacesByType.getClass().getName() == orig(arg3.node.ifacesByType.getClass().getName())
arg3.node.ifacesByType.getClass().getName() == orig(arg3.node.ifacesByName.getClass().getName())
arg3.node.ifacesByName == orig(arg3.node.ifacesByName)
arg3.node.name == orig(arg3.node.name)
arg3.node.name.toString == orig(arg3.node.name.toString)
arg3.node.network == orig(arg3.node.network)
this.iface.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl one of { 254, 255 }
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
arg3.link.SPEED_OF_LIGHT == 200000000
arg3.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
arg3.link.length == 5000000.0
arg3.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg3.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg3.listeners.listeners.getClass().getName() == java.util.ArrayList.class
arg3.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg3.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg3.index one of { 0, 1 }
arg3.type has only one value
arg3.type.toString == "eth"
arg3.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg3.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg3.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg3.node.name.toString one of { "H1", "H2", "R1" }
arg3.node.network has only one value
size(this.iface.listeners.listeners[]) == 1
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
size(arg2.addr[]) == 4
size(arg3.addr.addr[]) == 6
size(arg3.listeners.listeners[]) == 1
size(arg3.attrListeners.listeners[]) == 1
size(arg3.node.ifaces[]) one of { 1, 2 }
arg3.link.iface1.getClass().getName() in this.iface.node.ifaces[].getClass().getName()
arg3.link.iface1.getClass().getName() in arg3.node.ifaces[].getClass().getName()
===========================================================================
reso.ip.ARPProtocol$TaskSendFrame.run():::ENTER
===========================================================================
reso.ip.ARPProtocol$TaskSendFrame.run():::EXIT
this.datagram == orig(this.datagram)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.ARPProtocol.this.tableARP.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.ARPProtocol.this.pendingARPTasks.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
this.datagram.src == orig(this.datagram.src)
this.datagram.src.addr == orig(this.datagram.src.addr)
this.datagram.src.addr[] == orig(this.datagram.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
this.datagram.dst == orig(this.datagram.dst)
this.datagram.dst.addr == orig(this.datagram.dst.addr)
this.datagram.dst.addr[] == orig(this.datagram.dst.addr[])
this.datagram.ttl == orig(this.datagram.ttl)
this.datagram.payload == orig(this.datagram.payload)
this.datagram.payload.getClass().getName() == orig(this.datagram.payload.getClass().getName())
this.datagram.protocol == orig(this.datagram.protocol)
this.gateway == orig(this.gateway)
this.gateway.addr == orig(this.gateway.addr)
this.gateway.addr[] == orig(this.gateway.addr[])
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.iface == orig(this.iface)
this.iface == orig(reso.ip.ARPProtocol.this.iface)
this.iface == orig(reso.ip.ARPProtocol.this.adapter.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(reso.ip.ARPProtocol.this.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(reso.ip.ARPProtocol.this.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface1.getClass().getName())
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface2.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(reso.ip.ARPProtocol.this.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.listeners.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.iface.listeners.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.iface.listeners.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.iface.listeners.listeners.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.listeners.getClass().getName())
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(reso.ip.ARPProtocol.this.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(reso.ip.ARPProtocol.this.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.index == orig(this.iface.index)
this.iface.index == orig(reso.ip.ARPProtocol.this.iface.index)
this.iface.index == orig(reso.ip.ARPProtocol.this.adapter.index)
this.iface.type == orig(this.iface.type)
this.iface.type == orig(reso.ip.ARPProtocol.this.iface.type)
this.iface.type == orig(reso.ip.ARPProtocol.this.adapter.type)
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node == orig(this.iface.node)
this.iface.node == orig(reso.ip.ARPProtocol.this.iface.node)
this.iface.node == orig(reso.ip.ARPProtocol.this.adapter.node)
this.iface.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(reso.ip.ARPProtocol.this.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.node.getClass().getName())
this.iface.node.ifaces == orig(this.iface.node.ifaces)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.iface.node.name == orig(this.iface.node.name)
this.iface.node.name.toString == orig(this.iface.node.name.toString)
this.iface.node.network == orig(this.iface.node.network)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
reso.ip.ARPProtocol.this == orig(reso.ip.ARPProtocol.this)
reso.ip.ARPProtocol.this.tableARP == orig(reso.ip.ARPProtocol.this.tableARP)
reso.ip.ARPProtocol.this.pendingARPTasks == orig(reso.ip.ARPProtocol.this.pendingARPTasks)
reso.ip.ARPProtocol.this.iface.type.toString == orig(reso.ip.ARPProtocol.this.iface.type.toString)
reso.ip.ARPProtocol.this.adapter == orig(reso.ip.ARPProtocol.this.adapter)
reso.ip.ARPProtocol.this.adapter.ip == orig(reso.ip.ARPProtocol.this.adapter.ip)
reso.ip.ARPProtocol.this.adapter.arp == orig(reso.ip.ARPProtocol.this.adapter.arp)
reso.ip.ARPProtocol.this.adapter.addresses == orig(reso.ip.ARPProtocol.this.adapter.addresses)
reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName() == orig(reso.ip.ARPProtocol.this.adapter.addresses.getClass().getName())
reso.ip.ARPProtocol.this.adapter.listeners == orig(reso.ip.ARPProtocol.this.adapter.listeners)
reso.ip.ARPProtocol.this.adapter.listeners[] == orig(reso.ip.ARPProtocol.this.adapter.listeners[])
reso.ip.ARPProtocol.this.adapter.attrs == orig(reso.ip.ARPProtocol.this.adapter.attrs)
reso.ip.ARPProtocol.this.adapter.attrListeners == orig(reso.ip.ARPProtocol.this.adapter.attrListeners)
reso.ip.ARPProtocol.this.adapter.type.toString == orig(reso.ip.ARPProtocol.this.adapter.type.toString)
===========================================================================
reso.ip.ARPProtocol:::OBJECT
this.tableARP == this.adapter.arp.tableARP
this.tableARP.getClass().getName() == this.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == this.adapter.ip.ifacesByName.getClass().getName()
this.tableARP.getClass().getName() == this.adapter.arp.tableARP.getClass().getName()
this.pendingARPTasks == this.adapter.arp.pendingARPTasks
this.iface == this.adapter.iface
this.iface == this.adapter.arp.iface
this.iface.addr == this.adapter.iface.addr
this.iface.link == this.adapter.iface.link
this.iface.link.iface1.getClass().getName() == this.iface.link.iface2.getClass().getName()
this.iface.listeners == this.adapter.iface.listeners
this.iface.listeners.listeners.getClass().getName() == this.adapter.listeners.getClass().getName()
this.iface.attrs == this.adapter.iface.attrs
this.iface.attrListeners == this.adapter.iface.attrListeners
this.iface.attrListeners.listeners.getClass().getName() == this.adapter.listeners.getClass().getName()
this.iface.index == this.adapter.iface.index
this.iface.index == this.adapter.index
this.iface.type == this.adapter.iface.type
this.iface.type == this.adapter.type
this.iface.node == this.adapter.iface.node
this.iface.node == this.adapter.node
this.iface.node.getClass().getName() == this.adapter.iface.node.getClass().getName()
this.iface.node.getClass().getName() == this.adapter.node.getClass().getName()
this.iface.node.ifaces == this.adapter.node.ifaces
this.iface.node.ifaces.getClass().getName() == this.adapter.listeners.getClass().getName()
this.iface.node.ifacesByType == this.adapter.node.ifacesByType
this.iface.node.ifacesByType.getClass().getName() == this.iface.node.ifacesByName.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() == this.adapter.node.ifacesByType.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() == this.adapter.node.ifacesByName.getClass().getName()
this.iface.node.ifacesByName == this.adapter.node.ifacesByName
this.iface.node.name == this.adapter.node.name
this.iface.node.network == this.adapter.node.network
this.adapter == this.adapter.arp.adapter
this.adapter.ip.rawListeners.getClass().getName() == this.adapter.listeners.getClass().getName()
this.adapter.ip.ifaces.getClass().getName() == this.adapter.listeners.getClass().getName()
this.adapter.arp.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.adapter.listeners.getClass().getName() == this.adapter.attrListeners.listeners.getClass().getName()
this.adapter.listeners.getClass().getName() == this.adapter.node.ifaces.getClass().getName()
this.tableARP != null
this.tableARP.getClass().getName() == java.util.HashMap.class
this.pendingARPTasks != null
this.iface != null
this.iface.addr != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
this.iface.addr.addr != null
this.iface.link.SPEED_OF_LIGHT == 200000000
this.iface.link.iface1 != null
this.iface.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.iface.link.iface2 != null
this.iface.link.length == 5000000.0
this.iface.listeners != null
this.iface.listeners.listeners != null
this.iface.listeners.listeners[] elements != null
this.iface.attrs != null
this.iface.attrListeners != null
this.iface.attrListeners.listeners != null
this.iface.attrListeners.listeners[] elements != null
this.iface.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.iface.attrListeners.listeners[].getClass().getName() one of { [], [reso.ip.IPEthernetAdapter] }
this.iface.index one of { 0, 1 }
this.iface.type has only one value
this.iface.type != null
this.iface.type.toString == "eth"
this.iface.node != null
this.iface.node.ifaces != null
this.iface.node.ifaces[] elements != null
this.iface.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.iface.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.iface.node.ifacesByType != null
this.iface.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.iface.node.ifacesByName != null
this.iface.node.name != null
this.iface.node.name.toString one of { "H1", "H2", "R1" }
reso.common.AbstractInterface.$assertionsDisabled == false
this.adapter != null
this.adapter.ip != null
this.adapter.ip.host != null
this.adapter.ip.fib != null
this.adapter.ip.rawListeners != null
this.adapter.ip.rawListeners[] == []
this.adapter.ip.rawListeners[].getClass().getName() == []
this.adapter.ip.listeners != null
this.adapter.ip.ifaces != null
this.adapter.ip.ifaces[] elements != null
this.adapter.ip.ifacesByName != null
this.adapter.iface.type.toString == "eth"
this.adapter.arp.tableARP != null
this.adapter.arp.tableARP.getClass().getName() == java.util.HashMap.class
this.adapter.arp.pendingARPTasks != null
this.adapter.arp.iface != null
this.adapter.arp.adapter != null
this.adapter.addresses != null
this.adapter.addresses.getClass().getName() == java.util.TreeSet.class
this.adapter.listeners != null
this.adapter.listeners[] elements != null
this.adapter.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
this.adapter.listeners[].getClass().getName() one of { [], [reso.ip.IPLayer] }
this.adapter.listeners.getClass().getName() == java.util.ArrayList.class
this.adapter.attrs != null
this.adapter.attrListeners != null
this.adapter.attrListeners.listeners != null
this.adapter.attrListeners.listeners[] == []
this.adapter.attrListeners.listeners[].getClass().getName() == []
this.adapter.type.toString == "eth"
this.adapter.node.ifaces[] elements != null
this.adapter.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.adapter.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.adapter.node.name.toString one of { "H1", "H2", "R1" }
size(this.iface.addr.addr[]) == 6
size(this.iface.listeners.listeners[]) one of { 0, 1, 2 }
size(this.iface.attrListeners.listeners[]) one of { 0, 1 }
size(this.iface.node.ifaces[]) one of { 1, 2 }
size(this.adapter.ip.ifaces[]) one of { 0, 1, 2 }
size(this.adapter.listeners[]) one of { 0, 1 }
size(this.adapter.node.ifaces[]) one of { 1, 2 }
this.tableARP.getClass().getName() != this.iface.link.iface1.getClass().getName()
this.tableARP.getClass().getName() != this.iface.node.getClass().getName()
this.tableARP.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.tableARP.getClass().getName() != this.adapter.addresses.getClass().getName()
this.tableARP.getClass().getName() != this.adapter.listeners.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.iface.node.getClass().getName()
this.iface.link.iface1.getClass().getName() in this.iface.node.ifaces[].getClass().getName()
this.iface.link.iface1.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.adapter.arp.tableARP.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.adapter.addresses.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.adapter.listeners.getClass().getName()
this.iface.link.iface1.getClass().getName() in this.adapter.node.ifaces[].getClass().getName()
this.iface.node.getClass().getName() != this.iface.node.ifacesByType.getClass().getName()
this.iface.node.getClass().getName() != this.adapter.arp.tableARP.getClass().getName()
this.iface.node.getClass().getName() != this.adapter.addresses.getClass().getName()
this.iface.node.getClass().getName() != this.adapter.listeners.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != this.adapter.arp.tableARP.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != this.adapter.addresses.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != this.adapter.listeners.getClass().getName()
this.adapter.arp.tableARP.getClass().getName() != this.adapter.addresses.getClass().getName()
this.adapter.arp.tableARP.getClass().getName() != this.adapter.listeners.getClass().getName()
this.adapter.addresses.getClass().getName() != this.adapter.listeners.getClass().getName()
===========================================================================
reso.ip.ARPProtocol.ARPProtocol(reso.ip.IPEthernetAdapter):::ENTER
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.iface.index == arg0.index
arg0.iface.type == arg0.type
arg0.iface.node == arg0.node
arg0.iface.node.getClass().getName() == arg0.node.getClass().getName()
arg0.listeners.getClass().getName() == arg0.attrListeners.listeners.getClass().getName()
arg0.listeners.getClass().getName() == arg0.node.ifaces.getClass().getName()
arg0.node.ifacesByType.getClass().getName() == arg0.node.ifacesByName.getClass().getName()
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.iface.link == null
arg0.iface.type.toString == "eth"
reso.common.AbstractInterface.$assertionsDisabled == false
arg0.arp == null
arg0.addresses.getClass().getName() == java.util.TreeSet.class
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.attrListeners.listeners[] == []
arg0.attrListeners.listeners[].getClass().getName() == []
arg0.index one of { 0, 1 }
arg0.type has only one value
arg0.type.toString == "eth"
arg0.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.node.name.toString one of { "H1", "H2", "R1" }
arg0.node.network == null
size(arg0.ip.ifaces[]) one of { 0, 1 }
size(arg0.node.ifaces[]) one of { 1, 2 }
===========================================================================
reso.ip.ARPProtocol.ARPProtocol(reso.ip.IPEthernetAdapter):::EXIT
this.tableARP.getClass().getName() == arg0.ip.ifacesByName.getClass().getName()
this.tableARP.getClass().getName() == orig(arg0.ip.ifacesByName.getClass().getName())
this.iface == arg0.iface
this.iface == orig(arg0.iface)
this.iface.addr == arg0.iface.addr
this.iface.addr == orig(arg0.iface.addr)
this.iface.listeners == arg0.iface.listeners
this.iface.listeners == orig(arg0.iface.listeners)
this.iface.listeners.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.iface.attrs == arg0.iface.attrs
this.iface.attrs == orig(arg0.iface.attrs)
this.iface.attrListeners == arg0.iface.attrListeners
this.iface.attrListeners == orig(arg0.iface.attrListeners)
this.iface.attrListeners.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.iface.index == arg0.index
this.iface.type == arg0.type
this.iface.node == arg0.node
this.iface.node.getClass().getName() == arg0.node.getClass().getName()
this.iface.node.ifaces == arg0.node.ifaces
this.iface.node.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.iface.node.ifacesByType == arg0.node.ifacesByType
this.iface.node.ifacesByType.getClass().getName() == arg0.node.ifacesByType.getClass().getName()
this.iface.node.ifacesByName == arg0.node.ifacesByName
this.iface.node.ifacesByName.getClass().getName() == arg0.node.ifacesByType.getClass().getName()
this.iface.node.name == arg0.node.name
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.adapter == orig(arg0)
this.adapter.ip == arg0.ip
this.adapter.ip.host == arg0.ip.host
this.adapter.ip.fib == arg0.ip.fib
this.adapter.ip.rawListeners == arg0.ip.rawListeners
this.adapter.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
this.adapter.ip.listeners == arg0.ip.listeners
this.adapter.ip.ifaces == arg0.ip.ifaces
this.adapter.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.adapter.ip.ifacesByName == arg0.ip.ifacesByName
this.adapter.ip.forwarding == arg0.ip.forwarding
this.adapter.iface.index == arg0.index
this.adapter.iface.type == arg0.type
this.adapter.iface.node == arg0.node
this.adapter.iface.node.getClass().getName() == arg0.node.getClass().getName()
this.adapter.addresses == arg0.addresses
this.adapter.addresses.getClass().getName() == arg0.addresses.getClass().getName()
this.adapter.listeners == arg0.listeners
this.adapter.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.adapter.attrs == arg0.attrs
this.adapter.attrListeners == arg0.attrListeners
this.adapter.attrListeners.listeners == arg0.attrListeners.listeners
this.adapter.attrListeners.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.adapter.index == arg0.index
this.adapter.type == arg0.type
this.adapter.node == arg0.node
this.adapter.node.getClass().getName() == arg0.node.getClass().getName()
this.adapter.node.ifaces == arg0.node.ifaces
this.adapter.node.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.adapter.node.ifacesByType == arg0.node.ifacesByType
this.adapter.node.ifacesByType.getClass().getName() == arg0.node.ifacesByType.getClass().getName()
this.adapter.node.ifacesByName == arg0.node.ifacesByName
this.adapter.node.ifacesByName.getClass().getName() == arg0.node.ifacesByType.getClass().getName()
this.adapter.node.name == arg0.node.name
arg0.ip == orig(arg0.ip)
arg0.ip.host == orig(arg0.ip.host)
arg0.ip.fib == orig(arg0.ip.fib)
arg0.ip.rawListeners == orig(arg0.ip.rawListeners)
arg0.ip.rawListeners[] == orig(arg0.ip.rawListeners[])
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.listeners == orig(arg0.ip.listeners)
arg0.ip.ifaces == orig(arg0.ip.ifaces)
arg0.ip.ifaces[] == orig(arg0.ip.ifaces[])
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifacesByName == orig(arg0.ip.ifacesByName)
arg0.ip.forwarding == orig(arg0.ip.forwarding)
arg0.iface.link == orig(arg0.iface.link)
arg0.iface.index == arg0.index
arg0.iface.type == arg0.type
arg0.iface.type.toString == orig(arg0.iface.type.toString)
arg0.iface.node == arg0.node
arg0.iface.node.getClass().getName() == arg0.node.getClass().getName()
arg0.arp == orig(arg0.arp)
arg0.addresses == orig(arg0.addresses)
arg0.addresses.getClass().getName() == orig(arg0.addresses.getClass().getName())
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == arg0.attrListeners.listeners.getClass().getName()
arg0.listeners.getClass().getName() == arg0.node.ifaces.getClass().getName()
arg0.listeners.getClass().getName() == orig(arg0.ip.rawListeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ip.ifaces.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.attrListeners.listeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.node.ifaces.getClass().getName())
arg0.attrs == orig(arg0.attrs)
arg0.attrListeners == orig(arg0.attrListeners)
arg0.attrListeners.listeners == orig(arg0.attrListeners.listeners)
arg0.attrListeners.listeners[] == orig(arg0.attrListeners.listeners[])
arg0.index == orig(arg0.iface.index)
arg0.index == orig(arg0.index)
arg0.type == orig(arg0.iface.type)
arg0.type == orig(arg0.type)
arg0.type.toString == orig(arg0.type.toString)
arg0.node == orig(arg0.iface.node)
arg0.node == orig(arg0.node)
arg0.node.getClass().getName() == orig(arg0.iface.node.getClass().getName())
arg0.node.getClass().getName() == orig(arg0.node.getClass().getName())
arg0.node.ifaces == orig(arg0.node.ifaces)
arg0.node.ifaces[] == orig(arg0.node.ifaces[])
arg0.node.ifacesByType == orig(arg0.node.ifacesByType)
arg0.node.ifacesByType.getClass().getName() == arg0.node.ifacesByName.getClass().getName()
arg0.node.ifacesByType.getClass().getName() == orig(arg0.node.ifacesByType.getClass().getName())
arg0.node.ifacesByType.getClass().getName() == orig(arg0.node.ifacesByName.getClass().getName())
arg0.node.ifacesByName == orig(arg0.node.ifacesByName)
arg0.node.name == orig(arg0.node.name)
arg0.node.name.toString == orig(arg0.node.name.toString)
arg0.node.network == orig(arg0.node.network)
this.iface.link == null
this.iface.listeners.listeners[] == []
this.iface.listeners.listeners[].getClass().getName() == []
this.iface.attrListeners.listeners[] == []
this.iface.attrListeners.listeners[].getClass().getName() == []
this.iface.node.network == null
this.adapter.arp == null
this.adapter.listeners[] == []
this.adapter.listeners[].getClass().getName() == []
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.iface.link == null
arg0.iface.type.toString == "eth"
arg0.arp == null
arg0.addresses.getClass().getName() == java.util.TreeSet.class
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.attrListeners.listeners[] == []
arg0.attrListeners.listeners[].getClass().getName() == []
arg0.index one of { 0, 1 }
arg0.type has only one value
arg0.type.toString == "eth"
arg0.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.node.name.toString one of { "H1", "H2", "R1" }
arg0.node.network == null
size(this.adapter.ip.ifaces[]) one of { 0, 1 }
size(arg0.ip.ifaces[]) one of { 0, 1 }
size(arg0.node.ifaces[]) one of { 1, 2 }
===========================================================================
reso.ip.ARPProtocol.getMapping(reso.ip.IPAddress):::ENTER
this == this.adapter.arp
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.iface.link != null
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.iface.node.network != null
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.arp != null
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
arg0 != null
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.ARPProtocol.getMapping(reso.ip.IPAddress):::EXIT
this.tableARP == orig(this.tableARP)
this.tableARP == orig(this.adapter.arp.tableARP)
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == orig(this.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.pendingARPTasks.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.ip.ifacesByName.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.pendingARPTasks.getClass().getName())
this.pendingARPTasks == orig(this.pendingARPTasks)
this.pendingARPTasks == orig(this.adapter.arp.pendingARPTasks)
this.iface == orig(this.iface)
this.iface == orig(this.adapter.iface)
this.iface == orig(this.adapter.arp.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(this.adapter.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(this.adapter.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface1.getClass().getName())
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface2.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(this.adapter.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(this.adapter.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(this.adapter.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.index == orig(this.iface.index)
this.iface.index == orig(this.adapter.iface.index)
this.iface.index == orig(this.adapter.index)
this.iface.type == orig(this.iface.type)
this.iface.type == orig(this.adapter.iface.type)
this.iface.type == orig(this.adapter.type)
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node == orig(this.iface.node)
this.iface.node == orig(this.adapter.iface.node)
this.iface.node == orig(this.adapter.node)
this.iface.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.node.getClass().getName())
this.iface.node.ifaces == orig(this.iface.node.ifaces)
this.iface.node.ifaces == orig(this.adapter.node.ifaces)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.iface.node.ifacesByType == orig(this.adapter.node.ifacesByType)
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.iface.node.ifacesByName == orig(this.adapter.node.ifacesByName)
this.iface.node.name == orig(this.iface.node.name)
this.iface.node.name == orig(this.adapter.node.name)
this.iface.node.name.toString == orig(this.iface.node.name.toString)
this.iface.node.network == orig(this.iface.node.network)
this.iface.node.network == orig(this.adapter.node.network)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.adapter == orig(this.adapter)
this.adapter == orig(this.adapter.arp.adapter)
this.adapter.ip == orig(this.adapter.ip)
this.adapter.ip.host == orig(this.adapter.ip.host)
this.adapter.ip.fib == orig(this.adapter.ip.fib)
this.adapter.ip.rawListeners == orig(this.adapter.ip.rawListeners)
this.adapter.ip.rawListeners[] == orig(this.adapter.ip.rawListeners[])
this.adapter.ip.listeners == orig(this.adapter.ip.listeners)
this.adapter.ip.ifaces == orig(this.adapter.ip.ifaces)
this.adapter.ip.ifaces[] == orig(this.adapter.ip.ifaces[])
this.adapter.ip.ifacesByName == orig(this.adapter.ip.ifacesByName)
this.adapter.ip.forwarding == orig(this.adapter.ip.forwarding)
this.adapter.iface.type.toString == orig(this.adapter.iface.type.toString)
this.adapter.arp == orig(this)
this.adapter.arp == orig(this.adapter.arp)
this.adapter.addresses == orig(this.adapter.addresses)
this.adapter.addresses.getClass().getName() == orig(this.adapter.addresses.getClass().getName())
this.adapter.listeners == orig(this.adapter.listeners)
this.adapter.listeners[] == orig(this.adapter.listeners[])
this.adapter.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.rawListeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.node.ifaces.getClass().getName())
this.adapter.attrs == orig(this.adapter.attrs)
this.adapter.attrListeners == orig(this.adapter.attrListeners)
this.adapter.attrListeners.listeners == orig(this.adapter.attrListeners.listeners)
this.adapter.attrListeners.listeners[] == orig(this.adapter.attrListeners.listeners[])
this.adapter.type.toString == orig(this.adapter.type.toString)
this.adapter.node.ifaces[] == orig(this.adapter.node.ifaces[])
this.adapter.node.name.toString == orig(this.adapter.node.name.toString)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.iface.link != null
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.iface.node.network != null
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.arp != null
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr != null
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(return.addr[]) == 6
===========================================================================
reso.ip.ARPProtocol.handleARPMessage(reso.ethernet.EthernetFrame):::ENTER
this == this.adapter.arp
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
arg0.protocol == 0
arg0.payload.getClass().getName() == reso.ip.ARPMessage.class
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.tableARP.getClass().getName() != arg0.payload.getClass().getName()
this.iface.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.iface.node.getClass().getName() != arg0.payload.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.adapter.addresses.getClass().getName() != arg0.payload.getClass().getName()
this.adapter.listeners.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ip.ARPProtocol.handleARPMessage(reso.ethernet.EthernetFrame):::EXIT91
===========================================================================
reso.ip.ARPProtocol.handleARPMessage(reso.ethernet.EthernetFrame):::EXIT
this.tableARP == orig(this.tableARP)
this.tableARP == orig(this.adapter.arp.tableARP)
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
this.tableARP.getClass().getName() == orig(this.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.pendingARPTasks.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.ip.ifacesByName.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.pendingARPTasks.getClass().getName())
this.tableARP.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName())
this.tableARP.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName())
this.pendingARPTasks == orig(this.pendingARPTasks)
this.pendingARPTasks == orig(this.adapter.arp.pendingARPTasks)
this.iface == orig(this.iface)
this.iface == orig(this.adapter.iface)
this.iface == orig(this.adapter.arp.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(this.adapter.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(this.adapter.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface1.getClass().getName())
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface2.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(this.adapter.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(this.adapter.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(this.adapter.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.index == orig(this.iface.index)
this.iface.index == orig(this.adapter.iface.index)
this.iface.index == orig(this.adapter.index)
this.iface.type == orig(this.iface.type)
this.iface.type == orig(this.adapter.iface.type)
this.iface.type == orig(this.adapter.type)
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node == orig(this.iface.node)
this.iface.node == orig(this.adapter.iface.node)
this.iface.node == orig(this.adapter.node)
this.iface.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.node.getClass().getName())
this.iface.node.ifaces == orig(this.iface.node.ifaces)
this.iface.node.ifaces == orig(this.adapter.node.ifaces)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.iface.node.ifacesByType == orig(this.adapter.node.ifacesByType)
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.iface.node.ifacesByName == orig(this.adapter.node.ifacesByName)
this.iface.node.name == orig(this.iface.node.name)
this.iface.node.name == orig(this.adapter.node.name)
this.iface.node.name.toString == orig(this.iface.node.name.toString)
this.iface.node.network == orig(this.iface.node.network)
this.iface.node.network == orig(this.adapter.node.network)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.adapter == orig(this.adapter)
this.adapter == orig(this.adapter.arp.adapter)
this.adapter.ip == orig(this.adapter.ip)
this.adapter.ip.host == orig(this.adapter.ip.host)
this.adapter.ip.fib == orig(this.adapter.ip.fib)
this.adapter.ip.rawListeners == orig(this.adapter.ip.rawListeners)
this.adapter.ip.rawListeners[] == orig(this.adapter.ip.rawListeners[])
this.adapter.ip.listeners == orig(this.adapter.ip.listeners)
this.adapter.ip.ifaces == orig(this.adapter.ip.ifaces)
this.adapter.ip.ifaces[] == orig(this.adapter.ip.ifaces[])
this.adapter.ip.ifacesByName == orig(this.adapter.ip.ifacesByName)
this.adapter.ip.forwarding == orig(this.adapter.ip.forwarding)
this.adapter.iface.type.toString == orig(this.adapter.iface.type.toString)
this.adapter.arp == orig(this)
this.adapter.arp == orig(this.adapter.arp)
this.adapter.addresses == orig(this.adapter.addresses)
this.adapter.addresses.getClass().getName() == orig(this.adapter.addresses.getClass().getName())
this.adapter.listeners == orig(this.adapter.listeners)
this.adapter.listeners[] == orig(this.adapter.listeners[])
this.adapter.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.rawListeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.node.ifaces.getClass().getName())
this.adapter.attrs == orig(this.adapter.attrs)
this.adapter.attrListeners == orig(this.adapter.attrListeners)
this.adapter.attrListeners.listeners == orig(this.adapter.attrListeners.listeners)
this.adapter.attrListeners.listeners[] == orig(this.adapter.attrListeners.listeners[])
this.adapter.type.toString == orig(this.adapter.type.toString)
this.adapter.node.ifaces[] == orig(this.adapter.node.ifaces[])
this.adapter.node.name.toString == orig(this.adapter.node.name.toString)
reso.ethernet.EthernetFrame.protocols == orig(reso.ethernet.EthernetFrame.protocols)
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == orig(reso.ethernet.EthernetFrame.protocols.nextProtocolNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByName == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName)
reso.ethernet.EthernetFrame.protocols.protocolsByNumber == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber)
arg0.src == orig(arg0.src)
arg0.src.addr == orig(arg0.src.addr)
arg0.src.addr[] == orig(arg0.src.addr[])
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
arg0.protocol == orig(arg0.protocol)
arg0.payload == orig(arg0.payload)
arg0.payload.getClass().getName() == orig(arg0.payload.getClass().getName())
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
arg0.protocol == 0
arg0.payload.getClass().getName() == reso.ip.ARPMessage.class
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.src.addr[]) == 6
size(arg0.dst.addr[]) == 6
this.tableARP.getClass().getName() != arg0.payload.getClass().getName()
this.iface.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.iface.node.getClass().getName() != arg0.payload.getClass().getName()
this.iface.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.adapter.addresses.getClass().getName() != arg0.payload.getClass().getName()
this.adapter.listeners.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ip.ARPProtocol.performARPRequest(reso.ip.IPAddress, reso.ip.Datagram):::ENTER
this == this.adapter.arp
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.iface.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl one of { 254, 255 }
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(this.iface.listeners.listeners[]) == 1
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
===========================================================================
reso.ip.ARPProtocol.performARPRequest(reso.ip.IPAddress, reso.ip.Datagram):::EXIT
this.tableARP == orig(this.tableARP)
this.tableARP == orig(this.adapter.arp.tableARP)
this.tableARP.getClass().getName() == this.adapter.arp.pendingARPTasks.getClass().getName()
this.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.tableARP.getClass().getName() == orig(this.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.pendingARPTasks.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.ip.ifacesByName.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.tableARP.getClass().getName())
this.tableARP.getClass().getName() == orig(this.adapter.arp.pendingARPTasks.getClass().getName())
this.tableARP.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
this.tableARP.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
this.pendingARPTasks == orig(this.pendingARPTasks)
this.pendingARPTasks == orig(this.adapter.arp.pendingARPTasks)
this.iface == orig(this.iface)
this.iface == orig(this.adapter.iface)
this.iface == orig(this.adapter.arp.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(this.adapter.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(this.adapter.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface1.getClass().getName())
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface2.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(this.adapter.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(this.adapter.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(this.adapter.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.index == orig(this.iface.index)
this.iface.index == orig(this.adapter.iface.index)
this.iface.index == orig(this.adapter.index)
this.iface.type == orig(this.iface.type)
this.iface.type == orig(this.adapter.iface.type)
this.iface.type == orig(this.adapter.type)
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node == orig(this.iface.node)
this.iface.node == orig(this.adapter.iface.node)
this.iface.node == orig(this.adapter.node)
this.iface.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.iface.node.getClass().getName())
this.iface.node.getClass().getName() == orig(this.adapter.node.getClass().getName())
this.iface.node.ifaces == orig(this.iface.node.ifaces)
this.iface.node.ifaces == orig(this.adapter.node.ifaces)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.iface.node.ifacesByType == orig(this.adapter.node.ifacesByType)
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByType.getClass().getName())
this.iface.node.ifacesByType.getClass().getName() == orig(this.adapter.node.ifacesByName.getClass().getName())
this.iface.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.iface.node.ifacesByName == orig(this.adapter.node.ifacesByName)
this.iface.node.name == orig(this.iface.node.name)
this.iface.node.name == orig(this.adapter.node.name)
this.iface.node.name.toString == orig(this.iface.node.name.toString)
this.iface.node.network == orig(this.iface.node.network)
this.iface.node.network == orig(this.adapter.node.network)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.adapter == orig(this.adapter)
this.adapter == orig(this.adapter.arp.adapter)
this.adapter.ip == orig(this.adapter.ip)
this.adapter.ip.host == orig(this.adapter.ip.host)
this.adapter.ip.fib == orig(this.adapter.ip.fib)
this.adapter.ip.rawListeners == orig(this.adapter.ip.rawListeners)
this.adapter.ip.rawListeners[] == orig(this.adapter.ip.rawListeners[])
this.adapter.ip.listeners == orig(this.adapter.ip.listeners)
this.adapter.ip.ifaces == orig(this.adapter.ip.ifaces)
this.adapter.ip.ifaces[] == orig(this.adapter.ip.ifaces[])
this.adapter.ip.ifacesByName == orig(this.adapter.ip.ifacesByName)
this.adapter.ip.forwarding == orig(this.adapter.ip.forwarding)
this.adapter.iface.type.toString == orig(this.adapter.iface.type.toString)
this.adapter.arp == orig(this)
this.adapter.arp == orig(this.adapter.arp)
this.adapter.addresses == orig(this.adapter.addresses)
this.adapter.addresses.getClass().getName() == orig(this.adapter.addresses.getClass().getName())
this.adapter.listeners == orig(this.adapter.listeners)
this.adapter.listeners[] == orig(this.adapter.listeners[])
this.adapter.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.rawListeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.ip.ifaces.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.attrListeners.listeners.getClass().getName())
this.adapter.listeners.getClass().getName() == orig(this.adapter.node.ifaces.getClass().getName())
this.adapter.attrs == orig(this.adapter.attrs)
this.adapter.attrListeners == orig(this.adapter.attrListeners)
this.adapter.attrListeners.listeners == orig(this.adapter.attrListeners.listeners)
this.adapter.attrListeners.listeners[] == orig(this.adapter.attrListeners.listeners[])
this.adapter.type.toString == orig(this.adapter.type.toString)
this.adapter.node.ifaces[] == orig(this.adapter.node.ifaces[])
this.adapter.node.name.toString == orig(this.adapter.node.name.toString)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg1.src == orig(arg1.src)
arg1.src.addr == orig(arg1.src.addr)
arg1.src.addr[] == orig(arg1.src.addr[])
arg1.dst == orig(arg1.dst)
arg1.dst.addr == orig(arg1.dst.addr)
arg1.dst.addr[] == orig(arg1.dst.addr[])
arg1.ttl == orig(arg1.ttl)
arg1.payload == orig(arg1.payload)
arg1.payload.getClass().getName() == orig(arg1.payload.getClass().getName())
arg1.protocol == orig(arg1.protocol)
this.iface.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.node.network has only one value
this.adapter.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl one of { 254, 255 }
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(this.iface.listeners.listeners[]) == 1
size(this.iface.attrListeners.listeners[]) == 1
size(this.adapter.ip.ifaces[]) == 2
size(this.adapter.listeners[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter:::CLASS
reso.common.AbstractInterface.$assertionsDisabled == false
===========================================================================
reso.ip.AbstractIPInterfaceAdapter:::OBJECT
this.ip != null
this.ip.host != null
this.ip.host.listeners != null
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.listeners.getClass().getName() == java.util.ArrayList.class
this.ip.host.apps != null
this.ip.host.apps[] elements != null
this.ip.host.apps.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifaces != null
this.ip.host.ifaces[] elements != null
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifacesByType != null
this.ip.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ip.host.ifacesByName != null
this.ip.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.ip.host.name != null
this.ip.host.name.toString one of { "H1", "H2", "R1" }
this.ip.fib != null
this.ip.fib.routes != null
this.ip.fib.routes.getClass().getName() == java.util.HashMap.class
this.ip.rawListeners != null
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.listeners != null
this.ip.ifaces != null
this.ip.ifaces[] elements != null
this.ip.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.ifacesByName != null
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.addresses != null
this.addresses.getClass().getName() == java.util.TreeSet.class
this.listeners != null
this.listeners[] elements != null
this.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
this.listeners[].getClass().getName() one of { [], [reso.ip.IPLayer] }
this.listeners.getClass().getName() == java.util.ArrayList.class
this.attrs != null
this.attrListeners != null
this.attrListeners.listeners != null
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.attrListeners.listeners.getClass().getName() == java.util.ArrayList.class
this.index one of { -1, 0, 1 }
this.type != null
this.type.toString one of { "eth", "lo" }
this.node != null
this.node.ifaces != null
this.node.ifaces[] elements != null
this.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.node.ifaces.getClass().getName() == java.util.ArrayList.class
this.node.ifacesByType != null
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName != null
this.node.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.node.name != null
this.node.name.toString one of { "H1", "H2", "R1" }
this.node.network.scheduler has only one value
this.node.network.scheduler != null
this.node.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.node.network.nodes has only one value
this.node.network.nodes != null
this.node.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ip.host.apps[]) one of { 1, 2, 3 }
size(this.ip.host.ifaces[]) one of { 0, 1, 2 }
size(this.ip.ifaces[]) one of { 0, 1, 2 }
size(this.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 0, 1, 2 }
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.AbstractIPInterfaceAdapter(reso.ip.IPLayer, java.lang.String):::ENTER
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.listeners.getClass().getName() == java.util.ArrayList.class
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.apps.getClass().getName() == java.util.ArrayList.class
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.host.name.toString one of { "H1", "H2", "R1" }
arg0.host.network == null
arg0.fib.routes.getClass().getName() == java.util.HashMap.class
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
arg1.toString one of { "eth", "lo" }
size(arg0.host.apps[]) == 1
size(arg0.host.ifaces[]) one of { 0, 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.AbstractIPInterfaceAdapter(reso.ip.IPLayer, java.lang.String):::EXIT
arg0.host == orig(arg0.host)
arg0.host.listeners == orig(arg0.host.listeners)
arg0.host.listeners[] == orig(arg0.host.listeners[])
arg0.host.listeners.getClass().getName() == orig(arg0.host.listeners.getClass().getName())
arg0.host.apps == orig(arg0.host.apps)
arg0.host.apps[] == orig(arg0.host.apps[])
arg0.host.apps.getClass().getName() == orig(arg0.host.apps.getClass().getName())
arg0.host.ifaces == orig(arg0.host.ifaces)
arg0.host.ifaces[] == orig(arg0.host.ifaces[])
arg0.host.ifaces.getClass().getName() == orig(arg0.host.ifaces.getClass().getName())
arg0.host.ifacesByType == orig(arg0.host.ifacesByType)
arg0.host.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByType.getClass().getName())
arg0.host.ifacesByName == orig(arg0.host.ifacesByName)
arg0.host.ifacesByName.getClass().getName() == orig(arg0.host.ifacesByName.getClass().getName())
arg0.host.name == orig(arg0.host.name)
arg0.host.name.toString == orig(arg0.host.name.toString)
arg0.host.network == orig(arg0.host.network)
arg0.fib == orig(arg0.fib)
arg0.fib.routes == orig(arg0.fib.routes)
arg0.fib.routes.getClass().getName() == orig(arg0.fib.routes.getClass().getName())
arg0.rawListeners == orig(arg0.rawListeners)
arg0.rawListeners[] == orig(arg0.rawListeners[])
arg0.rawListeners.getClass().getName() == orig(arg0.rawListeners.getClass().getName())
arg0.listeners == orig(arg0.listeners)
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.forwarding == orig(arg0.forwarding)
arg1.toString == orig(arg1.toString)
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.index == -1
this.node.network == null
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.listeners.getClass().getName() == java.util.ArrayList.class
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.apps.getClass().getName() == java.util.ArrayList.class
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.host.name.toString one of { "H1", "H2", "R1" }
arg0.host.network == null
arg0.fib.routes.getClass().getName() == java.util.HashMap.class
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
arg1.toString one of { "eth", "lo" }
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 0, 1 }
size(arg0.host.apps[]) == 1
size(arg0.host.ifaces[]) one of { 0, 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.addAddress(reso.ip.IPAddress):::ENTER
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.index one of { 0, 1 }
this.node.network == null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 0, 1 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.addAddress(reso.ip.IPAddress):::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.ifacesByName.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.index one of { 0, 1 }
this.node.network == null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 0, 1 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.addListener(reso.ip.IPInterfaceListener):::ENTER
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.index one of { 0, 1 }
this.node.network == null
arg0.getClass().getName() == reso.ip.IPLayer.class
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 1, 2 }
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.addListener(reso.ip.IPInterfaceListener):::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.ifacesByName.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.index one of { 0, 1 }
this.node.network == null
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 1, 2 }
size(this.listeners[]) == 1
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.getAddress():::ENTER
this.getClass().getName() == reso.ip.IPEthernetAdapter.class
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.name.toString one of { "H1", "H2" }
this.ip.host.network has only one value
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.ip.forwarding == false
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.index == 0
this.type has only one value
this.type.toString == "eth"
this.node.getClass().getName() == reso.ip.IPHost.class
this.node.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.node.name.toString one of { "H1", "H2" }
this.node.network has only one value
size(this.ip.host.apps[]) one of { 2, 3 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.listeners[]) == 1
size(this.node.ifaces[]) == 1
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.getAddress():::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.ifacesByName.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
this.node.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.name.toString one of { "H1", "H2" }
this.ip.host.network has only one value
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.ip.forwarding == false
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.index == 0
this.type has only one value
this.type.toString == "eth"
this.node.getClass().getName() == reso.ip.IPHost.class
this.node.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.node.name.toString one of { "H1", "H2" }
this.node.network has only one value
return.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.host.apps[]) one of { 2, 3 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.listeners[]) == 1
size(this.node.ifaces[]) == 1
size(return.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.hasAddress(reso.ip.IPAddress):::ENTER
this.ip.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.ip.host.network has only one value
this.ip.host.network != null
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0 != null
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.host.ifaces[]) one of { 1, 2 }
size(this.ip.ifaces[]) == 2
size(this.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.hasAddress(reso.ip.IPAddress):::EXIT
this.ip == orig(this.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.apps.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.host.ifaces == orig(this.ip.host.ifaces)
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.ifaces.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.ip.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ip.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.ip.host.ifacesByName.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ip.host.name == orig(this.ip.host.name)
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == orig(this.ip.host.network)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifaces.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.attrListeners.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.index == orig(this.index)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifaces.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.ifacesByName.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
this.node.network.nodes.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
(return == false)  ==>  (arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] })
(return == false)  ==>  (this.type.toString one of { "eth", "lo" })
(return == true)  ==>  (orig(this.getClass().getName()) == reso.ip.IPEthernetAdapter.class)
(return == true)  ==>  (this.type has only one value)
(return == true)  ==>  (this.type.toString == "eth")
this.ip.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.ip.host.network has only one value
this.ip.host.network != null
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.index one of { 0, 1 }
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.network has only one value
this.node.network != null
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.host.ifaces[]) one of { 1, 2 }
size(this.ip.ifaces[]) == 2
size(this.listeners[]) == 1
size(this.node.ifaces[]) one of { 1, 2 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.hasAddress(reso.ip.IPAddress):::EXIT;condition="return == true"
this.type has only one value
this.type.toString == "eth"
return == true
orig(this.getClass().getName()) == reso.ip.IPEthernetAdapter.class
===========================================================================
reso.ip.AbstractIPInterfaceAdapter.hasAddress(reso.ip.IPAddress):::EXIT;condition="not(return == true)"
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
return == false
===========================================================================
reso.ip.Datagram:::CLASS
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber one of { 0, 1, 2 }
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName() == java.util.HashMap.class
===========================================================================
reso.ip.Datagram:::OBJECT
reso.ip.Datagram.protocols.nextProtocolNumber == 2
this.src != null
this.src.addr != null
this.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
this.dst != null
this.dst.addr != null
this.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
this.ttl one of { 254, 255 }
this.payload != null
this.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
this.protocol == 1
size(this.src.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(this.dst.addr[]) == 4
===========================================================================
reso.ip.Datagram.Datagram(reso.ip.IPAddress, reso.ip.IPAddress, int, int, reso.common.Message):::ENTER
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg2 == 1
arg3 == 255
arg4.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.Datagram.Datagram(reso.ip.IPAddress, reso.ip.IPAddress, int, int, reso.common.Message):::EXIT
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.src == orig(arg0)
this.src.addr == arg0.addr
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.dst == orig(arg1)
this.dst.addr == arg1.addr
this.ttl == orig(arg3)
this.payload == orig(arg4)
this.payload.getClass().getName() == orig(arg4.getClass().getName())
this.protocol == orig(arg2)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
this.ttl == 255
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
size(arg0.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.Datagram.allocateProtocolNumber(java.lang.String):::ENTER
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.nextProtocolNumber one of { 0, 1 }
arg0.toString one of { "ICMP", "PING-PONG" }
===========================================================================
reso.ip.Datagram.allocateProtocolNumber(java.lang.String):::EXIT
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg0.toString == orig(arg0.toString)
reso.ip.Datagram.protocols.nextProtocolNumber one of { 1, 2 }
arg0.toString one of { "ICMP", "PING-PONG" }
return one of { 0, 1 }
===========================================================================
reso.ip.Datagram.decTTL():::ENTER
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.ttl == 255
===========================================================================
reso.ip.Datagram.decTTL():::EXIT
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
this.src == orig(this.src)
this.src.addr == orig(this.src.addr)
this.src.addr[] == orig(this.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.dst == orig(this.dst)
this.dst.addr == orig(this.dst.addr)
this.dst.addr[] == orig(this.dst.addr[])
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.protocol == orig(this.protocol)
this.ttl == 254
===========================================================================
reso.ip.Datagram.getTTL():::ENTER
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.ttl == 255
===========================================================================
reso.ip.Datagram.getTTL():::EXIT
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
this.src == orig(this.src)
this.src.addr == orig(this.src.addr)
this.src.addr[] == orig(this.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.dst == orig(this.dst)
this.dst.addr == orig(this.dst.addr)
this.dst.addr[] == orig(this.dst.addr[])
this.ttl == return
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.protocol == orig(this.protocol)
return == orig(this.ttl)
return == 255
===========================================================================
reso.ip.Datagram.toString():::ENTER
this.src has only one value
this.src.addr has only one value
this.src.addr[] == [64, 40, -127, -126]
this.dst has only one value
this.dst.addr has only one value
this.dst.addr[] == [64, 40, -128, -127]
this.ttl == 254
===========================================================================
reso.ip.Datagram.toString():::EXIT
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
this.src == orig(this.src)
this.src.addr == orig(this.src.addr)
this.src.addr[] == orig(this.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.dst == orig(this.dst)
this.dst.addr == orig(this.dst.addr)
this.dst.addr[] == orig(this.dst.addr[])
this.ttl == orig(this.ttl)
this.payload == orig(this.payload)
this.payload.getClass().getName() == orig(this.payload.getClass().getName())
this.protocol == orig(this.protocol)
this.src has only one value
this.src.addr has only one value
this.src.addr[] == [64, 40, -127, -126]
this.dst has only one value
this.dst.addr has only one value
this.dst.addr[] == [64, 40, -128, -127]
this.ttl == 254
return.toString one of { "src=192.168.1.2, dst=192.168.0.1,proto=1, payload=[PingPong [num=0]]", "src=192.168.1.2, dst=192.168.0.1,proto=1, payload=[PingPong [num=2]]", "src=192.168.1.2, dst=192.168.0.1,proto=1, payload=[PingPong [num=4]]" }
===========================================================================
reso.ip.FIB:::OBJECT
this.routes != null
this.routes.getClass().getName() == java.util.HashMap.class
===========================================================================
reso.ip.FIB.FIB():::EXIT
===========================================================================
reso.ip.FIB.add(reso.ip.IPRouteEntry):::ENTER
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg0.gateway.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg0.type has only one value
arg0.type.toString == "STATIC"
size(arg0.dst.addr[]) == 4
size(arg0.gateway.addr[]) == 4
===========================================================================
reso.ip.FIB.add(reso.ip.IPRouteEntry):::EXIT
this.routes == orig(this.routes)
this.routes.getClass().getName() == orig(this.routes.getClass().getName())
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
arg0.gateway == orig(arg0.gateway)
arg0.gateway.addr == orig(arg0.gateway.addr)
arg0.gateway.addr[] == orig(arg0.gateway.addr[])
arg0.oif == orig(arg0.oif)
arg0.oif.getClass().getName() == orig(arg0.oif.getClass().getName())
arg0.type == orig(arg0.type)
arg0.type.toString == orig(arg0.type.toString)
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg0.gateway.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg0.type has only one value
arg0.type.toString == "STATIC"
size(arg0.dst.addr[]) == 4
size(arg0.gateway.addr[]) == 4
===========================================================================
reso.ip.FIB.lookup(reso.ip.IPAddress):::ENTER
arg0 != null
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.FIB.lookup(reso.ip.IPAddress):::EXIT36
===========================================================================
reso.ip.FIB.lookup(reso.ip.IPAddress):::EXIT
this.routes == orig(this.routes)
this.routes.getClass().getName() == orig(this.routes.getClass().getName())
arg0.addr == return.dst.addr
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
return.dst == orig(arg0)
arg0.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
return != null
return.dst != null
return.gateway.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
return.oif != null
return.oif.getClass().getName() == reso.ip.IPEthernetAdapter.class
return.type has only one value
return.type != null
return.type.toString == "STATIC"
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(return.dst.addr[]) == 4
size(return.gateway.addr[]) == 4
this.routes.getClass().getName() != return.oif.getClass().getName()
===========================================================================
reso.ip.ICMPProtocol:::CLASS
reso.ip.ICMPProtocol.PROTO_NAME has only one value
reso.ip.ICMPProtocol.PROTO_NAME.toString == "ICMP"
reso.ip.ICMPProtocol.PROTO_NUM == 0
===========================================================================
reso.ip.ICMPProtocol:::OBJECT
reso.ip.ICMPProtocol.PROTO_NAME == this.name
this.ip.host == this.host
this.ip.host.listeners == this.host.listeners
this.ip.host.listeners.getClass().getName() == this.ip.rawListeners.getClass().getName()
this.ip.host.apps == this.host.apps
this.ip.host.apps.getClass().getName() == this.ip.rawListeners.getClass().getName()
this.ip.host.ifaces == this.host.ifaces
this.ip.host.ifaces.getClass().getName() == this.ip.rawListeners.getClass().getName()
this.ip.host.ifacesByType == this.host.ifacesByType
this.ip.host.ifacesByType.getClass().getName() == this.host.ifacesByType.getClass().getName()
this.ip.host.ifacesByName == this.host.ifacesByName
this.ip.host.ifacesByName.getClass().getName() == this.host.ifacesByType.getClass().getName()
this.ip.host.name == this.host.name
this.ip.host.network == this.host.network
this.ip.fib.routes.getClass().getName() == this.ip.ifacesByName.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.ip.ifaces.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.host.listeners.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.host.apps.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.host.ifaces.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.ifacesByName.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.network.nodes.getClass().getName()
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.ip.host.name.toString one of { "H1", "H2", "R1" }
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.ifaces[].getClass().getName() one of { [], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.ip.forwarding == false
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifaces[].getClass().getName() one of { [], [reso.ethernet.EthernetInterface] }
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.name.toString one of { "H1", "H2", "R1" }
this.host.network.scheduler has only one value
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.name.toString == "ICMP"
size(this.ip.host.apps[]) one of { 0, 2, 3 }
size(this.ip.host.ifaces[]) one of { 0, 1 }
size(this.ip.ifaces[]) one of { 0, 2 }
size(this.host.apps[]) one of { 0, 2, 3 }
size(this.host.ifaces[]) one of { 0, 1 }
this.ip.rawListeners.getClass().getName() != this.ip.ifacesByName.getClass().getName()
this.ip.rawListeners.getClass().getName() != this.host.ifacesByType.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.host.ifacesByType.getClass().getName()
===========================================================================
reso.ip.ICMPProtocol.ICMPProtocol(reso.ip.IPHost):::ENTER
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.ifaces[] == []
arg0.ip.ifaces[].getClass().getName() == []
arg0.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.ip.forwarding == false
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[] == []
arg0.apps[].getClass().getName() == []
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
reso.common.Network.nextEthernetID == 0
===========================================================================
reso.ip.ICMPProtocol.ICMPProtocol(reso.ip.IPHost):::EXIT
this.ip == arg0.ip
this.ip == orig(arg0.ip)
this.ip.host.listeners == arg0.listeners
this.ip.host.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.ip.host.apps == arg0.apps
this.ip.host.apps.getClass().getName() == arg0.listeners.getClass().getName()
this.ip.host.ifaces == arg0.ifaces
this.ip.host.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.ip.host.ifacesByType == arg0.ifacesByType
this.ip.host.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.ip.host.ifacesByName == arg0.ifacesByName
this.ip.host.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.ip.host.name == arg0.name
this.ip.fib == arg0.ip.fib
this.ip.fib == orig(arg0.ip.fib)
this.ip.rawListeners == arg0.ip.rawListeners
this.ip.rawListeners == orig(arg0.ip.rawListeners)
this.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
this.ip.listeners == arg0.ip.listeners
this.ip.listeners == orig(arg0.ip.listeners)
this.ip.ifaces == arg0.ip.ifaces
this.ip.ifaces == orig(arg0.ip.ifaces)
this.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.ip.ifacesByName == arg0.ip.ifacesByName
this.ip.ifacesByName == orig(arg0.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == arg0.ip.ifacesByName.getClass().getName()
this.ip.ifacesByName.getClass().getName() == orig(arg0.ip.ifacesByName.getClass().getName())
this.ip.forwarding == arg0.ip.forwarding
this.ip.forwarding == orig(arg0.ip.forwarding)
this.host == arg0.ip.host
this.host == orig(arg0.ip.host)
this.host.listeners == arg0.listeners
this.host.listeners.getClass().getName() == arg0.listeners.getClass().getName()
this.host.apps == arg0.apps
this.host.apps.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ifaces == arg0.ifaces
this.host.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
this.host.ifacesByType == arg0.ifacesByType
this.host.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.ifacesByName == arg0.ifacesByName
this.host.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.name == arg0.name
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.ip.rawListeners[] == orig(arg0.ip.rawListeners[])
arg0.ip.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
arg0.ip.ifaces[] == orig(arg0.ip.ifaces[])
arg0.ip.ifaces.getClass().getName() == arg0.listeners.getClass().getName()
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.listeners.getClass().getName() == orig(arg0.ip.rawListeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ip.ifaces.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.apps.getClass().getName())
arg0.listeners.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
this.ip.host.apps[] == []
this.ip.host.apps[].getClass().getName() == []
this.ip.host.ifaces[] == []
this.ip.host.ifaces[].getClass().getName() == []
this.ip.ifaces[] == []
this.ip.ifaces[].getClass().getName() == []
this.host.apps[] == []
this.host.apps[].getClass().getName() == []
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.network == null
arg0.ip.rawListeners[] == []
arg0.ip.rawListeners[].getClass().getName() == []
arg0.ip.ifaces[] == []
arg0.ip.ifaces[].getClass().getName() == []
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[] == []
arg0.apps[].getClass().getName() == []
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
===========================================================================
reso.ip.ICMPProtocol.start():::ENTER
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.name.toString one of { "H1", "H2" }
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
size(this.ip.host.apps[]) one of { 2, 3 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.ip.ICMPProtocol.start():::EXIT
reso.ip.ICMPProtocol.PROTO_NAME == orig(reso.ip.ICMPProtocol.PROTO_NAME)
reso.ip.ICMPProtocol.PROTO_NAME == orig(this.name)
reso.ip.ICMPProtocol.PROTO_NAME.toString == orig(reso.ip.ICMPProtocol.PROTO_NAME.toString)
reso.ip.ICMPProtocol.PROTO_NUM == orig(reso.ip.ICMPProtocol.PROTO_NUM)
this.ip == orig(this.ip)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.rawListeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.ip.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
this.ip.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
this.ip.forwarding == orig(this.ip.forwarding)
this.host == orig(this.ip.host)
this.host == orig(this.host)
this.host.listeners == orig(this.ip.host.listeners)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.ip.host.apps)
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.ip.host.ifaces)
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.ip.host.ifacesByType)
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.ip.host.ifacesByName)
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.ip.host.name)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.ip.host.network)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.name.toString == orig(this.name.toString)
this.ip.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.ip.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.ip.host.name.toString one of { "H1", "H2" }
this.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
size(this.ip.host.apps[]) one of { 2, 3 }
size(this.ip.host.ifaces[]) == 1
size(this.ip.ifaces[]) == 2
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.ip.IPAddress:::CLASS
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPAddress:::OBJECT
this.addr != null
size(this.addr[]) == 4
===========================================================================
reso.ip.IPAddress.IPAddress(int, int, int, int):::ENTER
arg1 one of { 0, 168, 255 }
arg2 one of { 0, 1, 255 }
arg0 >= arg1
arg0 >= arg2
arg0 >= arg3
arg1 >= arg2
arg2 <= arg3
===========================================================================
reso.ip.IPAddress.IPAddress(int, int, int, int):::EXIT
this.addr[] elements < orig(arg0)
this.addr[] elements < orig(arg1)
===========================================================================
reso.ip.IPAddress.compareTo(reso.ip.IPAddress):::ENTER
arg0 != null
arg0.addr != null
size(arg0.addr[]) == 4
===========================================================================
reso.ip.IPAddress.compareTo(reso.ip.IPAddress):::EXIT90
this.addr has only one value
this.addr[] == [64, 40, -128, -127]
arg0.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
return == -1
orig(this) has only one value
===========================================================================
reso.ip.IPAddress.compareTo(reso.ip.IPAddress):::EXIT92
this.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg0.addr[] one of { [-1, -128, -128, -127], [64, 40, -128, -126], [64, 40, -127, -127] }
return == 1
===========================================================================
reso.ip.IPAddress.compareTo(reso.ip.IPAddress):::EXIT93
this.addr == arg0.addr
this.addr == orig(arg0.addr)
orig(this) == orig(arg0)
return == 0
===========================================================================
reso.ip.IPAddress.compareTo(reso.ip.IPAddress):::EXIT
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg0.addr != null
return one of { -1, 0, 1 }
size(arg0.addr[]) == 4
===========================================================================
reso.ip.IPAddress.getByAddress(int, int, int, int):::ENTER
arg0 == 192
arg1 == 168
arg2 one of { 0, 1 }
arg3 one of { 1, 2 }
===========================================================================
reso.ip.IPAddress.getByAddress(int, int, int, int):::EXIT
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
size(return.addr[]) == 4
===========================================================================
reso.ip.IPAddress.hashCode():::ENTER
===========================================================================
reso.ip.IPAddress.hashCode():::EXIT
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
===========================================================================
reso.ip.IPAddress.isBroadcast():::ENTER
===========================================================================
reso.ip.IPAddress.isBroadcast():::EXIT33
===========================================================================
reso.ip.IPAddress.isBroadcast():::EXIT33;condition="not(return == true)"
===========================================================================
reso.ip.IPAddress.isBroadcast():::EXIT
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
return == false
===========================================================================
reso.ip.IPAddress.isBroadcast():::EXIT;condition="not(return == true)"
===========================================================================
reso.ip.IPAddress.isUndefined():::ENTER
this == reso.ip.IPAddress.ANY
this has only one value
this.addr has only one value
this.addr[] == [-128, -128, -128, -128]
this.addr[] elements == -128
===========================================================================
reso.ip.IPAddress.isUndefined():::EXIT41
===========================================================================
reso.ip.IPAddress.isUndefined():::EXIT41;condition="return == true"
===========================================================================
reso.ip.IPAddress.isUndefined():::EXIT
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
reso.ip.IPAddress.ANY == orig(this)
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.addr has only one value
this.addr[] == [-128, -128, -128, -128]
this.addr[] elements == -128
return == true
===========================================================================
reso.ip.IPAddress.isUndefined():::EXIT;condition="return == true"
===========================================================================
reso.ip.IPAddress.toString():::ENTER
this.addr[] one of { [64, 40, -128, -127], [64, 40, -128, -126], [64, 40, -127, -126] }
===========================================================================
reso.ip.IPAddress.toString():::EXIT
this.addr == orig(this.addr)
this.addr[] == orig(this.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.addr[] one of { [64, 40, -128, -127], [64, 40, -128, -126], [64, 40, -127, -126] }
return != null
return.toString one of { "192.168.0.1", "192.168.0.2", "192.168.1.2" }
===========================================================================
reso.ip.IPEthernetAdapter:::OBJECT
this == this.arp.adapter
this.ip == this.arp.adapter.ip
this.ip.host.listeners.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.apps.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.ifaces == this.node.ifaces
this.ip.host.ifaces.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.ifacesByType == this.node.ifacesByType
this.ip.host.ifacesByType.getClass().getName() == this.node.ifacesByType.getClass().getName()
this.ip.host.ifacesByName == this.node.ifacesByName
this.ip.host.ifacesByName.getClass().getName() == this.node.ifacesByType.getClass().getName()
this.ip.host.name == this.node.name
this.ip.fib.routes.getClass().getName() == this.ip.ifacesByName.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.listeners.getClass().getName()
this.ip.ifaces.getClass().getName() == this.listeners.getClass().getName()
this.ip.ifacesByName.getClass().getName() == this.arp.tableARP.getClass().getName()
this.ip.ifacesByName.getClass().getName() == this.arp.pendingARPTasks.getClass().getName()
this.iface == this.arp.iface
this.iface == this.arp.adapter.iface
this.iface.addr == this.arp.iface.addr
this.iface.link == this.arp.iface.link
this.iface.link.iface1.getClass().getName() == this.iface.link.iface2.getClass().getName()
this.iface.listeners == this.arp.iface.listeners
this.iface.listeners.listeners.getClass().getName() == this.listeners.getClass().getName()
this.iface.attrs == this.arp.iface.attrs
this.iface.attrListeners == this.arp.iface.attrListeners
this.iface.attrListeners.listeners.getClass().getName() == this.listeners.getClass().getName()
this.iface.index == this.index
this.iface.type == this.type
this.iface.node == this.node
this.iface.node.getClass().getName() == this.node.getClass().getName()
this.iface.node.ifaces == this.node.ifaces
this.iface.node.ifaces.getClass().getName() == this.listeners.getClass().getName()
this.iface.node.ifacesByType == this.node.ifacesByType
this.iface.node.ifacesByType.getClass().getName() == this.node.ifacesByType.getClass().getName()
this.iface.node.ifacesByName == this.node.ifacesByName
this.iface.node.ifacesByName.getClass().getName() == this.node.ifacesByType.getClass().getName()
this.iface.node.name == this.node.name
this.iface.node.network == this.node.network
this.arp == this.arp.adapter.arp
this.arp.iface.index == this.index
this.arp.iface.type == this.type
this.arp.iface.node == this.node
this.arp.iface.node.getClass().getName() == this.node.getClass().getName()
this.arp.adapter.addresses == this.addresses
this.arp.adapter.addresses.getClass().getName() == this.addresses.getClass().getName()
this.arp.adapter.listeners == this.listeners
this.arp.adapter.listeners.getClass().getName() == this.listeners.getClass().getName()
this.arp.adapter.attrs == this.attrs
this.arp.adapter.attrListeners == this.attrListeners
this.arp.adapter.index == this.index
this.arp.adapter.type == this.type
this.arp.adapter.node == this.node
this.arp.adapter.node.getClass().getName() == this.node.getClass().getName()
this.listeners.getClass().getName() == this.attrListeners.listeners.getClass().getName()
this.listeners.getClass().getName() == this.node.ifaces.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == this.node.network.nodes.getClass().getName()
this.ip != null
this.ip.host != null
this.ip.host.listeners != null
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.apps != null
this.ip.host.apps[] elements != null
this.ip.host.ifaces[] elements != null
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.ip.host.name.toString one of { "H1", "H2", "R1" }
this.ip.fib != null
this.ip.fib.routes != null
this.ip.rawListeners != null
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.listeners != null
this.ip.ifaces != null
this.ip.ifaces[] elements != null
this.ip.ifacesByName != null
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.iface != null
this.iface.addr != null
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST != null
this.iface.addr.addr != null
this.iface.link.SPEED_OF_LIGHT == 200000000
this.iface.link.iface1 != null
this.iface.link.iface1.getClass().getName() == reso.ethernet.EthernetInterface.class
this.iface.link.iface2 != null
this.iface.link.length == 5000000.0
this.iface.listeners != null
this.iface.listeners.listeners != null
this.iface.listeners.listeners[] elements != null
this.iface.listeners.listeners[].getClass().getName() one of { [reso.ip.IPEthernetAdapter], [reso.ip.IPEthernetAdapter, reso.examples.static_routing.AppSniffer] }
this.iface.attrs != null
this.iface.attrListeners != null
this.iface.attrListeners.listeners != null
this.iface.attrListeners.listeners[] elements != null
this.iface.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.iface.type.toString == "eth"
this.iface.node.ifaces[] elements != null
this.iface.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.iface.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.iface.node.name.toString one of { "H1", "H2", "R1" }
reso.common.AbstractInterface.$assertionsDisabled == false
this.arp != null
this.arp.tableARP != null
this.arp.pendingARPTasks != null
this.arp.iface.type.toString == "eth"
this.arp.adapter != null
this.arp.adapter.listeners[] elements != null
this.arp.adapter.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
this.arp.adapter.listeners[].getClass().getName() one of { [], [reso.ip.IPLayer] }
this.arp.adapter.type.toString == "eth"
this.addresses != null
this.addresses.getClass().getName() == java.util.TreeSet.class
this.listeners != null
this.listeners[] elements != null
this.listeners[].getClass().getName() elements == reso.ip.IPLayer.class
this.listeners[].getClass().getName() one of { [], [reso.ip.IPLayer] }
this.listeners.getClass().getName() == java.util.ArrayList.class
this.attrs != null
this.attrListeners != null
this.attrListeners.listeners != null
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.index one of { 0, 1 }
this.type has only one value
this.type != null
this.type.toString == "eth"
this.node != null
this.node.ifaces != null
this.node.ifaces[] elements != null
this.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.node.ifacesByType != null
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName != null
this.node.name != null
this.node.name.toString one of { "H1", "H2", "R1" }
this.node.network.scheduler has only one value
this.node.network.scheduler != null
this.node.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.node.network.nodes has only one value
this.node.network.nodes != null
this.node.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ip.host.apps[]) one of { 1, 2, 3 }
size(this.ip.host.ifaces[]) one of { 1, 2 }
size(this.ip.ifaces[]) one of { 0, 1, 2 }
size(this.iface.addr.addr[]) == 6
size(this.iface.listeners.listeners[]) one of { 1, 2 }
size(this.iface.attrListeners.listeners[]) == 1
size(this.iface.node.ifaces[]) one of { 1, 2 }
size(this.arp.adapter.listeners[]) one of { 0, 1 }
size(this.listeners[]) one of { 0, 1 }
size(this.node.ifaces[]) one of { 1, 2 }
this.iface.link.iface1.getClass().getName() in this.ip.host.ifaces[].getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.iface.link.iface1.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.addresses.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.listeners.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.node.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.node.network.nodes.getClass().getName()
this.iface.link.iface1.getClass().getName() in this.iface.node.ifaces[].getClass().getName()
this.iface.link.iface1.getClass().getName() != this.addresses.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.listeners.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.node.getClass().getName()
this.iface.link.iface1.getClass().getName() in this.node.ifaces[].getClass().getName()
this.iface.link.iface1.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.iface.link.iface1.getClass().getName() != this.node.network.nodes.getClass().getName()
this.addresses.getClass().getName() != this.listeners.getClass().getName()
this.addresses.getClass().getName() != this.node.getClass().getName()
this.addresses.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.addresses.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.addresses.getClass().getName() != this.node.network.nodes.getClass().getName()
this.listeners.getClass().getName() != this.node.getClass().getName()
this.listeners.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.listeners.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.listeners.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.getClass().getName() != this.node.ifacesByType.getClass().getName()
this.node.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.getClass().getName() != this.node.network.nodes.getClass().getName()
this.node.ifacesByType.getClass().getName() != this.node.network.scheduler.getClass().getName()
this.node.network.scheduler.getClass().getName() != this.node.network.nodes.getClass().getName()
===========================================================================
reso.ip.IPEthernetAdapter.IPEthernetAdapter(reso.ip.IPLayer, reso.ethernet.EthernetInterface):::ENTER
arg0.host.listeners.getClass().getName() == arg0.rawListeners.getClass().getName()
arg0.host.apps.getClass().getName() == arg0.rawListeners.getClass().getName()
arg0.host.ifaces == arg1.node.ifaces
arg0.host.ifaces.getClass().getName() == arg0.rawListeners.getClass().getName()
arg0.host.ifacesByType == arg1.node.ifacesByType
arg0.host.ifacesByType.getClass().getName() == arg0.host.ifacesByName.getClass().getName()
arg0.host.ifacesByType.getClass().getName() == arg1.node.ifacesByType.getClass().getName()
arg0.host.ifacesByType.getClass().getName() == arg1.node.ifacesByName.getClass().getName()
arg0.host.ifacesByName == arg1.node.ifacesByName
arg0.host.name == arg1.node.name
arg0.fib.routes.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.rawListeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.rawListeners.getClass().getName() == arg1.listeners.listeners.getClass().getName()
arg0.rawListeners.getClass().getName() == arg1.attrListeners.listeners.getClass().getName()
arg0.rawListeners.getClass().getName() == arg1.node.ifaces.getClass().getName()
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.host.name.toString one of { "H1", "H2", "R1" }
arg0.host.network == null
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetAddress.BROADCAST has only one value
arg1.link == null
arg1.listeners.listeners[] == []
arg1.listeners.listeners[].getClass().getName() == []
arg1.attrListeners.listeners[] == []
arg1.attrListeners.listeners[].getClass().getName() == []
arg1.index one of { 0, 1 }
arg1.type has only one value
arg1.type.toString == "eth"
arg1.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg1.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg1.node.name.toString one of { "H1", "H2", "R1" }
arg1.node.network == null
reso.common.AbstractInterface.$assertionsDisabled == false
size(arg0.host.apps[]) == 1
size(arg0.host.ifaces[]) one of { 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
size(arg1.addr.addr[]) == 6
size(arg1.node.ifaces[]) one of { 1, 2 }
===========================================================================
reso.ip.IPEthernetAdapter.IPEthernetAdapter(reso.ip.IPLayer, reso.ethernet.EthernetInterface):::EXIT
this.ip == orig(arg0)
this.ip.host == arg0.host
this.ip.host.listeners == arg0.host.listeners
this.ip.host.apps == arg0.host.apps
this.ip.fib == arg0.fib
this.ip.fib.routes == arg0.fib.routes
this.ip.fib.routes.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.ip.rawListeners == arg0.rawListeners
this.ip.listeners == arg0.listeners
this.ip.ifaces == arg0.ifaces
this.ip.ifacesByName == arg0.ifacesByName
this.ip.ifacesByName.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.ip.forwarding == arg0.forwarding
this.iface == orig(arg1)
this.iface.addr == arg1.addr
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == arg1.addr.addr
this.iface.listeners == arg1.listeners
this.iface.listeners.listeners == arg1.listeners.listeners
this.iface.attrs == arg1.attrs
this.iface.attrListeners == arg1.attrListeners
this.iface.attrListeners.listeners == arg1.attrListeners.listeners
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.arp.tableARP.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.arp.pendingARPTasks.getClass().getName() == arg0.ifacesByName.getClass().getName()
this.arp.iface.addr == arg1.addr
this.arp.iface.listeners == arg1.listeners
this.arp.iface.attrs == arg1.attrs
this.arp.iface.attrListeners == arg1.attrListeners
this.listeners.getClass().getName() == arg0.host.listeners.getClass().getName()
this.listeners.getClass().getName() == arg0.host.apps.getClass().getName()
this.listeners.getClass().getName() == arg0.host.ifaces.getClass().getName()
this.listeners.getClass().getName() == arg0.rawListeners.getClass().getName()
this.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
this.listeners.getClass().getName() == arg1.listeners.listeners.getClass().getName()
this.listeners.getClass().getName() == arg1.attrListeners.listeners.getClass().getName()
this.listeners.getClass().getName() == arg1.node.ifaces.getClass().getName()
this.listeners.getClass().getName() == orig(arg0.host.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.host.apps.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.host.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.rawListeners.getClass().getName())
this.listeners.getClass().getName() == orig(arg0.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(arg1.listeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(arg1.attrListeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(arg1.node.ifaces.getClass().getName())
this.index == arg1.index
this.index == orig(arg1.index)
this.type == arg1.type
this.type == orig(arg1.type)
this.node == arg1.node
this.node == orig(arg1.node)
this.node.getClass().getName() == arg1.node.getClass().getName()
this.node.getClass().getName() == orig(arg1.node.getClass().getName())
this.node.ifaces == arg0.host.ifaces
this.node.ifaces == arg1.node.ifaces
this.node.ifaces == orig(arg0.host.ifaces)
this.node.ifaces == orig(arg1.node.ifaces)
this.node.ifacesByType == arg0.host.ifacesByType
this.node.ifacesByType == arg1.node.ifacesByType
this.node.ifacesByType == orig(arg0.host.ifacesByType)
this.node.ifacesByType == orig(arg1.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == arg0.host.ifacesByType.getClass().getName()
this.node.ifacesByType.getClass().getName() == arg0.host.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == arg1.node.ifacesByType.getClass().getName()
this.node.ifacesByType.getClass().getName() == arg1.node.ifacesByName.getClass().getName()
this.node.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(arg1.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(arg1.node.ifacesByName.getClass().getName())
this.node.ifacesByName == arg0.host.ifacesByName
this.node.ifacesByName == arg1.node.ifacesByName
this.node.ifacesByName == orig(arg0.host.ifacesByName)
this.node.ifacesByName == orig(arg1.node.ifacesByName)
this.node.name == arg0.host.name
this.node.name == arg1.node.name
this.node.name == orig(arg0.host.name)
this.node.name == orig(arg1.node.name)
arg0.host == orig(arg0.host)
arg0.host.listeners == orig(arg0.host.listeners)
arg0.host.listeners[] == orig(arg0.host.listeners[])
arg0.host.apps == orig(arg0.host.apps)
arg0.host.apps[] == orig(arg0.host.apps[])
arg0.host.ifaces[] == orig(arg0.host.ifaces[])
arg0.host.name.toString == orig(arg0.host.name.toString)
arg0.host.network == orig(arg0.host.network)
arg0.fib == orig(arg0.fib)
arg0.fib.routes == orig(arg0.fib.routes)
arg0.fib.routes.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.rawListeners == orig(arg0.rawListeners)
arg0.rawListeners[] == orig(arg0.rawListeners[])
arg0.listeners == orig(arg0.listeners)
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.fib.routes.getClass().getName())
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.forwarding == orig(arg0.forwarding)
arg1.addr == orig(arg1.addr)
arg1.addr.addr == orig(arg1.addr.addr)
arg1.addr.addr[] == orig(arg1.addr.addr[])
arg1.link == orig(arg1.link)
arg1.listeners == orig(arg1.listeners)
arg1.listeners.listeners == orig(arg1.listeners.listeners)
arg1.attrs == orig(arg1.attrs)
arg1.attrListeners == orig(arg1.attrListeners)
arg1.attrListeners.listeners == orig(arg1.attrListeners.listeners)
arg1.type.toString == orig(arg1.type.toString)
arg1.node.ifaces[] == orig(arg1.node.ifaces[])
arg1.node.name.toString == orig(arg1.node.name.toString)
arg1.node.network == orig(arg1.node.network)
size(arg1.listeners.listeners[])-1 == orig(size(arg1.listeners.listeners[]))
size(arg1.attrListeners.listeners[])-1 == orig(size(arg1.attrListeners.listeners[]))
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.network == null
this.iface.link == null
this.iface.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
this.iface.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.arp.adapter.listeners[] == []
this.arp.adapter.listeners[].getClass().getName() == []
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.node.network == null
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg0.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg0.host.name.toString one of { "H1", "H2", "R1" }
arg0.host.network == null
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
arg1.link == null
arg1.listeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg1.listeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg1.attrListeners.listeners[].getClass().getName() == [reso.ip.IPEthernetAdapter]
arg1.attrListeners.listeners[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
arg1.type.toString == "eth"
arg1.node.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
arg1.node.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
arg1.node.name.toString one of { "H1", "H2", "R1" }
arg1.node.network == null
size(this.ip.host.apps[]) == 1
size(this.ip.ifaces[]) one of { 0, 1 }
size(this.iface.listeners.listeners[]) == 1
size(arg0.host.apps[]) == 1
size(arg0.host.ifaces[]) one of { 1, 2 }
size(arg0.ifaces[]) one of { 0, 1 }
size(arg1.addr.addr[]) == 6
size(arg1.listeners.listeners[]) == 1
size(arg1.attrListeners.listeners[]) == 1
size(arg1.node.ifaces[]) one of { 1, 2 }
===========================================================================
reso.ip.IPEthernetAdapter.receive(reso.common.HardwareInterface, reso.ethernet.EthernetFrame):::ENTER
this.ip.host.network == this.node.network
this.ip.fib.routes.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.ip.ifacesByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.iface.link.iface1.getClass().getName() == arg0.getClass().getName()
this.arp.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.arp.pendingARPTasks.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.iface.link != null
this.arp.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.node.network has only one value
this.node.network != null
arg0 != null
arg1 != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg1.src != null
arg1.src.addr != null
arg1.dst != null
arg1.dst.addr != null
arg1.protocol one of { 0, 1 }
arg1.payload != null
size(this.ip.ifaces[]) == 2
size(this.arp.adapter.listeners[]) == 1
size(this.listeners[]) == 1
size(arg1.src.addr[]) == 6
size(arg1.dst.addr[]) == 6
this.iface.link.iface1.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.iface.link.iface1.getClass().getName() != arg1.payload.getClass().getName()
this.addresses.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.addresses.getClass().getName() != arg1.payload.getClass().getName()
this.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.getClass().getName() != arg1.payload.getClass().getName()
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg1.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg1.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg1.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg1.payload.getClass().getName()
===========================================================================
reso.ip.IPEthernetAdapter.receive(reso.common.HardwareInterface, reso.ethernet.EthernetFrame):::EXIT
this.ip == orig(this.ip)
this.ip == orig(this.arp.adapter.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == this.node.network
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.ip.forwarding == orig(this.ip.forwarding)
this.iface == orig(this.iface)
this.iface == orig(this.arp.iface)
this.iface == orig(this.arp.adapter.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(this.arp.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(this.arp.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(arg0.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.iface2.getClass().getName() == orig(arg0.getClass().getName())
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(this.arp.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(this.arp.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(this.arp.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.name.toString == orig(this.iface.node.name.toString)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.arp == orig(this.arp)
this.arp == orig(this.arp.adapter.arp)
this.arp.tableARP == orig(this.arp.tableARP)
this.arp.tableARP.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.arp.pendingARPTasks == orig(this.arp.pendingARPTasks)
this.arp.pendingARPTasks.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.arp.iface.type.toString == orig(this.arp.iface.type.toString)
this.arp.adapter == orig(this)
this.arp.adapter == orig(this.arp.adapter)
this.arp.adapter.listeners[] == orig(this.arp.adapter.listeners[])
this.arp.adapter.type.toString == orig(this.arp.adapter.type.toString)
this.addresses == orig(this.arp.adapter.addresses)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.arp.adapter.addresses.getClass().getName())
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.arp.adapter.listeners)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.arp.adapter.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.arp.adapter.attrs)
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.arp.adapter.attrListeners)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.iface.index)
this.index == orig(this.arp.iface.index)
this.index == orig(this.arp.adapter.index)
this.index == orig(this.index)
this.type == orig(this.iface.type)
this.type == orig(this.arp.iface.type)
this.type == orig(this.arp.adapter.type)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.iface.node)
this.node == orig(this.arp.iface.node)
this.node == orig(this.arp.adapter.node)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.node.getClass().getName() == orig(this.arp.iface.node.getClass().getName())
this.node.getClass().getName() == orig(this.arp.adapter.node.getClass().getName())
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.ip.host.ifaces)
this.node.ifaces == orig(this.iface.node.ifaces)
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.ip.host.ifacesByType)
this.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.ip.host.ifacesByName)
this.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.ip.host.name)
this.node.name == orig(this.iface.node.name)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.ip.host.network)
this.node.network == orig(this.iface.node.network)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.ethernet.EthernetFrame.protocols == orig(reso.ethernet.EthernetFrame.protocols)
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == orig(reso.ethernet.EthernetFrame.protocols.nextProtocolNumber)
reso.ethernet.EthernetFrame.protocols.protocolsByName == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName)
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(this.arp.tableARP.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(this.arp.pendingARPTasks.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByNumber == orig(reso.ethernet.EthernetFrame.protocols.protocolsByNumber)
arg1.src == orig(arg1.src)
arg1.src.addr == orig(arg1.src.addr)
arg1.src.addr[] == orig(arg1.src.addr[])
arg1.dst == orig(arg1.dst)
arg1.dst.addr == orig(arg1.dst.addr)
arg1.dst.addr[] == orig(arg1.dst.addr[])
arg1.protocol == orig(arg1.protocol)
arg1.payload == orig(arg1.payload)
arg1.payload.getClass().getName() == orig(arg1.payload.getClass().getName())
orig(this.iface.link.iface2.getClass().getName()) == orig(arg0.getClass().getName())
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.iface.link != null
this.arp.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.node.network has only one value
this.node.network != null
reso.ethernet.EthernetFrame.protocols has only one value
reso.ethernet.EthernetFrame.protocols != null
reso.ethernet.EthernetFrame.protocols.nextProtocolNumber == 0
reso.ethernet.EthernetFrame.protocols.protocolsByName has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByName != null
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ethernet.EthernetFrame.protocols.protocolsByNumber has only one value
reso.ethernet.EthernetFrame.protocols.protocolsByNumber != null
arg1.src != null
arg1.src.addr != null
arg1.dst != null
arg1.dst.addr != null
arg1.protocol one of { 0, 1 }
arg1.payload != null
orig(arg0.getClass().getName()) == reso.ethernet.EthernetInterface.class
size(this.ip.ifaces[]) == 2
size(this.arp.adapter.listeners[]) == 1
size(this.listeners[]) == 1
size(arg1.src.addr[]) == 6
size(arg1.dst.addr[]) == 6
orig(arg0.getClass().getName()) in this.ip.host.ifaces[].getClass().getName()
orig(arg0.getClass().getName()) in this.iface.node.ifaces[].getClass().getName()
this.addresses.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.addresses.getClass().getName() != arg1.payload.getClass().getName()
this.addresses.getClass().getName() != orig(arg0.getClass().getName())
this.listeners.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.listeners.getClass().getName() != arg1.payload.getClass().getName()
this.listeners.getClass().getName() != orig(arg0.getClass().getName())
this.node.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg1.payload.getClass().getName()
this.node.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in this.node.ifaces[].getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg1.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != orig(arg0.getClass().getName())
this.node.network.scheduler.getClass().getName() != reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg1.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != orig(arg0.getClass().getName())
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != arg1.payload.getClass().getName()
reso.ethernet.EthernetFrame.protocols.protocolsByName.getClass().getName() != orig(arg0.getClass().getName())
arg1.payload.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
reso.ip.IPEthernetAdapter.send(reso.ip.Datagram, reso.ip.IPAddress):::ENTER
this.ip.host.network == this.node.network
this.ip.fib.routes.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ip.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.arp.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.arp.pendingARPTasks.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.iface.link != null
this.arp.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.node.network has only one value
this.node.network != null
arg0 != null
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
arg0.src != null
arg0.src.addr != null
arg0.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
arg0.dst != null
arg0.dst.addr != null
arg0.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg0.ttl one of { 254, 255 }
arg0.payload != null
arg0.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg0.protocol == 1
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.ifaces[]) == 2
size(this.arp.adapter.listeners[]) == 1
size(this.listeners[]) == 1
size(arg0.src.addr[]) == 4
size(arg0.dst.addr[]) == 4
size(arg1.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
this.iface.link.iface1.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.iface.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.addresses.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.addresses.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ip.IPEthernetAdapter.send(reso.ip.Datagram, reso.ip.IPAddress):::EXIT69
===========================================================================
reso.ip.IPEthernetAdapter.send(reso.ip.Datagram, reso.ip.IPAddress):::EXIT
this.ip == orig(this.ip)
this.ip == orig(this.arp.adapter.ip)
this.ip.host == orig(this.ip.host)
this.ip.host.listeners == orig(this.ip.host.listeners)
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.apps == orig(this.ip.host.apps)
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.host.network == this.node.network
this.ip.fib == orig(this.ip.fib)
this.ip.fib.routes == orig(this.ip.fib.routes)
this.ip.fib.routes.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ip.rawListeners == orig(this.ip.rawListeners)
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.listeners == orig(this.ip.listeners)
this.ip.ifaces == orig(this.ip.ifaces)
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifacesByName == orig(this.ip.ifacesByName)
this.ip.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ip.forwarding == orig(this.ip.forwarding)
this.iface == orig(this.iface)
this.iface == orig(this.arp.iface)
this.iface == orig(this.arp.adapter.iface)
this.iface.addr == orig(this.iface.addr)
this.iface.addr == orig(this.arp.iface.addr)
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
this.iface.addr.addr == orig(this.iface.addr.addr)
this.iface.addr.addr[] == orig(this.iface.addr.addr[])
this.iface.link == orig(this.iface.link)
this.iface.link == orig(this.arp.iface.link)
this.iface.link.SPEED_OF_LIGHT == orig(this.iface.link.SPEED_OF_LIGHT)
this.iface.link.iface1 == orig(this.iface.link.iface1)
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface1.getClass().getName())
this.iface.link.iface1.getClass().getName() == orig(this.iface.link.iface2.getClass().getName())
this.iface.link.iface2 == orig(this.iface.link.iface2)
this.iface.link.length == orig(this.iface.link.length)
this.iface.listeners == orig(this.iface.listeners)
this.iface.listeners == orig(this.arp.iface.listeners)
this.iface.listeners.listeners == orig(this.iface.listeners.listeners)
this.iface.listeners.listeners[] == orig(this.iface.listeners.listeners[])
this.iface.attrs == orig(this.iface.attrs)
this.iface.attrs == orig(this.arp.iface.attrs)
this.iface.attrListeners == orig(this.iface.attrListeners)
this.iface.attrListeners == orig(this.arp.iface.attrListeners)
this.iface.attrListeners.listeners == orig(this.iface.attrListeners.listeners)
this.iface.attrListeners.listeners[] == orig(this.iface.attrListeners.listeners[])
this.iface.type.toString == orig(this.iface.type.toString)
this.iface.node.ifaces[] == orig(this.iface.node.ifaces[])
this.iface.node.name.toString == orig(this.iface.node.name.toString)
reso.common.AbstractInterface.$assertionsDisabled == orig(reso.common.AbstractInterface.$assertionsDisabled)
this.arp == orig(this.arp)
this.arp == orig(this.arp.adapter.arp)
this.arp.tableARP == orig(this.arp.tableARP)
this.arp.tableARP.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.arp.pendingARPTasks == orig(this.arp.pendingARPTasks)
this.arp.pendingARPTasks.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.arp.iface.type.toString == orig(this.arp.iface.type.toString)
this.arp.adapter == orig(this)
this.arp.adapter == orig(this.arp.adapter)
this.arp.adapter.listeners[] == orig(this.arp.adapter.listeners[])
this.arp.adapter.type.toString == orig(this.arp.adapter.type.toString)
this.addresses == orig(this.arp.adapter.addresses)
this.addresses == orig(this.addresses)
this.addresses.getClass().getName() == orig(this.arp.adapter.addresses.getClass().getName())
this.addresses.getClass().getName() == orig(this.addresses.getClass().getName())
this.listeners == orig(this.arp.adapter.listeners)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.listeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.attrListeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.iface.node.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.arp.adapter.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.attrListeners.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.node.ifaces.getClass().getName())
this.attrs == orig(this.arp.adapter.attrs)
this.attrs == orig(this.attrs)
this.attrListeners == orig(this.arp.adapter.attrListeners)
this.attrListeners == orig(this.attrListeners)
this.attrListeners.listeners == orig(this.attrListeners.listeners)
this.attrListeners.listeners[] == orig(this.attrListeners.listeners[])
this.index == orig(this.iface.index)
this.index == orig(this.arp.iface.index)
this.index == orig(this.arp.adapter.index)
this.index == orig(this.index)
this.type == orig(this.iface.type)
this.type == orig(this.arp.iface.type)
this.type == orig(this.arp.adapter.type)
this.type == orig(this.type)
this.type.toString == orig(this.type.toString)
this.node == orig(this.iface.node)
this.node == orig(this.arp.iface.node)
this.node == orig(this.arp.adapter.node)
this.node == orig(this.node)
this.node.getClass().getName() == orig(this.iface.node.getClass().getName())
this.node.getClass().getName() == orig(this.arp.iface.node.getClass().getName())
this.node.getClass().getName() == orig(this.arp.adapter.node.getClass().getName())
this.node.getClass().getName() == orig(this.node.getClass().getName())
this.node.ifaces == orig(this.ip.host.ifaces)
this.node.ifaces == orig(this.iface.node.ifaces)
this.node.ifaces == orig(this.node.ifaces)
this.node.ifaces[] == orig(this.node.ifaces[])
this.node.ifacesByType == orig(this.ip.host.ifacesByType)
this.node.ifacesByType == orig(this.iface.node.ifacesByType)
this.node.ifacesByType == orig(this.node.ifacesByType)
this.node.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.iface.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByType.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.ifacesByName.getClass().getName())
this.node.ifacesByType.getClass().getName() == orig(this.node.network.nodes.getClass().getName())
this.node.ifacesByName == orig(this.ip.host.ifacesByName)
this.node.ifacesByName == orig(this.iface.node.ifacesByName)
this.node.ifacesByName == orig(this.node.ifacesByName)
this.node.name == orig(this.ip.host.name)
this.node.name == orig(this.iface.node.name)
this.node.name == orig(this.node.name)
this.node.name.toString == orig(this.node.name.toString)
this.node.network == orig(this.ip.host.network)
this.node.network == orig(this.iface.node.network)
this.node.network == orig(this.node.network)
this.node.network.scheduler == orig(this.node.network.scheduler)
this.node.network.scheduler.getClass().getName() == orig(this.node.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.node.network.nodes == orig(this.node.network.nodes)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(this.arp.tableARP.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(this.arp.pendingARPTasks.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg0.src == orig(arg0.src)
arg0.src.addr == orig(arg0.src.addr)
arg0.src.addr[] == orig(arg0.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
arg0.ttl == orig(arg0.ttl)
arg0.payload == orig(arg0.payload)
arg0.payload.getClass().getName() == orig(arg0.payload.getClass().getName())
arg0.protocol == orig(arg0.protocol)
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.ip.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
this.iface.link != null
this.arp.adapter.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.listeners[].getClass().getName() == [reso.ip.IPLayer]
this.node.network has only one value
this.node.network != null
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() == java.util.HashMap.class
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
arg0.src != null
arg0.src.addr != null
arg0.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
arg0.dst != null
arg0.dst.addr != null
arg0.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg0.ttl one of { 254, 255 }
arg0.payload != null
arg0.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg0.protocol == 1
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.ip.ifaces[]) == 2
size(this.arp.adapter.listeners[]) == 1
size(this.listeners[]) == 1
size(arg0.src.addr[]) == 4
size(arg0.dst.addr[]) == 4
size(arg1.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
this.iface.link.iface1.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.iface.link.iface1.getClass().getName() != arg0.payload.getClass().getName()
this.addresses.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.addresses.getClass().getName() != arg0.payload.getClass().getName()
this.listeners.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.listeners.getClass().getName() != arg0.payload.getClass().getName()
this.node.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.getClass().getName() != arg0.payload.getClass().getName()
this.node.ifacesByType.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.ifacesByType.getClass().getName() != arg0.payload.getClass().getName()
this.node.network.scheduler.getClass().getName() != reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.node.network.scheduler.getClass().getName() != arg0.payload.getClass().getName()
reso.ip.Datagram.protocols.protocolsByName.getClass().getName() != arg0.payload.getClass().getName()
===========================================================================
reso.ip.IPHost:::OBJECT
this.ip.host.listeners == this.listeners
this.ip.host.listeners.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.apps == this.apps
this.ip.host.apps.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.ifaces == this.ifaces
this.ip.host.ifaces.getClass().getName() == this.listeners.getClass().getName()
this.ip.host.ifacesByType == this.ifacesByType
this.ip.host.ifacesByType.getClass().getName() == this.ifacesByType.getClass().getName()
this.ip.host.ifacesByName == this.ifacesByName
this.ip.host.ifacesByName.getClass().getName() == this.ifacesByType.getClass().getName()
this.ip.host.name == this.name
this.ip.host.network == this.network
this.ip.fib.routes.getClass().getName() == this.ip.ifacesByName.getClass().getName()
this.ip.rawListeners.getClass().getName() == this.listeners.getClass().getName()
this.ip.ifaces.getClass().getName() == this.listeners.getClass().getName()
this.listeners.getClass().getName() == this.apps.getClass().getName()
this.listeners.getClass().getName() == this.ifaces.getClass().getName()
this.ifacesByType.getClass().getName() == this.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() == this.network.nodes.getClass().getName()
this.ip != null
this.ip.host != null
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.apps[] elements != null
this.ip.host.ifaces[] elements != null
this.ip.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ip.host.name.toString one of { "H1", "H2", "R1" }
this.ip.fib != null
this.ip.fib.routes != null
this.ip.rawListeners != null
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.listeners != null
this.ip.ifaces != null
this.ip.ifaces[] elements != null
this.ip.ifacesByName != null
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.listeners != null
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.ArrayList.class
this.apps != null
this.apps[] elements != null
this.ifaces != null
this.ifaces[] elements != null
this.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.ifacesByType != null
this.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ifacesByName != null
this.name != null
this.name.toString one of { "H1", "H2", "R1" }
this.network.scheduler has only one value
this.network.scheduler != null
this.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.network.nodes has only one value
this.network.nodes != null
this.network.nodes.getClass().getName() == java.util.TreeMap.class
size(this.ip.host.ifaces[]) one of { 0, 1, 2 }
size(this.ip.ifaces[]) one of { 0, 1, 2 }
size(this.ifaces[]) one of { 0, 1, 2 }
this.ip.ifacesByName.getClass().getName() != this.listeners.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.ifacesByType.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.network.scheduler.getClass().getName()
this.ip.ifacesByName.getClass().getName() != this.network.nodes.getClass().getName()
this.listeners.getClass().getName() != this.ifacesByType.getClass().getName()
this.listeners.getClass().getName() != this.network.scheduler.getClass().getName()
this.listeners.getClass().getName() != this.network.nodes.getClass().getName()
this.ifacesByType.getClass().getName() != this.network.scheduler.getClass().getName()
this.network.scheduler.getClass().getName() != this.network.nodes.getClass().getName()
===========================================================================
reso.ip.IPHost.IPHost(java.lang.String):::ENTER
arg0.toString one of { "H1", "H2", "R1" }
===========================================================================
reso.ip.IPHost.IPHost(java.lang.String):::EXIT
this.name == orig(arg0)
arg0.toString == orig(arg0.toString)
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.ifaces[] == []
this.ip.host.ifaces[].getClass().getName() == []
this.ip.ifaces[] == []
this.ip.ifaces[].getClass().getName() == []
this.ip.forwarding == false
this.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.network == null
arg0.toString one of { "H1", "H2", "R1" }
size(this.ip.host.apps[]) == 1
size(this.apps[]) == 1
===========================================================================
reso.ip.IPHost.getIPLayer():::ENTER
===========================================================================
reso.ip.IPHost.getIPLayer():::EXIT
this.ip == return
this.ip.host == return.host
this.ip.host.listeners[] == orig(this.ip.host.listeners[])
this.ip.host.apps[] == orig(this.ip.host.apps[])
this.ip.host.ifaces[] == orig(this.ip.host.ifaces[])
this.ip.host.name.toString == orig(this.ip.host.name.toString)
this.ip.fib == return.fib
this.ip.fib.routes == return.fib.routes
this.ip.fib.routes.getClass().getName() == return.ifacesByName.getClass().getName()
this.ip.rawListeners == return.rawListeners
this.ip.rawListeners[] == orig(this.ip.rawListeners[])
this.ip.listeners == return.listeners
this.ip.ifaces == return.ifaces
this.ip.ifaces[] == orig(this.ip.ifaces[])
this.ip.ifacesByName == return.ifacesByName
this.ip.ifacesByName.getClass().getName() == return.ifacesByName.getClass().getName()
this.ip.forwarding == return.forwarding
this.listeners == return.host.listeners
this.listeners == orig(this.ip.host.listeners)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners.getClass().getName() == return.host.listeners.getClass().getName()
this.listeners.getClass().getName() == return.host.apps.getClass().getName()
this.listeners.getClass().getName() == return.host.ifaces.getClass().getName()
this.listeners.getClass().getName() == return.rawListeners.getClass().getName()
this.listeners.getClass().getName() == return.ifaces.getClass().getName()
this.listeners.getClass().getName() == orig(this.ip.host.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.host.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.rawListeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.ip.ifaces.getClass().getName())
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() == orig(this.apps.getClass().getName())
this.listeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.apps == return.host.apps
this.apps == orig(this.ip.host.apps)
this.apps == orig(this.apps)
this.apps[] == orig(this.apps[])
this.ifaces == return.host.ifaces
this.ifaces == orig(this.ip.host.ifaces)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByType == return.host.ifacesByType
this.ifacesByType == orig(this.ip.host.ifacesByType)
this.ifacesByType == orig(this.ifacesByType)
this.ifacesByType.getClass().getName() == return.host.ifacesByType.getClass().getName()
this.ifacesByType.getClass().getName() == return.host.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ip.host.ifacesByName.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByType.getClass().getName())
this.ifacesByType.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByName == return.host.ifacesByName
this.ifacesByName == orig(this.ip.host.ifacesByName)
this.ifacesByName == orig(this.ifacesByName)
this.name == return.host.name
this.name == orig(this.ip.host.name)
this.name == orig(this.name)
this.name.toString == orig(this.name.toString)
this.network == return.host.network
this.network == orig(this.ip.host.network)
this.network == orig(this.network)
this.network.scheduler == orig(this.network.scheduler)
this.network.scheduler.getClass().getName() == orig(this.network.scheduler.getClass().getName())
this.network.scheduler.time == orig(this.network.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.network.nodes == orig(this.network.nodes)
this.network.nodes.getClass().getName() == orig(this.network.nodes.getClass().getName())
return == orig(this.ip)
return.host == orig(this.ip.host)
return.fib == orig(this.ip.fib)
return.fib.routes == orig(this.ip.fib.routes)
return.fib.routes.getClass().getName() == return.ifacesByName.getClass().getName()
return.rawListeners == orig(this.ip.rawListeners)
return.listeners == orig(this.ip.listeners)
return.ifaces == orig(this.ip.ifaces)
return.ifacesByName == orig(this.ip.ifacesByName)
return.ifacesByName.getClass().getName() == orig(this.ip.fib.routes.getClass().getName())
return.ifacesByName.getClass().getName() == orig(this.ip.ifacesByName.getClass().getName())
return.forwarding == orig(this.ip.forwarding)
return != null
return.host != null
return.host.listeners[] == []
return.host.listeners[].getClass().getName() == []
return.host.apps[] elements != null
return.host.ifaces[] elements != null
return.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
return.host.name.toString one of { "H1", "H2", "R1" }
return.fib != null
return.fib.routes != null
return.rawListeners != null
return.rawListeners[] == []
return.rawListeners[].getClass().getName() == []
return.listeners != null
return.ifaces != null
return.ifaces[] elements != null
return.ifacesByName != null
return.ifacesByName.getClass().getName() == java.util.HashMap.class
size(return.host.ifaces[]) one of { 0, 1, 2 }
size(return.ifaces[]) one of { 0, 1, 2 }
this.listeners.getClass().getName() != return.ifacesByName.getClass().getName()
this.ifacesByType.getClass().getName() != return.ifacesByName.getClass().getName()
this.network.scheduler.getClass().getName() != return.ifacesByName.getClass().getName()
this.network.nodes.getClass().getName() != return.ifacesByName.getClass().getName()
===========================================================================
reso.ip.IPLayer:::OBJECT
this.host.listeners.getClass().getName() == this.rawListeners.getClass().getName()
this.host.apps.getClass().getName() == this.rawListeners.getClass().getName()
this.host.ifaces.getClass().getName() == this.rawListeners.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.ifacesByName.getClass().getName()
this.host.ifacesByType.getClass().getName() == this.host.network.nodes.getClass().getName()
this.fib.routes.getClass().getName() == this.ifacesByName.getClass().getName()
this.rawListeners.getClass().getName() == this.ifaces.getClass().getName()
this.host != null
this.host.listeners != null
this.host.listeners[] == []
this.host.listeners[].getClass().getName() == []
this.host.apps != null
this.host.apps[] elements != null
this.host.ifaces != null
this.host.ifaces[] elements != null
this.host.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
this.host.ifacesByType != null
this.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.host.ifacesByName != null
this.host.name != null
this.host.name.toString one of { "H1", "H2", "R1" }
this.host.network.scheduler has only one value
this.host.network.scheduler != null
this.host.network.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
reso.common.Network.nextEthernetID == 0
this.host.network.nodes has only one value
this.host.network.nodes != null
this.host.network.nodes.getClass().getName() == java.util.TreeMap.class
this.fib != null
this.fib.routes != null
this.rawListeners != null
this.rawListeners[] == []
this.rawListeners[].getClass().getName() == []
this.rawListeners.getClass().getName() == java.util.ArrayList.class
this.listeners != null
this.ifaces != null
this.ifaces[] elements != null
this.ifacesByName != null
this.ifacesByName.getClass().getName() == java.util.HashMap.class
size(this.host.ifaces[]) one of { 0, 1, 2 }
size(this.ifaces[]) one of { 0, 1, 2 }
this.host.ifacesByType.getClass().getName() != this.host.network.scheduler.getClass().getName()
this.host.ifacesByType.getClass().getName() != this.rawListeners.getClass().getName()
this.host.ifacesByType.getClass().getName() != this.ifacesByName.getClass().getName()
this.host.network.scheduler.getClass().getName() != this.host.network.nodes.getClass().getName()
this.host.network.scheduler.getClass().getName() != this.rawListeners.getClass().getName()
this.host.network.scheduler.getClass().getName() != this.ifacesByName.getClass().getName()
this.host.network.nodes.getClass().getName() != this.rawListeners.getClass().getName()
this.host.network.nodes.getClass().getName() != this.ifacesByName.getClass().getName()
this.rawListeners.getClass().getName() != this.ifacesByName.getClass().getName()
===========================================================================
reso.ip.IPLayer.IPLayer(reso.common.Host):::ENTER
arg0.listeners.getClass().getName() == arg0.apps.getClass().getName()
arg0.listeners.getClass().getName() == arg0.ifaces.getClass().getName()
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.listeners.getClass().getName() == java.util.ArrayList.class
arg0.apps[] == []
arg0.apps[].getClass().getName() == []
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
reso.common.Network.nextEthernetID == 0
===========================================================================
reso.ip.IPLayer.IPLayer(reso.common.Host):::EXIT
this.host == orig(arg0)
this.host.listeners == arg0.listeners
this.host.apps == arg0.apps
this.host.ifaces == arg0.ifaces
this.host.ifacesByType == arg0.ifacesByType
this.host.ifacesByType.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.ifacesByName == arg0.ifacesByName
this.host.ifacesByName.getClass().getName() == arg0.ifacesByType.getClass().getName()
this.host.name == arg0.name
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.rawListeners.getClass().getName() == arg0.listeners.getClass().getName()
this.rawListeners.getClass().getName() == arg0.apps.getClass().getName()
this.rawListeners.getClass().getName() == arg0.ifaces.getClass().getName()
this.rawListeners.getClass().getName() == orig(arg0.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(arg0.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.listeners == orig(arg0.listeners)
arg0.listeners[] == orig(arg0.listeners[])
arg0.apps == orig(arg0.apps)
arg0.apps[] == orig(arg0.apps[])
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifacesByType == orig(arg0.ifacesByType)
arg0.ifacesByType.getClass().getName() == arg0.ifacesByName.getClass().getName()
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByType.getClass().getName())
arg0.ifacesByType.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.name == orig(arg0.name)
arg0.name.toString == orig(arg0.name.toString)
arg0.network == orig(arg0.network)
this.host.apps[] == []
this.host.apps[].getClass().getName() == []
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.network == null
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.forwarding == false
arg0.listeners[] == []
arg0.listeners[].getClass().getName() == []
arg0.apps[] == []
arg0.apps[].getClass().getName() == []
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.name.toString one of { "H1", "H2", "R1" }
arg0.network == null
===========================================================================
reso.ip.IPLayer.addInterface(reso.ip.IPInterfaceAdapter):::ENTER
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.network == null
size(this.host.apps[]) == 1
size(this.ifaces[]) one of { 0, 1 }
===========================================================================
reso.ip.IPLayer.addInterface(reso.ip.IPInterfaceAdapter):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
size(this.ifaces[])-1 == orig(size(this.ifaces[]))
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.network == null
size(this.host.apps[]) == 1
size(this.ifaces[]) one of { 1, 2 }
orig(arg0.getClass().getName()) in this.ifaces[].getClass().getName()
===========================================================================
reso.ip.IPLayer.addListener(int, reso.ip.IPInterfaceListener):::ENTER
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
arg0 one of { 0, 1 }
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
===========================================================================
reso.ip.IPLayer.addListener(int, reso.ip.IPInterfaceListener):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, java.lang.String):::ENTER
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.toString one of { "eth0", "eth1" }
size(this.host.apps[]) == 1
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, java.lang.String):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg1.toString == orig(arg1.toString)
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.toString one of { "eth0", "eth1" }
size(this.host.apps[]) == 1
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, reso.ip.IPAddress):::ENTER
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, reso.ip.IPAddress):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter):::ENTER
arg0 == reso.ip.IPAddress.LOCALHOST
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.name.toString one of { "H1", "H2" }
this.host.network == null
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPLoopbackAdapter.class
this.forwarding == false
arg0.addr has only one value
arg0.addr[] == [-1, -128, -128, -127]
arg0.addr[] elements one of { -128, -127, -1 }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.getClass().getName() == reso.ip.IPLoopbackAdapter.class
size(this.host.apps[]) == 1
size(this.ifaces[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
arg1.getClass().getName() in this.ifaces[].getClass().getName()
===========================================================================
reso.ip.IPLayer.addRoute(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(arg0)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.name.toString one of { "H1", "H2" }
this.host.network == null
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPLoopbackAdapter.class
this.forwarding == false
arg0.addr has only one value
arg0.addr[] == [-1, -128, -128, -127]
arg0.addr[] elements one of { -128, -127, -1 }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.host.apps[]) == 1
size(this.ifaces[]) == 1
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
orig(arg1.getClass().getName()) in this.ifaces[].getClass().getName()
===========================================================================
reso.ip.IPLayer.enableForwarding():::ENTER
this has only one value
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.host.network == null
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.ifacesByName has only one value
this.forwarding == false
size(this.host.apps[]) == 1
===========================================================================
reso.ip.IPLayer.enableForwarding():::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] == []
this.host.ifaces[].getClass().getName() == []
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.host.network == null
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.ifacesByName has only one value
this.forwarding == true
size(this.host.apps[]) == 1
===========================================================================
reso.ip.IPLayer.forward(reso.ip.Datagram):::ENTER
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this has only one value
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 2
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.host.network has only one value
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] contains no nulls and has only one value, of length 2
this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.ifacesByName has only one value
this.forwarding == true
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg0.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg0.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg0.ttl == 255
arg0.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg0.protocol == 1
size(this.host.apps[]) == 1
size(this.host.ifaces[]) == 2
size(this.ifaces[]) == 2
size(arg0.src.addr[]) == 4
size(arg0.dst.addr[]) == 4
===========================================================================
reso.ip.IPLayer.forward(reso.ip.Datagram):::EXIT115
===========================================================================
reso.ip.IPLayer.forward(reso.ip.Datagram):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
this.ifacesByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
this.forwarding == orig(this.forwarding)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg0.src == orig(arg0.src)
arg0.src.addr == orig(arg0.src.addr)
arg0.src.addr[] == orig(arg0.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
arg0.dst == orig(arg0.dst)
arg0.dst.addr == orig(arg0.dst.addr)
arg0.dst.addr[] == orig(arg0.dst.addr[])
arg0.payload == orig(arg0.payload)
arg0.payload.getClass().getName() == orig(arg0.payload.getClass().getName())
arg0.protocol == orig(arg0.protocol)
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 2
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.host.network has only one value
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] contains no nulls and has only one value, of length 2
this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.ifacesByName has only one value
this.forwarding == true
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByNumber has only one value
arg0.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
arg0.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg0.ttl == 254
arg0.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg0.protocol == 1
size(this.host.apps[]) == 1
size(this.host.ifaces[]) == 2
size(this.ifaces[]) == 2
size(arg0.src.addr[]) == 4
size(arg0.dst.addr[]) == 4
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::ENTER
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.host.network != null
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
arg0 != null
arg0.addr != null
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.host.apps[]) one of { 1, 2, 3 }
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT74
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
return == true
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT74;condition="return == true"
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT75
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 2
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] contains no nulls and has only one value, of length 2
this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.ifacesByName has only one value
this.forwarding == true
return == false
orig(this) has only one value
size(this.host.apps[]) == 1
size(this.host.ifaces[]) == 2
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT75;condition="not(return == true)"
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (return == false)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (size(this.host.apps[]) == 1)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (size(this.host.ifaces[]) == 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.forwarding == true)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface])
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.host.name.toString == "R1")
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter])
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (orig(this) has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.fib has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.fib.routes has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[] contains no nulls and has only one value, of length 1)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[] elements has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifaces has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifacesByName has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifacesByType has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifaces[] contains no nulls and has only one value, of length 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.listeners has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.name has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifacesByName has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces[] contains no nulls and has only one value, of length 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.listeners has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.rawListeners has only one value)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (return == true)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (size(this.host.apps[]) one of { 2, 3 })
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (size(this.host.ifaces[]) == 1)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.forwarding == false)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface])
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.host.name.toString one of { "H1", "H2" })
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter])
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.host.network != null
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
arg0.addr != null
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
size(this.host.apps[]) one of { 1, 2, 3 }
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT;condition="return == true"
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
return == true
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.ip.IPLayer.hasAddress(reso.ip.IPAddress):::EXIT;condition="not(return == true)"
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 2
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] contains no nulls and has only one value, of length 2
this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.ifacesByName has only one value
this.forwarding == true
return == false
orig(this) has only one value
size(this.host.apps[]) == 1
size(this.host.ifaces[]) == 2
===========================================================================
reso.ip.IPLayer.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::ENTER
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.host.network != null
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
arg0 != null
arg0.getClass().getName() == reso.ip.IPEthernetAdapter.class
arg1 != null
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
arg1.src != null
arg1.src.addr != null
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
arg1.dst != null
arg1.dst.addr != null
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl one of { 254, 255 }
arg1.payload != null
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(this.host.apps[]) one of { 1, 2, 3 }
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
this.host.ifacesByType.getClass().getName() != arg0.getClass().getName()
this.host.ifacesByType.getClass().getName() != arg1.payload.getClass().getName()
this.host.network.scheduler.getClass().getName() != arg0.getClass().getName()
this.host.network.scheduler.getClass().getName() != arg1.payload.getClass().getName()
this.rawListeners.getClass().getName() != arg0.getClass().getName()
this.rawListeners.getClass().getName() != arg1.payload.getClass().getName()
arg0.getClass().getName() in this.ifaces[].getClass().getName()
this.ifacesByName.getClass().getName() != arg0.getClass().getName()
this.ifacesByName.getClass().getName() != arg1.payload.getClass().getName()
arg0.getClass().getName() != arg1.payload.getClass().getName()
===========================================================================
reso.ip.IPLayer.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::EXIT92
arg1.ttl == orig(arg1.ttl)
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
===========================================================================
reso.ip.IPLayer.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::EXIT98
this.host has only one value
this.host.listeners has only one value
this.host.apps has only one value
this.host.apps[] contains no nulls and has only one value, of length 1
this.host.apps[] elements has only one value
this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.host.ifaces has only one value
this.host.ifaces[] contains no nulls and has only one value, of length 2
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
this.host.ifacesByType has only one value
this.host.ifacesByName has only one value
this.host.name has only one value
this.host.name.toString == "R1"
this.fib has only one value
this.fib.routes has only one value
this.rawListeners has only one value
this.listeners has only one value
this.ifaces has only one value
this.ifaces[] contains no nulls and has only one value, of length 2
this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
this.ifacesByName has only one value
this.forwarding == true
orig(this) has only one value
orig(arg1.ttl) == 255
size(this.host.apps[]) == 1
size(this.host.ifaces[]) == 2
===========================================================================
reso.ip.IPLayer.receive(reso.ip.IPInterfaceAdapter, reso.ip.Datagram):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByName.getClass().getName()
this.ifacesByName.getClass().getName() == reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName()
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.ifacesByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByName.getClass().getName())
this.ifacesByName.getClass().getName() == orig(reso.ip.Datagram.protocols.protocolsByNumber.getClass().getName())
this.forwarding == orig(this.forwarding)
reso.ip.Datagram.protocols == orig(reso.ip.Datagram.protocols)
reso.ip.Datagram.protocols.nextProtocolNumber == orig(reso.ip.Datagram.protocols.nextProtocolNumber)
reso.ip.Datagram.protocols.protocolsByName == orig(reso.ip.Datagram.protocols.protocolsByName)
reso.ip.Datagram.protocols.protocolsByNumber == orig(reso.ip.Datagram.protocols.protocolsByNumber)
arg1.src == orig(arg1.src)
arg1.src.addr == orig(arg1.src.addr)
arg1.src.addr[] == orig(arg1.src.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
arg1.dst == orig(arg1.dst)
arg1.dst.addr == orig(arg1.dst.addr)
arg1.dst.addr[] == orig(arg1.dst.addr[])
arg1.payload == orig(arg1.payload)
arg1.payload.getClass().getName() == orig(arg1.payload.getClass().getName())
arg1.protocol == orig(arg1.protocol)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (orig(arg1.ttl) == 255)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (size(this.host.apps[]) == 1)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (size(this.host.ifaces[]) == 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.forwarding == true)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface])
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.host.name.toString == "R1")
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  <==>  (this.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter])
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (orig(this) has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.fib has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.fib.routes has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[] contains no nulls and has only one value, of length 1)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[] elements has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifaces has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifacesByName has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifacesByType has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.ifaces[] contains no nulls and has only one value, of length 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.listeners has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.host.name has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifacesByName has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces[] contains no nulls and has only one value, of length 2)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.listeners has only one value)
(this.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol])  ==>  (this.rawListeners has only one value)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (arg1.ttl == orig(arg1.ttl))
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (orig(arg1.ttl) == 254)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (size(this.host.apps[]) one of { 2, 3 })
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (size(this.host.ifaces[]) == 1)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.forwarding == false)
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface])
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.host.name.toString one of { "H1", "H2" })
(this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] })  <==>  (this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter])
this.host.ifaces[].getClass().getName() one of { [reso.ethernet.EthernetInterface], [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface] }
this.host.network has only one value
this.host.network != null
this.ifaces[].getClass().getName() one of { [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter], [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter] }
reso.ip.Datagram.protocols has only one value
reso.ip.Datagram.protocols != null
reso.ip.Datagram.protocols.nextProtocolNumber == 2
reso.ip.Datagram.protocols.protocolsByName has only one value
reso.ip.Datagram.protocols.protocolsByName != null
reso.ip.Datagram.protocols.protocolsByNumber has only one value
reso.ip.Datagram.protocols.protocolsByNumber != null
arg1.src != null
arg1.src.addr != null
arg1.src.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
arg1.dst != null
arg1.dst.addr != null
arg1.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.ttl == 254
arg1.payload != null
arg1.payload.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
arg1.protocol == 1
size(this.host.apps[]) one of { 1, 2, 3 }
size(this.host.ifaces[]) one of { 1, 2 }
size(this.ifaces[]) == 2
size(arg1.src.addr[]) == 4
size(arg1.dst.addr[]) == 4
this.host.ifacesByType.getClass().getName() != arg1.payload.getClass().getName()
this.host.ifacesByType.getClass().getName() != orig(arg0.getClass().getName())
this.host.network.scheduler.getClass().getName() != arg1.payload.getClass().getName()
this.host.network.scheduler.getClass().getName() != orig(arg0.getClass().getName())
this.rawListeners.getClass().getName() != arg1.payload.getClass().getName()
this.rawListeners.getClass().getName() != orig(arg0.getClass().getName())
orig(arg0.getClass().getName()) in this.ifaces[].getClass().getName()
this.ifacesByName.getClass().getName() != arg1.payload.getClass().getName()
this.ifacesByName.getClass().getName() != orig(arg0.getClass().getName())
arg1.ttl <= orig(arg1.ttl)
arg1.payload.getClass().getName() != orig(arg0.getClass().getName())
===========================================================================
reso.ip.IPLayer.send(reso.ip.IPAddress, reso.ip.IPAddress, int, reso.common.Message):::ENTER
arg0 == reso.ip.IPAddress.ANY
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
arg0.addr has only one value
arg0.addr[] == [-128, -128, -128, -128]
arg0.addr[] elements == -128
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg2 == 1
arg3.getClass().getName() == reso.examples.pingpong.PingPongMessage.class
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPLayer.send(reso.ip.IPAddress, reso.ip.IPAddress, int, reso.common.Message):::EXIT
this.host == orig(this.host)
this.host.listeners == orig(this.host.listeners)
this.host.listeners[] == orig(this.host.listeners[])
this.host.apps == orig(this.host.apps)
this.host.apps[] == orig(this.host.apps[])
this.host.ifaces == orig(this.host.ifaces)
this.host.ifaces[] == orig(this.host.ifaces[])
this.host.ifacesByType == orig(this.host.ifacesByType)
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByType.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.ifacesByName.getClass().getName())
this.host.ifacesByType.getClass().getName() == orig(this.host.network.nodes.getClass().getName())
this.host.ifacesByName == orig(this.host.ifacesByName)
this.host.name == orig(this.host.name)
this.host.name.toString == orig(this.host.name.toString)
this.host.network == orig(this.host.network)
this.host.network.scheduler == orig(this.host.network.scheduler)
this.host.network.scheduler.getClass().getName() == orig(this.host.network.scheduler.getClass().getName())
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
this.host.network.nodes == orig(this.host.network.nodes)
this.fib == orig(this.fib)
this.fib.routes == orig(this.fib.routes)
this.rawListeners == orig(this.rawListeners)
this.rawListeners[] == orig(this.rawListeners[])
this.rawListeners.getClass().getName() == orig(this.host.listeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.apps.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.host.ifaces.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.rawListeners.getClass().getName())
this.rawListeners.getClass().getName() == orig(this.ifaces.getClass().getName())
this.listeners == orig(this.listeners)
this.ifaces == orig(this.ifaces)
this.ifaces[] == orig(this.ifaces[])
this.ifacesByName == orig(this.ifacesByName)
this.ifacesByName.getClass().getName() == orig(this.fib.routes.getClass().getName())
this.ifacesByName.getClass().getName() == orig(this.ifacesByName.getClass().getName())
this.forwarding == orig(this.forwarding)
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
reso.ip.IPAddress.ANY == orig(arg0)
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
this.host.apps[].getClass().getName() one of { [reso.ip.ICMPProtocol, reso.examples.pingpong.AppReceiver], [reso.ip.ICMPProtocol, reso.examples.pingpong.AppSender, reso.examples.static_routing.AppSniffer] }
this.host.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
this.host.name.toString one of { "H1", "H2" }
this.host.network has only one value
this.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
this.forwarding == false
arg0.addr has only one value
arg0.addr[] == [-128, -128, -128, -128]
arg0.addr[] elements == -128
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
size(this.host.apps[]) one of { 2, 3 }
size(this.host.ifaces[]) == 1
size(this.ifaces[]) == 2
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPLoopbackAdapter:::CLASS
reso.common.AbstractInterface.$assertionsDisabled == false
===========================================================================
reso.ip.IPLoopbackAdapter:::OBJECT
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.listeners.getClass().getName() == java.util.ArrayList.class
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.apps.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifaces[] == []
this.ip.host.ifaces[].getClass().getName() == []
this.ip.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ip.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.ip.host.name.toString one of { "H1", "H2" }
this.ip.host.network == null
this.ip.fib.routes.getClass().getName() == java.util.HashMap.class
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.ifaces[] == []
this.ip.ifaces[].getClass().getName() == []
this.ip.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.ip.forwarding == false
this.addresses.getClass().getName() == java.util.TreeSet.class
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.ArrayList.class
this.attrListeners.listeners[] == []
this.attrListeners.listeners[].getClass().getName() == []
this.attrListeners.listeners.getClass().getName() == java.util.ArrayList.class
this.index == 0
this.type has only one value
this.type.toString == "lo"
this.node.getClass().getName() == reso.ip.IPHost.class
this.node.ifaces[] == []
this.node.ifaces[].getClass().getName() == []
this.node.ifaces.getClass().getName() == java.util.ArrayList.class
this.node.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.node.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.node.name.toString one of { "H1", "H2" }
this.node.network == null
reso.common.Network.nextEthernetID == 0
size(this.ip.host.apps[]) == 1
===========================================================================
reso.ip.IPLoopbackAdapter.IPLoopbackAdapter(reso.ip.IPLayer, int):::ENTER
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.listeners.getClass().getName() == java.util.ArrayList.class
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.apps.getClass().getName() == java.util.ArrayList.class
arg0.host.ifaces[] == []
arg0.host.ifaces[].getClass().getName() == []
arg0.host.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.host.name.toString one of { "H1", "H2" }
arg0.host.network == null
arg0.fib.routes.getClass().getName() == java.util.HashMap.class
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.forwarding == false
arg1 == 0
size(arg0.host.apps[]) == 1
===========================================================================
reso.ip.IPLoopbackAdapter.IPLoopbackAdapter(reso.ip.IPLayer, int):::EXIT
arg0.host == orig(arg0.host)
arg0.host.listeners == orig(arg0.host.listeners)
arg0.host.listeners[] == orig(arg0.host.listeners[])
arg0.host.listeners.getClass().getName() == orig(arg0.host.listeners.getClass().getName())
arg0.host.apps == orig(arg0.host.apps)
arg0.host.apps[] == orig(arg0.host.apps[])
arg0.host.apps.getClass().getName() == orig(arg0.host.apps.getClass().getName())
arg0.host.ifaces == orig(arg0.host.ifaces)
arg0.host.ifaces[] == orig(arg0.host.ifaces[])
arg0.host.ifaces.getClass().getName() == orig(arg0.host.ifaces.getClass().getName())
arg0.host.ifacesByType == orig(arg0.host.ifacesByType)
arg0.host.ifacesByType.getClass().getName() == orig(arg0.host.ifacesByType.getClass().getName())
arg0.host.ifacesByName == orig(arg0.host.ifacesByName)
arg0.host.ifacesByName.getClass().getName() == orig(arg0.host.ifacesByName.getClass().getName())
arg0.host.name == orig(arg0.host.name)
arg0.host.name.toString == orig(arg0.host.name.toString)
arg0.host.network == orig(arg0.host.network)
arg0.fib == orig(arg0.fib)
arg0.fib.routes == orig(arg0.fib.routes)
arg0.fib.routes.getClass().getName() == orig(arg0.fib.routes.getClass().getName())
arg0.rawListeners == orig(arg0.rawListeners)
arg0.rawListeners[] == orig(arg0.rawListeners[])
arg0.rawListeners.getClass().getName() == orig(arg0.rawListeners.getClass().getName())
arg0.listeners == orig(arg0.listeners)
arg0.ifaces == orig(arg0.ifaces)
arg0.ifaces[] == orig(arg0.ifaces[])
arg0.ifaces.getClass().getName() == orig(arg0.ifaces.getClass().getName())
arg0.ifacesByName == orig(arg0.ifacesByName)
arg0.ifacesByName.getClass().getName() == orig(arg0.ifacesByName.getClass().getName())
arg0.forwarding == orig(arg0.forwarding)
arg0.host.listeners[] == []
arg0.host.listeners[].getClass().getName() == []
arg0.host.listeners.getClass().getName() == java.util.ArrayList.class
arg0.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
arg0.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
arg0.host.apps.getClass().getName() == java.util.ArrayList.class
arg0.host.ifaces[] == []
arg0.host.ifaces[].getClass().getName() == []
arg0.host.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
arg0.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
arg0.host.name.toString one of { "H1", "H2" }
arg0.host.network == null
arg0.fib.routes.getClass().getName() == java.util.HashMap.class
arg0.rawListeners[] == []
arg0.rawListeners[].getClass().getName() == []
arg0.rawListeners.getClass().getName() == java.util.ArrayList.class
arg0.ifaces[] == []
arg0.ifaces[].getClass().getName() == []
arg0.ifaces.getClass().getName() == java.util.ArrayList.class
arg0.ifacesByName.getClass().getName() == java.util.HashMap.class
arg0.forwarding == false
size(arg0.host.apps[]) == 1
===========================================================================
reso.ip.IPRouteEntry:::OBJECT
this.dst != null
this.dst.addr != null
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY != null
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr != null
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.BROADCAST != null
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.LOCALHOST != null
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr != null
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr != null
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
this.gateway.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
this.type has only one value
this.type != null
this.type.toString == "STATIC"
size(this.dst.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(this.gateway.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPAddress, java.lang.String):::ENTER
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg2 has only one value
arg2.toString == "STATIC"
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPAddress, java.lang.String):::EXIT
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg1.addr == orig(arg1.addr)
arg1.addr[] == orig(arg1.addr[])
arg2.toString == orig(arg2.toString)
this.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
this.oif == null
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg1.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg2.toString == "STATIC"
size(arg0.addr[]) == 4
size(arg1.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, java.lang.String):::ENTER
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg2 has only one value
arg2.toString == "STATIC"
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, java.lang.String):::EXIT
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg2.toString == orig(arg2.toString)
this.gateway == null
arg2.toString == "STATIC"
size(arg0.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, reso.ip.IPAddress, java.lang.String):::ENTER
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
arg1.getClass().getName() == reso.ip.IPEthernetAdapter.class
arg2.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg3 has only one value
arg3.toString == "STATIC"
size(arg0.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(arg2.addr[]) == 4
===========================================================================
reso.ip.IPRouteEntry.IPRouteEntry(reso.ip.IPAddress, reso.ip.IPInterfaceAdapter, reso.ip.IPAddress, java.lang.String):::EXIT
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
arg0.addr == orig(arg0.addr)
arg0.addr[] == orig(arg0.addr[])
arg2.addr == orig(arg2.addr)
arg2.addr[] == orig(arg2.addr[])
arg3.toString == orig(arg3.toString)
this.dst.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
this.oif.getClass().getName() == reso.ip.IPEthernetAdapter.class
arg0.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
arg2.addr[] one of { [64, 40, -128, -126], [64, 40, -127, -127] }
arg3.toString == "STATIC"
size(arg0.addr[]) == 4
size(arg2.addr[]) == 4
===========================================================================
reso.ip.IPRouter:::OBJECT
this has only one value
this.ip has only one value
this.ip.host has only one value
this.ip.host.listeners has only one value
this.ip.host.listeners[] == []
this.ip.host.listeners[].getClass().getName() == []
this.ip.host.listeners.getClass().getName() == java.util.ArrayList.class
this.ip.host.apps has only one value
this.ip.host.apps[] contains no nulls and has only one value, of length 1
this.ip.host.apps[] elements has only one value
this.ip.host.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.ip.host.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.ip.host.apps.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifaces has only one value
this.ip.host.ifaces[] == []
this.ip.host.ifaces[].getClass().getName() == []
this.ip.host.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.host.ifacesByType has only one value
this.ip.host.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ip.host.ifacesByName has only one value
this.ip.host.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.ip.host.name has only one value
this.ip.host.name.toString == "R1"
this.ip.host.network == null
this.ip.fib has only one value
this.ip.fib.routes has only one value
this.ip.fib.routes.getClass().getName() == java.util.HashMap.class
this.ip.rawListeners has only one value
this.ip.rawListeners[] == []
this.ip.rawListeners[].getClass().getName() == []
this.ip.rawListeners.getClass().getName() == java.util.ArrayList.class
this.ip.listeners has only one value
this.ip.ifaces has only one value
this.ip.ifaces[] == []
this.ip.ifaces[].getClass().getName() == []
this.ip.ifaces.getClass().getName() == java.util.ArrayList.class
this.ip.ifacesByName has only one value
this.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
this.ip.forwarding == true
this.listeners has only one value
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.ArrayList.class
this.apps has only one value
this.apps[] contains no nulls and has only one value, of length 1
this.apps[] elements has only one value
this.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
this.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
this.apps.getClass().getName() == java.util.ArrayList.class
this.ifaces has only one value
this.ifaces[] == []
this.ifaces[].getClass().getName() == []
this.ifaces.getClass().getName() == java.util.ArrayList.class
this.ifacesByType has only one value
this.ifacesByType.getClass().getName() == java.util.TreeMap.class
this.ifacesByName has only one value
this.ifacesByName.getClass().getName() == java.util.TreeMap.class
this.name has only one value
this.name.toString == "R1"
this.network == null
reso.common.Network.nextEthernetID == 0
size(this.ip.host.apps[]) == 1
size(this.apps[]) == 1
===========================================================================
reso.ip.IPRouter.IPRouter(java.lang.String):::ENTER
arg0 has only one value
arg0.toString == "R1"
===========================================================================
reso.ip.IPRouter.IPRouter(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
arg0.toString == "R1"
===========================================================================
reso.scheduler.AbstractEvent:::OBJECT
this.getClass().getName() == reso.common.EventMessageSend.class
===========================================================================
reso.scheduler.AbstractEvent.AbstractEvent(double):::ENTER
===========================================================================
reso.scheduler.AbstractEvent.AbstractEvent(double):::EXIT
===========================================================================
reso.scheduler.AbstractEvent.getTime():::ENTER
===========================================================================
reso.scheduler.AbstractEvent.getTime():::EXIT
this.time == orig(this.time)
===========================================================================
reso.scheduler.AbstractScheduler:::OBJECT
this has only one value
this.getClass().getName() == reso.scheduler.Scheduler.class
===========================================================================
reso.scheduler.AbstractScheduler.AbstractScheduler():::EXIT
this.time == 0.0
===========================================================================
reso.scheduler.AbstractScheduler.getCurrentTime():::ENTER
===========================================================================
reso.scheduler.AbstractScheduler.getCurrentTime():::EXIT
this.time == orig(this.time)
===========================================================================
reso.scheduler.AbstractScheduler.run():::ENTER
this.time == 0.0
===========================================================================
reso.scheduler.AbstractScheduler.run():::EXIT
this.time == 0.5000000000000001
===========================================================================
reso.scheduler.Scheduler:::CLASS
reso.scheduler.Scheduler.$assertionsDisabled == false
===========================================================================
reso.scheduler.Scheduler:::OBJECT
this has only one value
this.pq has only one value
this.pq != null
===========================================================================
reso.scheduler.Scheduler.Scheduler():::EXIT
this.time == 0.0
===========================================================================
reso.scheduler.Scheduler.hasMoreEvents():::ENTER
===========================================================================
reso.scheduler.Scheduler.hasMoreEvents():::EXIT
this.pq == orig(this.pq)
reso.scheduler.Scheduler.$assertionsDisabled == orig(reso.scheduler.Scheduler.$assertionsDisabled)
this.time == orig(this.time)
(this.time == 0.5000000000000001)  <==>  (return == false)
===========================================================================
reso.scheduler.Scheduler.hasMoreEvents():::EXIT;condition="return == true"
return == true
===========================================================================
reso.scheduler.Scheduler.hasMoreEvents():::EXIT;condition="not(return == true)"
this.time == 0.5000000000000001
return == false
===========================================================================
reso.scheduler.Scheduler.runNextEvent():::ENTER
===========================================================================
reso.scheduler.Scheduler.runNextEvent():::EXIT
this.pq == orig(this.pq)
reso.scheduler.Scheduler.$assertionsDisabled == orig(reso.scheduler.Scheduler.$assertionsDisabled)
1.72938225691027072E17 * this.time - 1.72938225691027072E17 * orig(this.time) - 4.323455642275677E15 == 0
===========================================================================
reso.scheduler.Scheduler.schedule(reso.scheduler.AbstractEvent):::ENTER
arg0 != null
arg0.getClass().getName() == reso.common.EventMessageSend.class
1.72938225691027072E17 * this.time - 1.72938225691027072E17 * arg0.time + 4.323455642275677E15 == 0
===========================================================================
reso.scheduler.Scheduler.schedule(reso.scheduler.AbstractEvent):::EXIT
this.pq == orig(this.pq)
reso.scheduler.Scheduler.$assertionsDisabled == orig(reso.scheduler.Scheduler.$assertionsDisabled)
this.time == orig(this.time)
arg0.time == orig(arg0.time)
1.72938225691027072E17 * this.time - 1.72938225691027072E17 * arg0.time + 4.323455642275677E15 == 0
===========================================================================
reso.utilities.NetworkBuilder.createHost(reso.common.Network, java.lang.String, reso.ip.IPAddress, reso.ethernet.EthernetAddress):::ENTER
arg0 has only one value
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
reso.common.Network.nextEthernetID == 0
arg0.nodes has only one value
arg0.nodes.getClass().getName() == java.util.TreeMap.class
arg1.toString one of { "H1", "H2" }
arg2.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
arg3.addr[] one of { [0, 38, -69, 78, -4, 40], [0, 38, -69, 78, -4, 41] }
size(arg2.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg3.addr[]) == 6
===========================================================================
reso.utilities.NetworkBuilder.createHost(reso.common.Network, java.lang.String, reso.ip.IPAddress, reso.ethernet.EthernetAddress):::EXIT
arg0.scheduler == return.network.scheduler
arg0.scheduler == orig(arg0.scheduler)
arg0.scheduler.getClass().getName() == return.network.scheduler.getClass().getName()
arg0.scheduler.getClass().getName() == orig(arg0.scheduler.getClass().getName())
arg0.scheduler.time == orig(arg0.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.nodes == return.network.nodes
arg0.nodes == orig(arg0.nodes)
arg0.nodes.getClass().getName() == return.ifacesByType.getClass().getName()
arg0.nodes.getClass().getName() == return.ifacesByName.getClass().getName()
arg0.nodes.getClass().getName() == return.network.nodes.getClass().getName()
arg0.nodes.getClass().getName() == orig(arg0.nodes.getClass().getName())
arg1.toString == orig(arg1.toString)
arg2.addr == orig(arg2.addr)
arg2.addr[] == orig(arg2.addr[])
reso.ip.IPAddress.ANY == orig(reso.ip.IPAddress.ANY)
reso.ip.IPAddress.ANY.addr == orig(reso.ip.IPAddress.ANY.addr)
reso.ip.IPAddress.ANY.addr[] == orig(reso.ip.IPAddress.ANY.addr[])
reso.ip.IPAddress.BROADCAST == orig(reso.ip.IPAddress.BROADCAST)
reso.ip.IPAddress.LOCALHOST == orig(reso.ip.IPAddress.LOCALHOST)
reso.ip.IPAddress.BROADCAST.addr == orig(reso.ip.IPAddress.BROADCAST.addr)
reso.ip.IPAddress.BROADCAST.addr[] == orig(reso.ip.IPAddress.BROADCAST.addr[])
reso.ip.IPAddress.LOCALHOST.addr == orig(reso.ip.IPAddress.LOCALHOST.addr)
reso.ip.IPAddress.LOCALHOST.addr[] == orig(reso.ip.IPAddress.LOCALHOST.addr[])
reso.ethernet.EthernetAddress.BROADCAST == orig(reso.ethernet.EthernetAddress.BROADCAST)
reso.ethernet.EthernetAddress.BROADCAST.addr == orig(reso.ethernet.EthernetAddress.BROADCAST.addr)
reso.ethernet.EthernetAddress.BROADCAST.addr[] == orig(reso.ethernet.EthernetAddress.BROADCAST.addr[])
arg3.addr == orig(arg3.addr)
arg3.addr[] == orig(arg3.addr[])
return.ip.rawListeners.getClass().getName() == return.listeners.getClass().getName()
return.ip.ifaces.getClass().getName() == return.listeners.getClass().getName()
return.listeners.getClass().getName() == return.apps.getClass().getName()
return.listeners.getClass().getName() == return.ifaces.getClass().getName()
return.name == orig(arg1)
return.network == orig(arg0)
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
reso.common.Network.nextEthernetID == 0
arg0.nodes has only one value
arg0.nodes.getClass().getName() == java.util.TreeMap.class
arg1.toString one of { "H1", "H2" }
arg2.addr[] one of { [64, 40, -128, -127], [64, 40, -127, -126] }
reso.ip.IPAddress.ANY has only one value
reso.ip.IPAddress.ANY.addr has only one value
reso.ip.IPAddress.ANY.addr[] == [-128, -128, -128, -128]
reso.ip.IPAddress.ANY.addr[] elements == -128
reso.ip.IPAddress.BROADCAST has only one value
reso.ip.IPAddress.LOCALHOST has only one value
reso.ip.IPAddress.BROADCAST.addr has only one value
reso.ip.IPAddress.BROADCAST.addr[] == [127, 127, 127, 127]
reso.ip.IPAddress.BROADCAST.addr[] elements == 127
reso.ip.IPAddress.LOCALHOST.addr has only one value
reso.ip.IPAddress.LOCALHOST.addr[] == [-1, -128, -128, -127]
reso.ip.IPAddress.LOCALHOST.addr[] elements one of { -128, -127, -1 }
reso.ethernet.EthernetAddress.BROADCAST has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr has only one value
reso.ethernet.EthernetAddress.BROADCAST.addr[] == [-1, -1, -1, -1, -1, -1]
reso.ethernet.EthernetAddress.BROADCAST.addr[] elements == -1
arg3.addr[] one of { [0, 38, -69, 78, -4, 40], [0, 38, -69, 78, -4, 41] }
return.ip.rawListeners[] == []
return.ip.rawListeners[].getClass().getName() == []
return.ip.ifaces[].getClass().getName() == [reso.ip.IPLoopbackAdapter, reso.ip.IPEthernetAdapter]
return.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
return.ip.forwarding == false
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listeners.getClass().getName() == java.util.ArrayList.class
return.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
return.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
return.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface]
return.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
return.name.toString one of { "H1", "H2" }
return.network has only one value
size(arg2.addr[]) == 4
size(reso.ip.IPAddress.ANY.addr[]) == 4
size(reso.ip.IPAddress.BROADCAST.addr[]) == 4
size(reso.ip.IPAddress.LOCALHOST.addr[]) == 4
size(reso.ethernet.EthernetAddress.BROADCAST.addr[]) == 6
size(arg3.addr[]) == 6
size(return.ip.ifaces[]) == 2
size(return.apps[]) == 1
size(return.ifaces[]) == 1
===========================================================================
reso.utilities.NetworkBuilder.createRouter(reso.common.Network, java.lang.String, reso.ip.IPAddress[], reso.ethernet.EthernetAddress[]):::ENTER
arg0 has only one value
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
reso.common.Network.nextEthernetID == 0
arg0.nodes has only one value
arg0.nodes.getClass().getName() == java.util.TreeMap.class
arg1 has only one value
arg1.toString == "R1"
arg2 has only one value
arg2.getClass().getName() == reso.ip.IPAddress[].class
arg2[] contains no nulls and has only one value, of length 2
arg2[].addr contains no nulls and has only one value, of length 2
arg3 has only one value
arg3.getClass().getName() == reso.ethernet.EthernetAddress[].class
arg3[] contains no nulls and has only one value, of length 2
arg3[].addr contains no nulls and has only one value, of length 2
size(arg2[]) == 2
size(arg3[]) == 2
===========================================================================
reso.utilities.NetworkBuilder.createRouter(reso.common.Network, java.lang.String, reso.ip.IPAddress[], reso.ethernet.EthernetAddress[]):::EXIT
arg0.scheduler == return.network.scheduler
arg0.scheduler == orig(arg0.scheduler)
arg0.scheduler.getClass().getName() == return.network.scheduler.getClass().getName()
arg0.scheduler.getClass().getName() == orig(arg0.scheduler.getClass().getName())
arg0.scheduler.time == orig(arg0.scheduler.time)
reso.common.Network.nextEthernetID == orig(reso.common.Network.nextEthernetID)
arg0.nodes == return.network.nodes
arg0.nodes == orig(arg0.nodes)
arg0.nodes.getClass().getName() == return.ifacesByType.getClass().getName()
arg0.nodes.getClass().getName() == return.ifacesByName.getClass().getName()
arg0.nodes.getClass().getName() == return.network.nodes.getClass().getName()
arg0.nodes.getClass().getName() == orig(arg0.nodes.getClass().getName())
arg1.toString == orig(arg1.toString)
arg2[] == orig(arg2[])
arg2[].addr == orig(arg2[].addr)
arg3[] == orig(arg3[])
arg3[].addr == orig(arg3[].addr)
return.ip.rawListeners.getClass().getName() == return.listeners.getClass().getName()
return.ip.ifaces.getClass().getName() == return.listeners.getClass().getName()
return.listeners.getClass().getName() == return.apps.getClass().getName()
return.listeners.getClass().getName() == return.ifaces.getClass().getName()
return.name == orig(arg1)
return.network == orig(arg0)
arg0.scheduler has only one value
arg0.scheduler.getClass().getName() == reso.scheduler.Scheduler.class
arg0.scheduler.time == 0.0
reso.common.Network.nextEthernetID == 0
arg0.nodes has only one value
arg0.nodes.getClass().getName() == java.util.TreeMap.class
arg1.toString == "R1"
arg2[] contains no nulls and has only one value, of length 2
arg2[].addr contains no nulls and has only one value, of length 2
arg3[] contains no nulls and has only one value, of length 2
arg3[].addr contains no nulls and has only one value, of length 2
return has only one value
return.ip has only one value
return.ip.host has only one value
return.ip.fib has only one value
return.ip.rawListeners has only one value
return.ip.rawListeners[] == []
return.ip.rawListeners[].getClass().getName() == []
return.ip.listeners has only one value
return.ip.ifaces has only one value
return.ip.ifaces[] contains no nulls and has only one value, of length 2
return.ip.ifaces[].getClass().getName() == [reso.ip.IPEthernetAdapter, reso.ip.IPEthernetAdapter]
return.ip.ifaces[].getClass().getName() elements == reso.ip.IPEthernetAdapter.class
return.ip.ifacesByName has only one value
return.ip.ifacesByName.getClass().getName() == java.util.HashMap.class
return.ip.forwarding == true
return.listeners has only one value
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listeners.getClass().getName() == java.util.ArrayList.class
return.apps has only one value
return.apps[] contains no nulls and has only one value, of length 1
return.apps[] elements has only one value
return.apps[].getClass().getName() == [reso.ip.ICMPProtocol]
return.apps[].getClass().getName() elements == reso.ip.ICMPProtocol.class
return.ifaces has only one value
return.ifaces[] contains no nulls and has only one value, of length 2
return.ifaces[].getClass().getName() == [reso.ethernet.EthernetInterface, reso.ethernet.EthernetInterface]
return.ifaces[].getClass().getName() elements == reso.ethernet.EthernetInterface.class
return.ifacesByType has only one value
return.ifacesByName has only one value
return.name has only one value
return.name.toString == "R1"
return.network has only one value
size(return.ip.ifaces[]) == 2
size(return.apps[]) == 1
size(return.ifaces[]) == 2
Exiting Daikon.
