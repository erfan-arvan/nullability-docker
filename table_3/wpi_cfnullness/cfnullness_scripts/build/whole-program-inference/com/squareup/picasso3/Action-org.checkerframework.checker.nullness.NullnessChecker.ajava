/*
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.squareup.picasso3;

import android.support.annotation.Nullable;
import static com.squareup.picasso3.Picasso.Priority;
import static com.squareup.picasso3.Utils.checkNotNull;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
abstract class Action<T> {

    final Picasso picasso;

    final Request request;

    final Target<T> wrapper;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean willReplay;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean cancelled;

    Action(Picasso picasso, Target<T> wrapper, Request request) {
        this.picasso = picasso;
        this.request = request;
        this.wrapper = wrapper;
    }

    abstract void complete(RequestHandler.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Result result);

    abstract void error(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Exception e);

    void cancel() {
        cancelled = true;
    }

    Request getRequest() {
        return request;
    }

    T getTarget() {
        return checkNotNull(wrapper, "wrapper == null").target;
    }

    String getKey() {
        return request.key;
    }

    boolean isCancelled() {
        return cancelled;
    }

    boolean willReplay() {
        return willReplay;
    }

    Picasso getPicasso() {
        return picasso;
    }

    Priority getPriority() {
        return request.priority;
    }

    Object getTag() {
        return request.tag != null ? request.tag : this;
    }
}
